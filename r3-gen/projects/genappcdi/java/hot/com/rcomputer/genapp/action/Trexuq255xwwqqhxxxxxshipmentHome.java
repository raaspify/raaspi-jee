


/** Generated By EntityHome.java.ftl on 11-Jul-2023 11:52:04 AM
*Entity Home
*parameters passed: action.package and model.package
*/

package com.rcomputer.genapp.action;
import com.rcomputer.genapp.model.*;
import org.apache.deltaspike.data.api.AbstractEntityRepository;
import org.apache.deltaspike.data.api.Repository;
import org.picketlink.Identity;
import org.picketlink.credential.DefaultLoginCredentials;
import org.picketlink.idm.IdentityManagementException;
import org.picketlink.authentication.AuthenticationException;
import org.picketlink.common.exceptions.PicketLinkException;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.Date;
import java.util.Calendar;
import java.util.Locale;
import java.util.Currency;
import java.util.Collection;
import java.lang.String;
import java.lang.StringBuilder;
import java.text.SimpleDateFormat;
import java.text.NumberFormat;
import javax.faces.application.FacesMessage;
import javax.faces.event.ValueChangeEvent;
import javax.faces.model.SelectItem;
import javax.faces.model.SelectItemGroup;
import javax.annotation.PostConstruct;
import javax.faces.view.ViewScoped;
import javax.inject.Inject;
import javax.transaction.Transactional;
import javax.faces.event.ActionEvent;
import javax.inject.Named;
import javax.enterprise.inject.Instance;
import java.util.Iterator;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import javax.persistence.*;
import javax.faces.context.ExternalContext;
import javax.faces.context.FacesContext;
import javax.faces.component.UIComponent;
import javax.faces.validator.ValidatorException;
import java.io.IOException;
import java.io.OutputStream;
 import java.io.StringReader;
 import java.io.InputStreamReader;

import java.io.FileWriter;
import java.io.BufferedWriter;
import java.io.Serializable;
import java.io.Writer;

import java.nio.charset.StandardCharsets;
import java.nio.file.Paths;
import java.nio.file.Files;
import java.nio.file.Path;


import java.util.logging.Logger;
import java.util.ResourceBundle;



//move these under genCandidate
//import java.io.File; model already has File class, use qualified java.io.File instead of import
import java.io.StringWriter;
import org.apache.tools.ant.Project;
import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.text.StringEscapeUtils;
import org.apache.tools.ant.ProjectHelper;
import javax.servlet.Servlet;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.util.HashMap;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.servlet.http.Part;





 import java.awt.image.BufferedImage;
 import java.awt.Graphics2D;
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
 import javax.imageio.ImageIO;
 import net.coobird.thumbnailator.*;
 import org.jsoup.Jsoup;
 //put conditional import
 import org.jsoup.nodes.Document;
 import org.jsoup.nodes.Element;
 import org.jsoup.select.Elements;
 import org.jsoup.safety.Whitelist;
 import org.jsoup.nodes.TextNode;
 import org.jsoup.nodes.Attributes; 
 import org.jsoup.nodes.Attribute; 
 import java.net.URL;
 import java.io.InputStream;
 import java.io.OutputStream;



//assign is used to be able to add import dynamically
import com.rcomputer.genapp.model.*;


/* The following may not be needed, use generic fiedname from above like deliveryField
*/
//jay0 z3xxeqxxbvnxxxxxxxxxqtyordrd




  //jay2 z3xxeqxxbvnxxxxxxxxxqtyshipped
/*
 pojo ie entity has component properties for all composite key fields and entity proprties for all other fields.
 If an entity property is a foreign key then the property name will show the foreign entity not the actual field name.
 Use a filter like c2h.isManyToOne(property) and  column = property.columnIterator.next() to get the actual column name.
 or use parentPojo.identifierProperty.name to get the key field property name or use
 jay5 if !c2h.isCollection(property) && !isToOne(property)
  if c2j.isComponent(property)
   foreach componentProperty in property.value.propertyIterator in list.java.ftl
 
 If a persistence class has a foreign key more than once then the property name has the foreign entity plus Byxxxx to qualify
 The component properties have the identifierProperty iterator holding each key. 
 In case the key is non composite ie a single field then it will not be part of any component and will be part of properties
 Component properties seem to be tied to xxxId.java whereas non component properties are tied to xxx.java
 composite key fields declared via  Primary Key columns will appear only in component/xxId/java. If key field is a foreign 
 field then it is also declared via Foreign Key and will appear in entity properties/xxx.java. However in xxx.java
 the column name will not be shown, instead foreign Pojo class will be shown. Column iterator can be used to get
 the column name. If there are more than one fields pointing to same pojo then it will show as xxxByzz
 For those key fields which are foreign fields we need to generate validateandselect method. Currently generation 
 is hard coded by checking function of the pojo, it can be automated by xchecking component property columnname against entity ptoperty column name
 and if match the entity property name will be the pojo which needs to be validated and selected.
 The same logic can be used in editproperty.ftl to automate puting validateandSelect method call  
*/
/* 
in case of composite keys
*/ 
  /*
  In case of composite keys and key auto generated

  */

/**
* This is Action Home class 
* @author 3r Computer Systems  
* @version 2.0
*/

@Named("trexuq255xwwqqhxxxxxshipmentHome")
@ViewScoped
@Transactional
public  class Trexuq255xwwqqhxxxxxshipmentHome implements Serializable
{
   @Inject File file;
   @Inject R3RestClient r3RestClient;

   @Inject SqlAdminSupport sqlAdminSupport;
   @Inject SkinBean skinBean;
    @Inject CustomIdentity customIdentity; 
        @Inject
        private Identity identity;
	@Inject
	Xxxxch82bxhhhhhxxxxxeditlogHome xxxxch82bxhhhhhxxxxxeditlogHome;
	private Xxxxch82bxhhhhhxxxxxeditlog xxxxch82bxhhhhhxxxxxeditlog;


        @Inject
        Yxxxch522xhhxxhxxxxxclient client;

   


   @Inject 
   DefaultLoginCredentials credentials;
   //@Inject Authenticator authenticator; not sure what problem injecting may be due to @picketlink
   private boolean nextShow = false;
   boolean mailRelayOff=true; 
   Boolean smtpError=false;
    private FacesContext facesContext=null;
    private ServletContext context=null;
    private HttpServletRequest req=null;
    private HttpServletResponse resp=null;
    private String userAgentStrO=null;
    private String userAgentStr=null;
    private String userIP=null;
    private String urlName=null;
    private int urlPort=0;
    private ExternalContext externalContext=null;
    private HttpSession session=null;
    private String skinCode=null;
    private String replyToMatCode = null;
    private String replyToMatSidS = null;
    private String descriptionValue =null;
    private String startValue = null;
    private ResourceBundle bundle=null;
    int count = 0;
    int countD=0;
    int countB=0;
    private int excpCount=0;
    Boolean currConv=false;
    int importdone=0;
    String linesA[]=null;
	private final int limit_max_size = 10240000;
	private final String limit_type_file = "gif|jpg|png|jpeg|txt|csv|jpeg";
	private String path_to = "resources" + java.io.File.separator + "uploads";

    private int uploadsAvailable = 3;
    private int uploadsDoneCount = 0;
    private boolean autoUpload = false;
    private boolean useFlash = false;
    private Boolean show;
    private Part fileU;





    @PostConstruct
    public void initialize() {
    try{
      facesContext = FacesContext.getCurrentInstance(); 
      // bypass if came from servlet
     if(facesContext !=null){
      bundle = facesContext.getApplication().getResourceBundle(facesContext, "messages");
      ///SEVERITY_INFO, "any string in quotes"+e.getMessage+bundle.getString("id_password_not_matching")
      externalContext = facesContext.getExternalContext(); 

      context = (ServletContext)FacesContext.getCurrentInstance().getExternalContext().getContext(); 
      req = (HttpServletRequest) externalContext.getRequest(); 
      session = req.getSession();
      urlName=((javax.servlet.http.HttpServletRequest) externalContext.getRequest()).getServerName();
      urlPort=((javax.servlet.http.HttpServletRequest) externalContext.getRequest()).getServerPort();
      resp = (HttpServletResponse) externalContext.getResponse(); 
      userAgentStrO = req.getHeader("user-agent");  
      userAgentStr = userAgentStrO;  
      userIP = req.getHeader("X-FORWARDED-FOR");  //get from req header
      if (userIP == null) {  
       userIP = req.getRemoteAddr();  //get from socket connection
      }
          urlIndex=urlName.lastIndexOf(".");
          if (urlIndex == -1){
            urlIndex=urlName.length();
          }       
          if (urlName.contains("www.")){
           owner2Code=urlName.substring(4,urlIndex);
          }else{
           owner2Code=urlName.substring(0,urlIndex);
          }
          //extract subdomain if used. if subdomain, masterSiteCode will have a value
         if(!customIdentity.getMasterSiteCode().isEmpty()){
          owner2Code=owner2Code.replace("."+customIdentity.getMasterSiteCode(),"");
         }
      if (userIP == null) {  
       userIP = req.getRemoteAddr();  
       if (userIP == null) {  
        userIP = "noIP";  
       }      
      }
      masterSiteCode=customIdentity.getMasterSiteCode();
      masterSiteUrl=customIdentity.getMasterSiteUrl();

      Arrays.fill(checkMapI, Boolean.FALSE);
      Arrays.fill(checkMapT, Boolean.FALSE);
     
     }
      ownerCode=customIdentity.getOwner();
      ownerCddCode=ownerCode.substring(ownerCode.length()-3,ownerCode.length() );
      productCode=customIdentity.getProduct();
      subProductCode=customIdentity.getSubProduct();

      if (customIdentity.getMobileView().length() > 0){
       userAgentStr=customIdentity.getMobileView();
      }
     }catch(Exception e){
      //log error
      excpCount=excpCount+1;
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
       FacesMessage.SEVERITY_ERROR,e.getMessage(),""));
    }


    }
   private Logger log = Logger.getLogger(Trexuq255xwwqqhxxxxxshipment.class.getCanonicalName());
   //facesMessages being injected so  //FacesMessages.add can be used instead of  //FacesMessages.instance().add
   // using seam facesmessages allow using el expressions , java facesmessage does not allow EL expression
   @PersistenceContext(unitName = "genappcdi")
   private EntityManager entityManager;
   private Integer id=null;
   private String cartPoStatus="x";
   String timeStamp="";
   private boolean changeDone=false;
   private boolean skipValidation=false;
     private Boolean[] checkMapI=new Boolean[6];
     private Boolean[] checkMapT=new Boolean[6];
      private byte[] mailingBytes1 = null;
      private byte[] mailingBytes2 = null;
      private byte[] mailingBytes3 = null;
      private byte[] mailingBytes4 = null;
      private byte[] mailingBytes5 = null;
      private byte[] mailingBytes = null;
      private String mailingText = null;
      private String mailingText1 = null;
      private String mailingText2 = null;
      private String mailingText3 = null;
      private String mailingText4 = null;
      private String mailingText5 = null;
      private String mailingBytes1TypeMime = null;
      private String mailingBytes2TypeMime = null;
      private String mailingBytes3TypeMime = null;
      private String mailingBytes4TypeMime = null;
      private String mailingBytes5TypeMime = null;
      private String ownerCode="sss";
      private String subProductCode="";
      private String ownerCddCode="";
      private String productCode="";
      FacesMessage msg =new FacesMessage("");





   // cartpostatus =e comes from method extended_persist ie copynsave
   // cartPostatus also comes from cposts in method cartpersist
     // cartPostatus=cposts is o if add and currentCount holds last line #, u if remove, c if change for existing and for both c & u 
     // currentCount holds first time call or not to decide on initializing order totals to zeroes if first time
     // currentDetailline will be used to hold the value to pass to showrun()

	@Inject
	Trexuq255xwwqqhxxxxxshipmentList trexuq255xwwqqhxxxxxshipmentList;
        private Trexuq255xwwqqhxxxxxshipment trexuq255xwwqqhxxxxxshipmentli;
	@Inject
	Yxxxuq591xwwqqhxxxxxrate1fHome yxxxuq591xwwqqhxxxxxrate1fHome;
	private Yxxxuq591xwwqqhxxxxxrate1f yxxxuq591xwwqqhxxxxxrate1f;
	@Inject
	Yxxxch575xwwqqhxxxxxuserproflHome yxxxch575xwwqqhxxxxxuserproflHome;
	private Yxxxch575xwwqqhxxxxxuserprofl yxxxch575xwwqqhxxxxxuserprofl;


	@Inject
	Yrxxch511xhhxxhxxxxxoptionsList yrxxch511xhhxxhxxxxxoptionsList;
	private Yrxxch511xhhxxhxxxxxoptions yrxxch511xhhxxhxxxxxoptions;
	@Inject
	Fpxxfq1a5xwwqqhxxxxxitemList fpxxfq1a5xwwqqhxxxxxitemList;

	@Inject
	Trexuq266xwwqqhxxxxxcuinvoiceList trexuq266xwwqqhxxxxxcuinvoiceList;
	@Inject
	Trexuq244xwwqqhxxxxxcuordersList trexuq244xwwqqhxxxxxcuordersList;
	@Inject
	Trexuq277xwwqqhxxxxxcpaymentHome trexuq277xwwqqhxxxxxcpaymentHome;
	Trexuq277xwwqqhxxxxxcpayment trexuq277xwwqqhxxxxxcpayment;
        @Inject ShoppingCartBean r3Cart; 






	@Inject
	Yxxxch522xhhxxhxxxxxclientList yxxxch522xhhxxhxxxxxclientList;




      //CustomIdentity customIdentity = (CustomIdentity)Component.getInstance(CustomIdentity.class); 
      //SkinBean skinBean = (SkinBean)Component.getInstance(SkinBean.class); 
      //ShoppingCartBean r3Cart = (ShoppingCartBean)Component.getInstance(ShoppingCartBean.class); 
      private boolean doRollUp=true;
      private String owner2Code="";
      private String masterSiteCode="";
      private String masterSiteUrl="";
      private String owner2CodeS="";
      private int urlIndex=0;
      int duplDropped=0;
      int importAdded=0;

     private BigDecimal keyedQuantity = new BigDecimal("1.0");
     private BigDecimal detailbaseamt = new BigDecimal("0.0");
     private BigDecimal detailbaseamtO = new BigDecimal("0.0");
     private BigDecimal totalbaseamt = new BigDecimal("0.0");
     private BigDecimal totaloutstanding = new BigDecimal("0.0");
     private BigDecimal totalamountin = new BigDecimal("0.0");
     private BigDecimal postingAmount = new BigDecimal("0.0");
     private BigDecimal chqAmount = new BigDecimal("0.0");
     private BigDecimal amountIn = new BigDecimal("0.0");
     private String chqVerbose="";
     private String tax1Cert="";
     private String tax2Cert="";
     private String tax3Cert="";
                BigDecimal cdisc=BigDecimal.ZERO;
                BigDecimal cselp=BigDecimal.ZERO;
                BigDecimal newOrdPrice=BigDecimal.ZERO;
        private BigDecimal change=BigDecimal.ZERO;//nov29 2919
	private BigDecimal totalmis = BigDecimal.ZERO;
	private BigDecimal totaldel = BigDecimal.ZERO;
	private BigDecimal totalqty = BigDecimal.ZERO;//totalxxxx,amountTotal means parent and includes all details
	private BigDecimal totaltax1 = BigDecimal.ZERO;
	private BigDecimal totaltax2 = BigDecimal.ZERO;
	private BigDecimal totaltax3 = BigDecimal.ZERO;
	private BigDecimal qtyOrdPrev = BigDecimal.ZERO;//
	private BigDecimal amountTotal = BigDecimal.ZERO;//amountTotal is sum of detaillt 
	private BigDecimal qtyTotal = BigDecimal.ZERO;//same as qtytotal or detailqty  then get rid of it
	private BigDecimal qtyTotalNew = BigDecimal.ZERO;
        private BigDecimal tax1RateValue=new BigDecimal("0.0");
        private BigDecimal tax2RateValue=new BigDecimal("0.0");
        private BigDecimal tax3RateValue=new BigDecimal("0.0");
        private BigDecimal tax1RateValueS=new BigDecimal("0.0");
        private BigDecimal tax2RateValueS=new BigDecimal("0.0");
        private BigDecimal tax3RateValueS=new BigDecimal("0.0");
        private BigDecimal tax1RateValueH=new BigDecimal("0.0");
        private BigDecimal tax2RateValueH=new BigDecimal("0.0");
        private BigDecimal tax3RateValueH=new BigDecimal("0.0");
        private BigDecimal detailLt = new BigDecimal("0.0");//is it same as amountTotal
        private BigDecimal detailLtO = new BigDecimal("0.0");
	private BigDecimal detailMis = BigDecimal.ZERO;
	private BigDecimal detailDel = BigDecimal.ZERO;
	private BigDecimal detailQty = BigDecimal.ZERO;
	private BigDecimal detailTax1 = BigDecimal.ZERO;
	private BigDecimal detailTax2 = BigDecimal.ZERO;
	private BigDecimal detailTax3 = BigDecimal.ZERO;
	private BigDecimal detailMisO = BigDecimal.ZERO;
	private BigDecimal detailDelO = BigDecimal.ZERO;
	private BigDecimal detailTax1O = BigDecimal.ZERO;
	private BigDecimal detailTax2O = BigDecimal.ZERO;
	private BigDecimal detailTax3O = BigDecimal.ZERO;
        BigDecimal qtyOrdO=BigDecimal.ZERO;
        String iShipCode="";//size of item
        String tShipCode="";//shipment mode for item


     	private boolean applyTax1 = false;
	private boolean applyTax2 = false;
	private boolean applyTax3 = false;

      String integrationAccountSet="";
      private BigDecimal temp = new BigDecimal("0.0");
      private String key="";
      private String subKey="";
      private String subKeyFirst="";
      private String slobkeyhash="";
      private String keysv="";
      // make it session variable later
      private int currentPeriod=1;
      private String divcode="";
      private String depcode="";
      private String accountn="";
      private String companycode="";
      private Calendar calendar = Calendar.getInstance();
      private Calendar calendare = Calendar.getInstance();
      private Calendar calendarly = Calendar.getInstance();
      private Date currbusdate = calendar.getTime();
      private Date dobSave = calendar.getTime();
      private int mnsorder=0;
      private int arSeqn=0;
      private int apSeqn=0;
      private int icSeqn=0;
      private int paSeqn=0;
      private int joSeqn=0;
      private int glSeqn=0;
     private int subarSeqn = 0;
      private int subapSeqn=0;
      private int subicSeqn=0;
      private int subpaSeqn=0;
      private int subjoSeqn=0;
      private int subglSeqn=0;

      private int mprinted=512;
      private int mdel=256;
      private int mmark=128;
      private int munmark=1023;
      private int mconsign=64;
      private int minvoiced=64;
      private int mnoMail=64;
      //  can be used for other status, use it for 1st entry in group,account or to mark a row as editable etc 
      //               where line field is not there 
      // mconsign should apply to item type not status ?? also means order invoiced
      private int mpartial=32;
      private int mshipped=32;
      private int mreceived=32;
      private int mpaid=16;
      // in case of venartha vpayment goes 16(paid)->8(closed by chq) but venartha itself becomes 16(paid by chq)
      private int mclosed=8;
      private int mreturn=4;//return,investigation,dispute,  
      private int mcopy=2;//copied or Picked from PicklList not customer picked
      private int mtoPay=2;//online order toPay status but items can be added at backOffice
      // copy means record was copied from another 
      //open becomes active ie some activity happened against the open record , mutually exclusive

      private int mactive=1;
      private int mordered=1;
      private int mopen=0;
      private int mquoted=0;
      // open means record created
      // use setXx(getXx()| mcopy)) to set copy flag leaving other bits as is 
      // use setXx(getXx()& _mcopy)) to clear copy flag leaving other bits as is 
      // the following shows which bit counting 0 as the right most bit 
      // used as if bitset(status,_matcive)
      // or as iif(bitset(status,_mmark),.t.,.f.)
      //_mactive=0  && 0th bit from right starting at 0 bit, value 1
      /***
      *transaction flow and status (in brackets) changes
      *Ecommerce:sales checkout by customer 
      *customer: checkout to order active(1)to and paypal payment/authorize toinvoice(64) and system changes order invoiced(64)
      *system:created order and invoice, got order shipment information from paypal and puts a hold payment or takes payment and creates payment record
      *agent:  convert invoice to shipping notclosed(8) invoiceto to shipment active(1) to Add B/O and and inform invoice dept and wait or set as shipped(32)
      *agent: if needed, process invoicing:invoice (64) and shipment B/O? investigate. Add B/O to invoice, inform shipment, wait. 
      *agent: convert invoice to payment:invoice (64) and its ordertoshipment ahipped(32) invoicetopayment(16?). Capture or capture with credit.
      *system: paymenttoorder,shipment,invoice,payment itself closed(8)  
      * 
      *Ecommerce:invoice payment by customer
      * order,invoices created by agent on phone order etc
      * option of payment online given to customer
      *customer: enters email,invoice amount and invoice number. If matches   
      *system: process the payment and creates payment record or puts a hold payment but no payment record?
      *agent: rest ie shipping, payment same as manual or Ecommerce sales check out
      *
      *Ecommerce:POS checkout by agent for customer (item entries can be by customer)
      *
      *Manual: Done by agent request over phone/email/case request folder
      *sales:  create quote active(1)
      *sales:  create order(1) from quote or manually create order active(1) 
      *shipping: notclosed(8) orderto to shipment active(1) to Add B/O and inform order and wait or shipped(32)
      *invoicing: invoice (64) and shipment B/O? investigate. Add B/O to invoice, inform shipment, wait. 
      *Payment:invoice (64) and its order to shipment shipped(32) invoice to payment(16?).Take payment and with credit.
      *payment: make order,shipment,invoice,payment itself closed(8)   

      *Ecommerce invoice payment
      *invoice can be from ecommerce or manually done 
      *customer: invoice (64) and invoice number and amount matches, then system creates payment(16?)
      *payment: make order,shipment,invoice,payment itself closed(8) ???  
      */


      private int _mopen=0;
      //0th bit ,numeric value 0
      private int _mactive=0;
      // && 0th bit ,numeric value 1
      private int _mcopy=1;
      //   && 1th bit ,numeric value 2
      private int _mreturn=2;
      // && 2nd bit                4 
      private int _mclosed=3;
      // && 3rd                    8 
      private int _mpaid=4;
      //   && 4th                   16
      private int _mpartial=5;
      private int _mshipped=5;
      // && 5th                   32 
      private int _mconsign=6;
      private int _minvoiced=6;
      private int _mnoMail=6;
      // && 6th                   64
      private int _mmark=7;
      //    && 7th                   128
      private int _mdel=8;
      //     && 8th                    256 
      private int _mprinted=9;
      // && 9th                   512 
     private boolean fromJsf =true;

     private boolean buttonPressed =false;
     private String buttonPressedLabel ="+ Upload";
     private String upLoadPurpose ="ad";
     private String discountType ="pe";
     private int useSeq=-1;

     private boolean hideChosen =false;
     private String lobDataType=" ";
     private String temps=" ";
     private Integer sidValue=0;
     private boolean entityUpdated =false;
     private boolean entityDeleted =false;
     private String eMailingAddress="";
     private String targetVendor="";
     private boolean mergedPayment=false;
     private String position="";
     private String overRideValue="";
     private String overRideValueS="";
     private String notesToPass="";
     private BigDecimal priceOverRide = new BigDecimal("0.0");
     private String trexuq255xwwqqhxxxxxshipmentFrom="";
     private String prefix=" ";
     private Integer tempCount=0;
     SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
     private boolean importChosen =false;
     private Trexuq255xwwqqhxxxxxshipment instance=null;
     private String hostingAt = "lo";//op for openshift, aw for amazon aws, hero for heroku, lo for Local 
     //web.xml context param to define hosting env and use getServletContext().getInitParameter(hostingAt) 
     //
     

/*
 If same field from a foreign table is used more than once, it can cause duplicate entries for @Inject
 By is used to supress the duplicate
*/
     @Inject
    Fpxxfq1a5xwwqqhxxxxxitemHome fpxxfq1a5xwwqqhxxxxxitemHome;
    private Fpxxfq1a5xwwqqhxxxxxitem fpxxfq1a5xwwqqhxxxxxitem;
     @Inject
     Fxxxuq111xwwqqhxxxxxaddressHome fxxxuq111xwwqqhxxxxxaddressHome;
     Fxxxuq111xwwqqhxxxxxaddress fxxxuq111xwwqqhxxxxxaddressByBilltocode;
     Fxxxuq111xwwqqhxxxxxaddress fxxxuq111xwwqqhxxxxxaddressByShiptocode;
     @Inject
    Jxxxuq201xwwqqhxxxxxcustomerHome jxxxuq201xwwqqhxxxxxcustomerHome;
    private Jxxxuq201xwwqqhxxxxxcustomer jxxxuq201xwwqqhxxxxxcustomer;
     @Inject
     Jxxxuq300xwwqqhxxxxxvendorHome jxxxuq300xwwqqhxxxxxvendorHome;
     Jxxxuq300xwwqqhxxxxxvendor jxxxuq300xwwqqhxxxxxvendorByCarrier;
     Jxxxuq300xwwqqhxxxxxvendor jxxxuq300xwwqqhxxxxxvendorByShipper;
     @Inject
    Trexuq244xwwqqhxxxxxcuordersHome trexuq244xwwqqhxxxxxcuordersHome;
    private Trexuq244xwwqqhxxxxxcuorders trexuq244xwwqqhxxxxxcuorders;
     @Inject
    Trexuq266xwwqqhxxxxxcuinvoiceHome trexuq266xwwqqhxxxxxcuinvoiceHome;
    private Trexuq266xwwqqhxxxxxcuinvoice trexuq266xwwqqhxxxxxcuinvoice;
//page parameters start here from not used, existing xxxxFrom used, delete below later -->
        private String from="";
	public void setFrom(String from) {
		this.from = from;
	}

	public String getFrom() {
           
		return from;
	}

//rest goes here
    public void setTrexuq255xwwqqhxxxxxshipmentA0xxuobxbxxxxxxxxxxxsid(Integer id)
    {
      // setId will fetch the record and Instance will point to it
      setId(id);
      if(getInstance() !=null && !getInstance().getZzxxu2oxxhxxxxxxxxxxowner2().equals("SYSTEM") && !getInstance().getZzxxu2oxxhxxxxxxxxxxowner2().equals(owner2Code)){
       try{
        //different owner other than SYSTEM, dont let it go through, to do why exception not caught
        setId(0);
       } catch (Exception e) {
        log.severe("Error passing bad sid "+ e.getMessage());
        FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
          FacesMessage.SEVERITY_ERROR,bundle.getString("cannot")+" "+ bundle.getString("get")+" "+bundle.getString("record")+" "+e.getMessage(),""));


       }
      }
    }

    public Integer getTrexuq255xwwqqhxxxxxshipmentA0xxuobxbxxxxxxxxxxxsid()
    {

        return (Integer) getId();
    }

   /**
    * Returns true if the id of the object managed is known.
    */
   public boolean isIdDefined()
   {
      return getId()!=null && !"".equals( getId() );
   }
     public boolean isFromJsf() {
         return fromJsf;//default true
     }

     public void setFromJsf(boolean fromJsf){
      this.fromJsf=fromJsf;
     }


    public boolean isChangeDone(){
     return changeDone;
    } 

    public void setChangeDone(boolean changeDone){
      this.changeDone=changeDone;
    } 


  protected Trexuq255xwwqqhxxxxxshipment createInstance()

  {
      // jay add logic to check client flag for debug mode and bypass below if debug
      //setCreatedMessage(createValueExpression(""));
      //setDeletedMessage(createValueExpression(""));
      //setUpdatedMessage(createValueExpression(""));

       //Trexuq255xwwqqhxxxxxshipment trexuq255xwwqqhxxxxxshipment = new Trexuq255xwwqqhxxxxxshipment();
       //scope for this method only
       Trexuq255xwwqqhxxxxxshipment trexuq255xwwqqhxxxxxshipment=null;
       if (instance == null) {
            try {
                instance = new Trexuq255xwwqqhxxxxxshipment();
                trexuq255xwwqqhxxxxxshipment=instance;

            }
            catch (Exception e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
                return null;
            }
       }else{
       //came to createInstance, but it may exists for some existing error conditions, so ignore and continue
            try {
                instance = new Trexuq255xwwqqhxxxxxshipment();
                trexuq255xwwqqhxxxxxshipment=instance;

            }
            catch (Exception e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
                return null;
            }
       

       }


   /*
   This is the place to preinitialize the entity variables to display in jsf pages
   */
       if(this.instance !=null && this.instance.getFpxxfq1a5xwwqqhxxxxxitem() == null ){
        fpxxfq1a5xwwqqhxxxxxitem=fpxxfq1a5xwwqqhxxxxxitemHome.getInstance();
        if ( fpxxfq1a5xwwqqhxxxxxitem !=null ){
         this.instance.setFpxxfq1a5xwwqqhxxxxxitem(fpxxfq1a5xwwqqhxxxxxitem);
         this.instance.getFpxxfq1a5xwwqqhxxxxxitem().setTempQuantity(new BigDecimal("1.0"));
        }
       }



  

  

  
		trexuq255xwwqqhxxxxxshipment.setB3xxuxcobvxxxxxxxxxxpono(0);

  

  
		trexuq255xwwqqhxxxxxshipment.setC3xxcxxrlxxxxxxxxxxxshipdatet(calendar.getTime());

  
		trexuq255xwwqqhxxxxxshipment.setD2xxugbrbvxxxxxxxxxxbilltosameasshipto(false);









  


  

  

		trexuq255xwwqqhxxxxxshipment.setZ1xxztprlxxxxxxxxxxxamounttotal(new BigDecimal("0.0"));
  

		trexuq255xwwqqhxxxxxshipment.setZ2xxzyprlxxxxxxxxxxxamountostndt(new BigDecimal("0.0"));
  

		trexuq255xwwqqhxxxxxshipment.setZ3xxztqrlxxxxxxxxxxxqtytotal(new BigDecimal("0.0"));
  

		trexuq255xwwqqhxxxxxshipment.setZ4xxzyqrlxxxxxxxxxxxqtyostndt(new BigDecimal("0.0"));
  

  
		trexuq255xwwqqhxxxxxshipment.setZ6xxcxxrlxxxxxxxxxxxshipdateta(calendar.getTime());

  
		trexuq255xwwqqhxxxxxshipment.setZ7xxzzfxhhxxxxxxxxxxstatusfl(0);

  
		trexuq255xwwqqhxxxxxshipment.setZ8xxcztxlxxxxxxxxxxxstatusfldt(calendar.getTime());

  

  
		trexuq255xwwqqhxxxxxshipment.setZaxxzzprhvxxxxxxxxxxprintmstat(0);

  
		trexuq255xwwqqhxxxxxshipment.setZbxxczqxlhxxxxxxxxxxprinmtfldt(calendar.getTime());

  
		trexuq255xwwqqhxxxxxshipment.setZcxxutoxlhxxxxxxxxxxowner(ownerCode);

  

  
		trexuq255xwwqqhxxxxxshipment.setZzxxu2oxxhxxxxxxxxxxowner2(owner2Code);
   return trexuq255xwwqqhxxxxxshipment;
  }

/**
* method pre-initializes entities and gets invoked via jsf f:viewAction  
*/    
    public void wire()
    {
// ManyToOne will capture the Foreign Key Fields and the foreign Entity Name
// 
   // if keyfield then populate lastxxxentity so that dropdown will show it if coming from list for update 
   //Fpxxfq1a5xwwqqhxxxxxitem fpxxfq1a5xwwqqhxxxxxitem=fpxxfq1a5xwwqqhxxxxxitemHome.getDefinedInstance(); use private variable
    if (this.instance != null && this.instance.getFpxxfq1a5xwwqqhxxxxxitem() !=null){
     fpxxfq1a5xwwqqhxxxxxitemHome.setLastfpxxfq1a5xwwqqhxxxxxitemP(this.instance.getFpxxfq1a5xwwqqhxxxxxitem().getA0xxukixbxxxxxxxxxxxmatcode());
    }

   // logic changed to get parent instance not instance itself if entity is item because parent and entity is same
     fpxxfq1a5xwwqqhxxxxxitem=fpxxfq1a5xwwqqhxxxxxitemHome.getDefinedInstance();
     if ( fpxxfq1a5xwwqqhxxxxxitem!=null ){
      getInstance().setFpxxfq1a5xwwqqhxxxxxitem(fpxxfq1a5xwwqqhxxxxxitem);
     }
   // if keyfield then populate lastxxxentity so that dropdown will show it if coming from list for update 
   //Fxxxuq111xwwqqhxxxxxaddress fxxxuq111xwwqqhxxxxxaddressByBilltocode=fxxxuq111xwwqqhxxxxxaddressHome.getDefinedInstance(); use private variable
    if (this.instance != null && this.instance.getFxxxuq111xwwqqhxxxxxaddressByBilltocode() !=null){
     fxxxuq111xwwqqhxxxxxaddressHome.setLastfxxxuq111xwwqqhxxxxxaddressP(this.instance.getFxxxuq111xwwqqhxxxxxaddressByBilltocode().getA0xxukbxbxxxxxxxxxxxaddrescode());
    }

   // logic changed to get parent instance not instance itself if entity is item because parent and entity is same
     fxxxuq111xwwqqhxxxxxaddressByBilltocode=fxxxuq111xwwqqhxxxxxaddressHome.getDefinedInstance();
     if ( fxxxuq111xwwqqhxxxxxaddressByBilltocode!=null ){
      getInstance().setFxxxuq111xwwqqhxxxxxaddressByBilltocode(fxxxuq111xwwqqhxxxxxaddressByBilltocode);
     }
   // if keyfield then populate lastxxxentity so that dropdown will show it if coming from list for update 
   //Fxxxuq111xwwqqhxxxxxaddress fxxxuq111xwwqqhxxxxxaddressByShiptocode=fxxxuq111xwwqqhxxxxxaddressHome.getDefinedInstance(); use private variable
    if (this.instance != null && this.instance.getFxxxuq111xwwqqhxxxxxaddressByShiptocode() !=null){
     fxxxuq111xwwqqhxxxxxaddressHome.setLastfxxxuq111xwwqqhxxxxxaddressP(this.instance.getFxxxuq111xwwqqhxxxxxaddressByShiptocode().getA0xxukbxbxxxxxxxxxxxaddrescode());
    }

   // logic changed to get parent instance not instance itself if entity is item because parent and entity is same
     fxxxuq111xwwqqhxxxxxaddressByShiptocode=fxxxuq111xwwqqhxxxxxaddressHome.getDefinedInstance();
     if ( fxxxuq111xwwqqhxxxxxaddressByShiptocode!=null ){
      getInstance().setFxxxuq111xwwqqhxxxxxaddressByShiptocode(fxxxuq111xwwqqhxxxxxaddressByShiptocode);
     }
   // if keyfield then populate lastxxxentity so that dropdown will show it if coming from list for update 
   //Jxxxuq201xwwqqhxxxxxcustomer jxxxuq201xwwqqhxxxxxcustomer=jxxxuq201xwwqqhxxxxxcustomerHome.getDefinedInstance(); use private variable
    if (this.instance != null && this.instance.getJxxxuq201xwwqqhxxxxxcustomer() !=null){
     jxxxuq201xwwqqhxxxxxcustomerHome.setLastjxxxuq201xwwqqhxxxxxcustomerP(this.instance.getJxxxuq201xwwqqhxxxxxcustomer().getA0xxukxxbvxxxxxxxxxxcustomer());
    }

   // logic changed to get parent instance not instance itself if entity is item because parent and entity is same
     jxxxuq201xwwqqhxxxxxcustomer=jxxxuq201xwwqqhxxxxxcustomerHome.getDefinedInstance();
     if ( jxxxuq201xwwqqhxxxxxcustomer!=null ){
      getInstance().setJxxxuq201xwwqqhxxxxxcustomer(jxxxuq201xwwqqhxxxxxcustomer);
     }
   // if keyfield then populate lastxxxentity so that dropdown will show it if coming from list for update 
   //Jxxxuq300xwwqqhxxxxxvendor jxxxuq300xwwqqhxxxxxvendorByCarrier=jxxxuq300xwwqqhxxxxxvendorHome.getDefinedInstance(); use private variable
    if (this.instance != null && this.instance.getJxxxuq300xwwqqhxxxxxvendorByCarrier() !=null){
     jxxxuq300xwwqqhxxxxxvendorHome.setLastjxxxuq300xwwqqhxxxxxvendorP(this.instance.getJxxxuq300xwwqqhxxxxxvendorByCarrier().getA0xxukxxbvxxxxxxxxxxvendor());
    }

   // logic changed to get parent instance not instance itself if entity is item because parent and entity is same
     jxxxuq300xwwqqhxxxxxvendorByCarrier=jxxxuq300xwwqqhxxxxxvendorHome.getDefinedInstance();
     if ( jxxxuq300xwwqqhxxxxxvendorByCarrier!=null ){
      getInstance().setJxxxuq300xwwqqhxxxxxvendorByCarrier(jxxxuq300xwwqqhxxxxxvendorByCarrier);
     }
   // if keyfield then populate lastxxxentity so that dropdown will show it if coming from list for update 
   //Jxxxuq300xwwqqhxxxxxvendor jxxxuq300xwwqqhxxxxxvendorByShipper=jxxxuq300xwwqqhxxxxxvendorHome.getDefinedInstance(); use private variable
    if (this.instance != null && this.instance.getJxxxuq300xwwqqhxxxxxvendorByShipper() !=null){
     jxxxuq300xwwqqhxxxxxvendorHome.setLastjxxxuq300xwwqqhxxxxxvendorP(this.instance.getJxxxuq300xwwqqhxxxxxvendorByShipper().getA0xxukxxbvxxxxxxxxxxvendor());
    }

   // logic changed to get parent instance not instance itself if entity is item because parent and entity is same
     jxxxuq300xwwqqhxxxxxvendorByShipper=jxxxuq300xwwqqhxxxxxvendorHome.getDefinedInstance();
     if ( jxxxuq300xwwqqhxxxxxvendorByShipper!=null ){
      getInstance().setJxxxuq300xwwqqhxxxxxvendorByShipper(jxxxuq300xwwqqhxxxxxvendorByShipper);
     }
   // if keyfield then populate lastxxxentity so that dropdown will show it if coming from list for update 
   //Trexuq244xwwqqhxxxxxcuorders trexuq244xwwqqhxxxxxcuorders=trexuq244xwwqqhxxxxxcuordersHome.getDefinedInstance(); use private variable
    if (this.instance != null && this.instance.getTrexuq244xwwqqhxxxxxcuorders() !=null){
     trexuq244xwwqqhxxxxxcuordersHome.setLasttrexuq244xwwqqhxxxxxcuordersP(this.instance.getTrexuq244xwwqqhxxxxxcuorders().getA0xxuncobvxxxxxxxxxxpurchsno());
    }

   // logic changed to get parent instance not instance itself if entity is item because parent and entity is same
     trexuq244xwwqqhxxxxxcuorders=trexuq244xwwqqhxxxxxcuordersHome.getDefinedInstance();
     if ( trexuq244xwwqqhxxxxxcuorders!=null ){
      getInstance().setTrexuq244xwwqqhxxxxxcuorders(trexuq244xwwqqhxxxxxcuorders);
     }
   // if keyfield then populate lastxxxentity so that dropdown will show it if coming from list for update 
   //Trexuq266xwwqqhxxxxxcuinvoice trexuq266xwwqqhxxxxxcuinvoice=trexuq266xwwqqhxxxxxcuinvoiceHome.getDefinedInstance(); use private variable
    if (this.instance != null && this.instance.getTrexuq266xwwqqhxxxxxcuinvoice() !=null){
     trexuq266xwwqqhxxxxxcuinvoiceHome.setLasttrexuq266xwwqqhxxxxxcuinvoiceP(this.instance.getTrexuq266xwwqqhxxxxxcuinvoice().getA0xxuncibvxxxxxxxxxxinvoice());
    }

   // logic changed to get parent instance not instance itself if entity is item because parent and entity is same
     trexuq266xwwqqhxxxxxcuinvoice=trexuq266xwwqqhxxxxxcuinvoiceHome.getDefinedInstance();
     if ( trexuq266xwwqqhxxxxxcuinvoice!=null ){
      getInstance().setTrexuq266xwwqqhxxxxxcuinvoice(trexuq266xwwqqhxxxxxcuinvoice);
     }


 if(this.instance == null || this.instance.getC2xxuxxrbv51xxxxxxxxtype()==null){
  return;
 }
    }
    
    public boolean isWired()
    {
     return true;
}

    
    public Trexuq255xwwqqhxxxxxshipment getDefinedInstance()
    {
        if(isIdDefined()){
         if(getInstance() == null || getInstance().getA0xxuobxbxxxxxxxxxxxsid()==null){
          return null;///need to check when this happens, it seems can happen if the entity already exists and again calls getdefine
         }
         if(getInstance().getA0xxuobxbxxxxxxxxxxxsid().equals(getId())){
          return getInstance();
         }else{
          return trexuq255xwwqqhxxxxxshipmentList.getSidToEntity(getId());
         }
        }else{
         return null;
        }
    }

       private Map<Integer, Boolean> checked = new HashMap<Integer, Boolean>();

public Map<Integer, Boolean> getChecked() {  
return checked;  
}  

/**
* method is used to check the numeric status field value and return a descriptive value
* @param status
* int value
* @return a String value 
*/    

    public String describeStatus(int status){
    if (status==0){
     return "open";
    }
    
    if (status==1){
     return "active";
    }
    if (status==32){
     return "shipped";
    }
    if (status==64){
     return "invoiced";
    }
    if (status==8){
     return "closed";
    }
    if (status==16){
     return "paid";
    }



    return ""+status; 
   }

    public String markCompleted() {
           this.instance.setZ8xxcztxlxxxxxxxxxxxstatusfldt(Calendar.getInstance().getTime());
           // add logic to check elligble to close
           this.instance.setZ7xxzzfxhhxxxxxxxxxxstatusfl( mclosed );
     return "completed";
    }
    public String markCompletedAll() {
           // add logic put a series of query to get related records and mark them closed
           this.instance.setZ8xxcztxlxxxxxxxxxxxstatusfldt(Calendar.getInstance().getTime());
           // add logic to check elligble to close
           this.instance.setZ7xxzzfxhhxxxxxxxxxxstatusfl(mclosed );
     return "completedAll";
    }


	public String getEMailingAddress() {
              if (eMailingAddress ==null || eMailingAddress.isEmpty()){  
                //prefill if empty
                 if (jxxxuq201xwwqqhxxxxxcustomer != null){
                 eMailingAddress=jxxxuq201xwwqqhxxxxxcustomer.getQ4xxhxxxbv24xxxxxxxximailaddr();
                 }
              }
		return eMailingAddress;
	}
     
	public void setEMailingAddress(String eMailingAddress) {
		this.eMailingAddress = eMailingAddress;
	}

	public String getShowPosition() {
	  return position;
	}
     
	public void setShowPosition(String position) {
		this.position = position;
	}


	public String getValueOverRide() {
	  return overRideValue;
	}
     
	public void setValueOverRide(String overRideValue) {
		this.overRideValue = overRideValue;
	}


	public String getValueOverRideS() {
	  return overRideValueS;
	}
     
	public void setValueOverRideS(String overRideValueS) {
		this.overRideValueS = overRideValueS;
	}


	public BigDecimal getPriceOverRide() {
	  return priceOverRide;
	}
	public void setPriceOverRide(BigDecimal priceOverRide) {
		this.priceOverRide = priceOverRide;
	}

     

	public String getNotesToPass() {
		return notesToPass;
	}
     
	public void setNotesToPass(String notesToPass) {
		this.notesToPass = notesToPass;
	}



	public String getTrexuq255xwwqqhxxxxxshipmentFrom() {
		return trexuq255xwwqqhxxxxxshipmentFrom;
	}
     
	public void setTrexuq255xwwqqhxxxxxshipmentFrom(String entityFrom) {
		this.trexuq255xwwqqhxxxxxshipmentFrom = entityFrom;
	}



     public String getPrefix() {
      return prefix;
    }

   public void setPrefix(String prefix) {
     this.prefix=prefix;
   }
   public Boolean[] getCheckMapI() {
    return this.checkMapI;
   }
   public void setCheckMapI(Boolean[] checkMapI){
                this.checkMapI=checkMapI;
   }
   public Boolean[] getCheckMapT() {
    return this.checkMapT;
   }
        public void setCheckMapT(Boolean[] checkMapT){
                this.checkMapT=checkMapT;
        }
	public void setMailingImage1(byte[] mailingBytes) {
		this.mailingBytes1 = mailingBytes;
	}

	public byte[] getMailingImage2() {
           
		return mailingBytes2;
	}

	public void setMailingImage2(byte[] mailingBytes) {
		this.mailingBytes2 = mailingBytes;
	}
	public byte[] getMailingImage3() {
           
		return mailingBytes3;
	}

	public void setMailingImage3(byte[] mailingBytes) {
		this.mailingBytes3 = mailingBytes;
	}
	public byte[] getMailingImage4() {
           
		return mailingBytes4;
	}

	public void setMailingImage4(byte[] mailingBytes) {
		this.mailingBytes4 = mailingBytes;
	}

	public byte[] getMailingImage5() {
           
		return mailingBytes5;
	}

	public void setMailingImage5(byte[] mailingBytes) {
		this.mailingBytes5 = mailingBytes;
	}

	public void setMailingText(String mailingText) {
		this.mailingText = mailingText;
	}

	public String getMailingText1() {
           
		return mailingText1;
	}

	public void setMailingText1(String mailingText) {
		this.mailingText1 = mailingText;
	}

	public String getMailingText2() {
           
		return mailingText2;
	}

	public void setMailingText2(String mailingText) {
		this.mailingText2 = mailingText;
	}
	public String getMailingText3() {
           
		return mailingText3;
	}

	public void setMailingText3(String mailingText) {
		this.mailingText3 = mailingText;
	}
	public String getMailingText4() {
           
		return mailingText4;
	}
	public void setMailingText4(String mailingText) {
		this.mailingText4 = mailingText;
	}



	public String getMailingText5() {
           
		return mailingText5;
	}
	public void setMailingText5(String mailingText) {
		this.mailingText5 = mailingText;
	}

	public String getMailingImage1TypeMime() {
           
		return mailingBytes1TypeMime;
	}

	public void setMailingImage1TypeMime(String mailingTypeMime ) {
		this.mailingBytes1TypeMime = mailingTypeMime;
	}

	public String getMailingImage2TypeMime() {
           
		return mailingBytes2TypeMime;
	}

	public void setMailingImage2TypeMime(String mailingTypeMime ) {
		this.mailingBytes2TypeMime = mailingTypeMime;
	}
	public String getMailingImage3TypeMime() {
           
		return mailingBytes3TypeMime;
	}

	public void setMailingImage3TypeMime(String mailingTypeMime ) {
		this.mailingBytes3TypeMime = mailingTypeMime;
	}

	public String getMailingImage4TypeMime() {
           
		return mailingBytes4TypeMime;
	}

	public void setMailingImage4TypeMime(String mailingTypeMime ) {
		this.mailingBytes4TypeMime = mailingTypeMime;
	}

	public String getMailingImage5TypeMime() {
           
		return mailingBytes5TypeMime;
	}

	public void setMailingImage5TypeMime(String mailingTypeMime ) {
		this.mailingBytes5TypeMime = mailingTypeMime;
	}


    /**
    * The following method is proxy for file.fileUpload to allow using 
    * requestScoped for raaspi file class
    * @see "file class"
    * 
    */

    public String callFileUpload(String purpose){
     file.fileUpload(purpose);
     return "";
    }



    /**
    * The following method used r3restclient.xhtml to ???
    * @param args none bur flag restentity is set to true
    * @return String set by persist
    * @exception None 
    * @see "persist()"
    * 
    */

    public String persistRest() {
     restEntity=true;
     return persist();
    }



    public String persist(String owner2Code) {
     // override owner2Code temporarily and will get reset in next invocation of the bean
     owner2CodeS = this.owner2Code;
     this.owner2Code=owner2Code;
     // no need to rollup because all values are zero also avoids owner2Code issue for SYSTEM records
     doRollUp=false;
     return persist();
    }

/***
* creates key unless already exists as in from rest like shopify, or order created via cart or skip key validation
* key could be created from subkeys or auto generated based on reveng.xml
* based on entity needs fill up with entered values. Item will have type, taxable or not. 
* if txn then call showrunt > createcdetails and showrunt (updates parent instance values)
* persistrunt (puts values to totals for persist) , updatecustomer or vendor,
* common part begins
* set clob/blob pointer to the instance
* if child item then superupdate parent
* persist any new clob/blob, update existing clob/blob
* persist current instance and then details 
* seq starts from 0 and xxList.getNextSeqAvailable is used for next one. 
* seq -1 used  for storing removed image to allow undo
* or in case 3R-TOP-BKGR -1 means use color instead of any image
* qualifier 1 if shopping items. Non shopping or not related to items can have qualifier PIC etc.
*@param none, values passed through variables
*@see "extended_persist"
*/
    public String persist() {

      if (this.instance.getFpxxfq1a5xwwqqhxxxxxitem() == null){
       FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
        FacesMessage.SEVERITY_ERROR,bundle.getString("item")+" "+ bundle.getString("not")+" "+bundle.getString("selected")+" "+bundle.getString("yet"),""));
       bcontinue = false;
      }

      


       // we need to check whether validation has set bcontinue has false, if so clear it and return
       if (!bcontinue){
             bcontinue=true;
             return null;
       }



       if(!owner2Code.equals("SYSTEM") && !owner2Code.equals(masterSiteCode) && !getInstance().getZzxxu2oxxhxxxxxxxxxxowner2().equals(owner2Code)){
        FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
         FacesMessage.SEVERITY_ERROR,bundle.getString("If")+" "+bundle.getString("non")+" "+bundle.getString("owned")+" "+bundle.getString("record")+", "+bundle.getString("edit")+" "+ bundle.getString("not")+" "+bundle.getString("allowed"),""));
         log.severe("persist_error_owner "+owner2Code +" / "+ getInstance().getZzxxu2oxxhxxxxxxxxxxowner2());
         bcontinue=false;
         return null;
       }
       //instance already exists with site owner2, so change it now
       if(owner2Code.equals("SYSTEM")){
        this.instance.setZzxxu2oxxhxxxxxxxxxxowner2("SYSTEM");
       }

      slobkeyhash=" ";

            //cartpersist reuses an existing active PO
            if(!restEntity && !cartPoPicked && !skipValidation){
              key=getNextp();
              if (key.length() !=0 ){   
              //   if ( pojo.identifierProperty.name?contains("id"))> id means component ???
                 this.instance.setA0xxunshbvxxxxxxxxxxshipcode(key);
              }
            }
            // entity function sh
          // commponentName -> trexuq255xwwqqhxxxxxshipment
          // columnnamekey -> trexuq255xwwqqhxxxxxshipmentMatcodeOne
          // commponentName -> trexuq255xwwqqhxxxxxshipment
          // columnnamekey -> trexuq255xwwqqhxxxxxshipmentBilltocodeOne
           //   +" jay 1"
          // commponentName -> trexuq255xwwqqhxxxxxshipment
          // columnnamekey -> trexuq255xwwqqhxxxxxshipmentShiptocodeOne
           //   +" jay 1"
          // commponentName -> trexuq255xwwqqhxxxxxshipment
          // columnnamekey -> trexuq255xwwqqhxxxxxshipmentCustomerOne
          // commponentName -> trexuq255xwwqqhxxxxxshipment
          // columnnamekey -> trexuq255xwwqqhxxxxxshipmentCarrierOne
           //   +" jay 1"
          // commponentName -> trexuq255xwwqqhxxxxxshipment
          // columnnamekey -> trexuq255xwwqqhxxxxxshipmentShipperOne
           //   +" jay 1"
          // commponentName -> trexuq255xwwqqhxxxxxshipment
          // columnnamekey -> trexuq255xwwqqhxxxxxshipmentCponoOne
           //   +" jay 1"
          // commponentName -> trexuq255xwwqqhxxxxxshipment
          // columnnamekey -> trexuq255xwwqqhxxxxxshipmentInvoiceOne
           //   +" jay 1"


         if (bcontinue){
           // create detail line items and recalculate totals and persist details and later persist parent order/invoice etc
	      showtemprunt();// calls createcdetails and showrunt (updates parent instance values) 
             // make them same to be consistent with extended_persist and avoid using wrong tempqty later
              fpxxfq1a5xwwqqhxxxxxitem.setTempQuantity(xoxxuq295xwwqqhxxxxxshipmentdetails.getZ3xxeqxxbvnxxxxxxxxxqtyshipped());
         }
         if (bcontinue){
	      persistrunt();
      	      //prevamountTotal = amountTotal;
              // affects employee (Agent) record,so added .clearInstance in persistrunt() to avoid detached employee
         }
         if (bcontinue){
            updateitemeCustomer();//uncommented  qty was not changing otherwise
         }
         if (bcontinue){
            updateCustomer();
         }
         if (bcontinue){
            updateShipmentOrPickUp();
         }

       if (!bcontinue){
             return null;
       }
// if calling method has try then calling method try will catch the exception
       try {
        // a0xxuobxbxxxxxxxxxxxsid
        // last in the loop centityName ->   centityKeyFieldName ->  entityKeyFieldName -> 
        if (!restEntity && !cartPoPicked){
              //key=key.toUpperCase();
             // subkey so far is companyName (!empty)+lastName||ss+firstname||ss+ss(companyName empty)+phone #s ||ss etc ss means 
             // time stamp seconds
             // first 16 characters need to be broken into parts if name involved otherwise long last name makes it hard to distinguish key values
             // because ss is used same lastname and firstname will still produce different 16 characters if any phone #s etc are missing 
             // entityKeyFieldName -> 
             // key set but return if the natural key already exists except for clob and blob where duplicates ok because
             // of non key seq is used to differentiate. So check if same seq
             // also apply initCap inside keyExists since we have access to the instance there
             //jay subkey  kfrcl Y kk  
          } 

               // give persist message w key and time, but bypass non key ones like details
               if(!cartPoPicked && !skipValidation){
                try{
                    superdotpersist();//master entity
                } catch ( Exception e){
                   FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                   FacesMessage.SEVERITY_ERROR,key+" "+"save"+" "+" "+bundle.getString("failed")+",  "+e.getMessage(),""));
                   return null;
                }
                if(key != null && !key.trim().isEmpty()){
                 if(importdone <6){ 
                  if (customIdentity.isDebug()){
                   timeStamp = new SimpleDateFormat("yyyy.MM.dd.HH.mm.ss z").format(new Date());
                   FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                    FacesMessage.SEVERITY_INFO,bundle.getString("saved")+" "+bundle.getString("Shipment")+" "+bundle.getString("reference")+" "+bundle.getString("as")+" ("+key+") "+"at"+" "+timeStamp,""));
                  }
                 }
                 if(importdone == 7){ 
                  FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                   FacesMessage.SEVERITY_INFO,bundle.getString("continuing")+" "+bundle.getString("Shipment")+" "+bundle.getString("import"),""));
                 }
                }
               }else{
                superdotupdate();
                if (customIdentity.isDebug()){
                 timeStamp = new SimpleDateFormat("yyyy.MM.dd.HH.mm.ss z").format(new Date());
                 FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                  FacesMessage.SEVERITY_INFO,bundle.getString("updated")+" "+bundle.getString("Shipment")+" "+bundle.getString("reference")+" "+bundle.getString("as")+" ("+key+") "+"at"+" "+timeStamp,""));
                }
               }
               picked=true;
              if (this.getLastItemLine() > 0)
                  multipicked=true;
            // if manual entry was done instead of using options then capture it in userprofile
 	    Yxxxuh566xwwqqwxxxxxuser user = null;





              // The following needs key & keysparam variable
               //xoxxuq295xwwqqhxxxxxshipmentdetails.setA0xxusdxbvxxxxxxxxxxshipcode(key);
		    xoxxuq295xwwqqhxxxxxshipmentdetails.setB1xxzo11bvlxxxxxxxxxline(this.getLastItemLine());
             //call child persist after parent persist
             // jay if noinv exist flag then save new invoice before details save
             // clearInstance and setInstance already done in crereCdetails to avoid detached entity
	     xoxxuq295xwwqqhxxxxxshipmentdetailsHome.persist();
             moreActive=false;
             nextShow=false;
             setChangeDone(true);
             //check client shicol and cadcol flags and send order confirmation email otherwise manually done
             // at getnextp time get flag values
             if (!restEntity && fpxxfq1a5xwwqqhxxxxxitem.getTempQuantity().compareTo(new BigDecimal("1.0"))  > 0 
                  && this.getLastItemLine() == 1){
              FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
               FacesMessage.SEVERITY_INFO,bundle.getString("quantity")+ " "+bundle.getString("for")+" "+bundle.getString("next")+" "+bundle.getString("item")+" "+bundle.getString("remains")+" "+bundle.getString("as")+" "+fpxxfq1a5xwwqqhxxxxxitem.getTempQuantity()+", "+bundle.getString("change")+" "+bundle.getString("if")+" "+bundle.getString("needed"),""));
             }
             return "persisted";
       } catch ( Exception e){
         String context="key="+key+",subKey="+subKey;
         FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
           FacesMessage.SEVERITY_ERROR," "+"Shipment"+" "+context+" "+ bundle.getString("error")+" "+bundle.getString("cause")+"- "+e.getMessage(),""));
               bcontinue=false;
               return null;
       }

    }

    public String superUpdate() {
        //this is used to update statusfldate before calling superdotupdate which is the jpa merge
        //flow is (allowupdate() if needed)-update()-(sperupdate() if statusdt needs change-superdotupdate())
        // or -superdotupdate()
        //setUpdatedMessage(createValueExpression(""));
      // allow raaspi to delete SYSTEM records
      if((getInstance().getZzxxu2oxxhxxxxxxxxxxowner2().equals("SYSTEM") && !owner2Code.equals(masterSiteCode)) || (!getInstance().getZzxxu2oxxhxxxxxxxxxxowner2().equals("SYSTEM") && !getInstance().getZzxxu2oxxhxxxxxxxxxxowner2().equals(owner2Code))){
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
         FacesMessage.SEVERITY_ERROR,bundle.getString("If")+" "+bundle.getString("non")+" "+bundle.getString("owned")+", "+bundle.getString("update")+" "+ bundle.getString("not")+" "+bundle.getString("allowed"),""));

                 bcontinue=false;
                 return null;
      }


       if (!bcontinue){
        FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
         FacesMessage.SEVERITY_ERROR,bundle.getString("error")+", "+ bundle.getString("not")+" "+bundle.getString("continue"),""));



             return null;
       }
           this.instance.setZ8xxcztxlxxxxxxxxxxxstatusfldt(Calendar.getInstance().getTime());
           superdotupdate(); 
           setChangeDone(true);
           timeStamp = new SimpleDateFormat("yyyy.MM.dd.HH.mm.ss z").format(new Date());
          /* too much info
           FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
            FacesMessage.SEVERITY_INFO,bundle.getString("updated")+" "+bundle.getString("selected")+" "+"Shipment"+" "+"at"+" "+timeStamp,""));
           */

           return "superUpdated"; 

    }

    public String updateRest(String descript) {
           superdotupdate();//superdotupdate does not change any date field
           setChangeDone(true);
           timeStamp = new SimpleDateFormat("yyyy.MM.dd.HH.mm.ss z").format(new Date());
           FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
            FacesMessage.SEVERITY_INFO,bundle.getString("updated")+" "+"Shipment"+" "+descript+" "+bundle.getString("record")+" "+bundle.getString("at")+" "+timeStamp,""));
            return "updated"; 
       }


    public String allowUpdate() {
       ////setUpdatedMessage(createValueExpression(""));
     // allowupdate is used by method calls only and not directly by jsf 
     // there are cases like item stat or customer order we need to allow non owned records to be updated
     // for this to work, make sure entityHome is cleared,use instance itself or setinstance is done with the variable holding instance values and then this is called
            superdotupdate();
            setChangeDone(true);
        /* use customIdentity.getClientMsgLev 
           timeStamp = new SimpleDateFormat("yyyy.MM.dd.HH.mm.ss z").format(new Date());
           FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
            FacesMessage.SEVERITY_INFO,bundle.getString("updated")+" "+bundle.getString("selected")+" "+"Shipment"+" "+"at"+" "+timeStamp,""));
        */
            return "updated"; 
       }



   
   /**
   * used by xxEdit save where details are involved
   *  calls cartpersist with option o for new/add (used for both cart order as well as for back office transactions)
   *  call persist to create the new invoice along with the current detail
   *  persist calls showtemprunt which calls createcdetals and showrunt. createcdetailssetvalue has logic to copy
   *  tempqty (ord etc qty) to detail qty
   *  after that persist calls persistrunt to add up for totals and then cuinvoiceposting for the detail
   *   persist has logic to update metrix for related entities
   *@see "addProductsToOrder used by shopping cart add and extended_persist to convert from quote ot order etc"
   */

    public void addWithDetails() {
     
     // will mimic addProductsToOrder logic, if validation fails do not continue
     //  
       if (!bcontinue){
        FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
         FacesMessage.SEVERITY_ERROR,bundle.getString("error")+" "+bundle.getString("condition")+", "+bundle.getString("reset")+" "+bundle.getString("done")+" "+bundle.getString("to")+" "+bundle.getString("allow")+" "+bundle.getString("retry"),""));

        bcontinue=true;
        FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
         FacesMessage.SEVERITY_ERROR,bundle.getString("try")+" "+bundle.getString("again")+" "+bundle.getString("or")+" "+bundle.getString("cancel"),""));
        return;
       }
     // update foreign fields, does it need validateandset method?
     FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
       FacesMessage.SEVERITY_INFO,bundle.getString("Total")+" "+bundle.getString("shiiping")+" "+bundle.getString("cost")+" "+bundle.getString("depends")+" "+bundle.getString("on")+" "+bundle.getString("packaging"),""));

     

     nextShow=true;// reset so that detail totals are calculated at least once
     Integer currentCartedPOSID;
     currentCartedPOSID=this.instance.getA0xxuobxbxxxxxxxxxxxsid();
     cartpersist(currentCartedPOSID,"o",this.getLastItemLine(),new BigDecimal("0.0"));
     //o means new and if new then sid will be nulll  
     //simply calls persist which will call createdetails , showrunt (uses current detail and updates totals)
     // and persistrunt (which uses the the showrunt values from details and resets the parent totals 
     // and then persist entity
     //showrunt also calls setParentTotals (loops through all details and updates totals) gets bypassed
     // if sid is null recheck logic because instance still has values 
     // xxxx   and ist and only item
     // if payment,showrunt also has logic to loop through invoices and show whats outstanding/total

    }



       /***
       *@param none but keyedQuantity holds b/o qty
       */
       public void makeBoEntry(){//do the same for shipment and invoice ie show but qty as 0 in addition to existing remove row
        FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
        FacesMessage.SEVERITY_INFO,bundle.getString("To")+" "+bundle.getString("handle")+" "+bundle.getString("B/O")+" / "+bundle.getString("out")+" "+bundle.getString("of")+" "+bundle.getString("stock")+" "+bundle.getString("situation")+", "+bundle.getString("need")+" "+bundle.getString("to")+" "+bundle.getString("use")+" "+bundle.getString("edit")+" "+bundle.getString("option")+". "+bundle.getString("So")+" "+bundle.getString("use")+" "+bundle.getString("List")+" "+bundle.getString("and")+" "+bundle.getString("then")+" "+bundle.getString("edit"),""));

        FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
        FacesMessage.SEVERITY_INFO,bundle.getString("Once")+" "+bundle.getString("in")+" "+bundle.getString("edit")+", "+bundle.getString("select")+" "+bundle.getString("the")+" "+bundle.getString("item")+" "+bundle.getString("from")+" "+bundle.getString("dropdown")+" "+bundle.getString("list")+" "+bundle.getString("and")+" "+bundle.getString("change")+" "+bundle.getString("quantity")+" "+bundle.getString("to")+" "+bundle.getString("minus")+" "+bundle.getString("quantity")+". ",""));

        FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
        FacesMessage.SEVERITY_INFO,bundle.getString("Confirm")+" "+ bundle.getString("next")+" "+ bundle.getString("item")+" "+bundle.getString("selected")+" "+ bundle.getString("and")+" "+ bundle.getString("save")+" "+bundle.getString("as")+" "+ bundle.getString("line")+" "+ bundle.getString("next"),""));

        FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
        FacesMessage.SEVERITY_INFO,bundle.getString("You")+" "+bundle.getString("will")+" "+bundle.getString("now")+" "+bundle.getString("have")+" "+bundle.getString("the")+", "+bundle.getString("original")+" "+bundle.getString("entry")+" "+bundle.getString("and")+", "+bundle.getString("new")+" "+ bundle.getString("B/O")+" "+ bundle.getString("entry")+". "+bundle.getString("Stock")+" "+bundle.getString("quantity")+" "+bundle.getString("already")+" "+bundle.getString("adjusted"),""));

         FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
         FacesMessage.SEVERITY_INFO,bundle.getString("Contact")+" "+bundle.getString("or")+" "+bundle.getString("email")+" "+bundle.getString("Invoicing")+" "+bundle.getString("dept")+", "+bundle.getString("explain")+" "+bundle.getString("and")+" "+bundle.getString("when")+" "+bundle.getString("resolved")+", "+ bundle.getString("set")+" "+ bundle.getString("as")+" "+bundle.getString("shipped")+", "+bundle.getString("Send")+" "+bundle.getString("confirmation")+" "+bundle.getString("email")+" "+bundle.getString("to")+" "+bundle.getString("customer"),""));


        //mark order/invoice detail status as return, so that it can be reissued and credit note issued if already paid 
         //simply follow existing logic confirm next line and save as but use qty as -ve b/o qty entered 
         //item instance already exists, reuse it but change qty 
         /* not needed now may be in future
         BigDecimal boQty=keyedQuantity.negate();
         fpxxfq1a5xwwqqhxxxxxitem.setTempQuantity(boQty);// simulate keyed into tempqty

         more();//confirm next item, creates a new detail instance and reuse the customer as a new instance for it
         updateDetailsAll();// save as line xx, 
         */

      //checked row remove,issue b/o for new row w -ve qty 
      // give a message reminding creating a new case if needed for a follow up. later have a checkbox to allow automated

      }

    public String issueCartCredit() {
     return "";
    }

 /**
 * initalizes totals and the loops through active (non -1 status) details for the parent sid and adds to get totals
 *  but unlike setParentTotalsFromDetails this method updates parent with new totals
*/

    // details for parent sid too many problems keeping up with totals, so force it from details from db
    // hard code for cuodetails , make it generic later
    // added missing logic for tax recalculate
    public String updateParentFromDetails(Integer sid){
         //tempCount=0;  moved cp,vp
         detailLt=new BigDecimal("0.0");
         detailbaseamt=new BigDecimal("0.0");
         detailMis=new BigDecimal("0.0");
         detailDel=new BigDecimal("0.0");
         detailQty=new BigDecimal("0.0");
         totalmis=new BigDecimal("0.0");
         totaldel=new BigDecimal("0.0");
         totalbaseamt=new BigDecimal("0.0");
         amountTotal=new BigDecimal("0.0");
         totalqty=new BigDecimal("0.0");
         qtyTotal= new BigDecimal("0.0");
         totaltax1= new BigDecimal("0.0");
         totaltax2= new BigDecimal("0.0");
         totaltax3= new BigDecimal("0.0");
         totaloutstanding=new BigDecimal("0.0");
         totalamountin=new BigDecimal("0.0");

         for (Xoxxuq295xwwqqhxxxxxshipmentdetails itemOrderDetail : trexuq255xwwqqhxxxxxshipmentList.entityLessStatusDetailedList(sid,-1)) {
           //tempCount=tempCount+1;
           if(itemOrderDetail !=null){
            totalqty=totalqty.add(itemOrderDetail.getZ3xxeqxxbvnxxxxxxxxxqtyshipped());
            qtyTotal=qtyTotal.add(itemOrderDetail.getZ3xxeqxxbvnxxxxxxxxxqtyshipped());
            //jay check why qtytotal used in persistrunt
           }

         }
         
         Trexuq255xwwqqhxxxxxshipment trexuq255xwwqqhxxxxxshipment=null;
         trexuq255xwwqqhxxxxxshipment=this.getInstance();
          trexuq255xwwqqhxxxxxshipment.setZ1xxztprlxxxxxxxxxxxamounttotal(amountTotal);
          trexuq255xwwqqhxxxxxshipment.setZ3xxztqrlxxxxxxxxxxxqtytotal(totalqty);//check qtyTotal whats the diff?? persistrunt uses it
          trexuq255xwwqqhxxxxxshipment.setZ3xxztqrlxxxxxxxxxxxqtytotal(qtyTotal);//check qtyTotal whats the diff?? persistrunt uses it
         //this.update(); calls showrunt etc which may calculate wrong
         // allways clearinstance, ge/setinstance before update to avoid no update
         this.clearInstance();
         this.setInstance(trexuq255xwwqqhxxxxxshipment);
         superdotupdate();
         return "updatedParent";


    }
/**
 initalizes totals and the loops through active (non -1 status) details for the parent sid and adds to get totals
 unlike updateParentTotalsFromDetails, this method does not update parent.
 showrunt() calls this to show recalculated totals, if the instance has a sid 
*/
    public String setParentTotalsFromDetails(Integer sid){
         //tempCount=0;
         detailLt=new BigDecimal("0.0");
         detailbaseamt=new BigDecimal("0.0");
         detailMis=new BigDecimal("0.0");
         detailDel=new BigDecimal("0.0");
         detailQty=new BigDecimal("0.0");
         totalmis=new BigDecimal("0.0");
         totaldel=new BigDecimal("0.0");
         totalbaseamt=new BigDecimal("0.0");
         amountTotal=new BigDecimal("0.0");
         totalqty=new BigDecimal("0.0");
         qtyTotal= new BigDecimal("0.0");//used by edits view
         totaltax1=new BigDecimal("0.0");
         totaltax2=new BigDecimal("0.0");
         totaltax3=new BigDecimal("0.0");
         totaloutstanding=new BigDecimal("0.0");
         totalamountin=new BigDecimal("0.0");


        if(sid==null){
            //came from Save, use current item which is line 1 and only item
            Xoxxuq295xwwqqhxxxxxshipmentdetails itemOrderDetail=xoxxuq295xwwqqhxxxxxshipmentdetails;
           if(itemOrderDetail !=null){
             qtyTotal=qtyTotal.add(itemOrderDetail.getZ3xxeqxxbvnxxxxxxxxxqtyshipped());
            //jay check why qtytotal used in persistrunt
           }
        }else{
         for (Xoxxuq295xwwqqhxxxxxshipmentdetails itemOrderDetail : trexuq255xwwqqhxxxxxshipmentList.entityLessStatusDetailedList(sid,-1)) {
           //tempCount=tempCount+1;
           if(itemOrderDetail !=null){
             totalqty=totalqty.add(itemOrderDetail.getZ3xxeqxxbvnxxxxxxxxxqtyshipped());
             qtyTotal=qtyTotal.add(itemOrderDetail.getZ3xxeqxxbvnxxxxxxxxxqtyshipped());
            //jay check why qtytotal used in persistrunt
           }
        }
            amountTotal=amountTotal.add(totalbaseamt).add(totaldel).add(totalmis).add(totaltax1).add(totaltax2).add(totaltax3);

       }
         return "parentTotalsSet";

    }

    /**
    * used by xxEdit.xhtml for updating multiple items for master entities which have details, example order,invoice,glentries
    * mimics ItemHome updateProductsToOrder method (used for shopping cart) logic to handle multiItems
    *@see "addWithDetails used by xxEdit to add new, or update or add detail"
    *@see "updateProductsToOrder used by shopping cart add"
    *add logic to adjust invoice, payment details and paypal etc payment due ie either credit or adjust hold
    */
    public String updateDetailsAll() {
     // before this method is called, very 1st item (common use case) was already saved as detail via addWithDetails method 
     // and flag more was set
     // flow for more items via this method, is as follows
     // first update the current detail ie 2nd or later item and persist it, initialise lastitemline back to 0 and
     // set more to false. The details now has multiple items and user may have flagged one or more to be removed
     // or qty may have changed, so rechecks by looping through details ie lineitems,
     // if checked for remove then subtract qty from item and remove from order details. 
     // call cartpersist with param u for undo or remove which
     //  since no detail value for this will stay, dont call updatecdetails but call
     //  (1) showrunt 
     //  (2) persistrunt
     //  (3) remove() detail and make it null to avoid keet as dirty 
     //  (4) update order itself 
     // if not ckecked , then call ordersHome cartpersist with currentCartedPO detail sid,c as change option 
     // and tempCount (1 means first call)
     // cartPersist for c will get the detail  and call
     //  (1) update() parent which in turn updates details 
     //  (1.1) updatecdetails which updates the order detail qty based on itemTempQty (itemDetailsBrowse view has this)
     //  (1.2) showrunt which recalculates both details and order itself based on quantity or say tax value( a cart can be idle for days)
     //  (1.3) persistrunt which resets all the values for the order itself (detail values done in showrunt) using values calculated in showrunt
     //     each showrunt for a detail will recalculate both its own value and its master but persistrunt simply copies the variable values into properties
     //  (1.4) update() detail instance  
     //  (1.5) update order
     //  (1.6) extra logic added to avoid totals getting wrong
     //   updateParentFromDetails() which loops through all details and recalculates totals and updates parent instance
     //   not sure why the detail was superupdated again     
     // coming back from cartperist
     //  (6) adjust posting if invoice/payment by calling posting with net changes for baseamount etc
     // increment tempcount and go to top of loop
     //tempCount=this.getLastItemLine()-1; 
     Integer tempRemoveCount=0;
     String  currentCartedPO="";
     Integer currentCartedPOSID;

     //jay Z3xxeqxxbvnxxxxxxxxxqtyshipped
     try{
        //jay add logic to return if status is closed
        // moreActive if coming from not exists ie not convert, add the new detail
        if(moreActive){
            //this is 2nd or more detail persist ie next item pressed followed by save/remove pressed
            updateCdetailsetValues();//misnomer ,creates 2nd and other details instance but not persist or totals
            showrunt();//set detail totals , parent totals will be done under loop
            if(!bcontinue){
             return "";
            }
            xoxxuq295xwwqqhxxxxxshipmentdetailsHome.persist();//detail persist no detail or parent totals
            // later for loop takes care of parent totals
            moreActive=false;
            checked.put(xoxxuq295xwwqqhxxxxxshipmentdetails.getA0xxuobxbxxxxxxxxxxxsid(),false);
        }
        Trexuq255xwwqqhxxxxxshipment trexuq255xwwqqhxxxxxshipment=null;
        setLastItemLine(new Integer(0)); // reset to 0 since it will loop through and recalculate by adding 1 to lastitemline
        qtyTotalNew = BigDecimal.ZERO;
        tempCount=0;
        Integer sid=this.instance.getA0xxuobxbxxxxxxxxxxxsid();
        if(sid==null || sid ==0){
         if(fpxxfq1a5xwwqqhxxxxxitemList==null || fpxxfq1a5xwwqqhxxxxxitemList.getCurrentCartOrder("cart") == null
          || fpxxfq1a5xwwqqhxxxxxitemList.getCurrentCartOrder("cart").get(0) ==null){
          FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
             FacesMessage.SEVERITY_INFO,"cannot get current cart order record #",""));
          return "";
 
         }
         sid=fpxxfq1a5xwwqqhxxxxxitemList.getCurrentCartOrder("cart").get(0).getA0xxuobxbxxxxxxxxxxxsid();
        }

        for (Xoxxuq295xwwqqhxxxxxshipmentdetails itemOrderDetail : trexuq255xwwqqhxxxxxshipmentList.entityLessStatusDetailedList(this.instance.getA0xxuobxbxxxxxxxxxxxsid(),-1)) {
             tempCount=tempCount+1;//reduce later if removed
             xoxxuq295xwwqqhxxxxxshipmentdetailsHome.clearInstance();
             xoxxuq295xwwqqhxxxxxshipmentdetailsHome.setInstance(itemOrderDetail);
             xoxxuq295xwwqqhxxxxxshipmentdetails = xoxxuq295xwwqqhxxxxxshipmentdetailsHome.getInstance();	

             Boolean b = checked.get(itemOrderDetail.getA0xxuobxbxxxxxxxxxxxsid());

            if (b != null &&  checked.get(itemOrderDetail.getA0xxuobxbxxxxxxxxxxxsid())) {
                tempCount=tempCount-1;//allready added, so reduce if remove 
               //remove fron cuodetails, but leave cuorder values alone since cuorder values gets recalculated using the remaining details 
               // wrong what if only one detail and removed ???
             if (b !=null && checked.get(itemOrderDetail.getA0xxuobxbxxxxxxxxxxxsid())) {
                // add logic to adj cuorder dont forget misc,deliv tax etc
                // also item and customer order total need to be adjusted
                 trexuq255xwwqqhxxxxxshipment=itemOrderDetail.getTrexuq255xwwqqhxxxxxshipment();
                 this.setInstance(trexuq255xwwqqhxxxxxshipment);
                 currentCartedPOSID=itemOrderDetail.getA0xxuobxbxxxxxxxxxxxsid();
                 //remove if no item 
                 if(itemOrderDetail.getFpxxfq1a5xwwqqhxxxxxitem()==null){
                 }else{
                  fpxxfq1a5xwwqqhxxxxxitemHome.clearInstance();
                  fpxxfq1a5xwwqqhxxxxxitemHome.setInstance(itemOrderDetail.getFpxxfq1a5xwwqqhxxxxxitem());
                   fpxxfq1a5xwwqqhxxxxxitemHome.getInstance().setZ7xxzxxxlvxxxxxxxxxxcuordqty(fpxxfq1a5xwwqqhxxxxxitemHome.getInstance().getZ7xxzxxxlvxxxxxxxxxxcuordqty().subtract(itemOrderDetail.getZ3xxeqxxbvnxxxxxxxxxqtyshipped()));
                  fpxxfq1a5xwwqqhxxxxxitemHome.allowUpdate();   
                 } 

                 // option u means detail removed but no need to update the order unless we are here last ????
                 // quantity passing is redundant because unlike addprodtoorder here details qty gets updated
                 this.cartpersist(currentCartedPOSID,"u",getLastItemLine(),itemOrderDetail.getZ3xxeqxxbvnxxxxxxxxxqtyshipped());
                 if(!bcontinue){
                  //catch error message already given
                  return "";
                 } 

                 tempRemoveCount=tempRemoveCount+1;
             }
            }else{
                 // qty change gets persisted by hibernate but amount,tax etc needs to be manually done for details
                 // and order before persist
                 trexuq255xwwqqhxxxxxshipment=itemOrderDetail.getTrexuq255xwwqqhxxxxxshipment();
                 this.setInstance(trexuq255xwwqqhxxxxxshipment);
                 currentCartedPOSID=itemOrderDetail.getA0xxuobxbxxxxxxxxxxxsid();
                 fpxxfq1a5xwwqqhxxxxxitemHome.clearInstance();
                 fpxxfq1a5xwwqqhxxxxxitemHome.setInstance(itemOrderDetail.getFpxxfq1a5xwwqqhxxxxxitem());

                 // put detail sid not order sid because we need detail item and can also get order
                 // option c means change the order based on any qty change on the detail
                 qtyTotalNew=qtyTotalNew.add(itemOrderDetail.getZ3xxeqxxbvnxxxxxxxxxqtyshipped());
                 this.cartpersist(currentCartedPOSID,"c",getLastItemLine(),itemOrderDetail.getZ3xxeqxxbvnxxxxxxxxxqtyshipped());
                 if(!bcontinue){
                  //catch error message already given
                  return "";
                 } 
            }
            /// for each item, cartpersist C or U is called and totals are recalculted as follows
            /// cartpersist C calls superdotupdate (remove it), updateParentFromDetails (loops through
            /// each item adds to totals and end of loop updates the instance),
            ///showrunt (also adds to totals why duplicate? remove but fix updateParent logic re tax etc recalculate
            /// as done in showrunt )), update detail 
            ///
            /// cartpersist U ie remove simply sets the line # as -1 and then calls 
            /// updateParentFromDetails (loops through
            /// each item except line as -1, adds to totals and end of loop updates the instance 
            /// refresh Totals can be called any time and it calls showtempRunt(createcdetails,showrunt)
            /// createCDetails re-creates currentIe last  details only but does not persist, showrunt also
            /// adds the current ie lastitem to cleared totals. This is wrong since Totals start with zeroes
            /// instead of calling createCDetais and showRunt, change to createCdetails to take into any 
            /// change to qty etc for current and then call setParenrFromdetails which loops through but 
            /// but at the end does not update anything but display the what if values

                 //tempCount=tempCount+1; // applicable to both "c" and "u" 

        }
        //put recalculate logic here
        checked.clear(); // If necessary.
       } catch ( Exception e){
         FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
          FacesMessage.SEVERITY_ERROR,"update details error "+e.getMessage()+", "+"use edit to check and update null values",""));

         bcontinue=false;
       }
       nextShow=false;
       lastItemLine=tempCount;// check other counters like currentdet line rtc and remove
       return "update";
    }










   
    /***
    * update is used by ui like xxxEdit and xxxEditEasy and has logic to prevent cross user updates 
    * update normally updates the entity for which the update was issued, but sometimes related updates are done like
    * 1. for transactions the details,item,customer/vendor are updated before calling entity updated
    *  like order,shipment etc are updated.
    *  If different owner then allowupdate() is used
    * 2. for usagebyperiods, rollupgroup is also updated but same owner  
    * 3. for entities like item,customer which has docmnt fileld for clob/blob data
    *  clob/blob has docmnt field but holds actual data wheres other entities like Item,Customer has 
    *  their hashed key field value in docmnt field. The sid key value not available until item gets created.
    *  There is logic to allow VW (visitor)or DH (Demo User) to change only own user records.
    *  verify posting not needed here because invoice/payment updates are done via updatedetailsall
    *  do not allow user to delete own user record or update own role/level/restrict/allow settings to prevent no one
    *  be left with enough rights , prevent via jsf rendered do not show if owner same as logon id
    * 
    * @param none but values come via variables
    * @return String null or some string value 
    * @exception various

    * Add logic to handle key value change > new hash code > update item as well as clob/blob fromKey
    * Change logic for clob/blob all over to not use seq 0, reserve it store removed value. Seq starts from 1
    * if more than 1 img why both add and replace not shown. If add put the new one with ++seq
    */
    public String update() {
     if(customIdentity.hasRole("VH") || customIdentity.hasRole("PH")) {
     } 


      boolean dataReplaced=false;
      byte[] bytes = null;
      //setUpdatedMessage(createValueExpression(""));
      // allow raaspi to delete SYSTEM records
      if((getInstance().getZzxxu2oxxhxxxxxxxxxxowner2().equals("SYSTEM") && !customIdentity.isMasterSite()) || (!getInstance().getZzxxu2oxxhxxxxxxxxxxowner2().equals("SYSTEM") && !getInstance().getZzxxu2oxxhxxxxxxxxxxowner2().equals(owner2Code))){
       FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
        FacesMessage.SEVERITY_INFO,bundle.getString("Gallery")+"/ "+bundle.getString("non")+" "+bundle.getString("owned")+" "+bundle.getString("records")+" "+bundle.getString("update")+" "+ bundle.getString("not")+" "+bundle.getString("allowed"),""));
        //bcontinue=false;
        return null;
      }
      // allow user to change its own doc (image) if product is forum
      // in user edit make only doc property as editable all others read only
      // similarly allow users to change their own customer info like address, name etc , but send an email to original value to inform
      if (((customIdentity.getRestrict1() != null && customIdentity.getRestrict1().equals("D")) || customIdentity.hasRole("VW")) && (!getInstance().getZcxxutoxlhxxxxxxxxxxowner().equals(ownerCode) && getInstance().getA0xxuobxbxxxxxxxxxxxsid() != customIdentity.getUserSid() )  ){ 
       FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
        FacesMessage.SEVERITY_INFO,bundle.getString("If")+" "+bundle.getString("non")+" "+bundle.getString("owned")+", "+bundle.getString("update")+" "+ bundle.getString("not")+" "+bundle.getString("allowed"),""));
        //bcontinue=false;
        return null;
      }
        entityUpdated =false;
        String fromTable="";
        String qualifier="";
       if (!bcontinue){
        FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
         FacesMessage.SEVERITY_ERROR,bundle.getString("error")+", "+ bundle.getString("not")+" "+bundle.getString("continue"),""));
         return null;
       }
         this.instance.setZ8xxcztxlxxxxxxxxxxxstatusfldt(Calendar.getInstance().getTime());
             //Below is common to all type of keys coming from above   
            //jay add logic to delete existing docs, below will add new ones -done

           /* not all entities have document ie clob/blob */
           //end of documentField != "" ie item/customer and non clob/blob 

           // add cq etc later
           // take care of cdetails and item and customer and then order itself
           // updateCdetails will update details instance and superdotupdate will update order
           // method more already did clear instance for detailshome to make sure a new detail instance will come
           updateCdetailsetValues();
           //cartPoStatus="p";// persist not x otherwise loop  showrunt calls recalship 
           showrunt(); //calls recalShip  
            if(!bcontinue){
             return "";
            }
           persistrunt(); 
           if(moreActive){
            xoxxuq295xwwqqhxxxxxshipmentdetailsHome.persist();
            moreActive=false;
           }
           else{
            xoxxuq295xwwqqhxxxxxshipmentdetailsHome.update();       
           }
           // calculate net values
           // put net values ie new value-old value to reverse previous entries and add new entry
           if (bcontinue){
            updateitemeCustomer();
           }
           if (bcontinue){
            updateCustomer();
           }
            // in update key value is always changed to reflect any change in description etc but also uses
            // current time, so key will always change. Do not use key value instead use sid no as int or as string
            // if subkeys have changed then key value needs to be reestablished unless rest or import (how?)
            subKey="";
             // key set but return if the natural key already exists except for clob and blob where duplicates ok
             // in keyExists method, initCap will be applied and existing key always gets replaced

              // to allow system messages to be changed if raaspi,  show parent code in next edit
             if(owner2Code.equals(masterSiteCode)){
               allowUpdate();     
             }else{
               superdotupdate();
             }    

           entityUpdated =true;
           setChangeDone(true);
           // better to return and show msg not sure why the redirect was there 
           // changedone did not work either because it got reinitilized and no change msg was being shown
           //or look into using jsf flush msg
           return "updated"; 
           //String viewId = FacesContext.getCurrentInstance().getViewRoot().getViewId();
           //return viewId + "?faces-redirect=true";// refresh

    }



    public String remove() {
     //jay added logic to delete related entities ie if a demo user is deleted then created employee should be deleted and/or
     // add logic to use employee resultlist rather than singleresult
     // useful for debugging validation failure and also to remove child entities first automatically(logic to be added)
     // some reversing logic needed for transactions aw well
     // allow raaspi user UH to delete SYSTEM records , needed for bad resource and blob etc
       //setDeletedMessage(createValueExpression(""));
        entityDeleted =false;
      // whats about other details like itemjobdetails etc?? 
      // add logic to adjust posting if invoice/payment
      // allow raaspi to delete SYSTEM records
      if((getInstance().getZzxxu2oxxhxxxxxxxxxxowner2().equals("SYSTEM") && !owner2Code.equals("myflowp") && !owner2Code.equals(masterSiteCode)) || (!getInstance().getZzxxu2oxxhxxxxxxxxxxowner2().equals("SYSTEM") && !getInstance().getZzxxu2oxxhxxxxxxxxxxowner2().equals(owner2Code))){
        FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
         FacesMessage.SEVERITY_ERROR,bundle.getString("delete")+" "+ bundle.getString("not")+" "+bundle.getString("allowed"),""));

                 bcontinue=false;
                 return null;
      }
      if (((customIdentity.getRestrict1() != null && customIdentity.getRestrict1().equals("D")) || customIdentity.hasRole("VW")) && !getInstance().getZcxxutoxlhxxxxxxxxxxowner().equals(ownerCode)  ){ 
        FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
         FacesMessage.SEVERITY_ERROR,bundle.getString("delete")+" "+ bundle.getString("not")+" "+bundle.getString("allowed"),""));

                 bcontinue=false;
                 return null;
      }

       // (1) remove() detail by call xxxList.entityDetailedList(sid), use for loop if checked remove
       // (2) update order or delete order if no details left,  but refresh parent by getting it from db after no reference from detail
       Integer xid=this.instance.getA0xxuobxbxxxxxxxxxxxsid();
       //92(itemjob) details are 9a (jobassignmet and its details)
       try{
        deleteDetails(this.instance.getA0xxuobxbxxxxxxxxxxxsid());// calls flush()
        entityDeleted =true;
        } catch ( Exception e){
          FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
           FacesMessage.SEVERITY_INFO,bundle.getString("delete")+" "+ bundle.getString("error")+" "+e.getMessage(),""));
           return null;
	}
        try {
         this.clearInstance();//load again after delete details
         Trexuq255xwwqqhxxxxxshipment noDetail=trexuq255xwwqqhxxxxxshipmentList.getSidToEntity(xid);
         this.setInstance(noDetail);
         superdotremove();
         setChangeDone(true);
         timeStamp = new SimpleDateFormat("yyyy.MM.dd.HH.mm.ss").format(new Date());
         FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
          FacesMessage.SEVERITY_INFO,bundle.getString("deleted")+" "+bundle.getString("selected")+" "+"Shipment"+" "+"at"+" "+timeStamp,""));

         return "all deleted";
        } catch ( Exception e){
          FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
           FacesMessage.SEVERITY_INFO,bundle.getString("delete")+" "+ bundle.getString("error")+" "+e.getMessage(),""));


           return null;
        }
        


    }


    /**
    * save in clobdata key being accounts,import,csv,1 note when calling clobdata needes extra character before import
    * The following methods supports import of csv data into entities.
    * A file containing csv data is uploaded in clob db under clob key kkkqqqseq where ttt is dollar{entityName}
    * kkk is "dollar{entityName} like accounts" and qqq is "csv" seq is 1
    * The csv data must have the first row containing name of target table columns corresponding to csv data
    * if there is data but no target column name then ,,
    * a template containing the matching column names can be downloaded using import wizard 
    * importCsvData method copies 
    * @param args -option one is to pass clob key  
    * @return none void type
    * @exception None.
    * @see " "
    * in the table called options, column called value will have filter value which will dictate whether it will be hidden,visible or 
    * to use the specified value rather than value in column called options
    * to hide a value in column called options for say activity entity put h=1a. to hide for both item and activity put value= h=1a,18
    * to show a value in column called options for say activity entity put s=1a. to show for both item and activity put value= s=1a,18
    * to show based on locale put in pupose ca=manual-cheque us=manual-check  in value put ca=m us=m
    * to use value rather than whats in options colimn, use v=xxx where xxx is the value.
    */


    /**
    * persist true means came from copynsave ie convert order to invoice etc , false comes from show outstanding and resets totals but no copy
    * called by xxEdit convertToxx button to copy existing entity say order date into new invoice along with the details
    * Similar function as AddWithDetails or AddProductsToOrder but they are interactive, this one loops through existing data
    * Flow:loops through each copy from item like quote,order or invoice
    *       persist -> showTempRunt -> createcDetails ->setParent sets parent totals (loops through as parent details created)
    *          -> PersistRunT prepares Totals for persist -> actual persist of parent and then detail instance
    *      loop back for each item to be copied
    *
    *@see "R3RestClient SyncData where series of order data comes as json values    "
    */


      public String extended_persist(Boolean persist) {
      // persist true means came from copynsave ie convert order to invoice etc , false comes from show outstanding and resets totals but no copy
      // copies into main cq,co etc and then calls persist to create details 
      // persist has logic via showtemprunt to create details and update run totals and persist both details and parent
      // we need to loop and call persist multiple times    
      // jay copy from existing do not seem to be complete, assumes only one detail ???
      //added logic to copy order detail item price/qty to invoice detail so that detailbaseamt is not zeroe 
      // use create instance type ftl logic below to inititialize fields like stausfl
      // also check why in case of extended they were not initialized debug shows tr..quote gets initialized, why not set instance w this
      // after getinstance. we may be doing this w blob and clob
      // extended_persist call persist which calls persistrunt before final persist
       // we need to check whether validation has set bcontinue has false, if so clear it and return
     // if shipment, shipcodefrompay should exist in related order then use that, also call r3Cart to capture authorized amount
      // Note: C2xxuxxrbv51xxxxxxxxtype value coming from convert to shipment ie shiptype holds 2 chrs ie shipcode+itemsize 
      // but extended_persist expects the 1st character only, so remove the 2nd character
     // 

       if (!bcontinue){
             bcontinue=true;
             return null;
       }

       if(this.instance.getTrexuq266xwwqqhxxxxxcuinvoice() == null  && this.instance.getTrexuq244xwwqqhxxxxxcuorders() == null){
          return "null";
       }
       if(trexuq244xwwqqhxxxxxcuorders==null){
	trexuq244xwwqqhxxxxxcuorders = this.instance.getTrexuq244xwwqqhxxxxxcuorders();//
       }
       if(trexuq266xwwqqhxxxxxcuinvoice==null){
	trexuq266xwwqqhxxxxxcuinvoice = this.instance.getTrexuq266xwwqqhxxxxxcuinvoice();//
       }
      if(persist){
       // came from copynsave
       // if shipment
       //if(this.instance.getC2xxuxxrbv51xxxxxxxxtype()!=null && !this.instance.getC2xxuxxrbv51xxxxxxxxtype().equals("P") && poTerm !=null && !poTerm.contains("Pickup") && jxxxuq201xwwqqhxxxxxcustomer !=null && !this.instance.getD2xxugbrbvxxxxxxxxxxbilltosameasshipto()){

       cartPoStatus="e";
       //reload updates these values, need to reset
       qtyOrdPrev=new BigDecimal("0.0");
       amountTotal=new BigDecimal("0.0");
       qtyTotal=new BigDecimal("0.0");///remove
       totalbaseamt=new BigDecimal("0.0");
       totalqty=new BigDecimal("0.0");///added
       lastItemLine=0;

      }else{
       //used in createXDetails
       cartPoStatus="e"; 
       //used in showrunt, start from scratch as it loops below
       qtyOrdPrev=new BigDecimal("0.0");
       amountTotal=new BigDecimal("0.0");
       qtyTotal=new BigDecimal("0.0");//remove
       totalbaseamt=new BigDecimal("0.0");
       lastItemLine=0;
       totalqty=new BigDecimal("0.0");//remove
      }
      bcontinue=false;// this allows detecting no details
      this.instance.setZ7xxzzfxhhxxxxxxxxxxstatusfl(0);
      //  copy existing quote etc info into order etc
      //  trexuq23cuquote has the quote object
      // removed code from showtemprunt but copy some of it back here so that autokeygen logic is put below
       // existing order only but can be cart order or back office order
       // 
       // once shipment and invoice is done below, capture of auth fund can be done via capture button which will call paypalcapture method here to create
       // payment from the invoice and calls CaptureRequest in shoppingcart bean  
       //  add logic if inv to ship then get related order as close it

        if (trexuq266xwwqqhxxxxxcuinvoice !=null){
         //  comes here if shopping cart, order flag is invoiced, invoice flag is active and be selected
         for (Xoxxuq2a4xwwqqhxxxxxcuidetails itemOrderDetail : trexuq266xwwqqhxxxxxcuinvoiceList.entityDetailedList(this.instance.getTrexuq266xwwqqhxxxxxcuinvoice().getA0xxuobxbxxxxxxxxxxxsid())) {
          if (itemOrderDetail.getFpxxfq1a5xwwqqhxxxxxitem() == null){
           FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
            FacesMessage.SEVERITY_ERROR,bundle.getString("skipping")+" "+ bundle.getString("details")+" "+" "+bundle.getString("with")+" "+bundle.getString("no")+" "+bundle.getString("item"),""));
          continue;
          }
          bcontinue=true;
          jxxxuq201xwwqqhxxxxxcustomerHome.clearInstance();// needed to avoid lazyloading error or force to retrieve any value say sid
          jxxxuq201xwwqqhxxxxxcustomerHome.setJxxxuq201xwwqqhxxxxxcustomerA0xxuobxbxxxxxxxxxxxsid(trexuq266xwwqqhxxxxxcuinvoice.getJxxxuq201xwwqqhxxxxxcustomer().getA0xxuobxbxxxxxxxxxxxsid());
          jxxxuq201xwwqqhxxxxxcustomer = jxxxuq201xwwqqhxxxxxcustomerHome.getDefinedInstance();
          this.instance.setJxxxuq201xwwqqhxxxxxcustomer(jxxxuq201xwwqqhxxxxxcustomer);// added throw exception to roll back,so can update instance 

          setLastItemLine(new Integer(getLastItemLine().intValue()+1)); 
          // moved here to check so that no instance proxy is updated to avoid auto commit by hibernate and causing lazy exception
                       // if customer, check if order has shipcodefrompay and use that otherwise if cart po give warning
                       // for non shipcodefrompay (non cart PO or invoice) make sure customer has address also check  
                       // billtosameasshipto. if shipcodefrompay not empty use that as if customer shipment addr
                       // if paypal then address should not be empty, if not paypal give warning and suggest manual pickup/get shipment info
                         String poTerm= null;
                         if(trexuq266xwwqqhxxxxxcuinvoice !=null && trexuq266xwwqqhxxxxxcuinvoice.getTrexuq244xwwqqhxxxxxcuorders() !=null && trexuq266xwwqqhxxxxxcuinvoice.getTrexuq244xwwqqhxxxxxcuorders() !=null){
                          poTerm=  trexuq266xwwqqhxxxxxcuinvoice.getTrexuq244xwwqqhxxxxxcuorders().getC2xxcxxxbv09xxxxxxxxterms();
                         }
                         if(poTerm == null && trexuq244xwwqqhxxxxxcuorders !=null){
                          poTerm= trexuq244xwwqqhxxxxxcuorders.getC2xxcxxxbv09xxxxxxxxterms(); 
                         }
                         if( trexuq266xwwqqhxxxxxcuinvoice != null && trexuq266xwwqqhxxxxxcuinvoice.getTrexuq244xwwqqhxxxxxcuorders() !=null && trexuq266xwwqqhxxxxxcuinvoice.getTrexuq244xwwqqhxxxxxcuorders().getFxxxuq111xwwqqhxxxxxaddressByShipcodefrompay() == null){
                          //not all orders will have rerms populated, POS will have POS or toPay etc but backOffice ones may have 60 days or be null
                          if(this.instance.getC2xxuxxrbv51xxxxxxxxtype()!=null && !this.instance.getC2xxuxxrbv51xxxxxxxxtype().equals("P") && poTerm !=null && !poTerm.contains("Pickup") && jxxxuq201xwwqqhxxxxxcustomer !=null && !this.instance.getD2xxugbrbvxxxxxxxxxxbilltosameasshipto()){
                           if (jxxxuq201xwwqqhxxxxxcustomer.getFxxxuq111xwwqqhxxxxxaddressByShiptocode() ==null){
                            FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                             FacesMessage.SEVERITY_ERROR,bundle.getString("customer")+" "+ bundle.getString("shipment")+" "+" "+bundle.getString("address")+" "+bundle.getString("empty"),""));
                            FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                             FacesMessage.SEVERITY_ERROR,bundle.getString("check")+" "+ bundle.getString("Billtosameasshipto")+" "+bundle.getString("setting"),""));
                            FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                             FacesMessage.SEVERITY_ERROR,bundle.getString("Not")+" "+bundle.getString("continuing")+", "+bundle.getString("but")+" "+bundle.getString("ensure")+" "+ bundle.getString("correct")+" "+ bundle.getString("shipping")+" "+bundle.getString("setting"),""));
                                     return "";                           
                           }
                           if (jxxxuq201xwwqqhxxxxxcustomer.getFxxxuq111xwwqqhxxxxxaddressByShiptocode().getB1pxusa1bvxxxxxxxxxxaddrl1() !=null && this.instance.getJxxxuq201xwwqqhxxxxxcustomer().getFxxxuq111xwwqqhxxxxxaddressByShiptocode().getB1pxusa1bvxxxxxxxxxxaddrl1().isEmpty() ){
                            FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                             FacesMessage.SEVERITY_ERROR,bundle.getString("customer")+" "+ bundle.getString("shipment")+" "+" "+bundle.getString("address")+" "+bundle.getString("line")+" 1 "+bundle.getString("empty"),""));
                            FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                             FacesMessage.SEVERITY_ERROR,bundle.getString("Continuing")+", "+bundle.getString("but")+" "+bundle.getString("ensure")+" "+ bundle.getString("correct")+" "+ bundle.getString("shipping")+" "+bundle.getString("setting"),""));
                            //bcontinue=false;
                            //return "";                           
                           }
                         }else{
                           if (this.instance.getC2xxuxxrbv51xxxxxxxxtype()!=null && !this.instance.getC2xxuxxrbv51xxxxxxxxtype().equals("P") &&  poTerm !=null && !poTerm.contains("Pickup") && jxxxuq201xwwqqhxxxxxcustomer !=null && this.instance.getJxxxuq201xwwqqhxxxxxcustomer().getFxxxuq111xwwqqhxxxxxaddressByMailtocode() ==null){
                            FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                             FacesMessage.SEVERITY_WARN,bundle.getString("customer")+" "+ bundle.getString("billing")+" "+" "+bundle.getString("address")+" "+bundle.getString("empty"),""));
                            //give errors for either conds
                            //return "";                           
                            FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                             FacesMessage.SEVERITY_ERROR,bundle.getString("Continuing")+", "+bundle.getString("but")+" "+bundle.getString("ensure")+" "+ bundle.getString("shipping")+" "+bundle.getString("setting"),""));
                           }
                           if (jxxxuq201xwwqqhxxxxxcustomer !=null && jxxxuq201xwwqqhxxxxxcustomer.getFxxxuq111xwwqqhxxxxxaddressByMailtocode() !=null && jxxxuq201xwwqqhxxxxxcustomer.getFxxxuq111xwwqqhxxxxxaddressByMailtocode().getB1pxusa1bvxxxxxxxxxxaddrl1() !=null && this.instance.getJxxxuq201xwwqqhxxxxxcustomer().getFxxxuq111xwwqqhxxxxxaddressByMailtocode().getB1pxusa1bvxxxxxxxxxxaddrl1().isEmpty() ){
                            FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                             FacesMessage.SEVERITY_WARN,bundle.getString("customer")+" "+ bundle.getString("billing")+" "+" "+bundle.getString("address")+" "+bundle.getString("line")+" 1 "+bundle.getString("empty"),""));
                            //bcontinue=false;
                            //return "";                           
                            FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                             FacesMessage.SEVERITY_ERROR,bundle.getString("Continuing")+", "+bundle.getString("but")+" "+bundle.getString("ensure")+" "+ bundle.getString("correct")+" "+ bundle.getString("shipping")+" "+bundle.getString("setting"),""));
                           }
                        }
                       }else{//shipcodefrompay
                        if (trexuq266xwwqqhxxxxxcuinvoice != null && trexuq266xwwqqhxxxxxcuinvoice.getTrexuq244xwwqqhxxxxxcuorders() !=null){
                         this.instance.setFxxxuq111xwwqqhxxxxxaddressByShiptocode(trexuq266xwwqqhxxxxxcuinvoice.getTrexuq244xwwqqhxxxxxcuorders().getFxxxuq111xwwqqhxxxxxaddressByShipcodefrompay());
                        }
                       }
          this.instance.setJxxxuq201xwwqqhxxxxxcustomer(jxxxuq201xwwqqhxxxxxcustomer);// update only after no errors
          this.instance.setFpxxfq1a5xwwqqhxxxxxitem(itemOrderDetail.getFpxxfq1a5xwwqqhxxxxxitem());
          fpxxfq1a5xwwqqhxxxxxitemHome.clearInstance();// needed to avoid lazyloading error or force to retrieve any value say sid
          fpxxfq1a5xwwqqhxxxxxitemHome.setFpxxfq1a5xwwqqhxxxxxitemA0xxuobxbxxxxxxxxxxxsid(itemOrderDetail.getFpxxfq1a5xwwqqhxxxxxitem().getA0xxuobxbxxxxxxxxxxxsid());
          fpxxfq1a5xwwqqhxxxxxitem = fpxxfq1a5xwwqqhxxxxxitemHome.getDefinedInstance();
          fpxxfq1a5xwwqqhxxxxxitem.setTempQuantity(itemOrderDetail.getZ3xxeqxxbvnxxxxxxxxxqtyordrd());

          this.instance.setJxxxuq201xwwqqhxxxxxcustomer(itemOrderDetail.getTrexuq266xwwqqhxxxxxcuinvoice().getJxxxuq201xwwqqhxxxxxcustomer());
          jxxxuq201xwwqqhxxxxxcustomerHome.setJxxxuq201xwwqqhxxxxxcustomerA0xxuobxbxxxxxxxxxxxsid(trexuq266xwwqqhxxxxxcuinvoice.getJxxxuq201xwwqqhxxxxxcustomer().getA0xxuobxbxxxxxxxxxxxsid());
          trexuq266xwwqqhxxxxxcuinvoiceHome.setLasttrexuq266xwwqqhxxxxxcuinvoiceP(itemOrderDetail.getTrexuq266xwwqqhxxxxxcuinvoice().getA0xxuncibvxxxxxxxxxxinvoice());
           // added logic from cuorder re statusfl  below check if first line
           if(jxxxuq201xwwqqhxxxxxcustomer != null){ 
            this.setEMailingAddress(jxxxuq201xwwqqhxxxxxcustomer.getQ4xxhxxxbv24xxxxxxxximailaddr());
           }
           if (persist){
            if( getLastItemLine().intValue()==1 && trexuq266xwwqqhxxxxxcuinvoice.getZ5xxzzfxhhxxxxxxxxxxstatusfl()==mshipped ){
                 FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                      FacesMessage.SEVERITY_ERROR,bundle.getString("invoice")+" "+ trexuq266xwwqqhxxxxxcuinvoice.getA0xxuncibvxxxxxxxxxxinvoice()+" "+bundle.getString("status")+" "+bundle.getString("already")+" "+bundle.getString("shipped"),""));
             return "";
            }

            // mark invoice as shipped (do not close now to allow payment)
            // validateandselect may have already set invice value
            if(trexuq266xwwqqhxxxxxcuinvoice==null){
             trexuq266xwwqqhxxxxxcuinvoiceHome.setTrexuq266xwwqqhxxxxxcuinvoiceA0xxuobxbxxxxxxxxxxxsid(this.instance.getTrexuq266xwwqqhxxxxxcuinvoice().getA0xxuobxbxxxxxxxxxxxsid());
             trexuq266xwwqqhxxxxxcuinvoice = trexuq266xwwqqhxxxxxcuinvoiceHome.getDefinedInstance();
            }
            trexuq266xwwqqhxxxxxcuinvoice.setZ5xxzzfxhhxxxxxxxxxxstatusfl(mactive);//  separate button mark as picked or shipped for mshipped
            trexuq266xwwqqhxxxxxcuinvoiceHome.setInstance(trexuq266xwwqqhxxxxxcuinvoice);

            trexuq266xwwqqhxxxxxcuinvoiceHome.superUpdate();//invoice
             this.instance.setTrexuq266xwwqqhxxxxxcuinvoice(trexuq266xwwqqhxxxxxcuinvoice);
            // 
            // get order from invoice ,mark order as closed (use invoice to allow payment), put order in shipment
            if(trexuq244xwwqqhxxxxxcuorders==null && trexuq266xwwqqhxxxxxcuinvoice.getTrexuq244xwwqqhxxxxxcuorders() !=null){
             trexuq244xwwqqhxxxxxcuordersHome.clearInstance();
             trexuq244xwwqqhxxxxxcuordersHome.setTrexuq244xwwqqhxxxxxcuordersA0xxuobxbxxxxxxxxxxxsid(trexuq266xwwqqhxxxxxcuinvoice.getTrexuq244xwwqqhxxxxxcuorders().getA0xxuobxbxxxxxxxxxxxsid());
             trexuq244xwwqqhxxxxxcuorders = trexuq244xwwqqhxxxxxcuordersHome.getDefinedInstance();
            }
            if(trexuq244xwwqqhxxxxxcuorders !=null){
             trexuq244xwwqqhxxxxxcuorders.setZcxxzzfxhhxxxxxxxxxxstatusfl(mclosed);
             trexuq244xwwqqhxxxxxcuordersHome.setInstance(trexuq244xwwqqhxxxxxcuorders);
             trexuq244xwwqqhxxxxxcuordersHome.superUpdate();//order
             this.instance.setTrexuq244xwwqqhxxxxxcuorders(trexuq244xwwqqhxxxxxcuorders);
            }
           }
           
           nextShow=true;// reset so that detail totals are calculated at least once
            // invoice  status not affected
           if (persist){
            persist();//shipment
            skipValidation=true;
            // persist calls showtemprunt which calls createcdetails and more intialise the instance to avoid not saving each instance
            more(); 
           }
           else{
            showtemprunt(); //calls createcdetails n showrunt
           }
         }//end of for cui details loop
        }
        //end of invoice, start of cuorder
        else{
         if (trexuq244xwwqqhxxxxxcuorders != null){
          for (Xoxxuq2b4xwwqqhxxxxxcuodetails itemOrderDetail : trexuq244xwwqqhxxxxxcuordersList.entityDetailedList(this.instance.getTrexuq244xwwqqhxxxxxcuorders().getA0xxuobxbxxxxxxxxxxxsid())) {
           if (itemOrderDetail.getFpxxfq1a5xwwqqhxxxxxitem() == null){
             FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
              FacesMessage.SEVERITY_ERROR,bundle.getString("skipping")+" "+ bundle.getString("details")+" "+" "+bundle.getString("with")+" "+bundle.getString("no")+" "+bundle.getString("item"),""));
             continue;
           }
           bcontinue=true;
           jxxxuq201xwwqqhxxxxxcustomerHome.clearInstance();// needed to avoid lazyloading error or force to retrieve any value say sid
           jxxxuq201xwwqqhxxxxxcustomerHome.setJxxxuq201xwwqqhxxxxxcustomerA0xxuobxbxxxxxxxxxxxsid(trexuq244xwwqqhxxxxxcuorders.getJxxxuq201xwwqqhxxxxxcustomer().getA0xxuobxbxxxxxxxxxxxsid());
           jxxxuq201xwwqqhxxxxxcustomer = jxxxuq201xwwqqhxxxxxcustomerHome.getDefinedInstance();
           this.instance.setJxxxuq201xwwqqhxxxxxcustomer(jxxxuq201xwwqqhxxxxxcustomer);// added throw exception to roll back,so can update instance 

                       // check if order has shipcodefrompay and use that otherwise if cart po give warning
                       // for non shipcodefrompay (non cart PO or invoice) make sure customer has address also check   
                       // billtosameasshipto. if shipcodefrompay not empty use that as if customer shipment addr, moved here
                        if( trexuq244xwwqqhxxxxxcuorders.getFxxxuq111xwwqqhxxxxxaddressByShipcodefrompay() == null){
                          //assume back office po ie not cart order
                          if(this.instance.getC2xxuxxrbv51xxxxxxxxtype()!=null && !this.instance.getC2xxuxxrbv51xxxxxxxxtype().equals("P") &&  !this.instance.getD2xxugbrbvxxxxxxxxxxbilltosameasshipto()){
                           if (jxxxuq201xwwqqhxxxxxcustomer !=null && jxxxuq201xwwqqhxxxxxcustomer.getFxxxuq111xwwqqhxxxxxaddressByShiptocode() ==null){
                            FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("customer")+" "+ bundle.getString("shipment")+" "+bundle.getString("address")+" "+bundle.getString("empty"),""));
                            bcontinue=false;
                            return "";                           
                           }
                           if (jxxxuq201xwwqqhxxxxxcustomer !=null && jxxxuq201xwwqqhxxxxxcustomer.getFxxxuq111xwwqqhxxxxxaddressByShiptocode().getB1pxusa1bvxxxxxxxxxxaddrl1() !=null && jxxxuq201xwwqqhxxxxxcustomer.getFxxxuq111xwwqqhxxxxxaddressByShiptocode().getB1pxusa1bvxxxxxxxxxxaddrl1().isEmpty() ){
                            FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("customer")+" "+ bundle.getString("shipment")+" "+bundle.getString("address")+" "+bundle.getString("line")+" 1 "+bundle.getString("empty"),""));
                            bcontinue=false;
                            return "";                           
                           }
                          }else{
                           if (jxxxuq201xwwqqhxxxxxcustomer !=null && this.instance.getJxxxuq201xwwqqhxxxxxcustomer().getFxxxuq111xwwqqhxxxxxaddressByMailtocode() ==null){
                            FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("customer")+" "+ bundle.getString("billing")+" "+bundle.getString("address")+" "+bundle.getString("empty"),""));
                            bcontinue=false;
                            return "";                           
                           }
                           if (jxxxuq201xwwqqhxxxxxcustomer !=null && jxxxuq201xwwqqhxxxxxcustomer.getFxxxuq111xwwqqhxxxxxaddressByMailtocode() !=null && this.instance.getJxxxuq201xwwqqhxxxxxcustomer().getFxxxuq111xwwqqhxxxxxaddressByMailtocode().getB1pxusa1bvxxxxxxxxxxaddrl1() !=null && this.instance.getJxxxuq201xwwqqhxxxxxcustomer().getFxxxuq111xwwqqhxxxxxaddressByMailtocode().getB1pxusa1bvxxxxxxxxxxaddrl1().isEmpty() ){
                            FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("customer")+" "+ bundle.getString("billing")+" "+bundle.getString("address")+" "+bundle.getString("line")+" 1 "+bundle.getString("empty"),""));
                            bcontinue=false;
                            return "";                           
                           }
                          }
                        }else{
                          //process as cart order shipment and use shiptocodefrompay as shipping address
                          // jay find where shipment shiptocode is updated
                          // pass paymentId which is stored as attach in order
                          //
                          // authorization capture error Response code: 401 Error response: {"error":"invalid_token","error_description":"The token passed in was not found in the system"}
                          try{
                          /// check if cart then give this msg
                           //FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                           //          FacesMessage.SEVERITY_INFO,bundle.getString("ready")+" "+bundle.getString("for")+" "+bundle.getString("payment")+" "+ bundle.getString("authorization")+" "+bundle.getString("capture"),""));
                           this.instance.setFxxxuq111xwwqqhxxxxxaddressByShiptocode(trexuq244xwwqqhxxxxxcuorders.getFxxxuq111xwwqqhxxxxxaddressByShipcodefrompay());
                          }
                          catch (Exception e){
                           FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("authorization")+" "+ bundle.getString("capture")+" "+bundle.getString("error")+" "+e.getMessage(),""));
                          }
                        } 
                        //

           this.instance.setJxxxuq201xwwqqhxxxxxcustomer(jxxxuq201xwwqqhxxxxxcustomer);//
           setLastItemLine(new Integer(getLastItemLine().intValue()+1)); 
           this.instance.setFpxxfq1a5xwwqqhxxxxxitem(itemOrderDetail.getFpxxfq1a5xwwqqhxxxxxitem());
           trexuq244xwwqqhxxxxxcuordersHome.setLasttrexuq244xwwqqhxxxxxcuordersP(itemOrderDetail.getTrexuq244xwwqqhxxxxxcuorders().getA0xxuncobvxxxxxxxxxxpurchsno());
           fpxxfq1a5xwwqqhxxxxxitemHome.clearInstance();// needed to avoid lazyloading error or force to retrieve any value say sid
           fpxxfq1a5xwwqqhxxxxxitemHome.setFpxxfq1a5xwwqqhxxxxxitemA0xxuobxbxxxxxxxxxxxsid(itemOrderDetail.getFpxxfq1a5xwwqqhxxxxxitem().getA0xxuobxbxxxxxxxxxxxsid());
           fpxxfq1a5xwwqqhxxxxxitem = fpxxfq1a5xwwqqhxxxxxitemHome.getDefinedInstance();
           fpxxfq1a5xwwqqhxxxxxitem.setTempQuantity(itemOrderDetail.getZ3xxeqxxbvnxxxxxxxxxqtyordrd());
           this.instance.setJxxxuq201xwwqqhxxxxxcustomer(itemOrderDetail.getTrexuq244xwwqqhxxxxxcuorders().getJxxxuq201xwwqqhxxxxxcustomer());
           // item update moved here and updateItemecustomer commented out because actual update was not taking place
              BigDecimal currentQty=fpxxfq1a5xwwqqhxxxxxitem.getB0xxziqxlvxxsaxxxxxxquantity();
              try {
               fpxxfq1a5xwwqqhxxxxxitemHome.clearInstance();
               fpxxfq1a5xwwqqhxxxxxitemHome.setInstance(fpxxfq1a5xwwqqhxxxxxitem);
               //fpxxfq1a5xwwqqhxxxxxitemHome.allowUpdate(); // commeted out because persist below has updateitemecustomer causing double qty
	     } catch (Exception e) {
               FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_ERROR,bundle.getString("item")+" "+ bundle.getString("update")+" "+" "+bundle.getString("failed")+" "+bundle.getString("because")+" "+bundle.getString("of")+" "+e.getMessage(),""));

                  bcontinue=false;
		  //return "";
	    }

           if (persist){
            if( getLastItemLine().intValue()==1 && trexuq244xwwqqhxxxxxcuorders.getZcxxzzfxhhxxxxxxxxxxstatusfl()==mshipped){
                 FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                      FacesMessage.SEVERITY_ERROR,bundle.getString("order")+" "+ trexuq244xwwqqhxxxxxcuorders.getA0xxuncobvxxxxxxxxxxpurchsno()+" "+bundle.getString("status")+" "+bundle.getString("already")+" "+bundle.getString("shipped"),""));
             return "";
            }

            // mark order as closed if status is invoiced otherwise as shipped
            // validateandselect may have already set cuorders value
            if(trexuq244xwwqqhxxxxxcuorders==null){
             trexuq244xwwqqhxxxxxcuordersHome.setTrexuq244xwwqqhxxxxxcuordersA0xxuobxbxxxxxxxxxxxsid(this.instance.getTrexuq244xwwqqhxxxxxcuorders().getA0xxuobxbxxxxxxxxxxxsid());
	     trexuq244xwwqqhxxxxxcuorders = trexuq244xwwqqhxxxxxcuordersHome.getDefinedInstance();
            }
            if (trexuq244xwwqqhxxxxxcuorders.getZcxxzzfxhhxxxxxxxxxxstatusfl() == minvoiced ){
             trexuq244xwwqqhxxxxxcuorders.setZcxxzzfxhhxxxxxxxxxxstatusfl(mclosed);
            }
            else{
             trexuq244xwwqqhxxxxxcuorders.setZcxxzzfxhhxxxxxxxxxxstatusfl(mshipped); // by separate button in shipment
            }
            trexuq244xwwqqhxxxxxcuordersHome.setInstance(trexuq244xwwqqhxxxxxcuorders);

            trexuq244xwwqqhxxxxxcuordersHome.superUpdate();
            this.instance.setTrexuq244xwwqqhxxxxxcuorders(trexuq244xwwqqhxxxxxcuorders);
           }
           nextShow=true;// reset so that detail totals are calculated at least once
           //shipment
           if (persist){
            persist();
            skipValidation=true;
            // persist calls showtemprunt which calls createcdetails and more intialise the instance to avoid not saving each instance
            more(); 
           }
           else{
            showtemprunt(); //calls createcdetails n showrunt
           }
          }//end of for
         }
        }
       if (bcontinue){
        bcontinue=true;
        return "extended";
       }else{
        bcontinue=true;
        try{
         throw new NullPointerException();
        }catch (Exception e){
         FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
          FacesMessage.SEVERITY_INFO,bundle.getString("has")+" "+ bundle.getString("no")+" "+bundle.getString("details")+" or "+bundle.getString("internal")+" "+bundle.getString("exception"),""));
        }
        return "";
       }
      // persist has logic via showtemprunt to create details and update run totals and persist both details and parent
     }



public boolean isBitSet(Integer a, Integer n){ 
 if (a == null){
  a=0;
 }
 return (a & (1 << n)) != 0; 
}





// set initCap via client, make it true now
        public boolean initCap() {
         //jay add logic to check client table if initCap is on or not
            return true;
        }



      /* parentProperty org.hibernate.mapping.Property(fpxxfq1a5xwwqqhxxxxxitem) parentParentPojo Entity: com.rcomputer.genapp.model.Fpxxfq1a5xwwqqhxxxxxitem */
      /* parentProperty org.hibernate.mapping.Property(fxxxcq144xwwqqhxxxxxlocation) parentParentPojo Entity: com.rcomputer.genapp.model.Fxxxcq144xwwqqhxxxxxlocation */
    // compositekeylist is 
      //generated for non composite foreign fields
         public void validateAndSelectXxxxxxxxmatcode(FacesContext context,UIComponent toValidate,Object value) {
            if (skipValidation){
             //extended persist closes the copied from entity so validation will fail and we dont need validation at this point
             return;
            }
            // set bcontinue to true if set false by showrunt() at start of txn, because of property being null
            // jay not all showrunt() validate, vendor txn does not why??
            if(fpxxfq1a5xwwqqhxxxxxitem == null && bcontinue == false){
             bcontinue=true;
            }
            fpxxfq1a5xwwqqhxxxxxitem  = null;
            String enteredValue = (String) value;
            String jay = toValidate.getAttributes().get("required").toString();
            if (!jay.contains("true")  && (enteredValue ==null || enteredValue.trim().isEmpty())){ 
             return;
            }
            if (jay.contains("true")  && (enteredValue ==null || enteredValue.trim().isEmpty())){  
             FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
              FacesMessage.SEVERITY_WARN,bundle.getString("matcode")+" "+ bundle.getString("no")+" "+ bundle.getString("value"),""));
             bcontinue=false;
             return;
            }
            urlIndex=urlName.indexOf(">>");
            if (urlIndex != -1){
             enteredValue=enteredValue.substring(0,urlIndex);
            }
            Fpxxfq1a5xwwqqhxxxxxitem cc = fpxxfq1a5xwwqqhxxxxxitemHome.getInstance();
	      try {
			 List<Fpxxfq1a5xwwqqhxxxxxitem> results =  entityManager.createQuery("select cc from Fpxxfq1a5xwwqqhxxxxxitem cc where cc.a0xxukixbxxxxxxxxxxxmatcode = :keyOfEntity AND cc.zzxxu2oxxhxxxxxxxxxxowner2=:owner2 order by cc.a0xxuobxbxxxxxxxxxxxsid asc")
				.setParameter("keyOfEntity", enteredValue).setParameter("owner2", owner2Code).getResultList();                      
                        if(!results.isEmpty()){
                            fpxxfq1a5xwwqqhxxxxxitem = results.get(0);
                            if (results.size()>1){
                             FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_WARN,bundle.getString("matcode")+" "+ bundle.getString("multiple")+" "+ bundle.getString("results")+", "+ bundle.getString("one")+" "+ bundle.getString("selected"),""));
                        
                            }           
                        }
                        else{
                         FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_WARN,bundle.getString("matcode")+" "+ enteredValue+" "+bundle.getString("not")+" "+ bundle.getString("found")+", "+ bundle.getString("create")+" "+ bundle.getString("first"),""));
                                     return;                           
                        } 
                        if (fpxxfq1a5xwwqqhxxxxxitem != null ) {
                             // that's fine - It should exist.
                             // check if selfreferencing foreign field
                           if(this.instance == null){
                            getInstance();
                            if(this.instance == null){//
                             FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                              FacesMessage.SEVERITY_WARN,bundle.getString("Shipment")+" "+bundle.getString("instance")+" "+ bundle.getString("empty")+", "+ bundle.getString("exit")+" "+ bundle.getString("and")+" "+ bundle.getString("try")+" "+ bundle.getString("again"),""));
                             return;
                            }
                           }
                           //fpxxfq1a5xwwqqhxxxxxitem = fpxxfq1a5xwwqqhxxxxxitemHome.getDefinedInstance();
                          this.instance.setFpxxfq1a5xwwqqhxxxxxitem(fpxxfq1a5xwwqqhxxxxxitem);
                         /// check if atleast 1 detail persisted then assume a new item is being considered       
                         /// put a new flag to avoid query
                         ///if(trexuq233xwwqqhxxxxxcuquoteList.entityLessStatusDetailedList(trexuq233xwwqqhxxxxxcuquoteHome.instance.a0xxuobxbxxxxxxxxxxxsid,-1).size() ge 1 )
                         ///}                        
                           //if some other validation already failed, do not reset it 
                           if(bcontinue){
                            bcontinue=true;
                           }
                         }//end of shiptobill check
	      } catch (NoResultException nre) {
                 FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                   FacesMessage.SEVERITY_WARN,bundle.getString("Matcode"),""));
                 throw new ValidatorException(msg);
              }
         }
         // check again if selfreferencing foreign field fpxxfq1a5xwwqqhxxxxxitem trexuq255xwwqqhxxxxxshipment jay may not be needed check edit.ftl
    // compositekeylist is 
      //generated for non composite foreign fields
        public void validateAndSelectXxxxxxxxaddrescodeaddressByBilltocode(FacesContext context,UIComponent toValidate,Object value) {
         fxxxuq111xwwqqhxxxxxaddressByBilltocode  = null;
            String enteredValue = (String) value;
            String jay = toValidate.getAttributes().get("required").toString();
            if (!jay.contains("true")  && (enteredValue ==null || enteredValue.trim().isEmpty())){ 
             return;
            }
            if (jay.contains("true")  && (enteredValue ==null || enteredValue.trim().isEmpty())){  
             FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
              FacesMessage.SEVERITY_WARN,bundle.getString("addrescode")+" "+ bundle.getString("no")+" "+ bundle.getString("value"),""));
             bcontinue=false;
             return;
            }
            urlIndex=urlName.indexOf(">>");
            if (urlIndex != -1){
             enteredValue=enteredValue.substring(0,urlIndex);
            }
            Fxxxuq111xwwqqhxxxxxaddress cc = fxxxuq111xwwqqhxxxxxaddressHome.getInstance();
	      try {
			 List<Fxxxuq111xwwqqhxxxxxaddress> results =  entityManager.createQuery("select cc from Fxxxuq111xwwqqhxxxxxaddress cc where cc.a0xxukbxbxxxxxxxxxxxaddrescode = :keyOfEntity AND cc.zzxxu2oxxhxxxxxxxxxxowner2=:owner2 order by cc.a0xxuobxbxxxxxxxxxxxsid asc")
				.setParameter("keyOfEntity", enteredValue).setParameter("owner2", owner2Code).getResultList();                      
                        if(!results.isEmpty()){
                            fxxxuq111xwwqqhxxxxxaddressByBilltocode = results.get(0);
                            if (results.size()>1){
                             FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_WARN,bundle.getString("addrescode")+" "+ bundle.getString("multiple")+" "+ bundle.getString("results")+", "+ bundle.getString("one")+" "+ bundle.getString("selected"),""));
                        
                            }           
                        }
                        else{
                         FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_WARN,bundle.getString("addrescode")+" "+ enteredValue+" "+bundle.getString("not")+" "+ bundle.getString("found")+", "+ bundle.getString("create")+" "+ bundle.getString("first"),""));
                                     return;                           
                        } 
                        if (fxxxuq111xwwqqhxxxxxaddressByBilltocode != null ) {
                             // that's fine - It should exist.
                             // check if selfreferencing foreign field
                           if(this.instance == null){
                            getInstance();
                            if(this.instance == null){//
                             FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                              FacesMessage.SEVERITY_WARN,bundle.getString("Shipment")+" "+bundle.getString("instance")+" "+ bundle.getString("empty")+", "+ bundle.getString("exit")+" "+ bundle.getString("and")+" "+ bundle.getString("try")+" "+ bundle.getString("again"),""));
                             return;
                            }
                           }
                           //fxxxuq111xwwqqhxxxxxaddressByBilltocode = fxxxuq111xwwqqhxxxxxaddressHome.getDefinedInstance();
                          this.instance.setFxxxuq111xwwqqhxxxxxaddressByBilltocode(fxxxuq111xwwqqhxxxxxaddressByBilltocode);
                         /// check if atleast 1 detail persisted then assume a new item is being considered       
                         /// put a new flag to avoid query
                         ///if(trexuq233xwwqqhxxxxxcuquoteList.entityLessStatusDetailedList(trexuq233xwwqqhxxxxxcuquoteHome.instance.a0xxuobxbxxxxxxxxxxxsid,-1).size() ge 1 )
                         ///}                        
                           //if some other validation already failed, do not reset it 
                           if(bcontinue){
                            bcontinue=true;
                           }
                         }//end of shiptobill check
	      } catch (NoResultException nre) {
                 FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                   FacesMessage.SEVERITY_WARN,bundle.getString("Addrescode"),""));
                 throw new ValidatorException(msg);
              }
         }
         // check again if selfreferencing foreign field fxxxuq111xwwqqhxxxxxaddress trexuq255xwwqqhxxxxxshipment jay may not be needed check edit.ftl
    // compositekeylist is 
      //generated for non composite foreign fields
        public void validateAndSelectXxxxxxxxaddrescodeaddressByShiptocode(FacesContext context,UIComponent toValidate,Object value) {
         fxxxuq111xwwqqhxxxxxaddressByShiptocode  = null;
            String enteredValue = (String) value;
            String jay = toValidate.getAttributes().get("required").toString();
            if (!jay.contains("true")  && (enteredValue ==null || enteredValue.trim().isEmpty())){ 
             return;
            }
            if (jay.contains("true")  && (enteredValue ==null || enteredValue.trim().isEmpty())){  
             FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
              FacesMessage.SEVERITY_WARN,bundle.getString("addrescode")+" "+ bundle.getString("no")+" "+ bundle.getString("value"),""));
             bcontinue=false;
             return;
            }
            urlIndex=urlName.indexOf(">>");
            if (urlIndex != -1){
             enteredValue=enteredValue.substring(0,urlIndex);
            }
            Fxxxuq111xwwqqhxxxxxaddress cc = fxxxuq111xwwqqhxxxxxaddressHome.getInstance();
	      try {
			 List<Fxxxuq111xwwqqhxxxxxaddress> results =  entityManager.createQuery("select cc from Fxxxuq111xwwqqhxxxxxaddress cc where cc.a0xxukbxbxxxxxxxxxxxaddrescode = :keyOfEntity AND cc.zzxxu2oxxhxxxxxxxxxxowner2=:owner2 order by cc.a0xxuobxbxxxxxxxxxxxsid asc")
				.setParameter("keyOfEntity", enteredValue).setParameter("owner2", owner2Code).getResultList();                      
                        if(!results.isEmpty()){
                            fxxxuq111xwwqqhxxxxxaddressByShiptocode = results.get(0);
                            if (results.size()>1){
                             FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_WARN,bundle.getString("addrescode")+" "+ bundle.getString("multiple")+" "+ bundle.getString("results")+", "+ bundle.getString("one")+" "+ bundle.getString("selected"),""));
                        
                            }           
                        }
                        else{
                         FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_WARN,bundle.getString("addrescode")+" "+ enteredValue+" "+bundle.getString("not")+" "+ bundle.getString("found")+", "+ bundle.getString("create")+" "+ bundle.getString("first"),""));
                                     return;                           
                        } 
                        if (fxxxuq111xwwqqhxxxxxaddressByShiptocode != null ) {
                             // that's fine - It should exist.
                             // check if selfreferencing foreign field
                           if(this.instance == null){
                            getInstance();
                            if(this.instance == null){//
                             FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                              FacesMessage.SEVERITY_WARN,bundle.getString("Shipment")+" "+bundle.getString("instance")+" "+ bundle.getString("empty")+", "+ bundle.getString("exit")+" "+ bundle.getString("and")+" "+ bundle.getString("try")+" "+ bundle.getString("again"),""));
                             return;
                            }
                           }
                           //fxxxuq111xwwqqhxxxxxaddressByShiptocode = fxxxuq111xwwqqhxxxxxaddressHome.getDefinedInstance();
                          this.instance.setFxxxuq111xwwqqhxxxxxaddressByShiptocode(fxxxuq111xwwqqhxxxxxaddressByShiptocode);
                         /// check if atleast 1 detail persisted then assume a new item is being considered       
                         /// put a new flag to avoid query
                         ///if(trexuq233xwwqqhxxxxxcuquoteList.entityLessStatusDetailedList(trexuq233xwwqqhxxxxxcuquoteHome.instance.a0xxuobxbxxxxxxxxxxxsid,-1).size() ge 1 )
                         ///}                        
                           //if some other validation already failed, do not reset it 
                           if(bcontinue){
                            bcontinue=true;
                           }
                         }//end of shiptobill check
	      } catch (NoResultException nre) {
                 FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                   FacesMessage.SEVERITY_WARN,bundle.getString("Addrescode"),""));
                 throw new ValidatorException(msg);
              }
         }
         // check again if selfreferencing foreign field fxxxuq111xwwqqhxxxxxaddress trexuq255xwwqqhxxxxxshipment jay may not be needed check edit.ftl
      /* parentProperty org.hibernate.mapping.Property(dxxxch1d3xwwqqhxxlxxcompany) parentParentPojo Entity: com.rcomputer.genapp.model.Dxxxch1d3xwwqqhxxlxxcompany */
      /* parentProperty org.hibernate.mapping.Property(fxxxcq144xwwqqhxxxxxlocation) parentParentPojo Entity: com.rcomputer.genapp.model.Fxxxcq144xwwqqhxxxxxlocation */
      /* parentProperty org.hibernate.mapping.Property(fxxxuq111xwwqqhxxxxxaddressByMailtocode) parentParentPojo Entity: com.rcomputer.genapp.model.Fxxxuq111xwwqqhxxxxxaddress */
      /* parentProperty org.hibernate.mapping.Property(fxxxuq111xwwqqhxxxxxaddressByShiptocode) parentParentPojo Entity: com.rcomputer.genapp.model.Fxxxuq111xwwqqhxxxxxaddress */
      /* parentProperty org.hibernate.mapping.Property(yxxxch601xwwqqhxxxxxaccount) parentParentPojo Entity: com.rcomputer.genapp.model.Yxxxch601xwwqqhxxxxxaccount */
    // compositekeylist is 
      //generated for non composite foreign fields
         public void validateAndSelectXxxxxxxxcustomer(FacesContext context,UIComponent toValidate,Object value) {
            if (skipValidation){
             //extended persist closes the copied from entity so validation will fail and we dont need validation at this point
             return;
            }
            // set bcontinue to true if set false by showrunt() at start of txn, because of property being null
            // jay not all showrunt() validate, vendor txn does not why??
            if(jxxxuq201xwwqqhxxxxxcustomer == null && bcontinue == false){
             bcontinue=true;
            }
            jxxxuq201xwwqqhxxxxxcustomer  = null;
            String enteredValue = (String) value;
            String jay = toValidate.getAttributes().get("required").toString();
            if (!jay.contains("true")  && (enteredValue ==null || enteredValue.trim().isEmpty())){ 
             return;
            }
            if (jay.contains("true")  && (enteredValue ==null || enteredValue.trim().isEmpty())){  
             FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
              FacesMessage.SEVERITY_WARN,bundle.getString("customer")+" "+ bundle.getString("no")+" "+ bundle.getString("value"),""));
             bcontinue=false;
             return;
            }
            urlIndex=urlName.indexOf(">>");
            if (urlIndex != -1){
             enteredValue=enteredValue.substring(0,urlIndex);
            }
            Jxxxuq201xwwqqhxxxxxcustomer cc = jxxxuq201xwwqqhxxxxxcustomerHome.getInstance();
	      try {
			 List<Jxxxuq201xwwqqhxxxxxcustomer> results =  entityManager.createQuery("select cc from Jxxxuq201xwwqqhxxxxxcustomer cc where cc.a0xxukxxbvxxxxxxxxxxcustomer = :keyOfEntity AND cc.zzxxu2oxxhxxxxxxxxxxowner2=:owner2 order by cc.a0xxuobxbxxxxxxxxxxxsid asc")
				.setParameter("keyOfEntity", enteredValue).setParameter("owner2", owner2Code).getResultList();                      
                        if(!results.isEmpty()){
                            jxxxuq201xwwqqhxxxxxcustomer = results.get(0);
                            if (results.size()>1){
                             FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_WARN,bundle.getString("customer")+" "+ bundle.getString("multiple")+" "+ bundle.getString("results")+", "+ bundle.getString("one")+" "+ bundle.getString("selected"),""));
                        
                            }           
                        }
                        else{
                         FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_WARN,bundle.getString("customer")+" "+ enteredValue+" "+bundle.getString("not")+" "+ bundle.getString("found")+", "+ bundle.getString("create")+" "+ bundle.getString("first"),""));
                                     return;                           
                        } 
                        if (jxxxuq201xwwqqhxxxxxcustomer != null ) {
                             // that's fine - It should exist.
                             // check if selfreferencing foreign field
                           if(this.instance == null){
                            getInstance();
                            if(this.instance == null){//
                             FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                              FacesMessage.SEVERITY_WARN,bundle.getString("Shipment")+" "+bundle.getString("instance")+" "+ bundle.getString("empty")+", "+ bundle.getString("exit")+" "+ bundle.getString("and")+" "+ bundle.getString("try")+" "+ bundle.getString("again"),""));
                             return;
                            }
                           }
                           //jxxxuq201xwwqqhxxxxxcustomer = jxxxuq201xwwqqhxxxxxcustomerHome.getDefinedInstance();
                          this.instance.setJxxxuq201xwwqqhxxxxxcustomer(jxxxuq201xwwqqhxxxxxcustomer);
                         /// check if atleast 1 detail persisted then assume a new item is being considered       
                         /// put a new flag to avoid query
                         ///if(trexuq233xwwqqhxxxxxcuquoteList.entityLessStatusDetailedList(trexuq233xwwqqhxxxxxcuquoteHome.instance.a0xxuobxbxxxxxxxxxxxsid,-1).size() ge 1 )
                         ///}                        
                          // comes here only for non cart backoffice and no order shipcodefrompay exists
                          // if customer make sure customer has address and use billto as shipment if 
                          // billtosameasshipto. 

                         if(!this.instance.getD2xxugbrbvxxxxxxxxxxbilltosameasshipto()){
                           if (this.instance.getC2xxuxxrbv51xxxxxxxxtype()!=null && !this.instance.getC2xxuxxrbv51xxxxxxxxtype().equals("P") && this.instance.getJxxxuq201xwwqqhxxxxxcustomer().getFxxxuq111xwwqqhxxxxxaddressByShiptocode() ==null){
                            FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_WARN,bundle.getString("customer")+" "+ bundle.getString("shipment")+" "+ bundle.getString("address")+", "+ bundle.getString("empty"),""));
                            FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("may")+" "+ bundle.getString("set")+" "+ bundle.getString("shipment")+" "+ bundle.getString("address")+" "+ bundle.getString("same")+" "+ bundle.getString("as")+" "+ bundle.getString("billing"),""));

                            bcontinue=false;
                            return;                           
                           }
                           if (this.instance.getC2xxuxxrbv51xxxxxxxxtype()!=null && !this.instance.getC2xxuxxrbv51xxxxxxxxtype().equals("P")
                            && (this.instance.getJxxxuq201xwwqqhxxxxxcustomer().getFxxxuq111xwwqqhxxxxxaddressByShiptocode() == null || this.instance.getJxxxuq201xwwqqhxxxxxcustomer().getFxxxuq111xwwqqhxxxxxaddressByShiptocode().getB1pxusa1bvxxxxxxxxxxaddrl1() !=null) && this.instance.getJxxxuq201xwwqqhxxxxxcustomer().getFxxxuq111xwwqqhxxxxxaddressByShiptocode().getB1pxusa1bvxxxxxxxxxxaddrl1().isEmpty() ){
                            FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_WARN,bundle.getString("customer")+" "+ bundle.getString("shipment")+" "+ bundle.getString("address")+" "+ bundle.getString("line")+" 1 "+ bundle.getString("empty"),""));
                            FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("may")+" "+ bundle.getString("set")+" "+ bundle.getString("shipment")+" "+ bundle.getString("address")+" "+ bundle.getString("same")+" "+ bundle.getString("as")+" "+ bundle.getString("billing"),""));
                            bcontinue=false;
                            return;                           
                           }
                         //mailto sameas shipto
                         }else{
                           String poTerm= null;
                           if(trexuq266xwwqqhxxxxxcuinvoice !=null && trexuq266xwwqqhxxxxxcuinvoice.getTrexuq244xwwqqhxxxxxcuorders() !=null){
                            poTerm=  trexuq266xwwqqhxxxxxcuinvoice.getTrexuq244xwwqqhxxxxxcuorders().getC2xxcxxxbv09xxxxxxxxterms();
                           }
                           if (this.instance.getC2xxuxxrbv51xxxxxxxxtype()!=null && !this.instance.getC2xxuxxrbv51xxxxxxxxtype().equals("P")  && poTerm !=null && !poTerm.contains("Pickup") && this.instance.getJxxxuq201xwwqqhxxxxxcustomer().getFxxxuq111xwwqqhxxxxxaddressByMailtocode() ==null)
                            FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_WARN,bundle.getString("customer")+" "+ bundle.getString("billing")+" "+ bundle.getString("address")+", "+ bundle.getString("empty"),""));
                            //bcontinue=false;
                            //return;                           
                           }//we allways need billing address unless pickup
                           if (this.instance.getC2xxuxxrbv51xxxxxxxxtype() !=null && !this.instance.getC2xxuxxrbv51xxxxxxxxtype().contains("P")   && this.instance.getJxxxuq201xwwqqhxxxxxcustomer().getFxxxuq111xwwqqhxxxxxaddressByMailtocode() !=null && this.instance.getJxxxuq201xwwqqhxxxxxcustomer().getFxxxuq111xwwqqhxxxxxaddressByMailtocode().getB1pxusa1bvxxxxxxxxxxaddrl1() !=null && this.instance.getJxxxuq201xwwqqhxxxxxcustomer().getFxxxuq111xwwqqhxxxxxaddressByMailtocode().getB1pxusa1bvxxxxxxxxxxaddrl1().isEmpty() ){
                            FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                              FacesMessage.SEVERITY_WARN,bundle.getString("customer")+" "+ bundle.getString("billing")+" "+ bundle.getString("address")+" "+ bundle.getString("line")+" 1 "+ bundle.getString("empty"),""));
                            //bcontinue=false;
                            //return;                           
                           }
                          // if customer or vendor then set associated account, if any
                           //if some other validation already failed, do not reset it 
                           if(bcontinue){
                            bcontinue=true;
                           }
                         }//end of shiptobill check
	      } catch (NoResultException nre) {
                 FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                   FacesMessage.SEVERITY_WARN,bundle.getString("Customer"),""));
                 throw new ValidatorException(msg);
              }
         }
         // check again if selfreferencing foreign field jxxxuq201xwwqqhxxxxxcustomer trexuq255xwwqqhxxxxxshipment jay may not be needed check edit.ftl
      /* parentProperty org.hibernate.mapping.Property(dxxxch1d3xwwqqhxxlxxcompany) parentParentPojo Entity: com.rcomputer.genapp.model.Dxxxch1d3xwwqqhxxlxxcompany */
      /* parentProperty org.hibernate.mapping.Property(fxxxcq144xwwqqhxxxxxlocation) parentParentPojo Entity: com.rcomputer.genapp.model.Fxxxcq144xwwqqhxxxxxlocation */
      /* parentProperty org.hibernate.mapping.Property(fxxxuq111xwwqqhxxxxxaddressByMailtocode) parentParentPojo Entity: com.rcomputer.genapp.model.Fxxxuq111xwwqqhxxxxxaddress */
      /* parentProperty org.hibernate.mapping.Property(fxxxuq111xwwqqhxxxxxaddressByShiptocode) parentParentPojo Entity: com.rcomputer.genapp.model.Fxxxuq111xwwqqhxxxxxaddress */
      /* parentProperty org.hibernate.mapping.Property(yxxxch601xwwqqhxxxxxaccount) parentParentPojo Entity: com.rcomputer.genapp.model.Yxxxch601xwwqqhxxxxxaccount */
    // compositekeylist is 
      //generated for non composite foreign fields
        public void validateAndSelectXxxxxxxxvendorvendorByCarrier(FacesContext context,UIComponent toValidate,Object value) {
         jxxxuq300xwwqqhxxxxxvendorByCarrier  = null;
            String enteredValue = (String) value;
            String jay = toValidate.getAttributes().get("required").toString();
            if (!jay.contains("true")  && (enteredValue ==null || enteredValue.trim().isEmpty())){ 
             return;
            }
            if (jay.contains("true")  && (enteredValue ==null || enteredValue.trim().isEmpty())){  
             FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
              FacesMessage.SEVERITY_WARN,bundle.getString("vendor")+" "+ bundle.getString("no")+" "+ bundle.getString("value"),""));
             bcontinue=false;
             return;
            }
            urlIndex=urlName.indexOf(">>");
            if (urlIndex != -1){
             enteredValue=enteredValue.substring(0,urlIndex);
            }
            Jxxxuq300xwwqqhxxxxxvendor cc = jxxxuq300xwwqqhxxxxxvendorHome.getInstance();
	      try {
			 List<Jxxxuq300xwwqqhxxxxxvendor> results =  entityManager.createQuery("select cc from Jxxxuq300xwwqqhxxxxxvendor cc where cc.a0xxukxxbvxxxxxxxxxxvendor = :keyOfEntity AND cc.zzxxu2oxxhxxxxxxxxxxowner2=:owner2 order by cc.a0xxuobxbxxxxxxxxxxxsid asc")
				.setParameter("keyOfEntity", enteredValue).setParameter("owner2", owner2Code).getResultList();                      
                        if(!results.isEmpty()){
                            jxxxuq300xwwqqhxxxxxvendorByCarrier = results.get(0);
                            if (results.size()>1){
                             FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_WARN,bundle.getString("vendor")+" "+ bundle.getString("multiple")+" "+ bundle.getString("results")+", "+ bundle.getString("one")+" "+ bundle.getString("selected"),""));
                        
                            }           
                        }
                        else{
                         FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_WARN,bundle.getString("vendor")+" "+ enteredValue+" "+bundle.getString("not")+" "+ bundle.getString("found")+", "+ bundle.getString("create")+" "+ bundle.getString("first"),""));
                                     return;                           
                        } 
                        if (jxxxuq300xwwqqhxxxxxvendorByCarrier != null ) {
                             // that's fine - It should exist.
                             // check if selfreferencing foreign field
                           if(this.instance == null){
                            getInstance();
                            if(this.instance == null){//
                             FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                              FacesMessage.SEVERITY_WARN,bundle.getString("Shipment")+" "+bundle.getString("instance")+" "+ bundle.getString("empty")+", "+ bundle.getString("exit")+" "+ bundle.getString("and")+" "+ bundle.getString("try")+" "+ bundle.getString("again"),""));
                             return;
                            }
                           }
                           //jxxxuq300xwwqqhxxxxxvendorByCarrier = jxxxuq300xwwqqhxxxxxvendorHome.getDefinedInstance();
                          this.instance.setJxxxuq300xwwqqhxxxxxvendorByCarrier(jxxxuq300xwwqqhxxxxxvendorByCarrier);
                         /// check if atleast 1 detail persisted then assume a new item is being considered       
                         /// put a new flag to avoid query
                         ///if(trexuq233xwwqqhxxxxxcuquoteList.entityLessStatusDetailedList(trexuq233xwwqqhxxxxxcuquoteHome.instance.a0xxuobxbxxxxxxxxxxxsid,-1).size() ge 1 )
                         ///}                        
                           //if some other validation already failed, do not reset it 
                           if(bcontinue){
                            bcontinue=true;
                           }
                         }//end of shiptobill check
	      } catch (NoResultException nre) {
                 FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                   FacesMessage.SEVERITY_WARN,bundle.getString("Vendor"),""));
                 throw new ValidatorException(msg);
              }
         }
         // check again if selfreferencing foreign field jxxxuq300xwwqqhxxxxxvendor trexuq255xwwqqhxxxxxshipment jay may not be needed check edit.ftl
      /* parentProperty org.hibernate.mapping.Property(dxxxch1d3xwwqqhxxlxxcompany) parentParentPojo Entity: com.rcomputer.genapp.model.Dxxxch1d3xwwqqhxxlxxcompany */
      /* parentProperty org.hibernate.mapping.Property(fxxxcq144xwwqqhxxxxxlocation) parentParentPojo Entity: com.rcomputer.genapp.model.Fxxxcq144xwwqqhxxxxxlocation */
      /* parentProperty org.hibernate.mapping.Property(fxxxuq111xwwqqhxxxxxaddressByMailtocode) parentParentPojo Entity: com.rcomputer.genapp.model.Fxxxuq111xwwqqhxxxxxaddress */
      /* parentProperty org.hibernate.mapping.Property(fxxxuq111xwwqqhxxxxxaddressByShiptocode) parentParentPojo Entity: com.rcomputer.genapp.model.Fxxxuq111xwwqqhxxxxxaddress */
      /* parentProperty org.hibernate.mapping.Property(yxxxch601xwwqqhxxxxxaccount) parentParentPojo Entity: com.rcomputer.genapp.model.Yxxxch601xwwqqhxxxxxaccount */
    // compositekeylist is 
      //generated for non composite foreign fields
        public void validateAndSelectXxxxxxxxvendorvendorByShipper(FacesContext context,UIComponent toValidate,Object value) {
         jxxxuq300xwwqqhxxxxxvendorByShipper  = null;
            String enteredValue = (String) value;
            String jay = toValidate.getAttributes().get("required").toString();
            if (!jay.contains("true")  && (enteredValue ==null || enteredValue.trim().isEmpty())){ 
             return;
            }
            if (jay.contains("true")  && (enteredValue ==null || enteredValue.trim().isEmpty())){  
             FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
              FacesMessage.SEVERITY_WARN,bundle.getString("vendor")+" "+ bundle.getString("no")+" "+ bundle.getString("value"),""));
             bcontinue=false;
             return;
            }
            urlIndex=urlName.indexOf(">>");
            if (urlIndex != -1){
             enteredValue=enteredValue.substring(0,urlIndex);
            }
            Jxxxuq300xwwqqhxxxxxvendor cc = jxxxuq300xwwqqhxxxxxvendorHome.getInstance();
	      try {
			 List<Jxxxuq300xwwqqhxxxxxvendor> results =  entityManager.createQuery("select cc from Jxxxuq300xwwqqhxxxxxvendor cc where cc.a0xxukxxbvxxxxxxxxxxvendor = :keyOfEntity AND cc.zzxxu2oxxhxxxxxxxxxxowner2=:owner2 order by cc.a0xxuobxbxxxxxxxxxxxsid asc")
				.setParameter("keyOfEntity", enteredValue).setParameter("owner2", owner2Code).getResultList();                      
                        if(!results.isEmpty()){
                            jxxxuq300xwwqqhxxxxxvendorByShipper = results.get(0);
                            if (results.size()>1){
                             FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_WARN,bundle.getString("vendor")+" "+ bundle.getString("multiple")+" "+ bundle.getString("results")+", "+ bundle.getString("one")+" "+ bundle.getString("selected"),""));
                        
                            }           
                        }
                        else{
                         FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_WARN,bundle.getString("vendor")+" "+ enteredValue+" "+bundle.getString("not")+" "+ bundle.getString("found")+", "+ bundle.getString("create")+" "+ bundle.getString("first"),""));
                                     return;                           
                        } 
                        if (jxxxuq300xwwqqhxxxxxvendorByShipper != null ) {
                             // that's fine - It should exist.
                             // check if selfreferencing foreign field
                           if(this.instance == null){
                            getInstance();
                            if(this.instance == null){//
                             FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                              FacesMessage.SEVERITY_WARN,bundle.getString("Shipment")+" "+bundle.getString("instance")+" "+ bundle.getString("empty")+", "+ bundle.getString("exit")+" "+ bundle.getString("and")+" "+ bundle.getString("try")+" "+ bundle.getString("again"),""));
                             return;
                            }
                           }
                           //jxxxuq300xwwqqhxxxxxvendorByShipper = jxxxuq300xwwqqhxxxxxvendorHome.getDefinedInstance();
                          this.instance.setJxxxuq300xwwqqhxxxxxvendorByShipper(jxxxuq300xwwqqhxxxxxvendorByShipper);
                         /// check if atleast 1 detail persisted then assume a new item is being considered       
                         /// put a new flag to avoid query
                         ///if(trexuq233xwwqqhxxxxxcuquoteList.entityLessStatusDetailedList(trexuq233xwwqqhxxxxxcuquoteHome.instance.a0xxuobxbxxxxxxxxxxxsid,-1).size() ge 1 )
                         ///}                        
                           //if some other validation already failed, do not reset it 
                           if(bcontinue){
                            bcontinue=true;
                           }
                         }//end of shiptobill check
	      } catch (NoResultException nre) {
                 FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                   FacesMessage.SEVERITY_WARN,bundle.getString("Vendor"),""));
                 throw new ValidatorException(msg);
              }
         }
         // check again if selfreferencing foreign field jxxxuq300xwwqqhxxxxxvendor trexuq255xwwqqhxxxxxshipment jay may not be needed check edit.ftl
      /* parentProperty org.hibernate.mapping.Property(fpxxfq1a5xwwqqhxxxxxitem) parentParentPojo Entity: com.rcomputer.genapp.model.Fpxxfq1a5xwwqqhxxxxxitem */
      /* parentProperty org.hibernate.mapping.Property(fxxxuq111xwwqqhxxxxxaddressByShipcode) parentParentPojo Entity: com.rcomputer.genapp.model.Fxxxuq111xwwqqhxxxxxaddress */
      /* parentProperty org.hibernate.mapping.Property(fxxxuq111xwwqqhxxxxxaddressByShipcodefrompay) parentParentPojo Entity: com.rcomputer.genapp.model.Fxxxuq111xwwqqhxxxxxaddress */
      /* parentProperty org.hibernate.mapping.Property(jxxxbh400xwwqqhxxxxxemployee) parentParentPojo Entity: com.rcomputer.genapp.model.Jxxxbh400xwwqqhxxxxxemployee */
      /* parentProperty org.hibernate.mapping.Property(jxxxuq201xwwqqhxxxxxcustomer) parentParentPojo Entity: com.rcomputer.genapp.model.Jxxxuq201xwwqqhxxxxxcustomer */
      /* parentProperty org.hibernate.mapping.Property(trexuq233xwwqqhxxxxxcuquote) parentParentPojo Entity: com.rcomputer.genapp.model.Trexuq233xwwqqhxxxxxcuquote */
    // compositekeylist is 
      //generated for non composite foreign fields
         public void validateAndSelectXxxxxxxxpurchsno(FacesContext context,UIComponent toValidate,Object value) {
            if (skipValidation){
             //extended persist closes the copied from entity so validation will fail and we dont need validation at this point
             return;
            }
            // set bcontinue to true if set false by showrunt() at start of txn, because of property being null
            // jay not all showrunt() validate, vendor txn does not why??
            if(trexuq244xwwqqhxxxxxcuorders == null && bcontinue == false){
             bcontinue=true;
            }
            trexuq244xwwqqhxxxxxcuorders  = null;
            String enteredValue = (String) value;
            String jay = toValidate.getAttributes().get("required").toString();
            if (!jay.contains("true")  && (enteredValue ==null || enteredValue.trim().isEmpty())){ 
             return;
            }
            if (jay.contains("true")  && (enteredValue ==null || enteredValue.trim().isEmpty())){  
             FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
              FacesMessage.SEVERITY_WARN,bundle.getString("purchsno")+" "+ bundle.getString("no")+" "+ bundle.getString("value"),""));
             bcontinue=false;
             return;
            }
            urlIndex=urlName.indexOf(">>");
            if (urlIndex != -1){
             enteredValue=enteredValue.substring(0,urlIndex);
            }
            Trexuq244xwwqqhxxxxxcuorders cc = trexuq244xwwqqhxxxxxcuordersHome.getInstance();
	      try {
			 List<Trexuq244xwwqqhxxxxxcuorders> results =  entityManager.createQuery("select cc from Trexuq244xwwqqhxxxxxcuorders cc where cc.a0xxuncobvxxxxxxxxxxpurchsno = :keyOfEntity AND cc.zzxxu2oxxhxxxxxxxxxxowner2=:owner2 order by cc.a0xxuobxbxxxxxxxxxxxsid asc")
				.setParameter("keyOfEntity", enteredValue).setParameter("owner2", owner2Code).getResultList();                      
                        if(!results.isEmpty()){
                            trexuq244xwwqqhxxxxxcuorders = results.get(0);
                            if (results.size()>1){
                             FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_WARN,bundle.getString("purchsno")+" "+ bundle.getString("multiple")+" "+ bundle.getString("results")+", "+ bundle.getString("one")+" "+ bundle.getString("selected"),""));
                        
                            }           
                        }
                        else{
                         FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_WARN,bundle.getString("purchsno")+" "+ enteredValue+" "+bundle.getString("not")+" "+ bundle.getString("found")+", "+ bundle.getString("create")+" "+ bundle.getString("first"),""));
                                     return;                           
                        } 
                        if (trexuq244xwwqqhxxxxxcuorders != null ) {
                             // that's fine - It should exist.
                             // check if selfreferencing foreign field
                           if(this.instance == null){
                            getInstance();
                            if(this.instance == null){//
                             FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                              FacesMessage.SEVERITY_WARN,bundle.getString("Shipment")+" "+bundle.getString("instance")+" "+ bundle.getString("empty")+", "+ bundle.getString("exit")+" "+ bundle.getString("and")+" "+ bundle.getString("try")+" "+ bundle.getString("again"),""));
                             return;
                            }
                           }
                           //trexuq244xwwqqhxxxxxcuorders = trexuq244xwwqqhxxxxxcuordersHome.getDefinedInstance();
                          this.instance.setTrexuq244xwwqqhxxxxxcuorders(trexuq244xwwqqhxxxxxcuorders);
                         /// check if atleast 1 detail persisted then assume a new item is being considered       
                         /// put a new flag to avoid query
                         ///if(trexuq233xwwqqhxxxxxcuquoteList.entityLessStatusDetailedList(trexuq233xwwqqhxxxxxcuquoteHome.instance.a0xxuobxbxxxxxxxxxxxsid,-1).size() ge 1 )
                         ///}                        
                           //if some other validation already failed, do not reset it 
                           if(bcontinue){
                            bcontinue=true;
                           }
                         }//end of shiptobill check
	      } catch (NoResultException nre) {
                 FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                   FacesMessage.SEVERITY_WARN,bundle.getString("Purchsno"),""));
                 throw new ValidatorException(msg);
              }
         }
         // check again if selfreferencing foreign field trexuq244xwwqqhxxxxxcuorders trexuq255xwwqqhxxxxxshipment jay may not be needed check edit.ftl
      /* parentProperty org.hibernate.mapping.Property(fpxxfq1a5xwwqqhxxxxxitem) parentParentPojo Entity: com.rcomputer.genapp.model.Fpxxfq1a5xwwqqhxxxxxitem */
      /* parentProperty org.hibernate.mapping.Property(jxxxbh400xwwqqhxxxxxemployee) parentParentPojo Entity: com.rcomputer.genapp.model.Jxxxbh400xwwqqhxxxxxemployee */
      /* parentProperty org.hibernate.mapping.Property(jxxxuq201xwwqqhxxxxxcustomer) parentParentPojo Entity: com.rcomputer.genapp.model.Jxxxuq201xwwqqhxxxxxcustomer */
      /* parentProperty org.hibernate.mapping.Property(trexuq244xwwqqhxxxxxcuorders) parentParentPojo Entity: com.rcomputer.genapp.model.Trexuq244xwwqqhxxxxxcuorders */
    // compositekeylist is 
      //generated for non composite foreign fields
         public void validateAndSelectXxxxxxxxinvoice(FacesContext context,UIComponent toValidate,Object value) {
            if (skipValidation){
             //extended persist closes the copied from entity so validation will fail and we dont need validation at this point
             return;
            }
            // set bcontinue to true if set false by showrunt() at start of txn, because of property being null
            // jay not all showrunt() validate, vendor txn does not why??
            if(trexuq266xwwqqhxxxxxcuinvoice == null && bcontinue == false){
             bcontinue=true;
            }
            trexuq266xwwqqhxxxxxcuinvoice  = null;
            String enteredValue = (String) value;
            String jay = toValidate.getAttributes().get("required").toString();
            if (!jay.contains("true")  && (enteredValue ==null || enteredValue.trim().isEmpty())){ 
             return;
            }
            if (jay.contains("true")  && (enteredValue ==null || enteredValue.trim().isEmpty())){  
             FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
              FacesMessage.SEVERITY_WARN,bundle.getString("invoice")+" "+ bundle.getString("no")+" "+ bundle.getString("value"),""));
             bcontinue=false;
             return;
            }
            urlIndex=urlName.indexOf(">>");
            if (urlIndex != -1){
             enteredValue=enteredValue.substring(0,urlIndex);
            }
            Trexuq266xwwqqhxxxxxcuinvoice cc = trexuq266xwwqqhxxxxxcuinvoiceHome.getInstance();
	      try {
			 List<Trexuq266xwwqqhxxxxxcuinvoice> results =  entityManager.createQuery("select cc from Trexuq266xwwqqhxxxxxcuinvoice cc where cc.a0xxuncibvxxxxxxxxxxinvoice = :keyOfEntity AND cc.zzxxu2oxxhxxxxxxxxxxowner2=:owner2 order by cc.a0xxuobxbxxxxxxxxxxxsid asc")
				.setParameter("keyOfEntity", enteredValue).setParameter("owner2", owner2Code).getResultList();                      
                        if(!results.isEmpty()){
                            trexuq266xwwqqhxxxxxcuinvoice = results.get(0);
                            if (results.size()>1){
                             FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_WARN,bundle.getString("invoice")+" "+ bundle.getString("multiple")+" "+ bundle.getString("results")+", "+ bundle.getString("one")+" "+ bundle.getString("selected"),""));
                        
                            }           
                        }
                        else{
                         FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_WARN,bundle.getString("invoice")+" "+ enteredValue+" "+bundle.getString("not")+" "+ bundle.getString("found")+", "+ bundle.getString("create")+" "+ bundle.getString("first"),""));
                                     return;                           
                        } 
                        if (trexuq266xwwqqhxxxxxcuinvoice != null ) {
                             // that's fine - It should exist.
                             // check if selfreferencing foreign field
                           if(this.instance == null){
                            getInstance();
                            if(this.instance == null){//
                             FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                              FacesMessage.SEVERITY_WARN,bundle.getString("Shipment")+" "+bundle.getString("instance")+" "+ bundle.getString("empty")+", "+ bundle.getString("exit")+" "+ bundle.getString("and")+" "+ bundle.getString("try")+" "+ bundle.getString("again"),""));
                             return;
                            }
                           }
                           //trexuq266xwwqqhxxxxxcuinvoice = trexuq266xwwqqhxxxxxcuinvoiceHome.getDefinedInstance();
                          this.instance.setTrexuq266xwwqqhxxxxxcuinvoice(trexuq266xwwqqhxxxxxcuinvoice);
                         /// check if atleast 1 detail persisted then assume a new item is being considered       
                         /// put a new flag to avoid query
                         ///if(trexuq233xwwqqhxxxxxcuquoteList.entityLessStatusDetailedList(trexuq233xwwqqhxxxxxcuquoteHome.instance.a0xxuobxbxxxxxxxxxxxsid,-1).size() ge 1 )
                         ///}                        
                           //if some other validation already failed, do not reset it 
                           if(bcontinue){
                            bcontinue=true;
                           }
                         }//end of shiptobill check
	      } catch (NoResultException nre) {
                 FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                   FacesMessage.SEVERITY_WARN,bundle.getString("Invoice"),""));
                 throw new ValidatorException(msg);
              }
         }
         // check again if selfreferencing foreign field trexuq266xwwqqhxxxxxcuinvoice trexuq255xwwqqhxxxxxshipment jay may not be needed check edit.ftl





    /**
    * The following method creates details (children)
    * @param args Unused.
    * @return whether detail was created true or false.
    * item quantity has the stock qty and temquantity holds the qty ordered
    * @exception Application detail instance creation error.
    * called by showtemprunt
    * @see 
    * 
    */
        public boolean createCdetailsetValues() {
          String cdiscT="";
          if (!bcontinue){
             return bcontinue;
           }
           // clear instance to make id null and avoid detach entity(ie already has id) persist, needed before getDefinedInstance 
           xoxxuq295xwwqqhxxxxxshipmentdetailsHome.clearInstance();
           xoxxuq295xwwqqhxxxxxshipmentdetails = xoxxuq295xwwqqhxxxxxshipmentdetailsHome.getInstance();	
	   if (xoxxuq295xwwqqhxxxxxshipmentdetails == null) {
            FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                        FacesMessage.SEVERITY_ERROR,bundle.getString("details")+" "+ bundle.getString("could")+" "+bundle.getString("not")+" "+bundle.getString("be")+" "+bundle.getString("created"),""));
			bcontinue = false;
                        return bcontinue;
           }else {
	    xoxxuq295xwwqqhxxxxxshipmentdetails.setTrexuq255xwwqqhxxxxxshipment(this.instance);//

              if (fpxxfq1a5xwwqqhxxxxxitem == null) {
		//	moved to persist  //FacesMessages.instance().add("Item not selected yet");
	        //		bcontinue = false;
                return bcontinue;
              } 
                 // shipment price field is for shipment cost not item price
                 if (cartPoStatus.equals("e")){
                  xoxxuq295xwwqqhxxxxxshipmentdetails.setFpxxfq1a5xwwqqhxxxxxitem(fpxxfq1a5xwwqqhxxxxxitem);
                  xoxxuq295xwwqqhxxxxxshipmentdetails.setZ3xxeqxxbvnxxxxxxxxxqtyshipped(fpxxfq1a5xwwqqhxxxxxitem.getTempQuantity());
                  //xoxxuq295xwwqqhxxxxxshipmentdetails.setZmxxzzfxhhxxxxxxxxxxstatusfl(mshipped);// later
                  //xoxxuq295xwwqqhxxxxxshipmentdetails.setZ5xxuxxrbvxxxxxxxxxxcpono(mshipped);
                  if(this.instance.getTrexuq244xwwqqhxxxxxcuorders() !=null){
                   xoxxuq295xwwqqhxxxxxshipmentdetails.setZ5xxuxxrbvxxxxxxxxxxcpono(this.instance.getTrexuq244xwwqqhxxxxxcuorders().getA0xxuobxbxxxxxxxxxxxsid());
                  }
                  if(this.instance.getTrexuq266xwwqqhxxxxxcuinvoice() !=null){
                   xoxxuq295xwwqqhxxxxxshipmentdetails.setZ6xxuxxrbvxxxxxxxxxxinvoice(this.instance.getTrexuq266xwwqqhxxxxxcuinvoice().getA0xxuobxbxxxxxxxxxxxsid());
                  }
                 //
                 }else{
                  xoxxuq295xwwqqhxxxxxshipmentdetails.setFpxxfq1a5xwwqqhxxxxxitem(fpxxfq1a5xwwqqhxxxxxitem);//
                  xoxxuq295xwwqqhxxxxxshipmentdetails.setZ3xxeqxxbvnxxxxxxxxxqtyshipped(fpxxfq1a5xwwqqhxxxxxitem.getTempQuantity());
                  // recalShippingCost returns shipping cost for an item in detailDel
                  recalShippingCost();
                  xoxxuq295xwwqqhxxxxxshipmentdetails.setZ5xxzpxravxxxxxxxxxxshippingprice(detailDel);
                 }

           }

		return bcontinue;

	}


    public String setAsShipped() {// needs to update order/invoice/details as well
     this.instance.setZ7xxzzfxhhxxxxxxxxxxstatusfl(mshipped );
     FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
      FacesMessage.SEVERITY_INFO,bundle.getString("Shipment")+ " "+bundle.getString("Status")+ " "+bundle.getString("changed")+ " "+bundle.getString("to")+ " "+bundle.getString("Shipped")+ "/ "+bundle.getString("PickUp")+ " "+bundle.getString("Ready"),""));
     this.superdotupdate();
     if(trexuq244xwwqqhxxxxxcuorders ==null){
      trexuq244xwwqqhxxxxxcuorders=trexuq244xwwqqhxxxxxcuordersList.getSidToEntity(this.instance.getTrexuq244xwwqqhxxxxxcuorders().getA0xxuobxbxxxxxxxxxxxsid());
     }
     if(trexuq244xwwqqhxxxxxcuorders !=null){
      trexuq244xwwqqhxxxxxcuorders.setZcxxzzfxhhxxxxxxxxxxstatusfl(mshipped); // by separate button in shipment
     FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
      FacesMessage.SEVERITY_INFO,bundle.getString("Order")+ " "+bundle.getString("Status")+ " "+bundle.getString("changed")+ " "+bundle.getString("to")+ " "+bundle.getString("Shipped")+ "/ "+bundle.getString("PickUp")+ " "+bundle.getString("Ready"),""));
     }
     trexuq244xwwqqhxxxxxcuordersHome.setInstance(trexuq244xwwqqhxxxxxcuorders);
     trexuq244xwwqqhxxxxxcuordersHome.superdotupdate();

     FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
      FacesMessage.SEVERITY_INFO,bundle.getString("Order")+ " "+trexuq244xwwqqhxxxxxcuorders.getA0xxuncobvxxxxxxxxxxpurchsno()+" "+bundle.getString("ready")+ " "+bundle.getString("for")+ " "+bundle.getString("convert")+ " "+bundle.getString("to")+ " "+bundle.getString("Invoice"),""));

     if(trexuq266xwwqqhxxxxxcuinvoice ==null && this.instance.getTrexuq266xwwqqhxxxxxcuinvoice() != null){// if not prepaid but cod or cop
      trexuq266xwwqqhxxxxxcuinvoice=trexuq266xwwqqhxxxxxcuinvoiceList.getSidToEntity(this.instance.getTrexuq266xwwqqhxxxxxcuinvoice().getA0xxuobxbxxxxxxxxxxxsid());
     }
     if(trexuq266xwwqqhxxxxxcuinvoice !=null){
      trexuq266xwwqqhxxxxxcuinvoice.setZ5xxzzfxhhxxxxxxxxxxstatusfl(mshipped);// later
      trexuq266xwwqqhxxxxxcuinvoiceHome.setInstance(trexuq266xwwqqhxxxxxcuinvoice);
      trexuq266xwwqqhxxxxxcuinvoiceHome.superdotupdate();
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
       FacesMessage.SEVERITY_INFO,bundle.getString("Invoice")+ " "+bundle.getString("Status")+ " "+bundle.getString("changed")+ " "+bundle.getString("to")+ " "+bundle.getString("Shipped")+ "/ "+bundle.getString("PickUp")+ " "+bundle.getString("Ready"),""));
     }


     return "";
    }



   /**
    * The following method updates existing or  a new instance if more of details (children) 
    * @param args Unused.
    * @return whether detail was updated true or false.
    * @exception Application detail instance creation error.
    * @see 
    * 
    */
	public boolean updateCdetailsetValues() {
		if (!bcontinue){
             return bcontinue;
            }

           xoxxuq295xwwqqhxxxxxshipmentdetails = xoxxuq295xwwqqhxxxxxshipmentdetailsHome.getInstance();	
		if (xoxxuq295xwwqqhxxxxxshipmentdetails == null) {
                  FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("details")+ " "+bundle.getString("not")+ " "+bundle.getString("found"),""));
			bcontinue = false;
                return bcontinue;
		}else
          {
	          xoxxuq295xwwqqhxxxxxshipmentdetails.setTrexuq255xwwqqhxxxxxshipment(this.instance);
               if (fpxxfq1a5xwwqqhxxxxxitem == null) {
                 // 
                 xoxxuq295xwwqqhxxxxxshipmentdetails.setZ3xxeqxxbvnxxxxxxxxxqtyshipped(fpxxfq1a5xwwqqhxxxxxitem.getTempQuantity());
                if (this.instance.getFpxxfq1a5xwwqqhxxxxxitem() != null){
                 //from cartOrder
              if (cartPoStatus.equals("c") && xoxxuq295xwwqqhxxxxxshipmentdetails.getFpxxfq1a5xwwqqhxxxxxitem()!=null){
                  fpxxfq1a5xwwqqhxxxxxitem=xoxxuq295xwwqqhxxxxxshipmentdetails.getFpxxfq1a5xwwqqhxxxxxitem();
                 }else{
                  fpxxfq1a5xwwqqhxxxxxitem=this.instance.getFpxxfq1a5xwwqqhxxxxxitem();
                 }
                 fpxxfq1a5xwwqqhxxxxxitemHome.clearInstance();
                 fpxxfq1a5xwwqqhxxxxxitemHome.setInstance(fpxxfq1a5xwwqqhxxxxxitem);
                 // cartorder does not have quantity in orderdetails, so put it there
                }else{
                   FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("item")+ " "+bundle.getString("not")+ " "+bundle.getString("selected")+ " "+bundle.getString("yet"),""));
			 bcontinue = false;
                 return bcontinue;
                }
               }
              //
              xoxxuq295xwwqqhxxxxxshipmentdetails.setZ3xxeqxxbvnxxxxxxxxxqtyshipped(fpxxfq1a5xwwqqhxxxxxitem.getTempQuantity());
               xoxxuq295xwwqqhxxxxxshipmentdetails.setFpxxfq1a5xwwqqhxxxxxitem(fpxxfq1a5xwwqqhxxxxxitem);
              // recalShippingCost returns shipping cost for an item in detailDel
              recalShippingCost();
              xoxxuq295xwwqqhxxxxxshipmentdetails.setZ5xxzpxravxxxxxxxxxxshippingprice(detailDel);

              
               if (jxxxuq201xwwqqhxxxxxcustomer == null) {
                if (this.instance.getJxxxuq201xwwqqhxxxxxcustomer() != null){
                 //from cartOrder
                 jxxxuq201xwwqqhxxxxxcustomer=this.instance.getJxxxuq201xwwqqhxxxxxcustomer();
                 jxxxuq201xwwqqhxxxxxcustomerHome.clearInstance();
                 jxxxuq201xwwqqhxxxxxcustomerHome.setInstance(jxxxuq201xwwqqhxxxxxcustomer);
                }else{
                  FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("item")+ " "+bundle.getString("not")+ " "+bundle.getString("selected")+ " "+bundle.getString("yet"),""));
			 bcontinue = false;
                 return bcontinue;
                }
               }
             }
                 setLastItemLine(new Integer(getLastItemLine().intValue()+1)); 
                 xoxxuq295xwwqqhxxxxxshipmentdetails.setB1xxzo11bvlxxxxxxxxxline(this.getLastItemLine());
		 return bcontinue;

	}














    public String more() {
   // force a new Instance & ID otherwise Hibernate will think it is the same detail record
   // but it also removes item if no new item was clicked
   xoxxuq295xwwqqhxxxxxshipmentdetailsHome.clearInstance();

    
  // 25 now a new item may be selected, so clear the old item values

     totaldel=new BigDecimal("0.0");
     totalmis=new BigDecimal("0.0");
     // make a new method describeStatus(int status)
       if(!isBitSet(this.instance.getZ7xxzzfxhhxxxxxxxxxxstatusfl(),_mactive) && this.getLastItemLine() == 2){ 
        if (customIdentity.isDebug()){ 
         FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
          FacesMessage.SEVERITY_INFO,bundle.getString("Further")+ " "+bundle.getString("edit")+ " "+bundle.getString("not")+" "+bundle.getString("allowed")+ ", "+bundle.getString("current")+ " "+bundle.getString("status")+" "+describeStatus(this.instance.getZ7xxzzfxhhxxxxxxxxxxstatusfl()),""));
        }  
        return null;
       }
     totalbaseamt=new BigDecimal("0.0");
     moreActive=true;
     nextShow=true;
     if(!restEntity && !cartPoStatus.equals("e")){
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
       FacesMessage.SEVERITY_INFO,bundle.getString("Manual")+ " "+bundle.getString("adjustment")+ " "+bundle.getString("fields")+" "+bundle.getString("like")+ " "+bundle.getString("MiscCharges")+ " "+bundle.getString("under")+" "+bundle.getString("More")+" "+bundle.getString("Fields")+ " "+bundle.getString("can")+ " "+bundle.getString("be")+", "+bundle.getString("used")+" "+bundle.getString("now")+", "+bundle.getString("if")+ " "+bundle.getString("needed")+" "+bundle.getString("before"),""));
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
       FacesMessage.SEVERITY_INFO,bundle.getString("using")+ " "+bundle.getString("save")+ " "+bundle.getString("next")+" "+bundle.getString("line")+ " "+bundle.getString("button")+" "+bundle.getString("to")+" "+bundle.getString("add")+" "+bundle.getString("this")+" "+bundle.getString("item"),""));
     }
     return null;
    }




    





/*
currentClientClass 
*/


/*
currentUserClass 
*/
	public String getCurrentUserFieldValue(String p) {
            String result="";
            Yxxxuh566xwwqqwxxxxxuser user=null;
           try{
            // identity can have username from lastlogon, so use customIdentity.getOwner() rather than Identity.instance().getUsername()
            // owner is logonid+cdd ie companydivisiondepartment or sss if no comany hierarchy
            // username is ok and same as logonid if logged in
              user =(Yxxxuh566xwwqqwxxxxxuser) entityManager
					.createQuery(
							"select cc from Yxxxuh566xwwqqwxxxxxuser cc where cc.a0xxukuxbvxxxxxxxxxxid = :nKeyName and cc.zzxxu2oxxhxxxxxxxxxxowner2 = :owner2 order by cc.a0xxuobxbxxxxxxxxxxxsid asc")
					.setParameter("nKeyName",customIdentity.getUsername())
					.setParameter("owner2", owner2Code)
					.getSingleResult();
            }catch(Exception exc){
             FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
               FacesMessage.SEVERITY_INFO,bundle.getString("user")+ " "+customIdentity.getUsername()+" "+bundle.getString("record")+ " "+bundle.getString("read")+ " "+bundle.getString("failed")+", "+exc.getMessage(),""));
             user=null;
            }

		if (user != null) {
                  if (p.equals("e")){
                    if (user.getJxxxbh400xwwqqhxxxxxemployee() != null) { 
                     result=user.getJxxxbh400xwwqqhxxxxxemployee().getA0xxuktxbvxxxxxxxxxxemployee();
                    }
                  }
                  else {
                   if (p.equals("c")){
                    if (user.getJxxxuq201xwwqqhxxxxxcustomer() != null) { 
                     result=user.getJxxxuq201xwwqqhxxxxxcustomer().getA0xxukxxbvxxxxxxxxxxcustomer();
                    }
                   }
                   else {   
                    if (p.equals("v")){
                     if (user.getJxxxuq300xwwqqhxxxxxvendor() != null) { 
                       result=user.getJxxxuq300xwwqqhxxxxxvendor().getA0xxukxxbvxxxxxxxxxxvendor();
                     }
                    }
                    else{
                     if (p.equals("l")){
                      if (user.getYxxxch522xhhxxhxxxxxclient() != null) { 
                        result=user.getYxxxch522xhhxxhxxxxxclient().getD8xxuzxdbvxxxxxxxxxxenterprisecompcode();
                      }
                     }
                    }
                   }
                  }
                  if (result.trim().length() == 0) { 
                    return "Select value"; 
                  }
                  else{
                    return result;
                  }
           }
		else{
                 FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                  FacesMessage.SEVERITY_INFO,bundle.getString("user")+ " "+bundle.getString("table")+ " "+bundle.getString("not")+ " "+bundle.getString("accessible"),""));
                  return "Select value"; 
			
		}
      }

/*
acperiodClass Y
*/
        private Yxxxch621xwwqqhxxxxxacperiod acperiod;
	public String getAcperiodFieldValue(String p) {
            String result="";
            //dont use owner2Code until genApp finished  needs try catch
            try{
             acperiod =(Yxxxch621xwwqqhxxxxxacperiod) entityManager
		.createQuery(
		 "select cc from Yxxxch621xwwqqhxxxxxacperiod cc where cc.a0xxukwpbv47xxxxxxxxrowid = :nKeyName  AND cc.zzxxu2oxxhxxxxxxxxxxowner2=:owner2 order by cc.a0xxuobxbxxxxxxxxxxxsid asc")
		.setParameter("nKeyName","01").setParameter("owner2", owner2Code)
		.getSingleResult();
            }catch(Exception exc){
             FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
               FacesMessage.SEVERITY_INFO,bundle.getString("account")+ " "+bundle.getString("period")+ " "+bundle.getString("01")+ " "+bundle.getString("read")+ " "+bundle.getString("failed")+", "+exc.getMessage(),""));
             acperiod=null;
            }

	    if (acperiod != null) {
                  if (p.equals("cp")){
                    if(acperiod.getA1xxuxwpbv47xxxxxxxxcurrperiod() != null){
                     return acperiod.getA1xxuxwpbv47xxxxxxxxcurrperiod();
                    }else{
                     return "12";//assume period 12
                    }
                  }
                  else {
                    if(acperiod.getB2xxdwerbvxxxxxxxxxxcurrbusdate() !=null){
                     return acperiod.getB2xxdwerbvxxxxxxxxxxcurrbusdate().toString();
                    }else{
                      SimpleDateFormat ss = new SimpleDateFormat("yyyy-MM-dd");

                     return ss.format(calendar.getTime()).toString();// assume toDay
                    }
                  }
            }
	    else{
                 FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                  FacesMessage.SEVERITY_INFO,bundle.getString("account")+ " "+bundle.getString("period")+ " "+bundle.getString("table")+ " "+bundle.getString("not")+ " "+bundle.getString("accessible"),""));

                  bcontinue=false;
			return null;
			
           }
      }
	public Date getAcperiodDateFieldValue(String p) {
            String result="";
             Yxxxch621xwwqqhxxxxxacperiod acperiod =(Yxxxch621xwwqqhxxxxxacperiod) entityManager
					.createQuery(
							"select cc from Yxxxch621xwwqqhxxxxxacperiod cc where cc.a0xxukwpbv47xxxxxxxxrowid = :nKeyName  AND cc.zzxxu2oxxhxxxxxxxxxxowner2=:owner2 order by cc.a0xxuobxbxxxxxxxxxxxsid asc")
					.setParameter("nKeyName","01").setParameter("owner2", owner2Code)
					.getSingleResult();

		if (acperiod != null) {
                  if (p.equals("cbd")){
                    return acperiod.getB2xxdwerbvxxxxxxxxxxcurrbusdate();
                  }
                  else{
			   return null;
                  }
           }
		else{
                  FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("accounting")+ " "+bundle.getString("period")+ " "+bundle.getString("table")+ " "+bundle.getString("not")+" "+bundle.getString("accessible"),""));

                  bcontinue=false;
			return null;
			
		}
      }


	public void setShowKeyFields() {
	}
        //cartPoPicked is a flag to allow/suppress key generation and is set to true in cartpersist if po already exists  
        private boolean cartPoPicked=false;
        private boolean restEntity =false;
	private boolean picked = false;
	private boolean multipicked = false;

     //jay document purpose of using last and show. last may be to reuse what was used recently
     // and show may be for dynamic rendering look at useraux as well 
     // note the lastItemEntity is used in forum to hold replyTo , others are not used
	private boolean bcontinue = true;
	private boolean moreActive = false;
	private boolean includeNext = false;
/*The following needs to be defined only if we need an instance of an entity which is not already generated via default seam gen. example if the entity is not a foreign key like Journal entity.
For the Foreign key instance, use the variables used in wire() where a getInstance is issued.For others use the variable defined below and issue a getInstance later.
*/
	@Inject
	Yxxxch621xwwqqhxxxxxacperiodHome yxxxch621xwwqqhxxxxxacperiodHome;
	@Inject
	Yxxxch522xhhxxhxxxxxclientHome yxxxch522xhhxxhxxxxxclientHome;
	@Inject
	Yxxxuh566xwwqqwxxxxxuserHome yxxxuh566xwwqqwxxxxxuserHome;
	@Inject
	Xoxxuq295xwwqqhxxxxxshipmentdetailsHome xoxxuq295xwwqqhxxxxxshipmentdetailsHome;
      private Xoxxuq295xwwqqhxxxxxshipmentdetails xoxxuq295xwwqqhxxxxxshipmentdetails;




      private Integer lastItemLine=new Integer(0);
      //@Begin(join=true)

	public BigDecimal getKeyedQuantity() {
		return keyedQuantity;
	}

	public void setKeyedQuantity(BigDecimal keyedQuantity) {
		this.keyedQuantity = keyedQuantity;
      }

	public BigDecimal getTotalbaseamt() {
		return totalbaseamt;
	}

	public void setTotalbaseamt(BigDecimal totalbaseamt) {
		this.totalbaseamt = totalbaseamt;
	}
        //
	public BigDecimal getChange() {
		return change;
	}

	public void setChange(BigDecimal change) {
		this.change = change;
	}

	public BigDecimal getTotalmis() {
		return totalmis;
	}

	public void setTotalmis(BigDecimal totalmis) {
		this.totalmis = totalmis;
	}

	public void setDetailMis(BigDecimal detailMis) {
		this.detailMis = detailMis;
	}

	public void setDetailDel(BigDecimal detailDel) {
		this.detailDel = detailDel;
	}

	public void setDetailTax1(BigDecimal detailTax1) {
		this.detailTax1 = detailTax1;
	}


	public void setTotaltax1(BigDecimal totaltax1) {
		this.totaltax1 = totaltax1;
	}

	public BigDecimal getTotaltax1() {
		return totaltax1;
	}

	public void setTotalamountTotal(BigDecimal amountTotal) {
		this.amountTotal = amountTotal;
	}

	public BigDecimal getTotalamountTotal() {
		return amountTotal;
	}

	public void setTotalqtyTotal(BigDecimal qtyTotal) {
		this.qtyTotal = qtyTotal;
	}

	public BigDecimal getTotalqtyTotal() {
		return qtyTotal;
	}
	public void setTotaltax2(BigDecimal totaltax2) {
		this.totaltax2 = totaltax2;
	}

	public BigDecimal getTotaltax2() {
		return totaltax2;
	}

	public void setTotaltax3(BigDecimal totaltax3) {
		this.totaltax3 = totaltax3;
	}

	public BigDecimal getTotaltax3() {
		return totaltax3;
	}

	public BigDecimal getTotaldel() {
		return totaldel;
	}

	public void setTotaldel(BigDecimal totaldel) {
		this.totaldel = totaldel;
	}

	public BigDecimal getTotalqty() {
		return totalqty;
	}
	public void setTotalqty(BigDecimal totalqty) {
		this.totalqty = totalqty;
	}

      public Integer getLastItemLine() {
       return lastItemLine;
      }

	public void setLastItemLine(Integer lastItemLine) {

		this.lastItemLine = lastItemLine;
	}

//jay look into automating the below logic using related property values
// getShow does not seem to be used?? may be future security
// The below is useed to handle foreign fields which are dropdown and the value cannot point to instance.foreign entity
// since the entity does not exist yet if create, list works
// enhance remembering last value by using userprofile table the way row and option value is used
	private boolean showtrexuq255xwwqqhxxxxxshipment = false;
	 private String  lasttrexuq255xwwqqhxxxxxshipment = " ";
	 private String  lasttrexuq255xwwqqhxxxxxshipmentP = " ";
	public boolean getShowtrexuq255xwwqqhxxxxxshipment() {
		return this.showtrexuq255xwwqqhxxxxxshipment;
	}
	public void setShowtrexuq255xwwqqhxxxxxshipment(boolean showtrexuq255xwwqqhxxxxxshipment) {
		 this.showtrexuq255xwwqqhxxxxxshipment=showtrexuq255xwwqqhxxxxxshipment;
	}

	public String getLasttrexuq255xwwqqhxxxxxshipment() {
                if(this.instance !=null && this.instance.getA0xxunshbvxxxxxxxxxxshipcode() !=null){
                 lasttrexuq255xwwqqhxxxxxshipment= this.instance.getA0xxunshbvxxxxxxxxxxshipcode();
                }
		return this.lasttrexuq255xwwqqhxxxxxshipment;
	}

	public void setLasttrexuq255xwwqqhxxxxxshipment(String lasttrexuq255xwwqqhxxxxxshipment) {
		 this.lasttrexuq255xwwqqhxxxxxshipment=lasttrexuq255xwwqqhxxxxxshipment;
	}
	public String getLasttrexuq255xwwqqhxxxxxshipmentP() {
                //if(this.instance !=null && this.instance.getTrexuq255xwwqqhxxxxxshipment().getA0xxunshbvxxxxxxxxxxshipcode() !=null){
                 //lasttrexuq255xwwqqhxxxxxshipmentP= this.instance.getTrexuq255xwwqqhxxxxxshipment().getA0xxunshbvxxxxxxxxxxshipcode();
                //}
		return this.lasttrexuq255xwwqqhxxxxxshipmentP;
	}

	public void setLasttrexuq255xwwqqhxxxxxshipmentP(String lasttrexuq255xwwqqhxxxxxshipment) {
		 this.lasttrexuq255xwwqqhxxxxxshipmentP=lasttrexuq255xwwqqhxxxxxshipment;
	}



     public void showtemprunt(){
      // this method is called by cuordersEdit every time item changes whats the impact on performance ??
      // should the logic be more intelligent and just adjust the item related change in createcdetatail or have separate short logic
      // if extended, quote etc will not be null
      bcontinue=true;


      createCdetailsetValues() ;//but does not set detail totals

      this.showrunt();// detail totals and parent totals for current item (no harm but check if parent part not needed) 
      //showrunt() calls setParent if entity already exisa, so bypass if needed
      /* showrunt calls setParent if entity exists , also look into why set/update parent clearing detail values
            if(!bcontinue){
             return "";
            }
      if(this.instance.getA0xxuobxbxxxxxxxxxxxsid() ==null){
      setParentTotalsFromDetails(this.instance.getA0xxuobxbxxxxxxxxxxxsid());// set parent totals from detail totals
      }
      */
     }

    //called by showtemprunt for customer txns, sets bcontinue
    public void showrunt()
      {
      //add logic to check whether item/customer already exists under its predecessor ie quote,order etc
      // showrunt does not iterate, it uses the current detail and updates totals
      // iteration can happen in calling module like  updatedetaillsAll via update but in all cases it points
      // to current detail item.
      // in both updates and add either or both qty and item can change or remain unchanged so subtracting and 
      // adding the current detail (with change/no change) will always work, except we need to subtract the prev 
      // qtyord, qtyord changes directly by user 
      //tbd check item type. If AD-D or AD-M then treat value as detailDel or detailMisc not as item cost
      if(this.instance==null){ 
       return;// Edit viewAction calls this 
      }
       //show shipping/delivery charges only note qtyTotal & qtyOrdPrev is being used to hold prev shipping cost
       //detailDel now has shipping cost based on type but flat rate 
       //first subtract current ie existing detail value
       // extended goes through each detail and does not redo same detail
       if (!cartPoStatus.equals("e")){
        totalbaseamt = totalbaseamt.subtract(detailbaseamtO);
        detailQty = detailQty.subtract(qtyOrdPrev);
        amountTotal = amountTotal.subtract(detailbaseamtO);
        qtyTotal = qtyTotal.subtract(qtyOrdPrev);//remove
        totalqty = totalqty.subtract(qtyOrdPrev);///added
       }
       //if(this.instance.getA0xxuobxbxxxxxxxxxxxsid() !=null){  new so id is null but has other values
               setParentTotalsFromDetails(this.instance.getA0xxuobxbxxxxxxxxxxxsid());
       //}
       // eqv to check for item in ci,co 
       if (jxxxuq201xwwqqhxxxxxcustomer == null){
        bcontinue=false;
        return;
       }

       //then add current detail value which may be same or has changed if item is different
       recalShippingCost();//returns shipping cost in detailbaseamt look into qty impact assume same cost for now
       totalbaseamt = totalbaseamt.add(detailbaseamt);
       setTotalamountTotal(amountTotal.add(totalbaseamt));
       if(xoxxuq295xwwqqhxxxxxshipmentdetails.getZ3xxeqxxbvnxxxxxxxxxqtyshipped() != null){
        detailQty=xoxxuq295xwwqqhxxxxxshipmentdetails.getZ3xxeqxxbvnxxxxxxxxxqtyshipped();
       }
       setTotalqtyTotal(qtyTotal.add(detailQty));///
       //setTotalqtyTotal(totalqty.add(detailQty));///
       qtyOrdPrev=detailQty;// save the values here
       detailbaseamtO=detailbaseamt;
    }

     public void recalShippingCost()// added ci
     {
     //fpxxfq1a5xwwqqhxxxxxitem.getC3xxuxxrbvxxxxxxxxxxshipcode() will be used to show shipping options offerred for this item
     // checkedData+checkedSize 4ch+1ch
     // ie ss or es or px etc for standard express pick up etc if multiple then sspx 2 chs each option
     // rate1f table entry will hold cost for each ship code as well ie get ship option from transaction, then search in
     // item for a match for sizes (an item will have one entry for size) and use the 2 chs to search in rate table
     // replace hardcoded fieldName jay add logic to use delivery mode from item and initialize detail shipoption
     // to show default shipment, also dont allow other options. if no ship option in item then no restriction
     // if Not applicable ie X as ship option then dont, rate should be ignored and the page should not include ship cost line
       if (fpxxfq1a5xwwqqhxxxxxitem == null){
        bcontinue=false;
        return;
       }
       if(fpxxfq1a5xwwqqhxxxxxitem.getC6xxusxrbv16xxxxxxxxtype().equals("SI-DG")){
        return;
       }
      String shipSubCode="";//based on standard size and delivery
      String shipSubCodeM="";// based on matcode 
      try{
       if(this.restEntity){
        return;
       }
     /*  need logic confirm shipcode P, X etc. Do we not allow shipping  if P?
       if(fpxxfq1a5xwwqqhxxxxxitem.getC3fbuxscbvxxxxxxxxxxshipcode() ==null || fpxxfq1a5xwwqqhxxxxxitem.getC3fbuxscbvxxxxxxxxxxshipcode().contains("X")){
        // if shipcode has x then shipping not applicable, so make detailDel zero unless has some value 
        if ( detailDel == null ){
         detailDel = BigDecimal.ZERO;
        }
        return;
       }
     */

       iShipCode="";//size of item
       tShipCode="";//shipment mode for item
       if (fpxxfq1a5xwwqqhxxxxxitem.getC3fbuxscbvxxxxxxxxxxshipcode().isEmpty()){
        iShipCode="S";//small size
       }else{
        iShipCode=fpxxfq1a5xwwqqhxxxxxitem.getC3fbuxscbvxxxxxxxxxxshipcode().length()>1?fpxxfq1a5xwwqqhxxxxxitem.getC3fbuxscbvxxxxxxxxxxshipcode().substring(1,2):"S";// size is the 2nd ch from left
        if(iShipCode.equals("X")){
         iShipCode="S";//small
        }
       } 
       //xxxxxshiptype()  specifies both size and type of delivery and used if item info not directly avaiable like order > ship or order > invoice
       //shiptype may also have 2 chrs ie tshipcode+ishipcode. If ishipcode is empty then use 2 chrs or give a msg and override 2nd chr with ishipcode ch
        tShipCode="S";//shipping mode is 1st ch from left, standard shipping
         if (this.getInstance().getC2xxuxxrbv51xxxxxxxxtype() !=null && !this.getInstance().getC2xxuxxrbv51xxxxxxxxtype().isEmpty()){
          tShipCode= this.getInstance().getC2xxuxxrbv51xxxxxxxxtype();
         }
       // item may have shipping code but quote/order tshipCode says not applicable or pickup then also return
       //revisit 
       if(tShipCode.contains("P")){
       }
       if(tShipCode.equals("X")){
         tShipCode="S";//if no match use standard otherwise no table entry error for XS
       }
       // check deiveryandPayBy chosen by customer and adhust shipment cost
       if(yxxxch522xhhxxhxxxxxclientList.getClientPayBySelected().equals("pd")
          || yxxxch522xhhxxhxxxxxclientList.getClientPayBySelected().equals("cd")){
         tShipCode="S";  //delivery or cod needs shipment     
       }    

       if(yxxxch522xhhxxhxxxxxclientList.getClientPayBySelected().equals("np")
         || yxxxch522xhhxxhxxxxxclientList.getClientPayBySelected().equals("pp")){
         tShipCode="P"; //no delivery but optional Pickup cost or pickup discount  , rate should have entries for misc charge??       
       }    
       if(!iShipCode.isEmpty()){//use size from Item not from dropDown list
        tShipCode=tShipCode.substring(0,1);
       }
       shipSubCode=tShipCode+iShipCode;//standard deliv or pickup +small
       BigDecimal itemShipCost = BigDecimal.ZERO;
      } catch (Exception ex) {
          FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
            FacesMessage.SEVERITY_ERROR,bundle.getString("recalculate")+" "+bundle.getString("shipping")+" "+" "+bundle.getString("cost")+" "+bundle.getString("error")+" " +ex.getMessage(),""));
                    bcontinue=false;
                    return ;
      }
      boolean inPOS=false;
       //for non POS co,ci etc allow shipping/delivery rate for individual item basis ie override standard rate 
       // in POS po, do not use standard rate ie no deliv charge
       if(!inPOS){
        shipSubCodeM=xoxxuq295xwwqqhxxxxxshipmentdetails.getFpxxfq1a5xwwqqhxxxxxitem().getA0xxukixbxxxxxxxxxxxmatcode();
        try {
                Yxxxuq591xwwqqhxxxxxrate1f yxxxuq591xwwqqhxxxxxrate1f =null;
	List<Yxxxuq591xwwqqhxxxxxrate1f> results =  entityManager
	.createQuery("select cc from Yxxxuq591xwwqqhxxxxxrate1f cc where cc.a0xxukxxbvxxxxxxxxxxusertype=:useCode  and cc.b1xxuxxrbvxxxxxxxxxxprodtype=:usageIn and cc.b2xxuxxrbv51xxxxxxxxstepname=:useSubCode and cc.zzxxu2oxxhxxxxxxxxxxowner2 = :owner2 order by cc.a0xxuobxbxxxxxxxxxxxsid asc")
	.setParameter("useCode", "CS")
	.setParameter("usageIn", "P")
	.setParameter("useSubCode", shipSubCodeM)
                  .setParameter("owner2", owner2Code)
	.getResultList();
                           if(!results.isEmpty()){
                            yxxxuq591xwwqqhxxxxxrate1f = results.get(0);// allow for -ve or 0 qty 
                            //detailDel=detailDel.add(yxxxuq591xwwqqhxxxxxrate1f.getB4xxcxxrbvxxxxxxxxxxvalue());// value will go into instance
                            if(detailQty.compareTo(BigDecimal.ZERO)<0){
                             detailDel=(yxxxuq591xwwqqhxxxxxrate1f.getB4xxcxxrbvxxxxxxxxxxvalue());// value will go into instance
                             detailDel=detailDel.negate();
                            }else{
                             if(detailQty.compareTo(BigDecimal.ZERO)==0){
                              detailDel=BigDecimal.ZERO;// for comments or miscchrge/deliv chrgs adjustment
                             }else{//>0
                              detailDel=(yxxxuq591xwwqqhxxxxxrate1f.getB4xxcxxrbvxxxxxxxxxxvalue());// value will go into instance
                             }
                            }
                           }
                           else{
                            bcontinue=true;//ignore if no rate override by itemcode, use standard rate
                           }

        } catch (Exception ex) {
          log.severe("Error reading rate table stepname for overide "+shipSubCodeM+" "+ ex.getMessage());

          bcontinue=true;//ignore if no rate override by itemcode, use standard rate
        }
       }
       try {
                Yxxxuq591xwwqqhxxxxxrate1f yxxxuq591xwwqqhxxxxxrate1f =null;
	List<Yxxxuq591xwwqqhxxxxxrate1f> results =  entityManager
	.createQuery("select cc from Yxxxuq591xwwqqhxxxxxrate1f cc where cc.a0xxukxxbvxxxxxxxxxxusertype=:useCode  and cc.b1xxuxxrbvxxxxxxxxxxprodtype=:usageIn and cc.b2xxuxxrbv51xxxxxxxxstepname=:useSubCode and cc.zzxxu2oxxhxxxxxxxxxxowner2 = :owner2 order by cc.a0xxuobxbxxxxxxxxxxxsid asc")
	.setParameter("useCode", "CS")
	.setParameter("usageIn", "P")
	.setParameter("useSubCode", shipSubCode)
                  .setParameter("owner2", owner2Code)
	.getResultList();
                           if(!results.isEmpty()){
                            yxxxuq591xwwqqhxxxxxrate1f = results.get(0);// allow for -ve or 0 qty do not add to detailDel
                            //detailDel=detailDel.add(yxxxuq591xwwqqhxxxxxrate1f.getB4xxcxxrbvxxxxxxxxxxvalue());// value will go into instance
                            if(detailQty.compareTo(BigDecimal.ZERO)<0){
                             detailDel=(yxxxuq591xwwqqhxxxxxrate1f.getB4xxcxxrbvxxxxxxxxxxvalue());// value will go into instance
                             detailDel=detailDel.negate();
                            }else{
                             if(detailQty.compareTo(BigDecimal.ZERO)==0){
                              detailDel=BigDecimal.ZERO;// for comments or miscchrge/deliv chrgs adjustment
                             }else{//>0
                              detailDel=(yxxxuq591xwwqqhxxxxxrate1f.getB4xxcxxrbvxxxxxxxxxxvalue());// value will go into instance
                             }
                            }
                           }
                           else{
                            FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                             FacesMessage.SEVERITY_ERROR,bundle.getString("shipment")+" "+bundle.getString("rate")+" "+bundle.getString("entry")+" "+bundle.getString("stepName")+" "+shipSubCode+" "+bundle.getString("not")+" "+bundle.getString("found"),""));
                            bcontinue=false;
                            return ;
                           }

       } catch (Exception ex) {
          FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
           FacesMessage.SEVERITY_ERROR,bundle.getString("Error")+" "+bundle.getString("rate")+" "+bundle.getString("entry")+" "+bundle.getString("stepName")+" "+shipSubCode+" "+bundle.getString("not")+" "+bundle.getString("found")+" "+ex.getMessage(),""));
          bcontinue=false;
          return ;
       }



     }

  /**
    * The following customer related method sets entity values from variables holding totals  and persists entity
    * called by persist
    * @param args Unused.
    * @return void
    * @exception Application detail instance creation error.
    * @see 
    * does some status and date setting which should be moved to persist ??
    */
    public void persistrunt()
      {
       this.instance.setZ3xxztqrlxxxxxxxxxxxqtytotal(qtyTotal);
       ///this.instance.setZ3xxztqrlxxxxxxxxxxxqtytotal(totalqty);
       this.instance.setZ7xxzzfxhhxxxxxxxxxxstatusfl(mactive);// later


       bcontinue=true;
    }














	public boolean isPicked() {
		return picked;
	}

	public void setPicked(boolean picked) {
		this.picked= picked;
	}
	public boolean isMultipicked() {
		return multipicked;
	}

	public boolean isMoreActive() {
		return moreActive;
	}

	public boolean isNextShow() {
		return nextShow;
	}
	public void setNextShow(boolean nextShow) {
		this.nextShow= nextShow;
	}
	public boolean isRestEntity() {
		return restEntity;
	}
	public void setRestEntity(boolean restEntity) {
		this.restEntity= restEntity;
	}
	public boolean isEntityUpdated() {
		return entityUpdated;
	}


	public boolean isEntityDeleted() {
		return entityDeleted;
	}
     public Date getCurrentTime() {
        return new Date();
     }


// This reads & updates all the needed keys from client File. Different variables will hold the key values
// This is called once at the begining of the Persist routine. The keys are to be skipped if aborted. 
// The primarary key variable is key, others are arseq etc
          public String getNextp() {
            getCurrentUserFieldValue("l");// failing if POS square how paypal working??
             Yxxxch522xhhxxhxxxxxclient client =null;
            try{
             client =(Yxxxch522xhhxxhxxxxxclient) entityManager
			.createQuery(
			"select cc from Yxxxch522xhhxxhxxxxxclient cc where cc.a0xxukxxbvxxxxxxxxxxclientversion = :nKeyName and cc.zzxxu2oxxhxxxxxxxxxxowner2 = :owner2 order by cc.a0xxuobxbxxxxxxxxxxxsid asc")
			.setParameter("nKeyName","01")
			.setParameter("owner2", owner2Code)
			.getSingleResult();
         } catch ( NoResultException nre){
          client=null;
         } catch ( Exception e){
          client=null;
          FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
           FacesMessage.SEVERITY_ERROR,bundle.getString("client")+" "+bundle.getString("error")+" "+e.getMessage(), ""));
         }
            if (client != null) {
             yxxxch522xhhxxhxxxxxclientHome.setId( client.getA0xxuobxbxxxxxxxxxxxsid() );
             client = yxxxch522xhhxxhxxxxxclientHome.getDefinedInstance();

                  // first check whether Client Table is locked for Bus Date maintenance
                  // remove hard coded property names
                   int mstatusfl=client.getZexxzzfxhhxxxxxxxxxxstatusfl();
                   if (isBitSet(mstatusfl, _mpartial)){
                    FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("parameter")+ " / "+bundle.getString("client")+ " "+bundle.getString("table")+" "+bundle.getString("is")+" "+bundle.getString("now")+" "+bundle.getString("closed")+" "+bundle.getString("for")+" "+bundle.getString("maintenance")+", "+bundle.getString("try")+" "+bundle.getString("little")+" "+bundle.getString("later"),""));
                    //picked=false;
                    //multipicked=false;
	  return null;
                   }
                   Date currBusdate=client.getY3xxcxxrlxxxxxxxxxxxcurrbusdat(); //not used
                   String currBusdatestr=currBusdate.toString();
                   tax1Cert=client.getV6xxuxz1bvxxxxxxxxxxtax1code();
                   tax2Cert=client.getV7xxuxz2bvxxxxxxxxxxtax2code();
                   tax3Cert=client.getV8xxuxz3bvxxxxxxxxxxtax3code();
	   mnsorder=client.getS9xxuxcrbvxxxxxxxxxxcustomerpickn();
                    mnsorder=mnsorder+1;
                   client.setS9xxuxcrbvxxxxxxxxxxcustomerpickn(mnsorder);
                   yxxxch522xhhxxhxxxxxclientHome.setInstance(client);
                   yxxxch522xhhxxhxxxxxclientHome.allowUpdate();
                   String msonorde=""+mnsorder;
                   int mponolen=7;
                   String padding = new String();
                   int padlen=-1;
                   int len = Math.abs(mponolen) - msonorde.length();
                   if (len < 1) return msonorde.toString();
                    for (int i = 0 ; i < len ; ++i)
                     padding = padding + '0';
                    return (padlen < 0 ? padding + msonorde : msonorde + padding); 
                  // postgtresql has lpad(column, size, '0') which can be used in order by 
           }
	else{
                   FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                   FacesMessage.SEVERITY_INFO,bundle.getString("parameter")+ " / "+bundle.getString("client")+ " "+bundle.getString("table")+" "+bundle.getString("for")+" "+bundle.getString("next")+" "+bundle.getString("number")+" "+bundle.getString("not")+" "+bundle.getString("accessible"),""));
                   picked=false;
                   multipicked=false;
	 return null;
	}
      }


















            public boolean updateitemeCustomer(){
	    if (fpxxfq1a5xwwqqhxxxxxitem != null) {
              
	      fpxxfq1a5xwwqqhxxxxxitem.setB9xxzxxxlvxxxxxxxxxxspricold(fpxxfq1a5xwwqqhxxxxxitem.getB8fbzpxxbvxxxxxxxxxxselprice() == null ? BigDecimal.ZERO : fpxxfq1a5xwwqqhxxxxxitem.getB8fbzpxxbvxxxxxxxxxxselprice());
              if (fpxxfq1a5xwwqqhxxxxxitem.getB9xxzxxxlvxxxxxxxxxxspricold().compareTo(BigDecimal.ZERO)==0 && fpxxfq1a5xwwqqhxxxxxitem.getB8fbzpxxbvxxxxxxxxxxselprice().compareTo(BigDecimal.ZERO)==0)
		    fpxxfq1a5xwwqqhxxxxxitem.setF3xxzxxxlvxxxxxxxxxxavgprice((fpxxfq1a5xwwqqhxxxxxitem.getB9xxzxxxlvxxxxxxxxxxspricold().add(fpxxfq1a5xwwqqhxxxxxitem.getB8fbzpxxbvxxxxxxxxxxselprice())).divide(new                    
                BigDecimal("2.0")));
              // shipment detail contains qty shipped
              // force entity load
              BigDecimal currentQty=fpxxfq1a5xwwqqhxxxxxitem.getB0xxziqxlvxxsaxxxxxxquantity();
              //fpxxfq1a5xwwqqhxxxxxitem.setB0xxziqxlvxxsaxxxxxxquantity(fpxxfq1a5xwwqqhxxxxxitem.getB0xxziqxlvxxsaxxxxxxquantity() == null ? BigDecimal.ONE :fpxxfq1a5xwwqqhxxxxxitem.getB0xxziqxlvxxsaxxxxxxquantity().subtract(xoxxuq295xwwqqhxxxxxshipmentdetails.getZ3xxeqxxbvnxxxxxxxxxqtyshipped()));
              fpxxfq1a5xwwqqhxxxxxitem.setB0xxziqxlvxxsaxxxxxxquantity(fpxxfq1a5xwwqqhxxxxxitem.getB0xxziqxlvxxsaxxxxxxquantity() == null ? BigDecimal.ONE :fpxxfq1a5xwwqqhxxxxxitem.getB0xxziqxlvxxsaxxxxxxquantity().subtract(fpxxfq1a5xwwqqhxxxxxitem.getTempQuantity()));
              fpxxfq1a5xwwqqhxxxxxitem.setZcxxzxxxlvxxxxxxxxxxcushiqty(fpxxfq1a5xwwqqhxxxxxitem.getZcxxzxxxlvxxxxxxxxxxcushiqty() == null ? BigDecimal.ONE :fpxxfq1a5xwwqqhxxxxxitem.getZcxxzxxxlvxxxxxxxxxxcushiqty().add(fpxxfq1a5xwwqqhxxxxxitem.getTempQuantity()));
              try {
               fpxxfq1a5xwwqqhxxxxxitemHome.clearInstance();
               fpxxfq1a5xwwqqhxxxxxitemHome.setInstance(fpxxfq1a5xwwqqhxxxxxitem);
               fpxxfq1a5xwwqqhxxxxxitemHome.allowUpdate();
                return true;
		   } catch (Exception e) {
                     FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_ERROR,bundle.getString("Item")+" "+bundle.getString("update")+" "+bundle.getString("failed")+" "+bundle.getString("because")+" "+bundle.getString("of")+" "+e.getMessage(),""));
                  bcontinue=false;
			return bcontinue;
		   }
             }
             else{
               FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_ERROR,bundle.getString("Item")+" "+bundle.getString("not")+" "+bundle.getString("selected")+" "+bundle.getString("or")+" "+bundle.getString("does")+" "+" "+bundle.getString("not")+" "+bundle.getString("exist"),""));
              return false;
             }
            }







            public boolean updateCustomer(){
             if (jxxxuq201xwwqqhxxxxxcustomer != null) {
//              delivery charge ??? here this.setEMailingAddress(jxxxuq201xwwqqhxxxxxcustomer.getQ4xxhxxxbv24xxxxxxxximailaddr());
             jxxxuq201xwwqqhxxxxxcustomer.setZbxxcztxlxxxxxxxxxxxstatusfldt(Calendar.getInstance().getTime());

             }
		   return bcontinue;
            }








            public boolean addAnyAttachment(){
            return true;
            }
            public boolean updateShipmentOrPickUp(){
            return true;
            }







public void markAll() {
 // this needs to be here rather than xxxList bean because of persitence
 try {
                List<Trexuq255xwwqqhxxxxxshipment> listofStatus=trexuq255xwwqqhxxxxxshipmentList.getResultList() ;
	Iterator<Trexuq255xwwqqhxxxxxshipment> itr = listofStatus.iterator();
	while (itr.hasNext()) {
	  trexuq255xwwqqhxxxxxshipmentli = itr.next();
                    trexuq255xwwqqhxxxxxshipmentli.setZ7xxzzfxhhxxxxxxxxxxstatusfl(trexuq255xwwqqhxxxxxshipmentli.getZ7xxzzfxhhxxxxxxxxxxstatusfl()|mmark);
	}
                  FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                  FacesMessage.SEVERITY_INFO,bundle.getString("marking")+ " "+bundle.getString("done"),""));
 } catch (Exception e) {
	log.severe("Mark iterator error " + e.getMessage());
 }
 
}
	public void unmarkAll() {
		// this needs to be here rather than xxxList bean because of persitence
		try {
			List<Trexuq255xwwqqhxxxxxshipment> listofStatus = trexuq255xwwqqhxxxxxshipmentList
					.getResultList();
			Iterator<Trexuq255xwwqqhxxxxxshipment> itr = listofStatus.iterator();
			while (itr.hasNext()) {
				trexuq255xwwqqhxxxxxshipmentli = itr.next();
				trexuq255xwwqqhxxxxxshipmentli.setZ7xxzzfxhhxxxxxxxxxxstatusfl(trexuq255xwwqqhxxxxxshipmentli
						.getZ7xxzzfxhhxxxxxxxxxxstatusfl()
						& _mmark);
			}
                        FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("un")+" "+bundle.getString("marking")+ " "+bundle.getString("done"),""));
		} catch (Exception e) {
			log.severe("UnMark iterator error " + e.getMessage());
		}

	}

	public void toggleRowEditable(Integer id) {
          setTrexuq255xwwqqhxxxxxshipmentA0xxuobxbxxxxxxxxxxxsid(id);
		getDefinedInstance();
		if (this.instance != null) {
			if (!isBitSet(this.instance.getZ7xxzzfxhhxxxxxxxxxxstatusfl(), _mclosed)) {
				this.instance.setZ7xxzzfxhhxxxxxxxxxxstatusfl(this.instance
						.getZ7xxzzfxhhxxxxxxxxxxstatusfl()
						& ~(1<<_mconsign));
			} else {
				this.instance.setZ7xxzzfxhhxxxxxxxxxxstatusfl(this.instance
						.getZ7xxzzfxhhxxxxxxxxxxstatusfl()
						| mconsign);
			}

                        FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("edit")+ " "+bundle.getString("toggle")+ " "+bundle.getString("done"),""));

		} else {
			log.severe("toggleRowEditable error-this.instance null value ");
		}
	}


	public void toggleRowDeleteable(Integer id) {
           setTrexuq255xwwqqhxxxxxshipmentA0xxuobxbxxxxxxxxxxxsid(id);
		getDefinedInstance();
		if (this.instance != null) {
			if (isBitSet(this.instance.getZ7xxzzfxhhxxxxxxxxxxstatusfl(), _mdel)) {
				this.instance.setZ7xxzzfxhhxxxxxxxxxxstatusfl(this.instance
						.getZ7xxzzfxhhxxxxxxxxxxstatusfl()
						& ~(1<<_mdel));
			} else {
				this.instance.setZ7xxzzfxhhxxxxxxxxxxstatusfl(this.instance
						.getZ7xxzzfxhhxxxxxxxxxxstatusfl()
						| mdel);
			}

                        FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("delete")+ " "+bundle.getString("toggle")+ " "+bundle.getString("done"),""));

		} else {
			log.severe("toggleRowDeleteable error-this.instance null value ");
		}
	}


public boolean gethideAllMarked() {
 if (hideChosen){
                return true;
 }
 else {
             return false;
 }
}

public void sethideAllMarked(boolean chosen){
      this.hideChosen=chosen;
     }




public void deleteAllHidden() {
           // this needs to be here because of perstence
           // jay add more logic to check association ie referential integrity
                Integer count=0;

 try {
                List<Trexuq255xwwqqhxxxxxshipment> listofStatus=trexuq255xwwqqhxxxxxshipmentList.getResultList() ;
	Iterator<Trexuq255xwwqqhxxxxxshipment> itr = listofStatus.iterator();
         while (itr.hasNext()) {
	  trexuq255xwwqqhxxxxxshipmentli = itr.next();
                  if(isBitSet(trexuq255xwwqqhxxxxxshipmentli.getZ7xxzzfxhhxxxxxxxxxxstatusfl(),_mmark)){
                   count++;
                  }
                  
			}
                listofStatus=trexuq255xwwqqhxxxxxshipmentList.getResultList() ;
			itr = listofStatus.iterator();
			while (itr.hasNext()) {
			  trexuq255xwwqqhxxxxxshipmentli = itr.next();
                  if(isBitSet(trexuq255xwwqqhxxxxxshipmentli.getZ7xxzzfxhhxxxxxxxxxxstatusfl(),_mmark)){
		        // trexuq255xwwqqhxxxxxshipmentli.remove();
                  }
          }
 } catch (Exception e) {
    log.severe(" status field iterator error " + e.getMessage());
 }

}
 public void copyAllMarked() {
 // rename it to copyAllFlagged 
  //19

      try{
        // jay should reuse ComponentName rather than many variables like   itemChecked, listofstatus takes memory
        String oldKey="";
        String oldDescr="";
        int index = 0;
        for (Trexuq255xwwqqhxxxxxshipment itemChecked : trexuq255xwwqqhxxxxxshipmentList.getResultList()) {
            this.clearInstance();
            if (checked.get(index)) {
                entityManager.detach(itemChecked);
                      itemChecked.setA0xxuobxbxxxxxxxxxxxsid(null);
                       // add copy(1) etc using a variable to natural key field assign natural key itemChecked.setdollar{keyField?cap_first}(null);
                       oldKey=itemChecked.getA0xxunshbvxxxxxxxxxxshipcode();
                       if (oldKey.length()+5 <= 19){
                        oldKey=oldKey.substring(0,oldKey.length()-5);
                        itemChecked.setA0xxunshbvxxxxxxxxxxshipcode(oldKey+"-copy");
                       }
                       else{
                        itemChecked.setA0xxunshbvxxxxxxxxxxshipcode("c"+oldKey.substring(1));
                       } 
                      itemChecked.setZ7xxzzfxhhxxxxxxxxxxstatusfl(0);
                      itemChecked.setZ7xxzzfxhhxxxxxxxxxxstatusfl(itemChecked.getZ7xxzzfxhhxxxxxxxxxxstatusfl()| mcopy);
                       itemChecked.setZ8xxcztxlxxxxxxxxxxxstatusfldt(calendar.getTime());
                       itemChecked.setZcxxutoxlhxxxxxxxxxxowner(ownerCode);
                      this.setInstance(itemChecked);
                      //is this a copy of SYSTEM record
                      if (this.instance.getZzxxu2oxxhxxxxxxxxxxowner2().equals("SYSTEM")){
                       this.instance.setZzxxu2oxxhxxxxxxxxxxowner2(owner2Code);
                      }
                     this.persist();
                      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("copy")+ " "+bundle.getString("done"),""));

            }
            index++;
        }

        checked.clear(); 
      }
      catch ( Exception e){
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("checked")+ " "+bundle.getString("items")+ " "+bundle.getString("update")+ " "+bundle.getString("error")+" "+e.getMessage(),""));
      }

 }

 public void updateAllFlagged() {
 // this needs to be here because of perstence jay5 enhance this using getallflagged 
        int index = 0;

      try{
        // jay should reuse ComponentName rather than many variables like   itemChecked, listofstatus takes memory
        for (Trexuq255xwwqqhxxxxxshipment itemChecked : trexuq255xwwqqhxxxxxshipmentList.getResultList()) {
            this.clearInstance();
            if (checked.get(index)) {
                this.setInstance(itemChecked);
                this.update();
            }
            index++;
        }

        checked.clear(); 
                        FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("update")+ " "+bundle.getString("done"),""));

      }
      catch ( Exception e){
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("checked")+ " "+bundle.getString("items")+ " "+bundle.getString("update")+ " "+bundle.getString("error")+" "+e.getMessage(),""));
      }


    }

	public void writeAsIcalText() {
		// this needs to be here because of perstence jay5 enhance this using getallflagged 

      try{
        // jay should reuse ComponentName rather than many variables like   itemChecked, listofstatus takes memory
        int index = 0;
        for (Trexuq255xwwqqhxxxxxshipment itemChecked : trexuq255xwwqqhxxxxxshipmentList.getResultList()) {
            this.clearInstance();
            if (checked.get(index)) {
                this.setInstance(itemChecked);
                //this.update() put logic here
            }
            index++;
        }

        checked.clear(); 
      }
      catch ( Exception e){
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("checked")+ " "+bundle.getString("items")+ " "+bundle.getString("update")+ " "+bundle.getString("error")+" "+e.getMessage(),""));
      }


    }
   public void deleteAllRecentCopied() {
      // uses todays date and stausfl 2 so includes imported, scope is group members,item,customer etc 
      int index=0;
      try{
        index=0;
        count=0;
        calendar.add(Calendar.DATE, -5);
        Date toDay = calendar.getTime();
        for (Trexuq255xwwqqhxxxxxshipment itemChecked : trexuq255xwwqqhxxxxxshipmentList.getFlaggedAsList(mcopy)) {
            //
            this.clearInstance();
            // extra check needed if duplicate keys need to check using sid?
            if (isBitSet(itemChecked.getZ7xxzzfxhhxxxxxxxxxxstatusfl(),_mcopy)
             && itemChecked.getZ8xxcztxlxxxxxxxxxxxstatusfldt().after( toDay)) {
             this.setInstance(itemChecked);
	     superdotremove();
             count++;


            }
            index++;
        }
             timeStamp = new SimpleDateFormat("yyyy.MM.dd.HH.mm.ss").format(new Date());
             FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
              FacesMessage.SEVERITY_INFO,bundle.getString("deleted")+" "+count+", "+bundle.getString("of")+" "+index+" "+"at"+" "+timeStamp,""));
             this.clearInstance();
      }
      catch ( Exception e){
       FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
        FacesMessage.SEVERITY_INFO,bundle.getString("checked")+ " "+bundle.getString("items")+ " "+bundle.getString("delete")+ " "+bundle.getString("error")+" "+e.getMessage(),""));
      }


   }

   public void closeRecord(Trexuq255xwwqqhxxxxxshipment entity) {

      String key="";    
      //not all entities have key value 
      try{
            this.clearInstance();
            this.setInstance(entity);
            this.instance.setZ7xxzzfxhhxxxxxxxxxxstatusfl(mclosed);
            superdotupdate();//dont change statusfldt
             FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
              FacesMessage.SEVERITY_INFO,bundle.getString("Marked")+" "+bundle.getString("as")+" "+bundle.getString("closed")+", "+" "+bundle.getString("key")+" "+key,""));

      }catch ( Exception e){
       FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
        FacesMessage.SEVERITY_INFO,bundle.getString("Status")+ " "+bundle.getString("update")+ " "+bundle.getString("error")+ ", "+bundle.getString("key")+" "+key+" "+e.getMessage(),""));
      }


   }


   public void closeOldRecords(int days) {
      // uses todays date 
      int index=0;
      try{
        index=0;
        count=0;
        Date toDay = calendar.getTime();
        for (Trexuq255xwwqqhxxxxxshipment itemChecked : trexuq255xwwqqhxxxxxshipmentList.getOldByList(days)) {
            //
            this.clearInstance();
            if (!isBitSet(itemChecked.getZ7xxzzfxhhxxxxxxxxxxstatusfl(),_mclosed)){
             itemChecked.setZ7xxzzfxhhxxxxxxxxxxstatusfl(mclosed);
             this.setInstance(itemChecked);
	     superdotupdate();//dont change statusfldt
             count++;
            }
            index++;
        }
             timeStamp = new SimpleDateFormat("yyyy.MM.dd.HH.mm.ss").format(new Date());
             FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
              FacesMessage.SEVERITY_INFO,bundle.getString("updated")+" "+count+", "+bundle.getString("of")+" "+index+" "+"at"+" "+timeStamp,""));

      }
      catch ( Exception e){
       FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
        FacesMessage.SEVERITY_INFO,bundle.getString("checked")+ " "+bundle.getString("items")+ " "+bundle.getString("delete")+ " "+bundle.getString("error")+" "+e.getMessage(),""));
      }


   }
   public void csvZapOldRecords(int days) {
      // uses todays date 
      int index=0;
      try{
        index=0;
        count=0;
        Date toDay = calendar.getTime();
        for (Trexuq255xwwqqhxxxxxshipment itemChecked : trexuq255xwwqqhxxxxxshipmentList.getOldByList(days)) {
            // if we produce csv then they can be downloaded to local machine
            this.clearInstance();
            itemChecked.setZ7xxzzfxhhxxxxxxxxxxstatusfl(mclosed);
             this.setInstance(itemChecked);
	     superdotremove();//give msg about creating csv to download
             count++;

            index++;
        }
             timeStamp = new SimpleDateFormat("yyyy.MM.dd.HH.mm.ss").format(new Date());
             FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
              FacesMessage.SEVERITY_INFO,bundle.getString("updated")+" "+count+", "+bundle.getString("of")+" "+index+" "+"at"+" "+timeStamp,""));

      }
      catch ( Exception e){
       FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
        FacesMessage.SEVERITY_INFO,bundle.getString("checked")+ " "+bundle.getString("items")+ " "+bundle.getString("delete")+ " "+bundle.getString("error")+" "+e.getMessage(),""));
      }


   }




   public void deleteAllFlagged() {
  // this needs to be here because of perstence jay5 enhance this using getallflagged 
      int index=0;
      try{
        // jay should reuse ComponentName rather than many variables like   itemChecked, listofstatus takes memory
        for (Trexuq255xwwqqhxxxxxshipment itemChecked : trexuq255xwwqqhxxxxxshipmentList.getResultList()) {
            if (checked.get(index)) {
             index++;
            }
        }
        if(index > 5){
             FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
             FacesMessage.SEVERITY_INFO,bundle.getString("Please")+" "+bundle.getString("select")+" "+bundle.getString("upto")+" "+bundle.getString("five"),""));
             return;
        }
        index=0;
        count=0;
        for (Trexuq255xwwqqhxxxxxshipment itemChecked : trexuq255xwwqqhxxxxxshipmentList.getResultList()) {
            // restrict to 5 at a time to avoid UT000047 excceding max parameters 
            this.clearInstance();
            // extra check needed if duplicate keys need to check using sid?
            if (checked.get(index)) {
             //delete details if any first
              deleteDetails(itemChecked.getA0xxuobxbxxxxxxxxxxxsid());

             this.setInstance(itemChecked);
	     superdotremove();
             count++;



            }
            index++;
        }
        checked.clear(); 
             timeStamp = new SimpleDateFormat("yyyy.MM.dd.HH.mm.ss").format(new Date());
             FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
             FacesMessage.SEVERITY_INFO,bundle.getString("deleted")+" "+count+" "+bundle.getString("selected")+" "+"Shipment"+" "+bundle.getString("and")+" "+bundle.getString("related")+" "+countB+" "+bundle.getString("and")+" "+bundle.getString("details")+" "+countD+" "+bundle.getString("entries")+" "+"at"+" "+timeStamp,""));

      }
      catch ( Exception e){
       FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("checked")+ " "+bundle.getString("items")+ " "+bundle.getString("delete")+ " "+bundle.getString("error")+" "+e.getMessage(),""));
      }


   }




     public void deleteDetails(Integer sid) {
      try{

        // get all details for this sid as parent, use entityLessStatusDetailedList not entityDetailedList to get all includind -1
        for (Xoxxuq295xwwqqhxxxxxshipmentdetails detail : trexuq255xwwqqhxxxxxshipmentList.entityLessStatusDetailedList(sid,-2)) {//-2 means any value ie not -1 or >0
            xoxxuq295xwwqqhxxxxxshipmentdetailsHome.setInstance(detail);
	    xoxxuq295xwwqqhxxxxxshipmentdetailsHome.remove();
            entityManager.flush();
            countD++;
        }
      

      }
      catch ( Exception e){
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("detail")+ " "+bundle.getString("remove")+ " "+bundle.getString("error")+" "+e.getMessage(),""));
      }
    }



 public void toggleAllFlagged() {
 // this needs to be here because of perstence jay5 enhance this using getallflagged 
      try{
        // jay should reuse ComponentName rather than many variables like   itemChecked, listofstatus takes memory
        for (Trexuq255xwwqqhxxxxxshipment itemChecked : trexuq255xwwqqhxxxxxshipmentList.getResultList()) {
            this.clearInstance();
            if (checked.get(itemChecked.getA0xxuobxbxxxxxxxxxxxsid())) {
                this.setInstance(itemChecked);
			if (isBitSet(this.instance.getZ7xxzzfxhhxxxxxxxxxxstatusfl(), _mmark)) {
				this.instance.setZ7xxzzfxhhxxxxxxxxxxstatusfl(this.instance
						.getZ7xxzzfxhhxxxxxxxxxxstatusfl()
						& ~(1<<_mmark));
			} else {
				this.instance.setZ7xxzzfxhhxxxxxxxxxxstatusfl(this.instance
						.getZ7xxzzfxhhxxxxxxxxxxstatusfl()
						| mmark);
             
			}
                this.update();
            }
        }
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("marking")+ " / "+bundle.getString("un")+" "+bundle.getString("marking")+ " "+bundle.getString("done"),""));
        checked.clear(); 
      }
      catch ( Exception e){
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("checked")+ " "+bundle.getString("items")+" "+ " "+bundle.getString("update")+ " "+bundle.getString("error")+" "+e.getMessage(),""));
      }


 }




	public void toggleRowMarked(Integer id) {
           setTrexuq255xwwqqhxxxxxshipmentA0xxuobxbxxxxxxxxxxxsid(id);
		getDefinedInstance();
		if (this.instance != null) {
			if (isBitSet(this.instance.getZ7xxzzfxhhxxxxxxxxxxstatusfl(), _mmark)) {
				this.instance.setZ7xxzzfxhhxxxxxxxxxxstatusfl(this.instance
						.getZ7xxzzfxhhxxxxxxxxxxstatusfl()
						& ~(1<<_mmark));
                     // unmark should reset del and update tags as well
				this.instance.setZ7xxzzfxhhxxxxxxxxxxstatusfl(this.instance
						.getZ7xxzzfxhhxxxxxxxxxxstatusfl()
						& ~(1<<_mdel));
				this.instance.setZ7xxzzfxhhxxxxxxxxxxstatusfl(this.instance
						.getZ7xxzzfxhhxxxxxxxxxxstatusfl()
						& ~(1<<_mconsign));
			} else {
				this.instance.setZ7xxzzfxhhxxxxxxxxxxstatusfl(this.instance
						.getZ7xxzzfxhhxxxxxxxxxxstatusfl()
						| mmark);
             
			}
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("marking")+ " / "+bundle.getString("un")+bundle.getString("marking")+ " "+bundle.getString("done"),""));
		} else {
			log.severe("markThis error-this.instance null value,id is "+id);
		}

	}







// same as checking for "1B"



	

 public String sanitizeApply(String unsafe) throws IOException{
         String safe = Jsoup.clean(unsafe, Whitelist.relaxed().addTags("iframe").addAttributes("p", "style"));
         return unsafe;

 }

    /**
    * The following method sanitizes ie drops unwanted html tags to reduce xss attack 
    * called by xxxlist.send (email)  and clobdataEdit and theme pages etc
    * @param args unsafe data entered by untrusted user 
    * @return safe string
    * @exception IOException
    * @see 
    *  use sanitize wherever clbdata is used or in future used 
    *  default is is ignore sanitize but added a new method sanitizeApply
    */  

 public String sanitize(String unsafe) throws IOException{
         //String safe = Jsoup.clean(unsafe, Whitelist.relaxed().addTags("iframe").addAttributes("p", "style"));
         return unsafe;

 }

/*      addTags for tag, addAttributes for attribute within a specific tag only
	.addTags("meta", "title", "script", "iframe")
	.addAttributes("meta", "charset")
	.addAttributes("iframe", "src")
	.addProtocols("iframe", "src", "http", "https");
*/


     // generate 
















/**
*  cartpersist can be used where detail items are iterated over as in shopping cart or back office order processing for one or more items
*  this method is called for one item at a time
*  it has 3 flavours- o if a new item is added, u if existing item is removed , c if some change like qty for any of the items
*  o a new item is added
*    Po null means say a new order as well
*    Po not null means a new item for say an existing order
*  u existing item removed from say order
*  c change existing item from say order or invoice ...
*   call update
*    updatecdetailsetValues
*    showrunt recalcultes and updates variables
*    persistrunt copies the variable values into instance property values
*    superdotupdate to persist
*see R3RestClient SyncDataOrders 
*
*/
    Integer currentDetailLine=0;
    public String cartpersist(Integer cpoId,String cposts,Integer currentCount, BigDecimal quantity) {
     // cposts is o if add and currentCount holds last line #, u if remove, c if change for existing and for both c & u 
     // currentCount holds first time call or not to decide on initializing order totals to zeroes if first time
     // currentDetailline will be used to hold the value to pass to showrun()
     currentDetailLine=currentCount;
     cartPoStatus=cposts;
     if (cposts.equals("u")){
      //tempCount=tempCount-1;//  already done
      xoxxuq295xwwqqhxxxxxshipmentdetailsHome.setXoxxuq295xwwqqhxxxxxshipmentdetailsA0xxuobxbxxxxxxxxxxxsid(cpoId);
      xoxxuq295xwwqqhxxxxxshipmentdetails = xoxxuq295xwwqqhxxxxxshipmentdetailsHome.getDefinedInstance();
      // couldnt get child remove from db working, need to try remove from collection as well
      // this may be better because there is history now and user may buy later
      // cant use statusfl because only cudetails have these fields, use line field with -1 to denote deleted
      //-1 means as if removed/deleted
      xoxxuq295xwwqqhxxxxxshipmentdetails.setB1xxzo11bvlxxxxxxxxxline(-1);
      xoxxuq295xwwqqhxxxxxshipmentdetailsHome.clearInstance();
      xoxxuq295xwwqqhxxxxxshipmentdetailsHome.setInstance(xoxxuq295xwwqqhxxxxxshipmentdetails);
      xoxxuq295xwwqqhxxxxxshipmentdetailsHome.superdotupdate();
      // we need to populate amount variables and item entity
      // force parent to match to details because parent totals getting wrong values
      updateParentFromDetails(this.instance.getA0xxuobxbxxxxxxxxxxxsid());

      return "updated";
     }
     if (cposts.equals("c") ){
      // c means changes like qty , ship code etc
      // call showrunt() 
      xoxxuq295xwwqqhxxxxxshipmentdetailsHome.setXoxxuq295xwwqqhxxxxxshipmentdetailsA0xxuobxbxxxxxxxxxxxsid(cpoId);
      xoxxuq295xwwqqhxxxxxshipmentdetails = xoxxuq295xwwqqhxxxxxshipmentdetailsHome.getDefinedInstance();
      // cannot rely on lastItemLine because each call to here gets reset to 1 , use the persisted field line in detail
      // and use in showrunt
      // currentCount is used to indicate first in loop or not
      // totals can be all zeroes,if the order was created before, and need to be populated
      

      //update with new quantity
      xoxxuq295xwwqqhxxxxxshipmentdetails.setZ3xxeqxxbvnxxxxxxxxxqtyshipped(quantity);


      // following needed to avoid lazy loading exception for customer and bypass actual update of order


      String customerId= getCurrentUserFieldValue("c");
      try{
			                 jxxxuq201xwwqqhxxxxxcustomer = (Jxxxuq201xwwqqhxxxxxcustomer) entityManager
 					.createQuery(
 							"select cc from Jxxxuq201xwwqqhxxxxxcustomer cc where cc.a0xxukxxbvxxxxxxxxxxcustomer = :customerId and cc.zzxxu2oxxhxxxxxxxxxxowner2 = :owner2 ")
 					.setParameter("customerId", customerId)
 					.setParameter("owner2", owner2Code)
 					.getSingleResult();
    } catch ( Exception e){
        //return "";
    }

      ///need the update detail and associated entities based on qty change, but avoid bringing back detail line -1 back 
      // update affects details as well , so should not be used  for multi items do individual superdotupdate 
      //update();
      superdotupdate();//may be not needed, because next call also updates parent instance
      showrunt();// need to update detail linetotals etc because of any change, check nextshow value 
      ///call updateParent for all fns
 
      // force parent to match to details because parent totals getting wrong values
      updateParentFromDetails(this.instance.getA0xxuobxbxxxxxxxxxxxsid());
      // 
      showrunt();// removed comment, calls setParentFromDetails , no need updateParent does it
            if(!bcontinue){
             return "";
            }
      xoxxuq295xwwqqhxxxxxshipmentdetails.setB1xxzo11bvlxxxxxxxxxline(tempCount);
      xoxxuq295xwwqqhxxxxxshipmentdetailsHome.clearInstance();
      xoxxuq295xwwqqhxxxxxshipmentdetailsHome.setInstance(xoxxuq295xwwqqhxxxxxshipmentdetails);
      xoxxuq295xwwqqhxxxxxshipmentdetailsHome.superdotupdate();


      return "updated";
     }
     // o means status open/add order/details but cpoId null means new order/details and not null means existing order bur new detailsold
     // new detail is like next item and clear out old detail values as in more()
     if (cposts.equals("o") && cpoId != null){
       qtyOrdPrev=new BigDecimal("0.0");
       detailLtO=new BigDecimal("0.0");
       detailbaseamtO=new BigDecimal("0.0");

       cartPoPicked=true;
       // load this po -> this.instance because details copies values from it, in backend operation ie if via transaction it stays as this.instance
       //this.setId(cpoId);
       // persist checks picked or not and reuses ie override old venorder but adds new to order details 
       // persist calls showtemprunt() which calls createcdetails followed by showrunt() which updates cdetails fields
       // use quantity entered value in createcDetails
       // it then will update customer and item and ends by updating order and details
       // calculate and set lastItemLine because each call to here gets latItemLine reset to 1. use query count against detail to find line count
       // and set lastItemLine
      }
       setLastItemLine(new Integer(currentDetailLine+1)); 
       persist();//this one line does lot of logic. CuordersHome persist creates new orderdetails under createcdetails method
       if(bcontinue){
      /* too much info, look into for back office only
       if(customIdentity.getClientMsgLevel().contains("D")){
        FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
         FacesMessage.SEVERITY_INFO,bundle.getString("saved")+" "+"Shipment"+" "+" "+"at"+" "+timeStamp,""));
       }
      */
        return "persisted";
       }else{
        return "";
       }
    }








    public EntityManager getEntityManager()
    {
        //return emf.createEntityManager();
        return entityManager;
    }


    public String createValueExpression(String st){
     return st;
    }
    
    public void setId(Integer id){
      this.id=id;
    }
    public Integer getId(){
     //if(id==null){
      //id=0;// avoid null exception in edit viewparam, null is needed if new entity
     //}
     return id;
    }
    public Trexuq255xwwqqhxxxxxshipment getInstance(){
        if (instance == null) {
            if (id == null) {
                return createInstance();
            }
            else {
                instance=entityManager.find(Trexuq255xwwqqhxxxxxshipment.class,id);
                return instance;
            }
        }
        else {
            return instance;
        }
   }

   /**
    * Set/change the entity being managed.
    */
   public void setInstance(Trexuq255xwwqqhxxxxxshipment instance)
   {
      ///setDirty(this.instance, instance);
      this.instance = instance;
   }
   /**
    * Clear the managed entity (and id), allowing the {@link EntityHome} to be
    * reused.
    */
   public void clearInstance()
   {
      setInstance(null);
      setId(null);
   }
   /**
    * Load the instance if the id is defined otherwise create a new instance
    * <br />
    * Utility method called by {@link #getInstance()} to load the instance from 
    * the Persistence Context if the id is defined. Otherwise a new instance is 
    * created.
    * 
    * @see "#find()"
    * @see "#createInstance() at top of this source"
    */
   protected void initInstance()
   {
      if ( isIdDefined() )
      {
         if ( !isTransactionMarkedRollback() )
         {
            //we cache the instance so that it does not "disappear"
            //after remove() is called on the instance
            //is this really a Good Idea??
            //setInstance( find() );
            setInstance(null);
         }
      }
      else
      {
         setInstance( createInstance() );
      }
   }
   public boolean isTransactionMarkedRollback(){
    return false;
   }
   /**
    * Flush any changes made to the managed entity instance to the underlying
    * database. 
    * <br />
    * If the update is successful, a log message is printed, a 
    * {@link javax.faces.application.FacesMessage} is added and a transaction 
    * success event raised.
    * 
    * @see "Home#updatedMessage()"
    * @see "Home#raiseAfterTransactionSuccessEvent()"
    * 
    * @return "updated" if the update is successful
    */
   @Transactional
   public String superdotupdate()
   {
      ///joinTransaction();
      ///getEntityManager().flush();
      ///updatedMessage();
      ///raiseAfterTransactionSuccessEvent();
           // if SH or EH then log changes (except editlog changes) to Xxxxch82bxhhhhhxxxxxeditlog  
           if(customIdentity.hasRole("SH") ||customIdentity.hasRole("EH")){
            xxxxch82bxhhhhhxxxxxeditlogHome.clearInstance();
            xxxxch82bxhhhhhxxxxxeditlog=xxxxch82bxhhhhhxxxxxeditlogHome.getInstance();
            xxxxch82bxhhhhhxxxxxeditlog.setA0xxukxxbvxxxxxxxxxxdatabasenm("Shipment");
            xxxxch82bxhhhhhxxxxxeditlog.setZ1xxzxxrbvxxxxxxxxxxrecordno(this.instance.getA0xxuobxbxxxxxxxxxxxsid());
            xxxxch82bxhhhhhxxxxxeditlog.setZexxcxxrlxxxxxxxxxxxnewdate(Calendar.getInstance().getTime());
            xxxxch82bxhhhhhxxxxxeditlogHome.superdotupdate();
            FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
             FacesMessage.SEVERITY_WARN,bundle.getString("Shipment")+" "+bundle.getString("updated")+" "+bundle.getString("and")+", "+bundle.getString("logged")+" "+bundle.getString("in")+" "+bundle.getString("editlog"),""));
            FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
             FacesMessage.SEVERITY_WARN,bundle.getString("Remember")+", "+bundle.getString("journal")+" "+bundle.getString("entries")+" "+bundle.getString("created")+", "+bundle.getString("need")+" "+bundle.getString("to")+" "+bundle.getString("be")+" "+bundle.getString("deleted"),""));
           }
      this.instance=entityManager.merge(this.instance);
      ///id=this.instance.getA0xxuobxbxxxxxxxxxxxsid();
      /// why ? jpa merge should be ok entityManager.persist(this.instance);
      return "updated";
   }

   /**
    * Persist unmanaged entity instance to the underlying database. 
    * If the persist is successful, a log message is printed, a 
    * {@link javax.faces.application.FacesMessage } is added and a transaction 
    * success event raised.
    * 
    * @see "Home#createdMessage()"
    * @see "Home#raiseAfterTransactionSuccessEvent()"
    * 
    * @return "persisted" if the persist is successful
    */
   @Transactional
   public String superdotpersist()
   {
      ///getEntityManager().persist( getInstance() );
      ///getEntityManager().flush();
      ///assignId( PersistenceProvider.instance().getId( getInstance(), getEntityManager() ) );
      ///createdMessage();
      ///raiseAfterTransactionSuccessEvent();
      //added sanitize if clob data
      //duplicatexxxExists should be called, as needed, before calling this method to avoid duplicate keys     
      entityManager.persist(this.instance);
      id=this.instance.getA0xxuobxbxxxxxxxxxxxsid();
      return "persisted";
   }
   
   /**
    * Remove managed entity instance from the Persistence Context and the 
    * underlying database.
    * If the remove is successful, a log message is printed, a 
    * {@link javax.faces.application.FacesMessage} is added and a transaction 
    * success event raised.
    * 
    * @see "Home#deletedMessage()"
    * @see "Home#raiseAfterTransactionSuccessEvent()"
    * 
    * @return "removed" if the remove is successful
    */
   @Transactional
   public String superdotremove()
   {
      ///getEntityManager().remove( getInstance() );
      ///getEntityManager().flush();
      ///deletedMessage();
      ///raiseAfterTransactionSuccessEvent();
     try{
      this.instance=entityManager.merge(this.instance);
      id=this.instance.getA0xxuobxbxxxxxxxxxxxsid();
      entityManager.remove(this.instance);
      // to catch runtime integrity violation exception, flush does immediate remove
      entityManager.flush();
      id=null;
     } catch ( Exception e){
          FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("delete")+" "+ bundle.getString("error")+" "+e.getMessage(),""));
           bcontinue=false;
           return null;
     }

      return "removed";
   }
   /**
    * Returns true if the entity instance is managed
    */
   @Transactional
   public boolean isManaged()
   {
     /// return getInstance()!=null && 
     ///       getEntityManager().contains( getInstance() );
     return id != null;
   }

   /**
    * Invokes this action method via f:viewaction entry on a page, replaces seam pages.xml action 
    * called by web pages like login.xhtml, checkout, unsc etc, which in turns are invoked via activation link entries
    * in emails .
    * there is a takeAction method in r3cart bean(shopping cart ) to take care of checkout.xhtml viewAction
    * viewId is checked to pick the submethod and request parameters are  used to call appropriate action method. 
    * no method parameter but url parameters are used 
    * no exception caught here .
    * 
    * @return "null" 
    */
   public String takeAction(){
    // all pages invoke this method and there can be error pages when rq can be null
    if(req==null){
     return null;
    }

    String viewId = facesContext.getViewRoot().getViewId();
/*
    if (viewId.contains("shoauthverify.")){
     if (req.getParameter("hmac") != null ){
      r3RestClient.shoauthverify(req.getParameter("code"),req.getParameter("hmac"),req.getParameter("shop"),req.getParameter("state"),req.getParameter("timestamp"));
     }
    }
    if (viewId.contains("shwebhook.")){
     if (req.getParameter("hmac") != null ){
      r3RestClient.shoauthverify(req.getParameter("code"),req.getParameter("hmac"),req.getParameter("shop"),req.getParameter("state"),req.getParameter("timestamp"));
     }
*/
     return null;
    }



   
    /**
    * The following method puts restrictions on bean access on top of menu render protection or url entered outside menue
    * @param none
    * @return none or error page
    * @exception none
    * @see 
    *  added logic to allow public schedule as calendar
    */ 
   public String restrict(){

    if (!identity.isLoggedIn()) {
     return "error.xhtml?faces-redirect=true";
    }
    String r2=customIdentity.getRestrict2();//forces to refresh hibernate query cache, usefl for debug
    String a1=customIdentity.getAllow1();
    String viewId = facesContext.getViewRoot().getViewId();
    // jay add logic to make sure these are not null and saved as lower case in useredit
    if (!customIdentity.getRestrict2().isEmpty() && customIdentity.getRestrict2().equals("all")){
     if ((!customIdentity.getAllow1().isEmpty() && viewId.contains(customIdentity.getAllow1())) 
          || (!customIdentity.getAllow2().isEmpty() && viewId.contains(customIdentity.getAllow2())) || 
          (!customIdentity.getAllow3().isEmpty() && viewId.contains(customIdentity.getAllow3())) ){
          return null;
         }else{
          return "error.xhtml?faces-redirect=true";
         }
    }
    if ((!customIdentity.getRestrict2().isEmpty() && viewId.contains(customIdentity.getRestrict2()))
          || (!customIdentity.getRestrict3().isEmpty() && viewId.contains(customIdentity.getRestrict3())) ){
          return "error.xhtml?faces-redirect=true";
    }
    // admin
    if ((viewId.contains("userList") || viewId.contains("userEdit")) && customIdentity.hasRole("IH")){
     return null;
    } 
    if (viewId.contains("SqlAdmin")){
     if (customIdentity.hasRole("UH")){
      if ( (viewId.contains("SqlAdmin.") && customIdentity.isMasterSite()) || viewId.contains("SqlAdmin-") ){
      /* if ((viewId.contains("SqlAdmin.") && ((req.getServerName().contains("raaspi.com") && !req.getServerName().contains(".raaspi.com") && !req.getServerName().contains(".lraaspi.com"))
                  || req.getServerName().contains(masterSiteCode)
                  ||  (req.getServerName().contains("www.raaspi.com") ||  req.getServerName().contains("raaspi.lraaspi.com")))) || viewId.contains("SqlAdmin-")){
      */   
    return null;
      }else{
       return "error.xhtml?faces-redirect=true";
      }
     }else{
      return "error.xhtml?faces-redirect=true";
     }
    }
    //quikfix later change clobdataentity name to use f instead of u
    if (viewId.contains("clobdataEdit") || viewId.contains("homeThemePreview")){
     if ((req.getServerName().startsWith("myflow") || req.getServerName().contains(masterSiteCode)) && (customIdentity.hasRole("PH") 
         || customIdentity.hasRole("UH") || customIdentity.hasRole("UQ"))) {
         return null;
     }else{
      if ((customIdentity.getProduct().equals("f") && customIdentity.getSubProduct().equals("s")) && (customIdentity.hasRole("PH") 
        || customIdentity.hasRole("VH") || customIdentity.hasRole("UH") || customIdentity.hasRole("UQ"))) {
         return null;
      }else{
        if ( customIdentity.hasRole("UH") || customIdentity.hasRole("UQ") ) {
         return null;
        }
      }
     }
     return "error.xhtml?faces-redirect=true";
    }
    // check for xxxedit. to avoid checking for editEasy
    // allow PH to delete/edit but own records, existing logic checks for own records unless UH
    if (viewId.contains("blobdataEdit.") ){
      if ((customIdentity.getProduct().equals("f") && customIdentity.getSubProduct().equals("s")) && (customIdentity.hasRole("PH") 
         || customIdentity.hasRole("VH") || customIdentity.hasRole("UH") || customIdentity.hasRole("UQ"))) {
         return null;
      }else{
        if ( customIdentity.hasRole("UH") || customIdentity.hasRole("UQ") || customIdentity.hasRole("PH")) {
         return null;
        }
      }
     return "error.xhtml?faces-redirect=true";
    }


    if (viewId.contains("blobdataEditEasy") ){
     //test for raaspi site, EditEasy does not allow edit/delete only in above edit 
     // check if master site, a subdomain serverName can also include master site name 
     if( customIdentity.isMasterSite() 
           && (customIdentity.hasRole("PH") || customIdentity.hasRole("UH") || customIdentity.hasRole("UQ")) ) {
         return null;
     }
     return "error.xhtml?faces-redirect=true";
    }
    // this overides menue Role/level only if url is directly typed in, since menue will not show if role/level wrong

    if ((!customIdentity.getAllow1().isEmpty() && viewId.contains(customIdentity.getAllow1())) 
          || (!customIdentity.getAllow2().isEmpty() && viewId.contains(customIdentity.getAllow2())) || 
          (!customIdentity.getAllow3().isEmpty() && viewId.contains(customIdentity.getAllow3())) ){
          return null;
    }
    // this overides menue Role/level only if url is directly typed in, since menue will not show if role/level wrong

    if ((!customIdentity.getAllow1().isEmpty() && viewId.contains(customIdentity.getAllow1())) 
          || (!customIdentity.getAllow2().isEmpty() && viewId.contains(customIdentity.getAllow2())) || 
          (!customIdentity.getAllow3().isEmpty() && viewId.contains(customIdentity.getAllow3())) ){
          return null;
    }

    //this checks menue rules to render or not
                             if(!((customIdentity.hasRole("UH")||customIdentity.hasRole("UQ") ) )){
                              return "error.xhtml?faces-redirect=true";
                             }else{
                              return null;
                             }
   }

/*
 childpojo for onetoManyCollection ie Forign Table's Entity: com.rcomputer.genapp.model.Xoxxuq295xwwqqhxxxxxshipmentdetails
*/

    public List<Xoxxuq295xwwqqhxxxxxshipmentdetails> getXoxxuq295xwwqqhxxxxxshipmentdetailses() {
        return getInstance() == null ? 
            null : new ArrayList<Xoxxuq295xwwqqhxxxxxshipmentdetails>( getInstance().getXoxxuq295xwwqqhxxxxxshipmentdetailses() );
    }

}




