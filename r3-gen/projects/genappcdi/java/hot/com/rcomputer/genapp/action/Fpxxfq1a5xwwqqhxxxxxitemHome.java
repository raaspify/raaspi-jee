


/** Generated By EntityHome.java.ftl on 11-Jul-2023 11:52:03 AM
*Entity Home
*parameters passed: action.package and model.package
*/

package com.rcomputer.genapp.action;
import com.rcomputer.genapp.model.*;
import org.apache.deltaspike.data.api.AbstractEntityRepository;
import org.apache.deltaspike.data.api.Repository;
import org.picketlink.Identity;
import org.picketlink.credential.DefaultLoginCredentials;
import org.picketlink.idm.IdentityManagementException;
import org.picketlink.authentication.AuthenticationException;
import org.picketlink.common.exceptions.PicketLinkException;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.Date;
import java.util.Calendar;
import java.util.Locale;
import java.util.Currency;
import java.util.Collection;
import java.lang.String;
import java.lang.StringBuilder;
import java.text.SimpleDateFormat;
import java.text.NumberFormat;
import javax.faces.application.FacesMessage;
import javax.faces.event.ValueChangeEvent;
import javax.faces.model.SelectItem;
import javax.faces.model.SelectItemGroup;
import javax.annotation.PostConstruct;
import javax.faces.view.ViewScoped;
import javax.inject.Inject;
import javax.transaction.Transactional;
import javax.faces.event.ActionEvent;
import javax.inject.Named;
import javax.enterprise.inject.Instance;
import java.util.Iterator;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import javax.persistence.*;
import javax.faces.context.ExternalContext;
import javax.faces.context.FacesContext;
import javax.faces.component.UIComponent;
import javax.faces.validator.ValidatorException;
import java.io.IOException;
import java.io.OutputStream;
 import java.io.StringReader;
 import java.io.InputStreamReader;

import java.io.FileWriter;
import java.io.BufferedWriter;
import java.io.Serializable;
import java.io.Writer;

import java.nio.charset.StandardCharsets;
import java.nio.file.Paths;
import java.nio.file.Files;
import java.nio.file.Path;


import java.util.logging.Logger;
import java.util.ResourceBundle;



//move these under genCandidate
//import java.io.File; model already has File class, use qualified java.io.File instead of import
import java.io.StringWriter;
import org.apache.tools.ant.Project;
import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.text.StringEscapeUtils;
import org.apache.tools.ant.ProjectHelper;
import javax.servlet.Servlet;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.util.HashMap;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.servlet.http.Part;


import javax.jms.ConnectionFactory;
import javax.jms.Destination;
import javax.jms.Connection;
import javax.jms.Session;
import javax.jms.MessageProducer;
import javax.jms.MessageConsumer;
import javax.jms.TextMessage;
import javax.jms.QueueSender;
import javax.jms.QueueReceiver;
import javax.jms.QueueSession;
import javax.naming.InitialContext;
import org.custommonkey.xmlunit.DetailedDiff;
import org.custommonkey.xmlunit.Diff;
import org.custommonkey.xmlunit.Difference;
import org.xml.sax.SAXException;



 import java.awt.image.BufferedImage;
 import java.awt.Graphics2D;
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
 import javax.imageio.ImageIO;
 import net.coobird.thumbnailator.*;
 import org.jsoup.Jsoup;
 //put conditional import
 import org.jsoup.nodes.Document;
 import org.jsoup.nodes.Element;
 import org.jsoup.select.Elements;
 import org.jsoup.safety.Whitelist;
 import org.jsoup.nodes.TextNode;
 import org.jsoup.nodes.Attributes; 
 import org.jsoup.nodes.Attribute; 
 import java.net.URL;
 import java.io.InputStream;
 import java.io.OutputStream;

 import com.opencsv.CSVParser;
 import com.opencsv.CSVParserBuilder;
 import com.opencsv.CSVReader;
 import com.opencsv.CSVReaderBuilder;
 import com.opencsv.CSVWriter;
 import com.opencsv.bean.ColumnPositionMappingStrategy;
 import com.opencsv.bean.HeaderColumnNameTranslateMappingStrategy;
 import com.opencsv.bean.HeaderColumnNameMappingStrategy;
 import com.opencsv.bean.CsvToBean;
 import com.opencsv.bean.CsvToBeanBuilder;
 import com.opencsv.bean.StatefulBeanToCsv; 
 import com.opencsv.bean.StatefulBeanToCsvBuilder; 
 import java.io.FileOutputStream;

import java.util.Base64;

//assign is used to be able to add import dynamically
import com.rcomputer.genapp.model.*;


/* The following may not be needed, use generic fiedname from above like deliveryField
*/
//jay0 z3xxeqxxbvnxxxxxxxxxqtyordrd


  //jay2 zqxxbvnxxxxxxxxxqtyordrd
/*
 pojo ie entity has component properties for all composite key fields and entity proprties for all other fields.
 If an entity property is a foreign key then the property name will show the foreign entity not the actual field name.
 Use a filter like c2h.isManyToOne(property) and  column = property.columnIterator.next() to get the actual column name.
 or use parentPojo.identifierProperty.name to get the key field property name or use
 jay5 if !c2h.isCollection(property) && !isToOne(property)
  if c2j.isComponent(property)
   foreach componentProperty in property.value.propertyIterator in list.java.ftl
 
 If a persistence class has a foreign key more than once then the property name has the foreign entity plus Byxxxx to qualify
 The component properties have the identifierProperty iterator holding each key. 
 In case the key is non composite ie a single field then it will not be part of any component and will be part of properties
 Component properties seem to be tied to xxxId.java whereas non component properties are tied to xxx.java
 composite key fields declared via  Primary Key columns will appear only in component/xxId/java. If key field is a foreign 
 field then it is also declared via Foreign Key and will appear in entity properties/xxx.java. However in xxx.java
 the column name will not be shown, instead foreign Pojo class will be shown. Column iterator can be used to get
 the column name. If there are more than one fields pointing to same pojo then it will show as xxxByzz
 For those key fields which are foreign fields we need to generate validateandselect method. Currently generation 
 is hard coded by checking function of the pojo, it can be automated by xchecking component property columnname against entity ptoperty column name
 and if match the entity property name will be the pojo which needs to be validated and selected.
 The same logic can be used in editproperty.ftl to automate puting validateandSelect method call  
*/
/* 
in case of composite keys
*/ 
  /*
  In case of composite keys and key auto generated

  */

/**
* This is Action Home class 
* @author 3r Computer Systems  
* @version 2.0
*/

@Named("fpxxfq1a5xwwqqhxxxxxitemHome")
@ViewScoped
@Transactional
public  class Fpxxfq1a5xwwqqhxxxxxitemHome implements Serializable
{
   @Inject File file;
   @Inject R3RestClient r3RestClient;

   @Inject SqlAdminSupport sqlAdminSupport;
   @Inject SkinBean skinBean;
    @Inject CustomIdentity customIdentity; 
        @Inject
        private Identity identity;
	@Inject
	Xxxxch82bxhhhhhxxxxxeditlogHome xxxxch82bxhhhhhxxxxxeditlogHome;
	private Xxxxch82bxhhhhhxxxxxeditlog xxxxch82bxhhhhhxxxxxeditlog;


   


        @Inject ShoppingCartBean r3Cart; 
	@Inject
	Fxxxuq111xwwqqhxxxxxaddressList fxxxuq111xwwqqhxxxxxaddressList;

	@Inject
	Yxxxuh566xwwqqwxxxxxuserList yxxxuh566xwwqqwxxxxxuserList;
	@Inject
	Trexuq266xwwqqhxxxxxcuinvoiceHome trexuq266xwwqqhxxxxxcuinvoiceHome;
	private Trexuq266xwwqqhxxxxxcuinvoice trexuq266xwwqqhxxxxxcuinvoice;
	@Inject
	Trexuq266xwwqqhxxxxxcuinvoiceList trexuq266xwwqqhxxxxxcuinvoiceList;
	@Inject
	Xoxxuq2a4xwwqqhxxxxxcuidetailsHome xoxxuq2a4xwwqqhxxxxxcuidetailsHome;

	@Inject
	Trexuq277xwwqqhxxxxxcpaymentHome trexuq277xwwqqhxxxxxcpaymentHome;
	private Trexuq277xwwqqhxxxxxcpayment trexuq277xwwqqhxxxxxcpayment;

	@Inject
	Fxxxuq1ffxwwqqhefxxxserialnumbersHome fxxxuq1ffxwwqqhefxxxserialnumbersHome;
	@Inject
	Fxxxuq1ffxwwqqhefxxxserialnumbersList fxxxuq1ffxwwqqhefxxxserialnumbersList;
	@Inject
	Jxxxuq201xwwqqhxxxxxcustomerList jxxxuq201xwwqqhxxxxxcustomerList;
	@Inject
	Fxxxuq1bhxwwqqhxxxxxusagebyperiodsHome fxxxuq1bhxwwqqhxxxxxusagebyperiodsHome;
	private Fxxxuq1bhxwwqqhxxxxxusagebyperiods fxxxuq1bhxwwqqhxxxxxusagebyperiods;
	@Inject
	Trexuq233xwwqqhxxxxxcuquoteList trexuq233xwwqqhxxxxxcuquoteList;
	@Inject
	Trexuq233xwwqqhxxxxxcuquoteHome trexuq233xwwqqhxxxxxcuquoteHome;
	private Trexuq233xwwqqhxxxxxcuquote trexuq233xwwqqhxxxxxcuquote;
	@Inject
	Xoxxuq2c4xwwqqhxxxxxcuqdetailsHome xoxxuq2c4xwwqqhxxxxxcuqdetailsHome;
        @Inject
        SqlSupport sqlSupport;
        @Inject
        Xlrxuq1iixwwqqhexxxxscandateList xlrxuq1iixwwqqhexxxxscandateList;

   @Inject 
   DefaultLoginCredentials credentials;
   //@Inject Authenticator authenticator; not sure what problem injecting may be due to @picketlink
   private boolean nextShow = false;
   boolean mailRelayOff=true; 
   Boolean smtpError=false;
    private FacesContext facesContext=null;
    private ServletContext context=null;
    private HttpServletRequest req=null;
    private HttpServletResponse resp=null;
    private String userAgentStrO=null;
    private String userAgentStr=null;
    private String userIP=null;
    private String urlName=null;
    private int urlPort=0;
    private ExternalContext externalContext=null;
    private HttpSession session=null;
    private String skinCode=null;
    private String replyToMatCode = null;
    private String replyToMatSidS = null;
    private String descriptionValue =null;
    private String startValue = null;
    private ResourceBundle bundle=null;
    int count = 0;
    int countD=0;
    int countB=0;
    private int excpCount=0;
    Boolean currConv=false;
    int importdone=0;
    String linesA[]=null;
	private final int limit_max_size = 10240000;
	private final String limit_type_file = "gif|jpg|png|jpeg|txt|csv|jpeg";
	private String path_to = "resources" + java.io.File.separator + "uploads";

    private int uploadsAvailable = 3;
    private int uploadsDoneCount = 0;
    private boolean autoUpload = false;
    private boolean useFlash = false;
    private Boolean show;
    private Part fileU;





    @PostConstruct
    public void initialize() {
    try{
      facesContext = FacesContext.getCurrentInstance(); 
      // bypass if came from servlet
     if(facesContext !=null){
      bundle = facesContext.getApplication().getResourceBundle(facesContext, "messages");
      ///SEVERITY_INFO, "any string in quotes"+e.getMessage+bundle.getString("id_password_not_matching")
      externalContext = facesContext.getExternalContext(); 
       replyToMatCode = externalContext.getRequestParameterMap().get("replyToMatCode");
       replyToMatSidS = externalContext.getRequestParameterMap().get("replyToMatSid");

      context = (ServletContext)FacesContext.getCurrentInstance().getExternalContext().getContext(); 
      req = (HttpServletRequest) externalContext.getRequest(); 
      session = req.getSession();
      urlName=((javax.servlet.http.HttpServletRequest) externalContext.getRequest()).getServerName();
      urlPort=((javax.servlet.http.HttpServletRequest) externalContext.getRequest()).getServerPort();
      resp = (HttpServletResponse) externalContext.getResponse(); 
      userAgentStrO = req.getHeader("user-agent");  
      userAgentStr = userAgentStrO;  
      userIP = req.getHeader("X-FORWARDED-FOR");  //get from req header
      if (userIP == null) {  
       userIP = req.getRemoteAddr();  //get from socket connection
      }
          urlIndex=urlName.lastIndexOf(".");
          if (urlIndex == -1){
            urlIndex=urlName.length();
          }       
          if (urlName.contains("www.")){
           owner2Code=urlName.substring(4,urlIndex);
          }else{
           owner2Code=urlName.substring(0,urlIndex);
          }
          //extract subdomain if used. if subdomain, masterSiteCode will have a value
         if(!customIdentity.getMasterSiteCode().isEmpty()){
          owner2Code=owner2Code.replace("."+customIdentity.getMasterSiteCode(),"");
         }
      if (userIP == null) {  
       userIP = req.getRemoteAddr();  
       if (userIP == null) {  
        userIP = "noIP";  
       }      
      }
      masterSiteCode=customIdentity.getMasterSiteCode();
      masterSiteUrl=customIdentity.getMasterSiteUrl();

      Arrays.fill(checkMapI, Boolean.FALSE);
      Arrays.fill(checkMapT, Boolean.FALSE);
     
     }
      ownerCode=customIdentity.getOwner();
      ownerCddCode=ownerCode.substring(ownerCode.length()-3,ownerCode.length() );
      productCode=customIdentity.getProduct();
      subProductCode=customIdentity.getSubProduct();

      if (customIdentity.getMobileView().length() > 0){
       userAgentStr=customIdentity.getMobileView();
      }
     }catch(Exception e){
      //log error
      excpCount=excpCount+1;
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
       FacesMessage.SEVERITY_ERROR,e.getMessage(),""));
    }


    }
   private Logger log = Logger.getLogger(Fpxxfq1a5xwwqqhxxxxxitem.class.getCanonicalName());
   //facesMessages being injected so  //FacesMessages.add can be used instead of  //FacesMessages.instance().add
   // using seam facesmessages allow using el expressions , java facesmessage does not allow EL expression
   @PersistenceContext(unitName = "genappcdi")
   private EntityManager entityManager;
   private Integer id=null;
   private String cartPoStatus="x";
   String timeStamp="";
   private boolean changeDone=false;
   private boolean skipValidation=false;
     private Boolean[] checkMapI=new Boolean[6];
     private Boolean[] checkMapT=new Boolean[6];
      private byte[] mailingBytes1 = null;
      private byte[] mailingBytes2 = null;
      private byte[] mailingBytes3 = null;
      private byte[] mailingBytes4 = null;
      private byte[] mailingBytes5 = null;
      private byte[] mailingBytes = null;
      private String mailingText = null;
      private String mailingText1 = null;
      private String mailingText2 = null;
      private String mailingText3 = null;
      private String mailingText4 = null;
      private String mailingText5 = null;
      private String mailingBytes1TypeMime = null;
      private String mailingBytes2TypeMime = null;
      private String mailingBytes3TypeMime = null;
      private String mailingBytes4TypeMime = null;
      private String mailingBytes5TypeMime = null;
      private String ownerCode="sss";
      private String subProductCode="";
      private String ownerCddCode="";
      private String productCode="";
      FacesMessage msg =new FacesMessage("");





   // cartpostatus =e comes from method extended_persist ie copynsave
   // cartPostatus also comes from cposts in method cartpersist
     // cartPostatus=cposts is o if add and currentCount holds last line #, u if remove, c if change for existing and for both c & u 
     // currentCount holds first time call or not to decide on initializing order totals to zeroes if first time
     // currentDetailline will be used to hold the value to pass to showrun()

	@Inject
	Fpxxfq1a5xwwqqhxxxxxitemList fpxxfq1a5xwwqqhxxxxxitemList;
        private Fpxxfq1a5xwwqqhxxxxxitem fpxxfq1a5xwwqqhxxxxxitemli;
	@Inject
	Yxxxuq591xwwqqhxxxxxrate1fHome yxxxuq591xwwqqhxxxxxrate1fHome;
	private Yxxxuq591xwwqqhxxxxxrate1f yxxxuq591xwwqqhxxxxxrate1f;
	@Inject
	Yxxxch575xwwqqhxxxxxuserproflHome yxxxch575xwwqqhxxxxxuserproflHome;
	private Yxxxch575xwwqqhxxxxxuserprofl yxxxch575xwwqqhxxxxxuserprofl;









     private String  currentCartedPO="";
     private Integer currentCartedPOSID;

	@Inject
	Xoxxuq2b4xwwqqhxxxxxcuodetailsList xoxxuq2b4xwwqqhxxxxxcuodetailsList;
	private Xoxxuq2b4xwwqqhxxxxxcuodetails xoxxuq2b4xwwqqhxxxxxcuodetails;
	@Inject
	Xoxxuq2b4xwwqqhxxxxxcuodetailsHome xoxxuq2b4xwwqqhxxxxxcuodetailsHome;
	@Inject
	Trexuq244xwwqqhxxxxxcuordersList trexuq244xwwqqhxxxxxcuordersList;
	private Trexuq244xwwqqhxxxxxcuorders trexuq244xwwqqhxxxxxcuorders;
	@Inject
	Trexuq244xwwqqhxxxxxcuordersHome trexuq244xwwqqhxxxxxcuordersHome;
	@Inject
	Yxxxuh566xwwqqwxxxxxuserHome yxxxuh566xwwqqwxxxxxuserHome;
	private Yxxxuh566xwwqqwxxxxxuser yxxxuh566xwwqqwxxxxxuser;
	@Inject
	Jxxxuq201xwwqqhxxxxxcustomerHome jxxxuq201xwwqqhxxxxxcustomerHome;
	private Jxxxuq201xwwqqhxxxxxcustomer jxxxuq201xwwqqhxxxxxcustomer;
	@Inject
	Fxxxuq111xwwqqhxxxxxaddressHome fxxxuq111xwwqqhxxxxxaddressHome;
	private Fxxxuq111xwwqqhxxxxxaddress fxxxuq111xwwqqhxxxxxaddress;
	@Inject
	Yxxxch522xhhxxhxxxxxclientList yxxxch522xhhxxhxxxxxclientList;
	@Inject
	Jxxxbh400xwwqqhxxxxxemployeeList jxxxbh400xwwqqhxxxxxemployeeList;
	@Inject
	Yxxxuq591xwwqqhxxxxxrate1fList yxxxuq591xwwqqhxxxxxrate1fList;

       private String addrL1;
       private String addrL2;
       private String city;
       private String provstate;
       private String pzcode;
       private String country;
       private String imailaddr;
       private String imailaddrAlt;
       private String sortByValue="bm";
       BigDecimal reducedQty=new BigDecimal("0.0");
       private String unitLength=" ";
       private String unitWidth=" ";
       private String unitHeight=" ";
       private String unitWeight=" ";
       private BigDecimal valueLength=new BigDecimal("0.0");
       private BigDecimal valueWidth=new BigDecimal("0.0");
       private BigDecimal valueHeight=new BigDecimal("0.0");
       private BigDecimal valueWeight=new BigDecimal("0.0");
       private String itemVariantSize="";
       private String itemVariantColour="";
       private String itemVariantMaterial="";
       private String itemVariantBrand="";
       private String itemVariantSizeL="";
       private String itemVariantColourL="";
       private String itemVariantMaterialL="";
       private String itemVariantBrandL="";
       String couponCode ="";
       BigDecimal couponValue=BigDecimal.ZERO;
       BigDecimal saleValue=BigDecimal.ZERO;
       BigDecimal discountValue=BigDecimal.ZERO;
       String newfilename ="";
       String fileSavePath ="";
       java.io.File fileToCreate=null;
       java.io.File folder = null;
       CSVWriter csvWriter = null;
       CSVWriter csvWriter2 = null;


    


      //CustomIdentity customIdentity = (CustomIdentity)Component.getInstance(CustomIdentity.class); 
      //SkinBean skinBean = (SkinBean)Component.getInstance(SkinBean.class); 
      //ShoppingCartBean r3Cart = (ShoppingCartBean)Component.getInstance(ShoppingCartBean.class); 
      private boolean doRollUp=true;
      private String owner2Code="";
      private String masterSiteCode="";
      private String masterSiteUrl="";
      private String owner2CodeS="";
      private int urlIndex=0;
      int duplDropped=0;
      int importAdded=0;

     private BigDecimal keyedQuantity = new BigDecimal("1.0");
     private BigDecimal detailbaseamt = new BigDecimal("0.0");
     private BigDecimal detailbaseamtO = new BigDecimal("0.0");
     private BigDecimal totalbaseamt = new BigDecimal("0.0");
     private BigDecimal totaloutstanding = new BigDecimal("0.0");
     private BigDecimal totalamountin = new BigDecimal("0.0");
     private BigDecimal postingAmount = new BigDecimal("0.0");
     private BigDecimal chqAmount = new BigDecimal("0.0");
     private BigDecimal amountIn = new BigDecimal("0.0");
     private String chqVerbose="";
     private String tax1Cert="";
     private String tax2Cert="";
     private String tax3Cert="";
                BigDecimal cdisc=BigDecimal.ZERO;
                BigDecimal cselp=BigDecimal.ZERO;
                BigDecimal newOrdPrice=BigDecimal.ZERO;
        private BigDecimal change=BigDecimal.ZERO;//nov29 2919
	private BigDecimal totalmis = BigDecimal.ZERO;
	private BigDecimal totaldel = BigDecimal.ZERO;
	private BigDecimal totalqty = BigDecimal.ZERO;//totalxxxx,amountTotal means parent and includes all details
	private BigDecimal totaltax1 = BigDecimal.ZERO;
	private BigDecimal totaltax2 = BigDecimal.ZERO;
	private BigDecimal totaltax3 = BigDecimal.ZERO;
	private BigDecimal qtyOrdPrev = BigDecimal.ZERO;//
	private BigDecimal amountTotal = BigDecimal.ZERO;//amountTotal is sum of detaillt 
	private BigDecimal qtyTotal = BigDecimal.ZERO;//same as qtytotal or detailqty  then get rid of it
	private BigDecimal qtyTotalNew = BigDecimal.ZERO;
        private BigDecimal tax1RateValue=new BigDecimal("0.0");
        private BigDecimal tax2RateValue=new BigDecimal("0.0");
        private BigDecimal tax3RateValue=new BigDecimal("0.0");
        private BigDecimal tax1RateValueS=new BigDecimal("0.0");
        private BigDecimal tax2RateValueS=new BigDecimal("0.0");
        private BigDecimal tax3RateValueS=new BigDecimal("0.0");
        private BigDecimal tax1RateValueH=new BigDecimal("0.0");
        private BigDecimal tax2RateValueH=new BigDecimal("0.0");
        private BigDecimal tax3RateValueH=new BigDecimal("0.0");
        private BigDecimal detailLt = new BigDecimal("0.0");//is it same as amountTotal
        private BigDecimal detailLtO = new BigDecimal("0.0");
	private BigDecimal detailMis = BigDecimal.ZERO;
	private BigDecimal detailDel = BigDecimal.ZERO;
	private BigDecimal detailQty = BigDecimal.ZERO;
	private BigDecimal detailTax1 = BigDecimal.ZERO;
	private BigDecimal detailTax2 = BigDecimal.ZERO;
	private BigDecimal detailTax3 = BigDecimal.ZERO;
	private BigDecimal detailMisO = BigDecimal.ZERO;
	private BigDecimal detailDelO = BigDecimal.ZERO;
	private BigDecimal detailTax1O = BigDecimal.ZERO;
	private BigDecimal detailTax2O = BigDecimal.ZERO;
	private BigDecimal detailTax3O = BigDecimal.ZERO;
        BigDecimal qtyOrdO=BigDecimal.ZERO;
        String iShipCode="";//size of item
        String tShipCode="";//shipment mode for item


     	private boolean applyTax1 = false;
	private boolean applyTax2 = false;
	private boolean applyTax3 = false;

      String integrationAccountSet="";
      private BigDecimal temp = new BigDecimal("0.0");
      private String key="";
      private String subKey="";
      private String subKeyFirst="";
      private String slobkeyhash="";
      private String keysv="";
      // make it session variable later
      private int currentPeriod=1;
      private String divcode="";
      private String depcode="";
      private String accountn="";
      private String companycode="";
      private Calendar calendar = Calendar.getInstance();
      private Calendar calendare = Calendar.getInstance();
      private Calendar calendarly = Calendar.getInstance();
      private Date currbusdate = calendar.getTime();
      private Date dobSave = calendar.getTime();
      private int mnsorder=0;
      private int arSeqn=0;
      private int apSeqn=0;
      private int icSeqn=0;
      private int paSeqn=0;
      private int joSeqn=0;
      private int glSeqn=0;
     private int subarSeqn = 0;
      private int subapSeqn=0;
      private int subicSeqn=0;
      private int subpaSeqn=0;
      private int subjoSeqn=0;
      private int subglSeqn=0;

      private int mprinted=512;
      private int mdel=256;
      private int mmark=128;
      private int munmark=1023;
      private int mconsign=64;
      private int minvoiced=64;
      private int mnoMail=64;
      //  can be used for other status, use it for 1st entry in group,account or to mark a row as editable etc 
      //               where line field is not there 
      // mconsign should apply to item type not status ?? also means order invoiced
      private int mpartial=32;
      private int mshipped=32;
      private int mreceived=32;
      private int mpaid=16;
      // in case of venartha vpayment goes 16(paid)->8(closed by chq) but venartha itself becomes 16(paid by chq)
      private int mclosed=8;
      private int mreturn=4;//return,investigation,dispute,  
      private int mcopy=2;//copied or Picked from PicklList not customer picked
      private int mtoPay=2;//online order toPay status but items can be added at backOffice
      // copy means record was copied from another 
      //open becomes active ie some activity happened against the open record , mutually exclusive

      private int mactive=1;
      private int mordered=1;
      private int mopen=0;
      private int mquoted=0;
      // open means record created
      // use setXx(getXx()| mcopy)) to set copy flag leaving other bits as is 
      // use setXx(getXx()& _mcopy)) to clear copy flag leaving other bits as is 
      // the following shows which bit counting 0 as the right most bit 
      // used as if bitset(status,_matcive)
      // or as iif(bitset(status,_mmark),.t.,.f.)
      //_mactive=0  && 0th bit from right starting at 0 bit, value 1
      /***
      *transaction flow and status (in brackets) changes
      *Ecommerce:sales checkout by customer 
      *customer: checkout to order active(1)to and paypal payment/authorize toinvoice(64) and system changes order invoiced(64)
      *system:created order and invoice, got order shipment information from paypal and puts a hold payment or takes payment and creates payment record
      *agent:  convert invoice to shipping notclosed(8) invoiceto to shipment active(1) to Add B/O and and inform invoice dept and wait or set as shipped(32)
      *agent: if needed, process invoicing:invoice (64) and shipment B/O? investigate. Add B/O to invoice, inform shipment, wait. 
      *agent: convert invoice to payment:invoice (64) and its ordertoshipment ahipped(32) invoicetopayment(16?). Capture or capture with credit.
      *system: paymenttoorder,shipment,invoice,payment itself closed(8)  
      * 
      *Ecommerce:invoice payment by customer
      * order,invoices created by agent on phone order etc
      * option of payment online given to customer
      *customer: enters email,invoice amount and invoice number. If matches   
      *system: process the payment and creates payment record or puts a hold payment but no payment record?
      *agent: rest ie shipping, payment same as manual or Ecommerce sales check out
      *
      *Ecommerce:POS checkout by agent for customer (item entries can be by customer)
      *
      *Manual: Done by agent request over phone/email/case request folder
      *sales:  create quote active(1)
      *sales:  create order(1) from quote or manually create order active(1) 
      *shipping: notclosed(8) orderto to shipment active(1) to Add B/O and inform order and wait or shipped(32)
      *invoicing: invoice (64) and shipment B/O? investigate. Add B/O to invoice, inform shipment, wait. 
      *Payment:invoice (64) and its order to shipment shipped(32) invoice to payment(16?).Take payment and with credit.
      *payment: make order,shipment,invoice,payment itself closed(8)   

      *Ecommerce invoice payment
      *invoice can be from ecommerce or manually done 
      *customer: invoice (64) and invoice number and amount matches, then system creates payment(16?)
      *payment: make order,shipment,invoice,payment itself closed(8) ???  
      */


      private int _mopen=0;
      //0th bit ,numeric value 0
      private int _mactive=0;
      // && 0th bit ,numeric value 1
      private int _mcopy=1;
      //   && 1th bit ,numeric value 2
      private int _mreturn=2;
      // && 2nd bit                4 
      private int _mclosed=3;
      // && 3rd                    8 
      private int _mpaid=4;
      //   && 4th                   16
      private int _mpartial=5;
      private int _mshipped=5;
      // && 5th                   32 
      private int _mconsign=6;
      private int _minvoiced=6;
      private int _mnoMail=6;
      // && 6th                   64
      private int _mmark=7;
      //    && 7th                   128
      private int _mdel=8;
      //     && 8th                    256 
      private int _mprinted=9;
      // && 9th                   512 
     private boolean fromJsf =true;

     private boolean buttonPressed =false;
     private String buttonPressedLabel ="+ Upload";
     private String upLoadPurpose ="ad";
     private String discountType ="pe";
     private int useSeq=-1;

     private boolean hideChosen =false;
     private String lobDataType=" ";
     private String temps=" ";
     private Integer sidValue=0;
     private boolean entityUpdated =false;
     private boolean entityDeleted =false;
     private String eMailingAddress="";
     private String targetVendor="";
     private boolean mergedPayment=false;
     private String position="";
     private String overRideValue="";
     private String overRideValueS="";
     private String notesToPass="";
     private BigDecimal priceOverRide = new BigDecimal("0.0");
     private String fpxxfq1a5xwwqqhxxxxxitemFrom="";
     private String prefix=" ";
     private Integer tempCount=0;
     SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
     private boolean importChosen =false;
     private Fpxxfq1a5xwwqqhxxxxxitem instance=null;
     private String hostingAt = "lo";//op for openshift, aw for amazon aws, hero for heroku, lo for Local 
     //web.xml context param to define hosting env and use getServletContext().getInitParameter(hostingAt) 
     //
     

/*
 If same field from a foreign table is used more than once, it can cause duplicate entries for @Inject
 By is used to supress the duplicate
*/
     @Inject
    Fpxxfq1a5xwwqqhxxxxxitemHome fpxxfq1a5xwwqqhxxxxxitemHome;
    private Fpxxfq1a5xwwqqhxxxxxitem fpxxfq1a5xwwqqhxxxxxitem;
     @Inject
    Fxxxcq144xwwqqhxxxxxlocationHome fxxxcq144xwwqqhxxxxxlocationHome;
    private Fxxxcq144xwwqqhxxxxxlocation fxxxcq144xwwqqhxxxxxlocation;
//page parameters start here from not used, existing xxxxFrom used, delete below later -->
        private String from="";
	public void setFrom(String from) {
		this.from = from;
	}

	public String getFrom() {
           
		return from;
	}

//rest goes here
    public void setFpxxfq1a5xwwqqhxxxxxitemA0xxuobxbxxxxxxxxxxxsid(Integer id)
    {
      // setId will fetch the record and Instance will point to it
      setId(id);
      if(getInstance() !=null && !getInstance().getZzxxu2oxxhxxxxxxxxxxowner2().equals("SYSTEM") && !getInstance().getZzxxu2oxxhxxxxxxxxxxowner2().equals(owner2Code)){
       try{
        //different owner other than SYSTEM, dont let it go through, to do why exception not caught
        setId(0);
       } catch (Exception e) {
        log.severe("Error passing bad sid "+ e.getMessage());
        FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
          FacesMessage.SEVERITY_ERROR,bundle.getString("cannot")+" "+ bundle.getString("get")+" "+bundle.getString("record")+" "+e.getMessage(),""));


       }
      }
    }

    public Integer getFpxxfq1a5xwwqqhxxxxxitemA0xxuobxbxxxxxxxxxxxsid()
    {

        return (Integer) getId();
    }

   /**
    * Returns true if the id of the object managed is known.
    */
   public boolean isIdDefined()
   {
      return getId()!=null && !"".equals( getId() );
   }
     public boolean isFromJsf() {
         return fromJsf;//default true
     }

     public void setFromJsf(boolean fromJsf){
      this.fromJsf=fromJsf;
     }


    public boolean isChangeDone(){
     return changeDone;
    } 

    public void setChangeDone(boolean changeDone){
      this.changeDone=changeDone;
    } 


  protected Fpxxfq1a5xwwqqhxxxxxitem createInstance()

  {
      // jay add logic to check client flag for debug mode and bypass below if debug
      //setCreatedMessage(createValueExpression(""));
      //setDeletedMessage(createValueExpression(""));
      //setUpdatedMessage(createValueExpression(""));

       //Fpxxfq1a5xwwqqhxxxxxitem fpxxfq1a5xwwqqhxxxxxitem = new Fpxxfq1a5xwwqqhxxxxxitem();
       //scope for this method only
       Fpxxfq1a5xwwqqhxxxxxitem fpxxfq1a5xwwqqhxxxxxitem=null;
       if (instance == null) {
            try {
                instance = new Fpxxfq1a5xwwqqhxxxxxitem();
                fpxxfq1a5xwwqqhxxxxxitem=instance;

            }
            catch (Exception e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
                return null;
            }
       }else{
       //came to createInstance, but it may exists for some existing error conditions, so ignore and continue
            try {
                instance = new Fpxxfq1a5xwwqqhxxxxxitem();
                fpxxfq1a5xwwqqhxxxxxitem=instance;

            }
            catch (Exception e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
                return null;
            }
       

       }


   /*
   This is the place to preinitialize the entity variables to display in jsf pages
   */



  

  

		fpxxfq1a5xwwqqhxxxxxitem.setB0xxziqxlvxxsaxxxxxxquantity(new BigDecimal("0.0"));
  

      
  
         // if not reply ie adding issue do not prefill descript
         if (replyToMatCode != null && (replyToMatCode.trim().length() > 0) ){
         		fpxxfq1a5xwwqqhxxxxxitem.setB1xxuszsbvxxxxxxxxxxdescript("Reply by "+ownerCode.substring(0,ownerCode.length()-3)+" on "+calendar.getTime().toString());
         }else{
          replyToMatCode=null;
         }

  

  

		fpxxfq1a5xwwqqhxxxxxitem.setB6fbzicxbvxxxxxxxxxxcost(new BigDecimal("0.0"));
  

		fpxxfq1a5xwwqqhxxxxxitem.setB7fbzxxxbvxxxxxxxxxxreplcost(new BigDecimal("0.0"));
  

		fpxxfq1a5xwwqqhxxxxxitem.setB8fbzpxxbvxxxxxxxxxxselprice(new BigDecimal("0.0"));
  

		fpxxfq1a5xwwqqhxxxxxitem.setB9xxzxxxlvxxxxxxxxxxspricold(new BigDecimal("0.0"));
  

		fpxxfq1a5xwwqqhxxxxxitem.setC1xxzxxxbhxxsxxxxxxxspricnew(new BigDecimal("0.0"));
  

  
		fpxxfq1a5xwwqqhxxxxxitem.setC2fbcxxrehxxsxxxxxxxspriceffdt(calendar.getTime());

  

		fpxxfq1a5xwwqqhxxxxxitem.setC4fbzxxxbvxxxxxxxxxxqtylevel1(new BigDecimal("0.0"));
  

  

      
  
       if (productCode.equals("s")){          
		fpxxfq1a5xwwqqhxxxxxitem.setC6xxusxrbv16xxxxxxxxtype("SI-D");
       }else{
        if (productCode.equals("f")){ 
              if(subProductCode.equals("b")){        
		fpxxfq1a5xwwqqhxxxxxitem.setC6xxusxrbv16xxxxxxxxtype("IB");
              }
              if(subProductCode.equals("s")){        
		fpxxfq1a5xwwqqhxxxxxitem.setC6xxusxrbv16xxxxxxxxtype("SI-D");
              }
        }else{
         if (productCode.equals("e")){  
              if(subProductCode.equals("f")){        
		fpxxfq1a5xwwqqhxxxxxitem.setC6xxusxrbv16xxxxxxxxtype("IX");
              }
              if(subProductCode.equals("e")){        
		fpxxfq1a5xwwqqhxxxxxitem.setC6xxusxrbv16xxxxxxxxtype("SI-D");
              }
              if(subProductCode.equals("l")){        
		fpxxfq1a5xwwqqhxxxxxitem.setC6xxusxrbv16xxxxxxxxtype("LT-D");
              }
         }else{
           if (productCode.equals("o")){          
	    fpxxfq1a5xwwqqhxxxxxitem.setC6xxusxrbv16xxxxxxxxtype("SI-D");
           }else{
		fpxxfq1a5xwwqqhxxxxxitem.setC6xxusxrbv16xxxxxxxxtype("IX");
           }
         }
        }
       }

  
		fpxxfq1a5xwwqqhxxxxxitem.setC7fbfxz1bvxxxxxxxxxxtax1(false);

  
		fpxxfq1a5xwwqqhxxxxxitem.setC8fbfxz2bvxxxxxxxxxxtax2(false);


  

		fpxxfq1a5xwwqqhxxxxxitem.setF3xxzxxxlvxxxxxxxxxxavgprice(new BigDecimal("0.0"));
  







  

  

  

  
		fpxxfq1a5xwwqqhxxxxxitem.setH1xxcxxrbxxxxxxxxxxxeffdate(calendar.getTime());

  












  

  












  

  

  

		fpxxfq1a5xwwqqhxxxxxitem.setY4xxuxxrbvxxxxxxxxxxcaseqty(new BigDecimal("0.0"));
  

  
		fpxxfq1a5xwwqqhxxxxxitem.setY5xxcxxrlxxxxxxxxxxxdatetorenew(calendar.getTime());

  
		fpxxfq1a5xwwqqhxxxxxitem.setY6fbfxz3bvxxxxxxxxxxtax3(false);

      
  
		fpxxfq1a5xwwqqhxxxxxitem.setZ2xxcsxrlxxxxxxxxxxxdateadded(calendar.getTime());

  
		fpxxfq1a5xwwqqhxxxxxitem.setZ2xxcxxrlxxxxxxxxxxxdateexpiry(calendar.getTime());

  
		fpxxfq1a5xwwqqhxxxxxitem.setZ2xxzzprhvxxxxxxxxxxprintmstat(0);

  
		fpxxfq1a5xwwqqhxxxxxitem.setZ3xxczqxlhxxxxxxxxxxprinmtfldt(calendar.getTime());

		fpxxfq1a5xwwqqhxxxxxitem.setZ4xxzxxxlvxxxxxxxxxxavgcost(new BigDecimal("0.0"));
  

  
		fpxxfq1a5xwwqqhxxxxxitem.setZ5xxzzfxhhxxxxxxxxxxstatusfl(0);

  
		fpxxfq1a5xwwqqhxxxxxitem.setZ6xxcztxlxxxxxxxxxxxstatusfldt(calendar.getTime());

		fpxxfq1a5xwwqqhxxxxxitem.setZ7xxzxxxlvxxxxxxxxxxcuordqty(new BigDecimal("0.0"));
  

		fpxxfq1a5xwwqqhxxxxxitem.setZ8xxzxxxlvxxxxxxxxxxvenorqty(new BigDecimal("0.0"));
  

		fpxxfq1a5xwwqqhxxxxxitem.setZ9xxzxxxlvxxxxxxxxxxcupicqty(new BigDecimal("0.0"));
  

		fpxxfq1a5xwwqqhxxxxxitem.setZaxxzxxxlvxxxxxxxxxxvenpiqty(new BigDecimal("0.0"));
  

		fpxxfq1a5xwwqqhxxxxxitem.setZbxxzxxxlvxxxxxxxxxxcuinvqty(new BigDecimal("0.0"));
  

		fpxxfq1a5xwwqqhxxxxxitem.setZcxxzxxxlvxxxxxxxxxxcushiqty(new BigDecimal("0.0"));
  

		fpxxfq1a5xwwqqhxxxxxitem.setZdxxzxxxlvxxxxxxxxxxvenshqty(new BigDecimal("0.0"));
  

  
		fpxxfq1a5xwwqqhxxxxxitem.setZexxutoxlhxxxxxxxxxxowner(ownerCode);

  

  
		fpxxfq1a5xwwqqhxxxxxitem.setZzxxu2oxxhxxxxxxxxxxowner2(owner2Code);
   return fpxxfq1a5xwwqqhxxxxxitem;
  }

	@Inject
	Yxxxuq1m1xwwqqqxxxxxclobdataHome yxxxuq1m1xwwqqqxxxxxclobdataHome;
	private Yxxxuq1m1xwwqqqxxxxxclobdata yxxxuq1m1xwwqqqxxxxxclobdata;
	private Yxxxuq1m1xwwqqqxxxxxclobdata yxxxuq1m1xwwqqqxxxxxclobdata2;
	@Inject
	Yxxxuq1m1xwwqqqxxxxxclobdataList yxxxuq1m1xwwqqqxxxxxclobdataList;


	@Inject
	Yxxxuq1n1xwwqqqxxxxxblobdataHome yxxxuq1n1xwwqqqxxxxxblobdataHome;
	private Yxxxuq1n1xwwqqqxxxxxblobdata yxxxuq1n1xwwqqqxxxxxblobdata;
	@Inject
	Yxxxuq1n1xwwqqqxxxxxblobdataList yxxxuq1n1xwwqqqxxxxxblobdataList;



      String msgb = "";
      byte[] bmsg = null;
      byte[] bmsgb = null;
     private String  startk1  = "";
     private String  endk1  = "";
     private String  startk2  = "";
     private String  endk2  = "";
     private String  startk3  = "";
     private String  endk3  = "";
	private Boolean dataIsClob = false;
	private Boolean dataIsBlob = false;




/**
* method pre-initializes entities and gets invoked via jsf f:viewAction  
*/    
    public void wire()
    {
// ManyToOne will capture the Foreign Key Fields and the foreign Entity Name
// 
   // if keyfield then populate lastxxxentity so that dropdown will show it if coming from list for update 
   //Fpxxfq1a5xwwqqhxxxxxitem fpxxfq1a5xwwqqhxxxxxitem=fpxxfq1a5xwwqqhxxxxxitemHome.getDefinedInstance(); use private variable
    if (this.instance != null && this.instance.getFpxxfq1a5xwwqqhxxxxxitem() !=null){
     fpxxfq1a5xwwqqhxxxxxitemHome.setLastfpxxfq1a5xwwqqhxxxxxitemP(this.instance.getFpxxfq1a5xwwqqhxxxxxitem().getA0xxukixbxxxxxxxxxxxmatcode());
    }

   // logic changed to get parent instance not instance itself if entity is item because parent and entity is same
    if (this.instance != null && this.instance.getFpxxfq1a5xwwqqhxxxxxitem() !=null){
     fpxxfq1a5xwwqqhxxxxxitem=fpxxfq1a5xwwqqhxxxxxitemHome.getDefinedInstance();
     if ( fpxxfq1a5xwwqqhxxxxxitem!=null ){
      getInstance().setFpxxfq1a5xwwqqhxxxxxitem(fpxxfq1a5xwwqqhxxxxxitem);
     }
    }
   // if keyfield then populate lastxxxentity so that dropdown will show it if coming from list for update 
   //Fxxxcq144xwwqqhxxxxxlocation fxxxcq144xwwqqhxxxxxlocation=fxxxcq144xwwqqhxxxxxlocationHome.getDefinedInstance(); use private variable
    if (this.instance != null && this.instance.getFxxxcq144xwwqqhxxxxxlocation() !=null){
     fxxxcq144xwwqqhxxxxxlocationHome.setLastfxxxcq144xwwqqhxxxxxlocationP(this.instance.getFxxxcq144xwwqqhxxxxxlocation().getA0xxukxxbvxxxxxxxxxxlocation());
    }

   // logic changed to get parent instance not instance itself if entity is item because parent and entity is same
    if (this.instance != null && this.instance.getFpxxfq1a5xwwqqhxxxxxitem() !=null){
     fxxxcq144xwwqqhxxxxxlocation=fxxxcq144xwwqqhxxxxxlocationHome.getDefinedInstance();
     if ( fxxxcq144xwwqqhxxxxxlocation!=null ){
      getInstance().setFxxxcq144xwwqqhxxxxxlocation(fxxxcq144xwwqqhxxxxxlocation);
     }
    }



 // initialize temp properties using persisted data to avoid losing existing values
 if(this.instance != null && this.instance.getG2xxuxn3bvxxxxxxxxxxsubcodesn3() != null){
  String itemVariantsL=this.instance.getG2xxuxn3bvxxxxxxxxxxsubcodesn3();
  if(itemVariantsL.length()>9){
   itemVariantSizeL=itemVariantsL.substring(0,9);
  }
  if(itemVariantsL.length()>18){
   itemVariantColourL=itemVariantsL.substring(9,18);
  }
  if(itemVariantsL.length()>27){
   itemVariantMaterialL=itemVariantsL.substring(18,27);
  }
  if(itemVariantsL.length()>35){
   itemVariantBrandL=itemVariantsL.substring(27,35);
  }

 }
 if(this.instance != null && this.instance.getG2xxuxn2bvxxxxxxxxxxsubcodesn2() != null){
  String itemVariants=this.instance.getG2xxuxn2bvxxxxxxxxxxsubcodesn2();

  if(itemVariants.length()>7){
   itemVariantSize=itemVariants.substring(0,8);
  }
  if(itemVariants.length()>15){
   itemVariantColour=itemVariants.substring(8,16);
  }
  if(itemVariants.length()>23){
   itemVariantMaterial=itemVariants.substring(16,24);
  }
  if(itemVariants.length()>31){
   itemVariantBrand=itemVariants.substring(24,32);
  }
 }

 if(this.instance != null && this.instance.getC3fbuxscbvxxxxxxxxxxshipcode() != null){
  String checkedDataAndSize=this.instance.getC3fbuxscbvxxxxxxxxxxshipcode();
  String[] checkedData=new String[4];//will allow selectmanycheckbox upto 4
  int j=0;
  int jj=checkedDataAndSize.trim().length();
  for(int i=0; i<4; i=i+1){
   if(i<jj){
    checkedData[j]=checkedDataAndSize.substring(i,i+1).toUpperCase(); 
   }else{
    checkedData[j]="X"; 
   } 
   j=j+1;
  }
   this.instance.setCheckedData(checkedData);//copy to instance temp field
   if(checkedDataAndSize.length()>4){
    this.instance.setCheckedSize(checkedDataAndSize.substring(4,5));
   }

  //25chrs are defined as follows
  //hhhh s    u    wwww   u    llll   u    wwww  u    hhhh
  //ship size unit weight unit length unit width unit height
  //SEPA SMLX gklt n.nn   cmif n.nn   cmif nnnn  gklt nn.n
  //     Y
  //added suport for weight as 3rd pair ie D1 if .1 or 77 if 77 lb/kg selection in client
  // also added color (shirt) as 4th pair. Note: item ship code allows 2ch each to allow as many choice in 25 ch
  // but actual order will have one ch each ie S(standard ship)L(Large Size)?Weight so rate table has 2ch
 }  
    }
    
    public boolean isWired()
    {
     return true;
}

    
    public Fpxxfq1a5xwwqqhxxxxxitem getDefinedInstance()
    {
        if(isIdDefined()){
         if(getInstance() == null || getInstance().getA0xxuobxbxxxxxxxxxxxsid()==null){
          return null;///need to check when this happens, it seems can happen if the entity already exists and again calls getdefine
         }
         if(getInstance().getA0xxuobxbxxxxxxxxxxxsid().equals(getId())){
          return getInstance();
         }else{
          return fpxxfq1a5xwwqqhxxxxxitemList.getSidToEntity(getId());
         }
        }else{
         return null;
        }
    }

       private Map<Integer, Boolean> checked = new HashMap<Integer, Boolean>();

public Map<Integer, Boolean> getChecked() {  
return checked;  
}  

/**
* method is used to check the numeric status field value and return a descriptive value
* @param status
* int value
* @return a String value 
*/    

    public String describeStatus(int status){
    if (status==0){
     return "open";
    }
    
    if (status==1){
     return "active";
    }
    if (status==32){
     return "shipped";
    }
    if (status==64){
     return "invoiced";
    }
    if (status==8){
     return "closed";
    }
    if (status==16){
     return "paid";
    }



    return ""+status; 
   }

    public String markCompleted() {
           this.instance.setZ6xxcztxlxxxxxxxxxxxstatusfldt(Calendar.getInstance().getTime());
           // add logic to check elligble to close
           this.instance.setZ5xxzzfxhhxxxxxxxxxxstatusfl( mclosed );
     return "completed";
    }
    public String markCompletedAll() {
           // add logic put a series of query to get related records and mark them closed
           this.instance.setZ6xxcztxlxxxxxxxxxxxstatusfldt(Calendar.getInstance().getTime());
           // add logic to check elligble to close
           this.instance.setZ5xxzzfxhhxxxxxxxxxxstatusfl(mclosed );
     return "completedAll";
    }


	public String getEMailingAddress() {
              if (eMailingAddress ==null || eMailingAddress.isEmpty()){  
                //prefill if empty
              }
		return eMailingAddress;
	}
     
	public void setEMailingAddress(String eMailingAddress) {
		this.eMailingAddress = eMailingAddress;
	}

	public String getShowPosition() {
	  return position;
	}
     
	public void setShowPosition(String position) {
		this.position = position;
	}


	public String getValueOverRide() {
	  return overRideValue;
	}
     
	public void setValueOverRide(String overRideValue) {
		this.overRideValue = overRideValue;
	}


	public String getValueOverRideS() {
	  return overRideValueS;
	}
     
	public void setValueOverRideS(String overRideValueS) {
		this.overRideValueS = overRideValueS;
	}


	public BigDecimal getPriceOverRide() {
	  return priceOverRide;
	}
	public void setPriceOverRide(BigDecimal priceOverRide) {
		this.priceOverRide = priceOverRide;
	}

     

	public String getNotesToPass() {
		return notesToPass;
	}
     
	public void setNotesToPass(String notesToPass) {
		this.notesToPass = notesToPass;
	}



	public String getFpxxfq1a5xwwqqhxxxxxitemFrom() {
		return fpxxfq1a5xwwqqhxxxxxitemFrom;
	}
     
	public void setFpxxfq1a5xwwqqhxxxxxitemFrom(String entityFrom) {
		this.fpxxfq1a5xwwqqhxxxxxitemFrom = entityFrom;
	}



     public String getPrefix() {
      return prefix;
    }

   public void setPrefix(String prefix) {
     this.prefix=prefix;
   }
   public Boolean[] getCheckMapI() {
    return this.checkMapI;
   }
   public void setCheckMapI(Boolean[] checkMapI){
                this.checkMapI=checkMapI;
   }
   public Boolean[] getCheckMapT() {
    return this.checkMapT;
   }
        public void setCheckMapT(Boolean[] checkMapT){
                this.checkMapT=checkMapT;
        }
	public void setMailingImage1(byte[] mailingBytes) {
		this.mailingBytes1 = mailingBytes;
	}

	public byte[] getMailingImage2() {
           
		return mailingBytes2;
	}

	public void setMailingImage2(byte[] mailingBytes) {
		this.mailingBytes2 = mailingBytes;
	}
	public byte[] getMailingImage3() {
           
		return mailingBytes3;
	}

	public void setMailingImage3(byte[] mailingBytes) {
		this.mailingBytes3 = mailingBytes;
	}
	public byte[] getMailingImage4() {
           
		return mailingBytes4;
	}

	public void setMailingImage4(byte[] mailingBytes) {
		this.mailingBytes4 = mailingBytes;
	}

	public byte[] getMailingImage5() {
           
		return mailingBytes5;
	}

	public void setMailingImage5(byte[] mailingBytes) {
		this.mailingBytes5 = mailingBytes;
	}

	public void setMailingText(String mailingText) {
		this.mailingText = mailingText;
	}

	public String getMailingText1() {
           
		return mailingText1;
	}

	public void setMailingText1(String mailingText) {
		this.mailingText1 = mailingText;
	}

	public String getMailingText2() {
           
		return mailingText2;
	}

	public void setMailingText2(String mailingText) {
		this.mailingText2 = mailingText;
	}
	public String getMailingText3() {
           
		return mailingText3;
	}

	public void setMailingText3(String mailingText) {
		this.mailingText3 = mailingText;
	}
	public String getMailingText4() {
           
		return mailingText4;
	}
	public void setMailingText4(String mailingText) {
		this.mailingText4 = mailingText;
	}



	public String getMailingText5() {
           
		return mailingText5;
	}
	public void setMailingText5(String mailingText) {
		this.mailingText5 = mailingText;
	}

	public String getMailingImage1TypeMime() {
           
		return mailingBytes1TypeMime;
	}

	public void setMailingImage1TypeMime(String mailingTypeMime ) {
		this.mailingBytes1TypeMime = mailingTypeMime;
	}

	public String getMailingImage2TypeMime() {
           
		return mailingBytes2TypeMime;
	}

	public void setMailingImage2TypeMime(String mailingTypeMime ) {
		this.mailingBytes2TypeMime = mailingTypeMime;
	}
	public String getMailingImage3TypeMime() {
           
		return mailingBytes3TypeMime;
	}

	public void setMailingImage3TypeMime(String mailingTypeMime ) {
		this.mailingBytes3TypeMime = mailingTypeMime;
	}

	public String getMailingImage4TypeMime() {
           
		return mailingBytes4TypeMime;
	}

	public void setMailingImage4TypeMime(String mailingTypeMime ) {
		this.mailingBytes4TypeMime = mailingTypeMime;
	}

	public String getMailingImage5TypeMime() {
           
		return mailingBytes5TypeMime;
	}

	public void setMailingImage5TypeMime(String mailingTypeMime ) {
		this.mailingBytes5TypeMime = mailingTypeMime;
	}


    /**
    * The following method is proxy for file.fileUpload to allow using 
    * requestScoped for raaspi file class
    * @see "file class"
    * 
    */

    public String callFileUpload(String purpose){
     file.fileUpload(purpose);
     return "";
    }



    /**
    * The following method used r3restclient.xhtml to ???
    * @param args none bur flag restentity is set to true
    * @return String set by persist
    * @exception None 
    * @see "persist()"
    * 
    */

    public String persistRest() {
     restEntity=true;
     return persist();
    }



    public String persist(String owner2Code) {
     // override owner2Code temporarily and will get reset in next invocation of the bean
     owner2CodeS = this.owner2Code;
     this.owner2Code=owner2Code;
     // no need to rollup because all values are zero also avoids owner2Code issue for SYSTEM records
     doRollUp=false;
     return persist();
    }

/***
* creates key unless already exists as in from rest like shopify, or order created via cart or skip key validation
* key could be created from subkeys or auto generated based on reveng.xml
* based on entity needs fill up with entered values. Item will have type, taxable or not. 
* if txn then call showrunt > createcdetails and showrunt (updates parent instance values)
* persistrunt (puts values to totals for persist) , updatecustomer or vendor,
* common part begins
* set clob/blob pointer to the instance
* if child item then superupdate parent
* persist any new clob/blob, update existing clob/blob
* persist current instance and then details 
* seq starts from 0 and xxList.getNextSeqAvailable is used for next one. 
* seq -1 used  for storing removed image to allow undo
* or in case 3R-TOP-BKGR -1 means use color instead of any image
* qualifier 1 if shopping items. Non shopping or not related to items can have qualifier PIC etc.
*@param none, values passed through variables
*@see "extended_persist"
*/
    public String persist() {


      


       // we need to check whether validation has set bcontinue has false, if so clear it and return
       if (!bcontinue){
             bcontinue=true;
             return null;
       }



       if(!owner2Code.equals("SYSTEM") && !owner2Code.equals(masterSiteCode) && !getInstance().getZzxxu2oxxhxxxxxxxxxxowner2().equals(owner2Code)){
        FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
         FacesMessage.SEVERITY_ERROR,bundle.getString("If")+" "+bundle.getString("non")+" "+bundle.getString("owned")+" "+bundle.getString("record")+", "+bundle.getString("edit")+" "+ bundle.getString("not")+" "+bundle.getString("allowed"),""));
         log.severe("persist_error_owner "+owner2Code +" / "+ getInstance().getZzxxu2oxxhxxxxxxxxxxowner2());
         bcontinue=false;
         return null;
       }
       //instance already exists with site owner2, so change it now
       if(owner2Code.equals("SYSTEM")){
        this.instance.setZzxxu2oxxhxxxxxxxxxxowner2("SYSTEM");
       }

      slobkeyhash=" ";

          /* If AutoGen is yes all natural keys will get caught here.
           The following comment if not autogen
           non composite key , composite keys will not get detected here because the property name will show as id 
           The logic further below this will probe  the pojo.identifier to dig out the column values for flag k,n 
           this.instance.getA0xxukixbxxxxxxxxxxxmatcode()  this.instance.setA0xxukixbxxxxxxxxxxxmatcode
           org.hibernate.mapping.Column(matcode)
           2
          */
            if (this.instance.getA0xxukixbxxxxxxxxxxxmatcode()!=null){
             // check and disallow or warn if duplicate keyed key via validate, no need to check here again
             // except special cases where validation was not done like csv data
             this.instance.setA0xxukixbxxxxxxxxxxxmatcode(this.instance.getA0xxukixbxxxxxxxxxxxmatcode());
            }
        if (!restEntity && !cartPoPicked){
                     if (this.instance.getB1xxuszsbvxxxxxxxxxxdescript() != null && this.instance.getB1xxuszsbvxxxxxxxxxxdescript() !=null && this.instance.getB1xxuszsbvxxxxxxxxxxdescript().length() !=0){
            subKey=subKey+this.instance.getB1xxuszsbvxxxxxxxxxxdescript();
            timeStamp = new SimpleDateFormat("yyyy.MM.dd.HH.mm.ss").format(new Date());
            subKey=subKey+timeStamp.substring(17,18);
           }else{
            // subkey 3 is reserved as company name and if present should be first, need a random filler otherwise same subkey will be generated
            timeStamp = new SimpleDateFormat("yyyy.MM.dd.HH.mm.ss").format(new Date());
            subKey=subKey+timeStamp.substring(17,18);
           } 
        }
        if (!restEntity && !cartPoPicked){
                     if (this.instance.getC6xxusxrbv16xxxxxxxxtype() != null && this.instance.getC6xxusxrbv16xxxxxxxxtype() !=null && this.instance.getC6xxusxrbv16xxxxxxxxtype().length() !=0){
            subKey=subKey+this.instance.getC6xxusxrbv16xxxxxxxxtype();
            timeStamp = new SimpleDateFormat("yyyy.MM.dd.HH.mm.ss").format(new Date());
            subKey=subKey+timeStamp.substring(17,18);
           }else{
            // subkey 3 is reserved as company name and if present should be first, need a random filler otherwise same subkey will be generated
            timeStamp = new SimpleDateFormat("yyyy.MM.dd.HH.mm.ss").format(new Date());
            subKey=subKey+timeStamp.substring(17,18);
           } 
        }
          // commponentName -> fpxxfq1a5xwwqqhxxxxxitem
          // columnnamekey -> fpxxfq1a5xwwqqhxxxxxitemParentcodeOne
           //   +" jay 1"
          // commponentName -> fpxxfq1a5xwwqqhxxxxxitem
          // columnnamekey -> fpxxfq1a5xwwqqhxxxxxitemLocationOne
           //   +" jay 1"
        if (!restEntity && !cartPoPicked){
          //java date , if zeroes at end the length can vary  yyyy-mm-dd hh:mm:ss.fffffffff
           subKey=subKey+this.instance.getZ2xxcsxrlxxxxxxxxxxxdateadded().toString().substring(0,10)+this.instance.getZ2xxcsxrlxxxxxxxxxxxdateadded().toString().substring(this.instance.getZ2xxcsxrlxxxxxxxxxxxdateadded().toString().length()-6);
            timeStamp = new SimpleDateFormat("yyyy.MM.dd.HH.mm.ss").format(new Date());
            subKey=subKey+timeStamp.substring(17,18);
        }



       if (!bcontinue){
             return null;
       }
// if calling method has try then calling method try will catch the exception
       try {
        // a0xxuobxbxxxxxxxxxxxsid
        // last in the loop centityName ->   centityKeyFieldName ->  entityKeyFieldName -> a0xxukixbxxxxxxxxxxxmatcode
        if (!restEntity && !cartPoPicked){
             // subkey so far is companyName (!empty)+lastName||ss+firstname||ss+ss(companyName empty)+phone #s ||ss etc ss means 
             // time stamp seconds
             // first 16 characters need to be broken into parts if name involved otherwise long last name makes it hard to distinguish key values
             // because ss is used same lastname and firstname will still produce different 16 characters if any phone #s etc are missing 
              int subL=subKey.length();
              if (subL !=0){
               String subKeyh=Integer.toString(subKey.hashCode());
               if (subL > 25){
                 subKey=subKey.substring(0,11)+subKey.substring(subL-5,subL)+subKeyh;
               }
               else {
                subKey=subKey+subKeyh;
               }
              }
              // below logic checks keyed key by checking whether it has any value, look into better logic by checking if no s or n
              if (this.instance.getA0xxukixbxxxxxxxxxxxmatcode()!=null && !this.instance.getA0xxukixbxxxxxxxxxxxmatcode().isEmpty()){
                this.instance.setA0xxukixbxxxxxxxxxxxmatcode(this.instance.getA0xxukixbxxxxxxxxxxxmatcode());
               key = this.instance.getA0xxukixbxxxxxxxxxxxmatcode(); 
              }else{
               key=subKey; 
              }
              //key=key.toUpperCase();
              if (key.length() > 32){
                key=key.substring(0,32);
              }
              if (key.length()==0 || key.trim().length()==0){
               FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                FacesMessage.SEVERITY_ERROR,bundle.getString("Item")+" "+ bundle.getString("empty"),""));
               return null;
              }
              // set it in Home first to allow setting in the instance (instance is private and accessed via Home) 
              //set it because the value was not keyed in ie not set yet and does not show on the screen
                  //sub key 
                  this.instance.setA0xxukixbxxxxxxxxxxxmatcode(key);
             // entityKeyFieldName -> a0xxukixbxxxxxxxxxxxmatcode
             // key set but return if the natural key already exists except for clob and blob where duplicates ok because
             // of non key seq is used to differentiate. So check if same seq
             // also apply initCap inside keyExists since we have access to the instance there
             //if (key.length() > 7 && keyExists(key.substring(0,8))){
             if (key.length() > 7 && keyExists(key)){
              if(importChosen){
               FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                FacesMessage.SEVERITY_WARN,bundle.getString("dropped")+" "+bundle.getString("duplicate")+" "+bundle.getString("key")+" "+key,""));
               return null;
              }else{
               if(customIdentity.getClientMsgLevel().contains("D")){
                FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                 FacesMessage.SEVERITY_WARN,bundle.getString("possible")+" "+bundle.getString("duplicate")+" "+bundle.getString("key")+" "+key,""));
                //return null;
               } 
              }
             }
             //jay subkey subKeys kfrcl N kk this.instance.getA0xxukixbxxxxxxxxxxxmatcode() 
          } 
               //Below is common to all type of keys coming from above ie Item etc except clob/blob
                byte[] bytes = null;
                Iterator<File> itr =null;
                String clobImgUrl=yxxxuq1m1xwwqqqxxxxxclobdataHome.getInstance().getB1xxuzaxbvxxxxxxxxxxdata();
                if(clobImgUrl == null || clobImgUrl.isEmpty() || (clobImgUrl.indexOf("table=") == -1)){
                 clobImgUrl="";
                } 
                if(!clobImgUrl.isEmpty()){
                 // clobimg url as byte data. Need to extract and convert back img url to String as needed
                 dataIsBlob = true;// feature is used for blob only
                 bytes = null;
                 String imgUrl=null;
                 try{
                  yxxxuq1n1xwwqqqxxxxxblobdataHome.clearInstance();
                  yxxxuq1n1xwwqqqxxxxxblobdata = yxxxuq1n1xwwqqqxxxxxblobdataHome.getInstance();
                  yxxxuq1n1xwwqqqxxxxxblobdataHome.setInstance(yxxxuq1n1xwwqqqxxxxxblobdata);
                  yxxxuq1n1xwwqqqxxxxxblobdata.setA4xxexxxbvxxxxxxxxxxtype("url");
                  bytes=yxxxuq1m1xwwqqqxxxxxclobdataHome.getInstance().getB1xxuzaxbvxxxxxxxxxxdata().getBytes("UTF-8");
                  yxxxuq1n1xwwqqqxxxxxblobdata.setB1xxuzbxbvxxxxxxxxxxdata(bytes);//other fields like key follow same as file load logic
                  imgUrl=new String(bytes, StandardCharsets.UTF_8);
                 } catch ( Exception e){
                  FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                   FacesMessage.SEVERITY_INFO,bundle.getString("clobImgUrl")+" "+ bundle.getString("error")+" "+e.getMessage(),""));
                   return null;
                 }
                }else{
                  //iterate through files to check each file mime. Needed to set master entity field docmnt for its superdotPersist()
                 // another iterator further down and needed for related clob/blob entity persist
                  itr = yxxxuq1n1xwwqqqxxxxxblobdataHome.getFiles().iterator();
                 while (itr.hasNext()) {
                  slobkeyhash=Integer.toString((this.instance.getA0xxukixbxxxxxxxxxxxmatcode()).hashCode());
                  file = itr.next();
                      if (file.getMime().equals("text/plain") || file.getMime().equals("text/xml")
                       || file.getMime().equals("text/html")) {
                        dataIsClob = true;
                      } else {
                       dataIsBlob = true;
                      }
                 }
                 if (dataIsClob && dataIsBlob) {
                  this.instance.setW8xxuzdrbvxxxxxxxxxxdocmnt("D"+slobkeyhash);
                 }
                 else {
                  if (dataIsBlob) {
                   this.instance.setW8xxuzdrbvxxxxxxxxxxdocmnt("B"+slobkeyhash);
                  }
                  else {
                   this.instance.setW8xxuzdrbvxxxxxxxxxxdocmnt("C"+slobkeyhash);
                  } 
                 }
                } 
              // price 0 may be valid for some use cases, so just give warning msg rather than asking for confirmation
              //give msg if type is missing from drop list (if not in options )  
              if(this.instance.getC6xxusxrbv16xxxxxxxxtype() == null){
               FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                FacesMessage.SEVERITY_ERROR,bundle.getString("type")+" "+bundle.getString("missing")+", "+bundle.getString("select")+" "+bundle.getString("from")+" "+bundle.getString("Type")+" "+bundle.getString("List")+" "+bundle.getString("or")+" "+bundle.getString("add")+" "+bundle.getString("in")+" "+bundle.getString("option16")+" "+bundle.getString("via")+" "+bundle.getString("setup"),""));
               return null;
              }
              if (this.instance.getC6xxusxrbv16xxxxxxxxtype().equals("IX") && this.instance.getB8fbzpxxbvxxxxxxxxxxselprice().compareTo(new BigDecimal("0.0")) == 0) {
               FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                FacesMessage.SEVERITY_WARN,bundle.getString("price")+" "+bundle.getString("0.0")+", "+bundle.getString("can")+" "+bundle.getString("use")+" "+bundle.getString("update")+" "+bundle.getString("to")+" "+bundle.getString("change"),""));
              }
              // replace below with jsf validation later
        
              if (this.instance.getC6xxusxrbv16xxxxxxxxtype() == null){
               FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                FacesMessage.SEVERITY_WARN,bundle.getString("select")+" "+bundle.getString("type"),""));
                return null;            
              }// allow bi-D
              if(this.instance.getFpxxfq1a5xwwqqhxxxxxitem() != null && this.instance.getFpxxfq1a5xwwqqhxxxxxitem().getC6xxusxrbv16xxxxxxxxtype().equals("PI-L1") &&  (!this.instance.getC6xxusxrbv16xxxxxxxxtype().equals("PI-D") && !this.instance.getC6xxusxrbv16xxxxxxxxtype().equals("BI-D")  && !this.instance.getC6xxusxrbv16xxxxxxxxtype().equals("PI-L*") )){
               FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                FacesMessage.SEVERITY_ERROR,bundle.getString("Cannot")+" "+bundle.getString("add")+" "+bundle.getString("type")+" "+this.instance.getC6xxusxrbv16xxxxxxxxtype()+", "+bundle.getString("mismatch")+" "+bundle.getString("with")+" "+bundle.getString("parent")+"/"+bundle.getString("Category")+" "+bundle.getString("type"),""));
                return null;            
              }
              //si-d detail si-s drop ship si-c cod si-p pickup si-dg digital goods  added (q)
              if(this.instance.getFpxxfq1a5xwwqqhxxxxxitem() != null && this.instance.getFpxxfq1a5xwwqqhxxxxxitem().getC6xxusxrbv16xxxxxxxxtype().equals("SI-L1") && !(this.instance.getC6xxusxrbv16xxxxxxxxtype().equals("SI-D")
                 || this.instance.getC6xxusxrbv16xxxxxxxxtype().equals("SI-S") || this.instance.getC6xxusxrbv16xxxxxxxxtype().equals("SI-C")
                  || this.instance.getC6xxusxrbv16xxxxxxxxtype().equals("SI-P") || this.instance.getC6xxusxrbv16xxxxxxxxtype().equals("SI-DG")
                   || this.instance.getC6xxusxrbv16xxxxxxxxtype().equals("SI-L*")|| this.instance.getC6xxusxrbv16xxxxxxxxtype().equals("SI-L3")
                    || this.instance.getC6xxusxrbv16xxxxxxxxtype().equals("SI-(q)") ) ){
               FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                FacesMessage.SEVERITY_ERROR,bundle.getString("Cannot")+" "+bundle.getString("add")+" "+bundle.getString("type")+", "+bundle.getString("use")+" "+bundle.getString("shopping")+" "+bundle.getString("subcategory")+" "+bundle.getString("or")+" "+bundle.getString("detail")+" "+bundle.getString("type"),""));
                return null;            
              }
              if(this.instance.getC6xxusxrbv16xxxxxxxxtype().equals("PI-D") && (this.instance.getFpxxfq1a5xwwqqhxxxxxitem() == null || (this.instance.getFpxxfq1a5xwwqqhxxxxxitem() != null && !(this.instance.getFpxxfq1a5xwwqqhxxxxxitem().getC6xxusxrbv16xxxxxxxxtype().equals("PI-L1") || this.instance.getFpxxfq1a5xwwqqhxxxxxitem().getC6xxusxrbv16xxxxxxxxtype() .equals("PI-L*"))) )){
               FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                FacesMessage.SEVERITY_ERROR,bundle.getString("Cannot")+" "+bundle.getString("add")+" "+bundle.getString("type")+" "+this.instance.getC6xxusxrbv16xxxxxxxxtype()+" "+bundle.getString("without")+" "+bundle.getString("any")+" "+bundle.getString("value")+" "+bundle.getString("selected")+" "+bundle.getString("as")+" "+bundle.getString("parent")+"/"+bundle.getString("Category"),""));
               FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                FacesMessage.SEVERITY_ERROR,bundle.getString("Create")+" "+bundle.getString("another")+" "+bundle.getString("item")+" "+bundle.getString("with")+" "+bundle.getString("type")+" "+bundle.getString("Category")+" "+bundle.getString("first")+" "+bundle.getString("or")+" "+bundle.getString("select")+" "+bundle.getString("any")+" "+bundle.getString("existing")+" "+bundle.getString("one")+" "+bundle.getString("as")+" "+bundle.getString("Parent"),""));
                return null;            
              }
              if((this.instance.getC6xxusxrbv16xxxxxxxxtype().equals("SI-D")||this.instance.getC6xxusxrbv16xxxxxxxxtype().equals("SI-S") || this.instance.getC6xxusxrbv16xxxxxxxxtype().equals("SI-C") || this.instance.getC6xxusxrbv16xxxxxxxxtype().equals("SI-P") || this.instance.getC6xxusxrbv16xxxxxxxxtype().equals("SI-DG")) && (this.instance.getFpxxfq1a5xwwqqhxxxxxitem() == null || (this.instance.getFpxxfq1a5xwwqqhxxxxxitem() != null && !(this.instance.getFpxxfq1a5xwwqqhxxxxxitem().getC6xxusxrbv16xxxxxxxxtype().equals("SI-L1") || this.instance.getFpxxfq1a5xwwqqhxxxxxitem().getC6xxusxrbv16xxxxxxxxtype() .equals("SI-L*") || this.instance.getFpxxfq1a5xwwqqhxxxxxitem().getC6xxusxrbv16xxxxxxxxtype() .equals("SI-L3"))) )){
               FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                FacesMessage.SEVERITY_ERROR,bundle.getString("Cannot")+" "+bundle.getString("add")+" "+bundle.getString("type")+" "+this.instance.getC6xxusxrbv16xxxxxxxxtype()+" "+bundle.getString("without")+" "+bundle.getString("any")+" "+bundle.getString("value")+" "+bundle.getString("selected")+" "+bundle.getString("as")+" "+bundle.getString("parent")+"/"+bundle.getString("Category"),""));
               FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                FacesMessage.SEVERITY_INFO,bundle.getString("Create")+" "+bundle.getString("another")+" "+bundle.getString("item")+" "+bundle.getString("with")+" "+bundle.getString("type")+" "+bundle.getString("Category")+" "+bundle.getString("first")+" "+bundle.getString("or")+" "+bundle.getString("select")+" "+bundle.getString("any")+" "+bundle.getString("existing")+" "+bundle.getString("one")+" "+bundle.getString("as")+" "+bundle.getString("Parent"),""));
                return null;            
              }
              if(this.instance.getC6xxusxrbv16xxxxxxxxtype().equals("PI-L1") && this.instance.getFpxxfq1a5xwwqqhxxxxxitem() != null ){
               FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                FacesMessage.SEVERITY_INFO,bundle.getString("parent")+" "+bundle.getString("value")+" "+bundle.getString("corrected")+" "+bundle.getString("to")+" "+bundle.getString("null"),""));
                this.instance.setFpxxfq1a5xwwqqhxxxxxitem(null);
              }
              if(this.instance.getC6xxusxrbv16xxxxxxxxtype().equals("SI-L1") && this.instance.getFpxxfq1a5xwwqqhxxxxxitem() != null ){
               FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                FacesMessage.SEVERITY_INFO,bundle.getString("parent")+" "+bundle.getString("value")+" "+bundle.getString("corrected")+" "+bundle.getString("to")+" "+bundle.getString("null"),""));
                this.instance.setFpxxfq1a5xwwqqhxxxxxitem(null);
              }
              String checkedDataAndSize="";
              // checkedData is a temporary field and may be null based on the logic flow, multiple checkbox values return
              // string array and each value separated by comma 
              // item shipcode contains one or more checkedData+checkedSize 2ch each pair and can have space if no restriction for checkeddata
              // shipcode is used for shipping cost 
              //25chrs shipcode holds 4ch allowed shipping like standard/express/pickup + 1ch size small/medium/Large/xlarge/ylarge  1unit+4ch weight g,kg 88.9
              //1ch unit+4ch length width height 
              // check logic checkedData meant for shipping option like express, see recalship for details
              if(this.instance.getC6xxusxrbv16xxxxxxxxtype().equals("SI-D") || this.instance.getC6xxusxrbv16xxxxxxxxtype().equals("SI-C")
                 ||  this.instance.getC6xxusxrbv16xxxxxxxxtype().equals("SI-S") ||  this.instance.getC6xxusxrbv16xxxxxxxxtype().equals("IX") && this.instance.getCheckedData() != null  ){
               String checkedDataS="";//will allow selectmanycheckbox upto 4
               // checkedData is a temporary field and may be null based on the logic flow 
               // checkedData is initialized as {" "} so not null
                if(this.instance != null && this.instance.getCheckedData() != null){
                 int jj=this.instance.getCheckedData().length;
                 for(int i=0; i<4; i=i+1){
                  if(jj>i && this.instance.getCheckedData()[i]!=null){
                   checkedDataS=checkedDataS+this.instance.getCheckedData()[i]; 
                  }else{
                   checkedDataS=checkedDataS+"X"; 
                  } 
                 }
                }
                checkedDataAndSize=checkedDataAndSize+checkedDataS+this.instance.getCheckedSize()+this.unitLength
                 +this.valueLength+this.unitWidth+this.valueWidth+this.unitHeight+this.valueHeight+this.unitWeight+this.valueWeight;//free ship will put X, otherwise S/M/L
                if(checkedDataAndSize.length() > 25){
                 checkedDataAndSize=checkedDataAndSize.substring(0,25);
                 FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                  FacesMessage.SEVERITY_WARN,bundle.getString("shipcode")+" "+bundle.getString("truncated")+" "+bundle.getString("to")+" "+checkedDataAndSize+", "+bundle.getString("maximum")+" "+bundle.getString("size")+" "+bundle.getString("25"),""));
                }
                this.instance.setC3fbuxscbvxxxxxxxxxxshipcode(checkedDataAndSize);
              }else{
               this.instance.setC3fbuxscbvxxxxxxxxxxshipcode("XXXXX");// recalship checks this and skips ship cost
              }
              String itemVariants="";
              String itemVariantsL="";
              String spaces8="        "; 
              String spaces9="         "; 
              if(itemVariantSize !=null && itemVariantSize.length()<8){
               itemVariantSize=itemVariantSize+spaces8.substring(0,8-itemVariantSize.length());
              }
              if(itemVariantColour !=null && itemVariantColour.length()<8){
               itemVariantColour=itemVariantColour+spaces8.substring(0,8-itemVariantColour.length());
              }
              if(itemVariantMaterial !=null && itemVariantMaterial.length()<8){
               itemVariantMaterial=itemVariantMaterial+spaces8.substring(0,8-itemVariantMaterial.length());
              }
              if(itemVariantBrand !=null && itemVariantBrand.length()<8){
               itemVariantBrand=itemVariantBrand+spaces8.substring(0,8-itemVariantBrand.length());
              }
              //cannot add unicode "\u2714", it increases string length
              itemVariants=itemVariantSize+itemVariantColour+itemVariantMaterial+itemVariantBrand;
              if (! (this.instance.getY2xxuxxrbvxxxxxxxxxxmisccode1() !=null 
                && this.instance.getY2xxuxxrbvxxxxxxxxxxmisccode1().length() >4
                 && (this.instance.getY2xxuxxrbvxxxxxxxxxxmisccode1().substring(0,5).equals("trial")
                  || this.instance.getY2xxuxxrbvxxxxxxxxxxmisccode1().substring(0,5).equals("recur"))) ){
               this.instance.setG2xxuxn2bvxxxxxxxxxxsubcodesn2(itemVariants);
              }// skip if trial/recurring

              if(itemVariantSizeL !=null && itemVariantSizeL.length()<9){
               itemVariantSizeL=itemVariantSizeL+spaces9.substring(0,9-itemVariantSizeL.length());
              }
              if(itemVariantColourL !=null && itemVariantColourL.length()<9){
               itemVariantColourL=itemVariantColourL+spaces9.substring(0,9-itemVariantColourL.length());
              }
              if(itemVariantMaterialL !=null && itemVariantMaterialL.length()<9){
               itemVariantMaterialL=itemVariantMaterialL+spaces9.substring(0,9-itemVariantMaterialL.length());
              }
              if(itemVariantBrandL !=null && itemVariantBrandL.length()<9){
               itemVariantBrandL=itemVariantBrandL+spaces9.substring(0,9-itemVariantBrandL.length());
              }
              //cannot add unicode "\u2714", it increases string length
              itemVariantsL=itemVariantSizeL+itemVariantColourL+itemVariantMaterialL+itemVariantBrandL;
              itemVariantsL=itemVariantsL.trim();      
              if(itemVariantsL.length()>35){
               itemVariantsL=itemVariantsL.substring(0,35);
              }
              this.instance.setG2xxuxn3bvxxxxxxxxxxsubcodesn3(itemVariantsL);
              // take care of replyToMatCodeSid for replies only
              if (replyToMatSidS != null){
               Integer replyToMatSid = Integer.parseInt(replyToMatSidS);
               fpxxfq1a5xwwqqhxxxxxitemli = (Fpxxfq1a5xwwqqhxxxxxitem) entityManager.createQuery("select cc from Fpxxfq1a5xwwqqhxxxxxitem cc where cc.a0xxuobxbxxxxxxxxxxxsid = :keyOfEntity AND cc.zzxxu2oxxhxxxxxxxxxxowner2=:owner2 order by cc.a0xxuobxbxxxxxxxxxxxsid asc")
                .setParameter("keyOfEntity", replyToMatSid).setParameter("owner2", owner2Code).getSingleResult();
               if (fpxxfq1a5xwwqqhxxxxxitemli != null) {
                this.instance.setFpxxfq1a5xwwqqhxxxxxitem(fpxxfq1a5xwwqqhxxxxxitemli);
               }
              }
              // default SKU, if empty
              if(productCode.equals("e")){
               String sku="";
               if(this.instance.getF1xxuxxrbvxxxxxxxxxxaliascode() ==null || this.instance.getF1xxuxxrbvxxxxxxxxxxaliascode().isEmpty()) {
                if(this.instance.getFpxxfq1a5xwwqqhxxxxxitem() !=null){
                 if(this.instance.getFpxxfq1a5xwwqqhxxxxxitem().getA0xxukixbxxxxxxxxxxxmatcode() !=null){
                  sku=this.instance.getFpxxfq1a5xwwqqhxxxxxitem().getA0xxukixbxxxxxxxxxxxmatcode().substring(0,2);
                 }else{
                  sku="XX";
                 }
                }else{
                  sku="XX";
                }
                sku=sku+"-"+this.instance.getA0xxukixbxxxxxxxxxxxmatcode().substring(0,2);
                if(itemVariantSize==null || itemVariantSize.trim().isEmpty()){
                 itemVariantSize="S";
                }
                if(itemVariantColour==null || itemVariantColour.trim().isEmpty()){
                 itemVariantColour="C";
                }
                if(itemVariantMaterial==null || itemVariantMaterial.trim().isEmpty()){
                 itemVariantMaterial="M";
                }
                if(itemVariantBrand==null || itemVariantBrand.trim().isEmpty()){
                 itemVariantBrand="B";
                }
                sku=sku+"-"+itemVariantSize+"-"+itemVariantColour+"-"+itemVariantMaterial+"-"+itemVariantBrand;
                if(sku.length()>25){
                 sku=sku.substring(0,25); 
                }
                this.instance.setF1xxuxxrbvxxxxxxxxxxaliascode(sku);
                this.instance.setG2xxuxn3bvxxxxxxxxxxsubcodesn3("size    :colour  :material:brand  :");//default value
               }
              }

                 //if SI-L* or SI-L3 or SI-D put keyvalue because there will be a default image in blob
                 if(this.instance.getC6xxusxrbv16xxxxxxxxtype().equals("SI-L*") || this.instance.getC6xxusxrbv16xxxxxxxxtype().equals("SI-L3") || this.instance.getC6xxusxrbv16xxxxxxxxtype().equals("SI-D")){ 
                  slobkeyhash=Integer.toString((this.instance.getA0xxukixbxxxxxxxxxxxmatcode()).hashCode());
                  this.instance.setW8xxuzdrbvxxxxxxxxxxdocmnt("B"+slobkeyhash);
                 }
               // give persist message w key and time, but bypass non key ones like details
               if(!cartPoPicked && !skipValidation){
                try{
                    superdotpersist();//master entity
                } catch ( Exception e){
                   FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                   FacesMessage.SEVERITY_ERROR,key+" "+"save"+" "+" "+bundle.getString("failed")+",  "+e.getMessage(),""));
                   return null;
                }
                if(key != null && !key.trim().isEmpty()){
                 if(importdone <6){ 
                  if (customIdentity.isDebug()){
                   timeStamp = new SimpleDateFormat("yyyy.MM.dd.HH.mm.ss z").format(new Date());
                   FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                    FacesMessage.SEVERITY_INFO,bundle.getString("saved")+" "+bundle.getString("Item")+" "+bundle.getString("reference")+" "+bundle.getString("as")+" ("+key+") "+"at"+" "+timeStamp,""));
                  }
                 }
                 if(importdone == 7){ 
                  FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                   FacesMessage.SEVERITY_INFO,bundle.getString("continuing")+" "+bundle.getString("Item")+" "+bundle.getString("import"),""));
                 }
                }
               }else{
                superdotupdate();
                if (customIdentity.isDebug()){
                 timeStamp = new SimpleDateFormat("yyyy.MM.dd.HH.mm.ss z").format(new Date());
                 FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                  FacesMessage.SEVERITY_INFO,bundle.getString("updated")+" "+bundle.getString("Item")+" "+bundle.getString("reference")+" "+bundle.getString("as")+" ("+key+") "+"at"+" "+timeStamp,""));
                }
               }
               picked=true;
              if (this.getLastItemLine() > 0)
                  multipicked=true;
                int i=0;
                // master entity iterator to call clob/blob persist but they have their own iterator for uploaded files, so call once only
                //previous uploaded files iterator was used to set the value of the master entity xxxdocmnt field
                Integer attachment=0;
                int callClobPersist=0;
                int callBlobPersist=0;
                itr = yxxxuq1n1xwwqqqxxxxxblobdataHome.getFiles().iterator();
                while (itr.hasNext()) {
                 file = itr.next();
                 dataIsClob=false;
                 dataIsBlob=false;
                 temps=file.getMime();
			 if ("image/bmp".equals(temps)) {
				lobDataType = "bmp";
			 } else if ("image/jpeg".equals(temps)) {
				lobDataType = "jpg";
			 } else if ("image/gif".equals(temps)) {
				lobDataType = "gif";
			 } else if ("image/png".equals(temps)) {
				lobDataType = "png";
			 } else if ("text/xml".equals(temps)) {
				lobDataType = "xml";
			 } else if ("application/msword".equals(temps)) {
				lobDataType = "doc";
			 } else if ("text/plain".equals(temps)) {
				lobDataType = "txt";
			  } else if ("text/html".equals(temps)) {
				lobDataType = "html";
			 } else if ("application/pdf".equals(temps)) {
				lobDataType = "pdf";
			 } else if ("application/vnd.ms-excel".equals(temps)) {
				lobDataType = "xls";
			 } else if ("application/vnd.ms-powerpoint".equals(temps)) {
				lobDataType = "ppt";
			 } else if ("audio/mpeg".equals(temps)) {
				lobDataType = "mp3";
			 } else if ("video/mp4".equals(temps)) {
				lobDataType = "mp4";
			 } else {
				lobDataType = "unkn";
			 }
		      if (lobDataType.equals("txt") || lobDataType.equals("xml") 
                                            || lobDataType.equals("html")) {
                                            dataIsClob = true;
		      } else {
                                            dataIsBlob = true;
		      }
                       //jay itr loop here based on number of file objects in files arraylist ie arraylist size
                       attachment++;
                  if (dataIsClob) {
                   yxxxuq1m1xwwqqqxxxxxclobdataHome.clearInstance();
                   yxxxuq1m1xwwqqqxxxxxclobdata = yxxxuq1m1xwwqqqxxxxxclobdataHome.getInstance();
                   yxxxuq1m1xwwqqqxxxxxclobdataHome.setInstance(yxxxuq1m1xwwqqqxxxxxclobdata);
                   yxxxuq1m1xwwqqqxxxxxclobdata.setA0xxukcdlvxxxxxxxxxxfromtable("FPXXFQ1A5XWWQQHXXXXXITEM");
                   yxxxuq1m1xwwqqqxxxxxclobdata.setA1xxuxxxbv49xxxxxxxxfromkey(slobkeyhash);
                   yxxxuq1m1xwwqqqxxxxxclobdata.setA2xxuxxxbv50xxxxxxxxqualifier(Integer.toString(1));
                   yxxxuq1m1xwwqqqxxxxxclobdata.setA3xxexnsbvxxxxxxxxxxsequence(attachment-1);
                   yxxxuq1m1xwwqqqxxxxxclobdata.setY3xxuxznbvxxxxxxxxxxnotes(file.getName());
                   String uploadedText=file.getText();
                   String jay=uploadedText;
                   try{
                    uploadedText=this.sanitize(uploadedText);
                    uploadedText=jay;
                   } catch ( Exception e){
                    FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                    FacesMessage.SEVERITY_ERROR," "+"invalid"+" "+" "+bundle.getString("content")+",  "+e.getMessage(),""));
                    return null;
                   }
                   yxxxuq1m1xwwqqqxxxxxclobdata.setB1xxuzaxbvxxxxxxxxxxdata(uploadedText);
                   yxxxuq1m1xwwqqqxxxxxclobdata.setA4xxexxxbvxxxxxxxxxxtype(lobDataType);
                   yxxxuq1m1xwwqqqxxxxxclobdataHome.persist();//the clob instance gets passed but gets overwritten again depending on origin
                   callClobPersist=1;
                   FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                      FacesMessage.SEVERITY_INFO,bundle.getString("saved")+" "+file.getLength()+" "+bundle.getString("characters")+" "+bundle.getString("text")+" "+bundle.getString("data"),""));
                 }
                 else {
                  if(clobImgUrl.isEmpty()){
                   yxxxuq1n1xwwqqqxxxxxblobdataHome.clearInstance();
                   yxxxuq1n1xwwqqqxxxxxblobdata = yxxxuq1n1xwwqqqxxxxxblobdataHome.getInstance();
                  yxxxuq1n1xwwqqqxxxxxblobdataHome.setInstance(yxxxuq1n1xwwqqqxxxxxblobdata);
                   yxxxuq1n1xwwqqqxxxxxblobdata.setB1xxuzbxbvxxxxxxxxxxdata(file.getData());
                   yxxxuq1n1xwwqqqxxxxxblobdata.setY3xxuxznbvxxxxxxxxxxnotes(file.getName());
                   if(yxxxuq1n1xwwqqqxxxxxblobdata.getA4xxexxxbvxxxxxxxxxxtype() !=null && !yxxxuq1n1xwwqqqxxxxxblobdata.getA4xxexxxbvxxxxxxxxxxtype().toLowerCase().contains("asis")){   
                    yxxxuq1n1xwwqqqxxxxxblobdata.setA4xxexxxbvxxxxxxxxxxtype(lobDataType);
                   }
                   if(yxxxuq1n1xwwqqqxxxxxblobdata.getA4xxexxxbvxxxxxxxxxxtype() !=null && yxxxuq1n1xwwqqqxxxxxblobdata.getA4xxexxxbvxxxxxxxxxxtype().toLowerCase().contains("asis")){   
                    //replace beyond asis with new type if any
                    yxxxuq1n1xwwqqqxxxxxblobdata.setA4xxexxxbvxxxxxxxxxxtype("asis"+lobDataType);
                   }
                   if(yxxxuq1n1xwwqqqxxxxxblobdata.getA4xxexxxbvxxxxxxxxxxtype() ==null ){   
                    yxxxuq1n1xwwqqqxxxxxblobdata.setA4xxexxxbvxxxxxxxxxxtype(lobDataType);
                   }
                  }
                  yxxxuq1n1xwwqqqxxxxxblobdata.setA0xxukbdlvxxxxxxxxxxfromtable("FPXXFQ1A5XWWQQHXXXXXITEM");
                  yxxxuq1n1xwwqqqxxxxxblobdata.setA1xxuxxxbv49xxxxxxxxfromkey(slobkeyhash);
                  yxxxuq1n1xwwqqqxxxxxblobdata.setA2xxuxxxbv50xxxxxxxxqualifier(Integer.toString(1));
                  yxxxuq1n1xwwqqqxxxxxblobdata.setA3xxexnsbvxxxxxxxxxxsequence(attachment-1);
                  yxxxuq1n1xwwqqqxxxxxblobdataHome.persist();//the blob instance gets passed but gets overwritten again depending on origin
                  callBlobPersist=1;
                  i++; 
                   FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                      FacesMessage.SEVERITY_INFO,bundle.getString("saved")+" "+file.getLength()+" "+bundle.getString("bytes")+" "+bundle.getString("binary")+" "+bundle.getString("data"),""));
                 } 
                }//itr while 
                // image iterator done, if item is shopping type and no image put a default image to be replaced
                // added checking if image already added, othewise duplicates was getting created
                  if (attachment ==0 && (this.instance.getC6xxusxrbv16xxxxxxxxtype().equals("SI-D") || this.instance.getC6xxusxrbv16xxxxxxxxtype().startsWith("SI-L") ) && !(this.instance.getW8xxuzdrbvxxxxxxxxxxdocmnt().equals("D") && this.instance.getW8xxuzdrbvxxxxxxxxxxdocmnt().equals("B"))  ){
                   slobkeyhash=Integer.toString((this.instance.getA0xxukixbxxxxxxxxxxxmatcode()).hashCode());
                   yxxxuq1n1xwwqqqxxxxxblobdataHome.clearInstance();
                   yxxxuq1n1xwwqqqxxxxxblobdata = yxxxuq1n1xwwqqqxxxxxblobdataHome.getInstance();
                   yxxxuq1n1xwwqqqxxxxxblobdataHome.setInstance(yxxxuq1n1xwwqqqxxxxxblobdata);
                   yxxxuq1n1xwwqqqxxxxxblobdata.setA0xxukbdlvxxxxxxxxxxfromtable("FPXXFQ1A5XWWQQHXXXXXITEM");
                   yxxxuq1n1xwwqqqxxxxxblobdata.setA1xxuxxxbv49xxxxxxxxfromkey(slobkeyhash);
                   yxxxuq1n1xwwqqqxxxxxblobdata.setA2xxuxxxbv50xxxxxxxxqualifier(Integer.toString(1));
                   yxxxuq1n1xwwqqqxxxxxblobdata.setA3xxexnsbvxxxxxxxxxxsequence(0);
                   ByteArrayOutputStream baos = new ByteArrayOutputStream();
                   byte[] imageInByte=null;
                   BufferedImage originalImage=null;
                   try{
                    if(this.instance.getC6xxusxrbv16xxxxxxxxtype().equals("SI-D")){
                     originalImage = ImageIO.read(new java.io.File(context.getRealPath("/img/default.png")));
                    }else{
                     originalImage = ImageIO.read(new java.io.File(context.getRealPath("/img/directory.png")));
                    }
                    ImageIO.write( originalImage, "png", baos );
                    baos.flush();
                    imageInByte = baos.toByteArray();
                    baos.close();
                   } catch (Exception e) {
                    FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                     FacesMessage.SEVERITY_INFO,"Picture xform failed: " + e.getMessage(),""));
                   }
                   try{
                   yxxxuq1n1xwwqqqxxxxxblobdata.setB1xxuzbxbvxxxxxxxxxxdata(imageInByte);
                   yxxxuq1n1xwwqqqxxxxxblobdata.setA4xxexxxbvxxxxxxxxxxtype("png");
                   //yxxxuq1n1xwwqqqxxxxxblobdata.setZ3xxutoxlhxxxxxxxxxxowner(ownerCode);
                   //yxxxuq1n1xwwqqqxxxxxblobdata.setZzxxu2oxxhxxxxxxxxxxowner2(jowner);
                   yxxxuq1n1xwwqqqxxxxxblobdataHome.persist();
                   } catch (Exception e) {
                    FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                     FacesMessage.SEVERITY_INFO,"Picture save failed: " + e.getMessage(),""));
                   }
                  }
                // to prevent same image being saved again in same request
                clearUploadData(); 
            // if manual entry was done instead of using options then capture it in userprofile
 	    Yxxxuh566xwwqqwxxxxxuser user = null;
             if(customIdentity.getUserSid()==0){
              return null;// came from r3rest not loggedIn site create  for ItemHome only
             }




             setChangeDone(true);
             importAdded=importAdded+1;
             return "persisted";
       } catch ( Exception e){
         String context="key="+key+",subKey="+subKey;
         FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
           FacesMessage.SEVERITY_ERROR," "+"Item"+" "+context+" "+ bundle.getString("error")+" "+bundle.getString("cause")+"- "+e.getMessage(),""));
               bcontinue=false;
               return null;
       }

    }

    public String superUpdate() {
        //this is used to update statusfldate before calling superdotupdate which is the jpa merge
        //flow is (allowupdate() if needed)-update()-(sperupdate() if statusdt needs change-superdotupdate())
        // or -superdotupdate()
        //setUpdatedMessage(createValueExpression(""));
      // allow raaspi to delete SYSTEM records
      if((getInstance().getZzxxu2oxxhxxxxxxxxxxowner2().equals("SYSTEM") && !owner2Code.equals(masterSiteCode)) || (!getInstance().getZzxxu2oxxhxxxxxxxxxxowner2().equals("SYSTEM") && !getInstance().getZzxxu2oxxhxxxxxxxxxxowner2().equals(owner2Code))){
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
         FacesMessage.SEVERITY_ERROR,bundle.getString("If")+" "+bundle.getString("non")+" "+bundle.getString("owned")+", "+bundle.getString("update")+" "+ bundle.getString("not")+" "+bundle.getString("allowed"),""));

                 bcontinue=false;
                 return null;
      }


       if (!bcontinue){
        FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
         FacesMessage.SEVERITY_ERROR,bundle.getString("error")+", "+ bundle.getString("not")+" "+bundle.getString("continue"),""));



             return null;
       }
           this.instance.setZ6xxcztxlxxxxxxxxxxxstatusfldt(Calendar.getInstance().getTime());
           superdotupdate(); 
           setChangeDone(true);
           timeStamp = new SimpleDateFormat("yyyy.MM.dd.HH.mm.ss z").format(new Date());
          /* too much info
           FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
            FacesMessage.SEVERITY_INFO,bundle.getString("updated")+" "+bundle.getString("selected")+" "+"Item"+" "+"at"+" "+timeStamp,""));
           */

           return "superUpdated"; 

    }

    public String updateRest(String descript) {
           superdotupdate();//superdotupdate does not change any date field
           setChangeDone(true);
           timeStamp = new SimpleDateFormat("yyyy.MM.dd.HH.mm.ss z").format(new Date());
           FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
            FacesMessage.SEVERITY_INFO,bundle.getString("updated")+" "+"Item"+" "+descript+" "+bundle.getString("record")+" "+bundle.getString("at")+" "+timeStamp,""));
            return "updated"; 
       }


    public String allowUpdate() {
       ////setUpdatedMessage(createValueExpression(""));
     // allowupdate is used by method calls only and not directly by jsf 
     // there are cases like item stat or customer order we need to allow non owned records to be updated
     // for this to work, make sure entityHome is cleared,use instance itself or setinstance is done with the variable holding instance values and then this is called
            superdotupdate();
            setChangeDone(true);
        /* use customIdentity.getClientMsgLev 
           timeStamp = new SimpleDateFormat("yyyy.MM.dd.HH.mm.ss z").format(new Date());
           FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
            FacesMessage.SEVERITY_INFO,bundle.getString("updated")+" "+bundle.getString("selected")+" "+"Item"+" "+"at"+" "+timeStamp,""));
        */
            return "updated"; 
       }




    /**
    * used by xxEdit.xhtml for updating multiple items for master entities which have details, example order,invoice,glentries
    * mimics ItemHome updateProductsToOrder method (used for shopping cart) logic to handle multiItems
    *@see "addWithDetails used by xxEdit to add new, or update or add detail"
    *@see "updateProductsToOrder used by shopping cart add"
    *add logic to adjust invoice, payment details and paypal etc payment due ie either credit or adjust hold
    */
    public String updateDetailsAll() {
     // before this method is called, very 1st item (common use case) was already saved as detail via addWithDetails method 
     // and flag more was set
     // flow for more items via this method, is as follows
     // first update the current detail ie 2nd or later item and persist it, initialise lastitemline back to 0 and
     // set more to false. The details now has multiple items and user may have flagged one or more to be removed
     // or qty may have changed, so rechecks by looping through details ie lineitems,
     // if checked for remove then subtract qty from item and remove from order details. 
     // call cartpersist with param u for undo or remove which
     //  since no detail value for this will stay, dont call updatecdetails but call
     //  (1) showrunt 
     //  (2) persistrunt
     //  (3) remove() detail and make it null to avoid keet as dirty 
     //  (4) update order itself 
     // if not ckecked , then call ordersHome cartpersist with currentCartedPO detail sid,c as change option 
     // and tempCount (1 means first call)
     // cartPersist for c will get the detail  and call
     //  (1) update() parent which in turn updates details 
     //  (1.1) updatecdetails which updates the order detail qty based on itemTempQty (itemDetailsBrowse view has this)
     //  (1.2) showrunt which recalculates both details and order itself based on quantity or say tax value( a cart can be idle for days)
     //  (1.3) persistrunt which resets all the values for the order itself (detail values done in showrunt) using values calculated in showrunt
     //     each showrunt for a detail will recalculate both its own value and its master but persistrunt simply copies the variable values into properties
     //  (1.4) update() detail instance  
     //  (1.5) update order
     //  (1.6) extra logic added to avoid totals getting wrong
     //   updateParentFromDetails() which loops through all details and recalculates totals and updates parent instance
     //   not sure why the detail was superupdated again     
     // coming back from cartperist
     //  (6) adjust posting if invoice/payment by calling posting with net changes for baseamount etc
     // increment tempcount and go to top of loop
     //tempCount=this.getLastItemLine()-1; 
     Integer tempRemoveCount=0;
     String  currentCartedPO="";
     Integer currentCartedPOSID;

       return "update";
    }










   
    /***
    * update is used by ui like xxxEdit and xxxEditEasy and has logic to prevent cross user updates 
    * update normally updates the entity for which the update was issued, but sometimes related updates are done like
    * 1. for transactions the details,item,customer/vendor are updated before calling entity updated
    *  like order,shipment etc are updated.
    *  If different owner then allowupdate() is used
    * 2. for usagebyperiods, rollupgroup is also updated but same owner  
    * 3. for entities like item,customer which has docmnt fileld for clob/blob data
    *  clob/blob has docmnt field but holds actual data wheres other entities like Item,Customer has 
    *  their hashed key field value in docmnt field. The sid key value not available until item gets created.
    *  There is logic to allow VW (visitor)or DH (Demo User) to change only own user records.
    *  verify posting not needed here because invoice/payment updates are done via updatedetailsall
    *  do not allow user to delete own user record or update own role/level/restrict/allow settings to prevent no one
    *  be left with enough rights , prevent via jsf rendered do not show if owner same as logon id
    * 
    * @param none but values come via variables
    * @return String null or some string value 
    * @exception various

    * Add logic to handle key value change > new hash code > update item as well as clob/blob fromKey
    * Change logic for clob/blob all over to not use seq 0, reserve it store removed value. Seq starts from 1
    * if more than 1 img why both add and replace not shown. If add put the new one with ++seq
    */
    public String update() {
     if(customIdentity.hasRole("VH") || customIdentity.hasRole("PH")) {
       if(!ownerCode.equals(this.instance.getZexxutoxlhxxxxxxxxxxowner())){
        FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
            FacesMessage.SEVERITY_ERROR,bundle.getString("If")+" "+bundle.getString("non")+" "+bundle.getString("owned")+", "+bundle.getString("update")+" "+ bundle.getString("not")+" "+bundle.getString("allowed"),""));
                 return null;
       }
     } 


      boolean dataReplaced=false;
      byte[] bytes = null;
      //setUpdatedMessage(createValueExpression(""));
      // allow raaspi to delete SYSTEM records
      if((getInstance().getZzxxu2oxxhxxxxxxxxxxowner2().equals("SYSTEM") && !customIdentity.isMasterSite()) || (!getInstance().getZzxxu2oxxhxxxxxxxxxxowner2().equals("SYSTEM") && !getInstance().getZzxxu2oxxhxxxxxxxxxxowner2().equals(owner2Code))){
       FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
        FacesMessage.SEVERITY_INFO,bundle.getString("Gallery")+"/ "+bundle.getString("non")+" "+bundle.getString("owned")+" "+bundle.getString("records")+" "+bundle.getString("update")+" "+ bundle.getString("not")+" "+bundle.getString("allowed"),""));
        //bcontinue=false;
        return null;
      }
      // allow user to change its own doc (image) if product is forum
      // in user edit make only doc property as editable all others read only
      // similarly allow users to change their own customer info like address, name etc , but send an email to original value to inform
      if (((customIdentity.getRestrict1() != null && customIdentity.getRestrict1().equals("D")) || customIdentity.hasRole("VW")) && (!getInstance().getZexxutoxlhxxxxxxxxxxowner().equals(ownerCode) && getInstance().getA0xxuobxbxxxxxxxxxxxsid() != customIdentity.getUserSid() )  ){ 
       FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
        FacesMessage.SEVERITY_INFO,bundle.getString("If")+" "+bundle.getString("non")+" "+bundle.getString("owned")+", "+bundle.getString("update")+" "+ bundle.getString("not")+" "+bundle.getString("allowed"),""));
        //bcontinue=false;
        return null;
      }
        entityUpdated =false;
        String fromTable="";
        String qualifier="";
       if (!bcontinue){
        FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
         FacesMessage.SEVERITY_ERROR,bundle.getString("error")+", "+ bundle.getString("not")+" "+bundle.getString("continue"),""));
         return null;
       }
         this.instance.setZ6xxcztxlxxxxxxxxxxxstatusfldt(Calendar.getInstance().getTime());
       if(file !=null){
        //this.clearUploadData();// to allow new upload , jay remove this since it ctears any uploaded file. clear using button if needed
       }
             //Below is common to all type of keys coming from above w8xxuzdrbvxxxxxxxxxxdocmnt  
            //jay add logic to delete existing docs, below will add new ones -done
              // replace below with jsf validation later
              if(this.instance.getFpxxfq1a5xwwqqhxxxxxitem() != null && (this.instance.getFpxxfq1a5xwwqqhxxxxxitem().getC6xxusxrbv16xxxxxxxxtype().equals("PI-L1") || this.instance.getFpxxfq1a5xwwqqhxxxxxitem().getC6xxusxrbv16xxxxxxxxtype().equals("PI-L*")) &&  (!this.instance.getC6xxusxrbv16xxxxxxxxtype().equals("PI-D") && !this.instance.getC6xxusxrbv16xxxxxxxxtype().equals("BI-D") && !this.instance.getC6xxusxrbv16xxxxxxxxtype().equals("PI-L*") )){
               FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                FacesMessage.SEVERITY_INFO,bundle.getString("use")+" "+ bundle.getString("image")+" "+bundle.getString("subcategory")+" "+bundle.getString("or")+" "+bundle.getString("detail")+" "+bundle.getString("type"),""));

                return null;            
              }
              if(this.instance.getFpxxfq1a5xwwqqhxxxxxitem() != null && (this.instance.getFpxxfq1a5xwwqqhxxxxxitem().getC6xxusxrbv16xxxxxxxxtype().equals("SI-L1") || this.instance.getFpxxfq1a5xwwqqhxxxxxitem().getC6xxusxrbv16xxxxxxxxtype().equals("SI-L*")|| this.instance.getFpxxfq1a5xwwqqhxxxxxitem().getC6xxusxrbv16xxxxxxxxtype().equals("SI-L3")) &&  (!(this.instance.getC6xxusxrbv16xxxxxxxxtype().equals("SI-D")||this.instance.getC6xxusxrbv16xxxxxxxxtype().equals("SI-S")||this.instance.getC6xxusxrbv16xxxxxxxxtype().equals("SI-C")||this.instance.getC6xxusxrbv16xxxxxxxxtype().equals("SI-P")||this.instance.getC6xxusxrbv16xxxxxxxxtype().equals("SI-DG")) && !(this.instance.getC6xxusxrbv16xxxxxxxxtype().equals("SI-L*")|| !this.instance.getC6xxusxrbv16xxxxxxxxtype().equals("SI-L3")) )){
               FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                FacesMessage.SEVERITY_INFO,bundle.getString("use")+" "+ bundle.getString("shopping")+" "+bundle.getString("subcategory")+" "+bundle.getString("or")+" "+bundle.getString("detail")+" "+bundle.getString("type"),""));

                return null;            
              }
              if (this.instance.getC6xxusxrbv16xxxxxxxxtype() == null){
               FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                FacesMessage.SEVERITY_WARN,bundle.getString("type")+" "+bundle.getString("empty")+", "+bundle.getString("need")+" "+bundle.getString("to")+" "+bundle.getString("add")+" "+bundle.getString("to")+" "+bundle.getString("options")+" "+bundle.getString("using")+" "+bundle.getString("setup"),""));
                return null;            
              }// if dropdown list value does'nt match, type value becomes null

              if(this.instance.getC6xxusxrbv16xxxxxxxxtype().equals("PI-D") && (this.instance.getFpxxfq1a5xwwqqhxxxxxitem() != null && !(this.instance.getFpxxfq1a5xwwqqhxxxxxitem().getC6xxusxrbv16xxxxxxxxtype().equals("PI-L1") || this.instance.getFpxxfq1a5xwwqqhxxxxxitem().getC6xxusxrbv16xxxxxxxxtype() .equals("PI-L*")) )){
               FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                FacesMessage.SEVERITY_ERROR,bundle.getString("use")+" "+ bundle.getString("image")+" "+bundle.getString("category")+" "+bundle.getString("or")+" "+bundle.getString("sub")+" "+bundle.getString("category")+" "+bundle.getString("as")+" "+bundle.getString("parent"),""));

                return null;            
              }

              if((this.instance.getC6xxusxrbv16xxxxxxxxtype().equals("SI-D")||this.instance.getC6xxusxrbv16xxxxxxxxtype().equals("SI-S")) 
               && (this.instance.getFpxxfq1a5xwwqqhxxxxxitem() != null && !(this.instance.getFpxxfq1a5xwwqqhxxxxxitem().getC6xxusxrbv16xxxxxxxxtype().equals("SI-L1") || this.instance.getFpxxfq1a5xwwqqhxxxxxitem().getC6xxusxrbv16xxxxxxxxtype() .equals("SI-L*")|| this.instance.getFpxxfq1a5xwwqqhxxxxxitem().getC6xxusxrbv16xxxxxxxxtype() .equals("SI-L3")) )){

               FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                FacesMessage.SEVERITY_ERROR,bundle.getString("use")+" "+ bundle.getString("shopping")+" "+bundle.getString("category")+" "+bundle.getString("or")+" "+bundle.getString("sub")+" "+bundle.getString("category")+" "+bundle.getString("as")+" "+bundle.getString("parent"),""));

                return null;            
              }
              if((this.instance.getFpxxfq1a5xwwqqhxxxxxitem() != null && (!this.instance.getFpxxfq1a5xwwqqhxxxxxitem().getC6xxusxrbv16xxxxxxxxtype().equals("SI-L1")  || this.instance.getFpxxfq1a5xwwqqhxxxxxitem() ==null ))  &&  ( this.instance.getC6xxusxrbv16xxxxxxxxtype() .equals("SI-L*") ||this.instance.getC6xxusxrbv16xxxxxxxxtype() .equals("SI-L3") )){
               FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                FacesMessage.SEVERITY_INFO,bundle.getString("use")+" "+ bundle.getString("shopping")+" "+bundle.getString("category")+" "+bundle.getString("as")+" "+bundle.getString("parent"),""));
                return null;            
              }

              if(this.instance.getC6xxusxrbv16xxxxxxxxtype().equals("PI-L1") && this.instance.getFpxxfq1a5xwwqqhxxxxxitem() != null ){
               FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                 FacesMessage.SEVERITY_INFO,bundle.getString("parent")+" "+ bundle.getString("corrected")+" "+bundle.getString("to")+" "+bundle.getString("null"),""));
                this.instance.setFpxxfq1a5xwwqqhxxxxxitem(null);
              }

              if(this.instance.getC6xxusxrbv16xxxxxxxxtype().equals("SI-L1") && this.instance.getFpxxfq1a5xwwqqhxxxxxitem() != null ){
               FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                 FacesMessage.SEVERITY_INFO,bundle.getString("parent")+" "+ bundle.getString("corrected")+" "+bundle.getString("to")+" "+bundle.getString("null"),""));

                this.instance.setFpxxfq1a5xwwqqhxxxxxitem(null);
              }

              String checkedDataAndSize="";
              // checkedData is a temporary field and may be null based on the logic flow 
              // checkedData is initialized as {" "} so not null
              if((this.instance.getC6xxusxrbv16xxxxxxxxtype().equals("SI-D") && !this.instance.getG2xxuxn1bvxxxxxxxxxxsubcodesn().equals("TH") ) || this.instance.getC6xxusxrbv16xxxxxxxxtype().equals("SI-C")
                 ||  this.instance.getC6xxusxrbv16xxxxxxxxtype().equals("SI-S") ||  this.instance.getC6xxusxrbv16xxxxxxxxtype().equals("IX") && this.instance.getCheckedData() != null  ){
                String checkedDataS="";//will allow selectmanycheckbox upto 4
                if(this.instance != null && this.instance.getCheckedData() != null){
                 int jj=this.instance.getCheckedData().length;
                 for(int i=0; i<4; i=i+1){
                  if(jj>i && this.instance.getCheckedData()[i]!=null){
                   checkedDataS=checkedDataS+this.instance.getCheckedData()[i]; 
                  }else{
                   checkedDataS=checkedDataS+"X"; 
                  } 
                 }
                }
                checkedDataAndSize=checkedDataAndSize+checkedDataS+this.instance.getCheckedSize()+this.unitLength
                +this.valueLength+this.unitWidth+this.valueWidth+this.unitHeight+this.valueHeight+this.unitWeight+this.valueWeight;//free ship will put X, otherwise S/M/L
                if(checkedDataAndSize.length() > 25){
                 checkedDataAndSize=checkedDataAndSize.substring(0,25);
                 FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                  FacesMessage.SEVERITY_WARN,bundle.getString("shipcode")+" "+bundle.getString("truncated")+" "+bundle.getString("to")+" "+checkedDataAndSize+", "+bundle.getString("maximum")+" "+bundle.getString("size")+" "+bundle.getString("25"),""));
                }
                this.instance.setC3fbuxscbvxxxxxxxxxxshipcode(checkedDataAndSize);
              }else{
               this.instance.setC3fbuxscbvxxxxxxxxxxshipcode("XXXXX");// recalship checks this and skips ship cost
              }
              // do not override subcodesn2,n3 unless SI-D itemEditEasy shows size etc if change needed
              if(this.instance.getC6xxusxrbv16xxxxxxxxtype().equals("SI-D") && !this.instance.getG2xxuxn1bvxxxxxxxxxxsubcodesn().equals("TH")){
              String itemVariants="";
              String itemVariantsL="";
              String spaces8="        "; 
              String spaces9="         "; 
              if(itemVariantSize !=null && itemVariantSize.length()<8){
               itemVariantSize=itemVariantSize+spaces8.substring(0,8-itemVariantSize.length());
              }
              if(itemVariantColour !=null && itemVariantColour.length()<8){
               itemVariantColour=itemVariantColour+spaces8.substring(0,8-itemVariantColour.length());
              }
              if(itemVariantMaterial !=null && itemVariantMaterial.length()<8){
               itemVariantMaterial=itemVariantMaterial+spaces8.substring(0,8-itemVariantMaterial.length());
              }
              if(itemVariantBrand !=null && itemVariantBrand.length()<8){
               itemVariantBrand=itemVariantBrand+spaces8.substring(0,8-itemVariantBrand.length());
              }
              //cannot add unicode "\u2714", it increases string length
              itemVariants=itemVariantSize+itemVariantColour+itemVariantMaterial+itemVariantBrand;
              if (! (this.instance.getY2xxuxxrbvxxxxxxxxxxmisccode1() !=null 
                && this.instance.getY2xxuxxrbvxxxxxxxxxxmisccode1().length() >4
                 && (this.instance.getY2xxuxxrbvxxxxxxxxxxmisccode1().substring(0,5).equals("trial")
                  || this.instance.getY2xxuxxrbvxxxxxxxxxxmisccode1().substring(0,5).equals("recur"))) ){
               this.instance.setG2xxuxn2bvxxxxxxxxxxsubcodesn2(itemVariants);
              }// skip if trial/recurring

              if(itemVariantSizeL !=null && itemVariantSizeL.length()<9){
               itemVariantSizeL=itemVariantSizeL+spaces9.substring(0,9-itemVariantSizeL.length());
              }
              if(itemVariantColourL !=null && itemVariantColourL.length()<9){
               itemVariantColourL=itemVariantColourL+spaces9.substring(0,9-itemVariantColourL.length());
              }
              if(itemVariantMaterialL !=null && itemVariantMaterialL.length()<9){
               itemVariantMaterialL=itemVariantMaterialL+spaces9.substring(0,9-itemVariantMaterialL.length());
              }
              if(itemVariantBrandL !=null && itemVariantBrandL.length()<9){
               itemVariantBrandL=itemVariantBrandL+spaces9.substring(0,9-itemVariantBrandL.length());
              }
              //cannot add unicode "\u2714", it increases string length
              itemVariantsL=itemVariantSizeL+itemVariantColourL+itemVariantMaterialL+itemVariantBrandL;
              itemVariantsL=itemVariantsL.trim();      
              if(itemVariantsL.length()>35){
               itemVariantsL=itemVariantsL.substring(0,35);
              }
              this.instance.setG2xxuxn3bvxxxxxxxxxxsubcodesn3(itemVariantsL);
              }//end of Si-d

              // take care of replyToMatCodeSid
              if (replyToMatSidS != null){
               Integer replyToMatSid = Integer.parseInt(replyToMatSidS);
               fpxxfq1a5xwwqqhxxxxxitemli = (Fpxxfq1a5xwwqqhxxxxxitem) entityManager.createQuery("select cc from Fpxxfq1a5xwwqqhxxxxxitem cc where cc.a0xxuobxbxxxxxxxxxxxsid = :keyOfEntity AND cc.zzxxu2oxxhxxxxxxxxxxowner2=:owner2 order by cc.a0xxuobxbxxxxxxxxxxxsid asc")
                .setParameter("keyOfEntity", replyToMatSid).setParameter("owner2", owner2Code).getSingleResult();
               if (fpxxfq1a5xwwqqhxxxxxitemli != null) {
                this.instance.setFpxxfq1a5xwwqqhxxxxxitem(fpxxfq1a5xwwqqhxxxxxitemli);
               }
              }
              if(this.getInstance().getG2xxuxn3bvxxxxxxxxxxsubcodesn3()==null || this.getInstance().getG2xxuxn3bvxxxxxxxxxxsubcodesn3().isEmpty()){
               this.instance.setG2xxuxn3bvxxxxxxxxxxsubcodesn3("size    :colour  :material:brand  :");//default value
              }

           /* not all entities have document ie clob/blob */
             /* non clob/blob container like item,customer whose data has pointer to actual data */ 
             //docmntOriginalValue is used to hold the clob/blob current data value, new value is under file object via fileUpLoad
              // jay blob dont have docmn so why check  in case of clob it is actual data, for other entities it is string pointer value and may point to string(clob) or binary(blob) data
              String docmntOriginalValue=this.instance.getW8xxuzdrbvxxxxxxxxxxdocmnt();
                // clobdata entity iterator used by  master entity update()
                  Iterator<File> itr = yxxxuq1n1xwwqqqxxxxxblobdataHome.getFiles().iterator();
                dataReplaced=true;
                slobkeyhash=Integer.toString((this.instance.getA0xxukixbxxxxxxxxxxxmatcode()).hashCode());
                fromTable="FPXXFQ1A5XWWQQHXXXXXITEM";
                qualifier=Integer.toString(1);

                String clobImgUrl=yxxxuq1m1xwwqqqxxxxxclobdataHome.getInstance().getB1xxuzaxbvxxxxxxxxxxdata();
                if(clobImgUrl == null || clobImgUrl.isEmpty() || (clobImgUrl.indexOf("table=") == -1)){
                 clobImgUrl="";
                } 
                if(!clobImgUrl.isEmpty()){
                 //If clobimg (clobdataInstance.data) we will assume to either add or replace any existing blobdata img
                 // with the clobimg url as byte data. Need to extract and convert back img url to String as needed
                 dataIsBlob = true;// feature is used for blob only
                 this.instance.setW8xxuzdrbvxxxxxxxxxxdocmnt("B"+slobkeyhash);
                 bytes = null;
                 String imgUrl=null;
                 try{
                  yxxxuq1n1xwwqqqxxxxxblobdataHome.clearInstance();
                  yxxxuq1n1xwwqqqxxxxxblobdata = yxxxuq1n1xwwqqqxxxxxblobdataHome.getInstance();
                  yxxxuq1n1xwwqqqxxxxxblobdataHome.setInstance(yxxxuq1n1xwwqqqxxxxxblobdata);
                  yxxxuq1n1xwwqqqxxxxxblobdata.setA4xxexxxbvxxxxxxxxxxtype("url");
                  bytes=yxxxuq1m1xwwqqqxxxxxclobdataHome.getInstance().getB1xxuzaxbvxxxxxxxxxxdata().getBytes("UTF-8");
                  yxxxuq1n1xwwqqqxxxxxblobdata.setB1xxuzbxbvxxxxxxxxxxdata(bytes);//other fields like key follow same as file load logic
                  imgUrl=new String(bytes, StandardCharsets.UTF_8);
                 } catch ( Exception e){
                  FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                   FacesMessage.SEVERITY_INFO,bundle.getString("clobImgUrl")+" "+ bundle.getString("error")+" "+e.getMessage(),""));
                   return null;
                 }
                }else{
                 //  iterate through files to check each file mime,also check variable upload count to decide skip
                 // there seems to be duplication and override of logic below re type of doc data
                 while (itr.hasNext()) {
                  file = itr.next();
                  dataIsClob=false;
                  dataIsBlob=false;
                  temps=file.getMime();
                  if ("image/bmp".equals(temps)) {
                   lobDataType = "bmp";
                  }else if ("image/jpeg".equals(temps)) {
                   lobDataType = "jpg";
                  } else if ("image/gif".equals(temps)) {
                   lobDataType = "gif";
                  } else if ("image/png".equals(temps)) {
                   lobDataType = "png";
                  } else if ("text/xml".equals(temps)) {
                   lobDataType = "xml";
                 } else if ("application/msword".equals(temps)) {
                  lobDataType = "doc";
                 } else if ("text/plain".equals(temps)) {
                  lobDataType = "txt";
                 } else if ("text/html".equals(temps)) {
                  lobDataType = "html";
			 } else if ("text/csv".equals(temps)) {
				lobDataType = "csv";
			 } else if ("application/pdf".equals(temps)) {
				lobDataType = "pdf";
			 } else if ("application/vnd.ms-excel".equals(temps)) {
				lobDataType = "xls";
			 } else if ("application/vnd.ms-powerpoint".equals(temps)) {
				lobDataType = "ppt";
			 } else if ("text/html".equals(temps)) {
				lobDataType = "txt";
			 } else if ("text/htm".equals(temps)) {
				lobDataType = "txt";
			 } else if ("audio/mpeg".equals(temps)) {
				lobDataType = "mp3";
			 } else if ("video/mp4".equals(temps)) {
				lobDataType = "mp4";
			 } else {
				lobDataType = "unkn";
			 }

                     if (lobDataType.equals("txt") || lobDataType.equals("xml") || lobDataType.equals("csv")
                       || lobDataType.equals("html") ) {
                         dataIsClob = true;
                         this.instance.setW8xxuzdrbvxxxxxxxxxxdocmnt("C"+slobkeyhash);
                    } else {
                         dataIsBlob = true;
                         this.instance.setW8xxuzdrbvxxxxxxxxxxdocmnt("B"+slobkeyhash);
                    }
                 }
                }
            /* continuing after file/clobImgUrl,following for items/customers etc , clob/blob does not have document */
                int i=0;
                Integer attachment=0;
                int jay=0;
                // currenly only one doc can be uploaded so iteration is for only 1 if any upload, it can be 0 as well
                // in case of clob data can come from file upload or from ckeditor
                 //jay itr loop here based on number of file objects in files arraylist ie arraylist size
                 // there could be 2 cases- one parent entity does not have any clob or blob or 2nd it has 
                 // we need to check column docmnt in parent 
                  if (docmntOriginalValue == null  || (docmntOriginalValue != null && docmntOriginalValue.trim().length() <= 1) ){
                   // no clob data exists , new data under file
                   if (dataIsClob) {
                    yxxxuq1m1xwwqqqxxxxxclobdata = yxxxuq1m1xwwqqqxxxxxclobdataHome.getInstance();
                    yxxxuq1m1xwwqqqxxxxxclobdataHome.setInstance(yxxxuq1m1xwwqqqxxxxxclobdata);
                    // instance already has values for natural keys fromtable,fromkey,qualifier and seq
                    // leave seq as is unless 0 or less
                    if (yxxxuq1m1xwwqqqxxxxxclobdata.getA3xxexnsbvxxxxxxxxxxsequence() < 1){
                     //yxxxuq1m1xwwqqqxxxxxclobdata.setA3xxexnsbvxxxxxxxxxxsequence(1);
                    }
                   }else{
                     yxxxuq1n1xwwqqqxxxxxblobdata = yxxxuq1n1xwwqqqxxxxxblobdataHome.getInstance();
                     yxxxuq1n1xwwqqqxxxxxblobdataHome.setInstance(yxxxuq1n1xwwqqqxxxxxblobdata);//why
                    // instance already has values for natural keys fromtable,fromkey,qualifier and seq
                    if (yxxxuq1n1xwwqqqxxxxxblobdata.getA3xxexnsbvxxxxxxxxxxsequence() < 1){
                     //yxxxuq1n1xwwqqqxxxxxblobdata.setA3xxexnsbvxxxxxxxxxxsequence(1);
                    }
                   }
                  }else{
                   //clob/blob already exists and being replaced or left alone and new one being appended
                   // if same session clob/blob entity already exists otherwise use entityquery
                   // added a checkbox for append or replace existing clob/blob entry, upLoadPurpose value is ad or re
                   //sequence gets incremented if more pictures are uploaded to add
                   // sequence is meant for viewing sequence and may be richfaces pick list can be used
                   // check and use max qualifier as there could be many already
                   if (dataIsClob) {
                    if (yxxxuq1m1xwwqqqxxxxxclobdata == null){
                     try {
                      List<Yxxxuq1m1xwwqqqxxxxxclobdata> results = entityManager
                      .createQuery(
                         "select cc from Yxxxuq1m1xwwqqqxxxxxclobdata cc where cc.a0xxukcdlvxxxxxxxxxxfromtable=:clobdatafromtable and cc.a1xxuxxxbv49xxxxxxxxfromkey=:clobdatafromkey and cc.zzxxu2oxxhxxxxxxxxxxowner2 = :owner2  order by cc.a0xxuobxbxxxxxxxxxxxsid asc")
                         .setParameter("clobdatafromtable", fromTable).setParameter(
                          "clobdatafromkey", slobkeyhash).setParameter("owner2", owner2Code).getResultList();
                      if(!results.isEmpty()){
                       attachment=results.size();
                       yxxxuq1m1xwwqqqxxxxxclobdata= results.get(attachment-1);
                       //yxxxuq1m1xwwqqqxxxxxclobdata.setB1xxuzaxbvxxxxxxxxxxdata(new String(file.getData()));
                       if(file.getData() !=null){// if not from ckeditor                   
                        String uploadedText=file.getText();
                        String jay2=uploadedText;
                        try{
                         uploadedText=this.sanitize(uploadedText);
                         uploadedText=jay2;
                        } catch ( Exception e){
                         FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                         FacesMessage.SEVERITY_INFO," "+"invalid"+" "+" "+bundle.getString("content")+",  "+e.getMessage(),""));
                         return null;
                        }
                        yxxxuq1m1xwwqqqxxxxxclobdata.setB1xxuzaxbvxxxxxxxxxxdata(uploadedText);
                       }
                       yxxxuq1m1xwwqqqxxxxxclobdataHome.getInstance();
                       yxxxuq1m1xwwqqqxxxxxclobdataHome.setInstance(yxxxuq1m1xwwqqqxxxxxclobdata);
                      }else{
                       FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                        FacesMessage.SEVERITY_INFO,"clob_result_empty",""));
                        // this means clob/blob to be replaced is gone or was never created, so why not log the error and continue as add
                        log.severe("Error retrieving clob");
                        return null;
                      }
                     } catch (NoResultException nre) {
                         FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                          FacesMessage.SEVERITY_INFO,"no_clob_record",""));
                       return null;
                     } catch (Exception e) {
                        log.severe("Error persisting clob"+ e);
                        FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                         FacesMessage.SEVERITY_INFO,"clob_persist_error" + e.getMessage(),""));
                      //return null;
                      upLoadPurpose="ad";
                     }
                    }
                   }
                   else{
                    if (yxxxuq1n1xwwqqqxxxxxblobdata == null){
                     try {
                            List<Yxxxuq1n1xwwqqqxxxxxblobdata> results = entityManager
                              .createQuery(
                               "select cc from Yxxxuq1n1xwwqqqxxxxxblobdata cc where cc.a0xxukbdlvxxxxxxxxxxfromtable=:blobdatafromtable and cc.a1xxuxxxbv49xxxxxxxxfromkey=:blobdatafromkey and cc.zzxxu2oxxhxxxxxxxxxxowner2 = :owner2 order by cc.a0xxuobxbxxxxxxxxxxxsid asc")
                                .setParameter("blobdatafromtable", fromTable).setParameter(
                                "blobdatafromkey", slobkeyhash).setParameter("owner2", owner2Code).getResultList();
		             if(!results.isEmpty()){
                              // results include the new instance to be persisted
                              attachment=results.size();
                              yxxxuq1n1xwwqqqxxxxxblobdata= results.get(attachment-1);
                              yxxxuq1n1xwwqqqxxxxxblobdata.setB1xxuzbxbvxxxxxxxxxxdata(file.getData());
                              yxxxuq1n1xwwqqqxxxxxblobdataHome.getInstance();
                              yxxxuq1n1xwwqqqxxxxxblobdataHome.setInstance(yxxxuq1n1xwwqqqxxxxxblobdata);
                             }else{
                              FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,"blob_result_empty",""));
                              // this means clob/blob to be replaced is gone or was never created, so why not log the error and continue as add
                              log.severe("Error retrieving blob");
                              //return null;
                              upLoadPurpose="ad";
                           }
                          } catch (NoResultException nre) {
                            FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,"no_blob_record",""));
                            return null;
                          } catch (Exception e) {
	 	            log.severe("Error persisting blob"+ e);
                            FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,"blob_persist_error" + e.getMessage(),""));

                            return null;
                          }
                    }
                   }

                   if (dataIsClob && "ad".equals(upLoadPurpose)) {
                    yxxxuq1m1xwwqqqxxxxxclobdataHome.clearInstance();
                    yxxxuq1m1xwwqqqxxxxxclobdata = yxxxuq1m1xwwqqqxxxxxclobdataHome.getInstance();
                    if (yxxxuq1m1xwwqqqxxxxxclobdata.getA3xxexnsbvxxxxxxxxxxsequence() > 0){
                      //non clob/blob added useSeq to avoid ambiguity
                      if(useSeq==-1){
                       jay=  yxxxuq1m1xwwqqqxxxxxclobdataList.getNextSeqAvailable("FPXXFQ1A5XWWQQHXXXXXITEM","C"+slobkeyhash,qualifier,0);
                      }else{
                       jay=useSeq; 
                      }
                     yxxxuq1m1xwwqqqxxxxxclobdata.setA3xxexnsbvxxxxxxxxxxsequence(jay);
                    }
                   }   
                   if (dataIsBlob && "ad".equals(upLoadPurpose)) {
                    if(clobImgUrl.isEmpty()){
                     yxxxuq1n1xwwqqqxxxxxblobdataHome.clearInstance();
                     yxxxuq1n1xwwqqqxxxxxblobdata = yxxxuq1n1xwwqqqxxxxxblobdataHome.getInstance();
                    }
                    if (yxxxuq1n1xwwqqqxxxxxblobdata.getA3xxexnsbvxxxxxxxxxxsequence() > 0){
                      // added useSeq to avoid ambiguity
                      if(useSeq==-1){
                       jay=  yxxxuq1n1xwwqqqxxxxxblobdataList.getNextSeqAvailable("FPXXFQ1A5XWWQQHXXXXXITEM","B"+slobkeyhash,qualifier,0);
                      }else{
                       jay=useSeq; 
                      }
                     yxxxuq1n1xwwqqqxxxxxblobdata.setA3xxexnsbvxxxxxxxxxxsequence(jay);
                    }
                   }
                  }
                  // common below ie for update for new docmnt or w existing doc

                  if (dataIsClob && "ad".equals(upLoadPurpose)) {
                     if(file.getData() !=null){// if not from ckeditor                   
                      String uploadedText=file.getText();
                      String jay2=uploadedText;
                      try{
                       uploadedText=this.sanitize(uploadedText);
                       uploadedText=jay2;
                      } catch ( Exception e){
                       FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                        FacesMessage.SEVERITY_INFO," "+"invalid"+" "+" "+bundle.getString("content")+",  "+e.getMessage(),""));
                       return null;
                      }
                      yxxxuq1m1xwwqqqxxxxxclobdata.setB1xxuzaxbvxxxxxxxxxxdata(uploadedText);
                     }

                   yxxxuq1m1xwwqqqxxxxxclobdata.setA4xxexxxbvxxxxxxxxxxtype(lobDataType);
                   yxxxuq1m1xwwqqqxxxxxclobdata.setA0xxukcdlvxxxxxxxxxxfromtable(fromTable);
                   yxxxuq1m1xwwqqqxxxxxclobdata.setA1xxuxxxbv49xxxxxxxxfromkey(slobkeyhash);
                   yxxxuq1m1xwwqqqxxxxxclobdata.setA2xxuxxxbv50xxxxxxxxqualifier(qualifier);
                   yxxxuq1m1xwwqqqxxxxxclobdata.setY3xxuxznbvxxxxxxxxxxnotes(file.getName());
                    yxxxuq1m1xwwqqqxxxxxclobdataHome.setInstance(yxxxuq1m1xwwqqqxxxxxclobdata);
                    yxxxuq1m1xwwqqqxxxxxclobdataHome.persist();
                    timeStamp = new SimpleDateFormat("yyyy.MM.dd.HH.mm.ss z").format(new Date());
                    FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                     FacesMessage.SEVERITY_INFO,bundle.getString("saved")+" "+bundle.getString("Blobdata")+" "+bundle.getString("reference")+" "+bundle.getString("as")+" ("+slobkeyhash+") "+"at"+" "+timeStamp,""));
                  }
                  if (dataIsClob && "re".equals(upLoadPurpose)) {
                     if(file.getData() !=null){// if not from ckeditor                   
                      String uploadedText=file.getText();
                      String jay2=uploadedText;
                      try{
                       uploadedText=this.sanitize(uploadedText);
                       uploadedText=jay2;
                      } catch ( Exception e){
                       FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                        FacesMessage.SEVERITY_INFO," "+"invalid"+" "+" "+bundle.getString("content")+",  "+e.getMessage(),""));
                       return null;
                      }
                      yxxxuq1m1xwwqqqxxxxxclobdata.setB1xxuzaxbvxxxxxxxxxxdata(uploadedText);
                     }

                    yxxxuq1m1xwwqqqxxxxxclobdata.setY3xxuxznbvxxxxxxxxxxnotes(file.getName());
                    yxxxuq1m1xwwqqqxxxxxclobdataHome.setInstance(yxxxuq1m1xwwqqqxxxxxclobdata);

                    yxxxuq1m1xwwqqqxxxxxclobdataHome.superUpdate(); 
                    timeStamp = new SimpleDateFormat("yyyy.MM.dd.HH.mm.ss z").format(new Date());
                    FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                     FacesMessage.SEVERITY_INFO,bundle.getString("updated")+" "+bundle.getString("Clobdata")+" "+bundle.getString("reference")+" "+bundle.getString("as")+" ("+slobkeyhash+") "+"at"+" "+timeStamp,""));

                  }
                  if (dataIsBlob && "ad".equals(upLoadPurpose)) {
                   if (clobImgUrl.isEmpty()){
                    if(file.getData() !=null){
                     yxxxuq1n1xwwqqqxxxxxblobdata.setB1xxuzbxbvxxxxxxxxxxdata(file.getData());// use only if uploaded
                    }
                    if(yxxxuq1n1xwwqqqxxxxxblobdata.getA4xxexxxbvxxxxxxxxxxtype() !=null && !yxxxuq1n1xwwqqqxxxxxblobdata.getA4xxexxxbvxxxxxxxxxxtype().toLowerCase().contains("asis")){   
                     yxxxuq1n1xwwqqqxxxxxblobdata.setA4xxexxxbvxxxxxxxxxxtype(lobDataType);
                    }
                    if(yxxxuq1n1xwwqqqxxxxxblobdata.getA4xxexxxbvxxxxxxxxxxtype() !=null && yxxxuq1n1xwwqqqxxxxxblobdata.getA4xxexxxbvxxxxxxxxxxtype().toLowerCase().contains("asis")){   
                     yxxxuq1n1xwwqqqxxxxxblobdata.setA4xxexxxbvxxxxxxxxxxtype("asis"+lobDataType);
                    }
                    if(yxxxuq1n1xwwqqqxxxxxblobdata.getA4xxexxxbvxxxxxxxxxxtype() ==null ){   
                     yxxxuq1n1xwwqqqxxxxxblobdata.setA4xxexxxbvxxxxxxxxxxtype(lobDataType);
                    }
                   }
                  yxxxuq1n1xwwqqqxxxxxblobdata.setA0xxukbdlvxxxxxxxxxxfromtable(fromTable);
                  yxxxuq1n1xwwqqqxxxxxblobdata.setA1xxuxxxbv49xxxxxxxxfromkey(slobkeyhash);
                  yxxxuq1n1xwwqqqxxxxxblobdata.setA2xxuxxxbv50xxxxxxxxqualifier(qualifier);
                  yxxxuq1n1xwwqqqxxxxxblobdata.setY3xxuxznbvxxxxxxxxxxnotes(file.getName());
                   yxxxuq1n1xwwqqqxxxxxblobdataHome.setInstance(yxxxuq1n1xwwqqqxxxxxblobdata);
                   yxxxuq1n1xwwqqqxxxxxblobdataHome.persist();
                   timeStamp = new SimpleDateFormat("yyyy.MM.dd.HH.mm.ss z").format(new Date());
                   FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                    FacesMessage.SEVERITY_INFO,bundle.getString("saved")+" "+bundle.getString("Blobdata")+" "+bundle.getString("reference")+" "+bundle.getString("as")+" ("+slobkeyhash+") "+"at"+" "+timeStamp,""));

                  }
                  if (yxxxuq1n1xwwqqqxxxxxblobdata !=null && dataIsBlob && "re".equals(upLoadPurpose)) {
                   if (clobImgUrl.isEmpty()){
                    if(file.getData() !=null){
                     yxxxuq1n1xwwqqqxxxxxblobdata.setB1xxuzbxbvxxxxxxxxxxdata(file.getData());
                    }
                    if(yxxxuq1n1xwwqqqxxxxxblobdata.getA4xxexxxbvxxxxxxxxxxtype() !=null && !yxxxuq1n1xwwqqqxxxxxblobdata.getA4xxexxxbvxxxxxxxxxxtype().toLowerCase().contains("asis")){   
                    yxxxuq1n1xwwqqqxxxxxblobdata.setA4xxexxxbvxxxxxxxxxxtype(lobDataType);
                    }
                    if(yxxxuq1n1xwwqqqxxxxxblobdata.getA4xxexxxbvxxxxxxxxxxtype() !=null && yxxxuq1n1xwwqqqxxxxxblobdata.getA4xxexxxbvxxxxxxxxxxtype().toLowerCase().contains("asis")){   
                    yxxxuq1n1xwwqqqxxxxxblobdata.setA4xxexxxbvxxxxxxxxxxtype("asis"+lobDataType);
                    }
                    if(yxxxuq1n1xwwqqqxxxxxblobdata.getA4xxexxxbvxxxxxxxxxxtype() ==null ){   
                    yxxxuq1n1xwwqqqxxxxxblobdata.setA4xxexxxbvxxxxxxxxxxtype(lobDataType);
                    }
                   }
                   yxxxuq1n1xwwqqqxxxxxblobdata.setY3xxuxznbvxxxxxxxxxxnotes(file.getName());

                   // in case of clob/blob the superUpdate will repeat further dowm, add ftl logic to skip this
                   yxxxuq1n1xwwqqqxxxxxblobdataHome.setInstance(yxxxuq1n1xwwqqqxxxxxblobdata);
                   yxxxuq1n1xwwqqqxxxxxblobdataHome.superUpdate();
                   timeStamp = new SimpleDateFormat("yyyy.MM.dd.HH.mm.ss z").format(new Date());
                   FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                    FacesMessage.SEVERITY_INFO,bundle.getString("updated")+" "+bundle.getString("Blobdata")+" "+bundle.getString("reference")+" "+bundle.getString("as")+" ("+slobkeyhash+") "+"at"+" "+timeStamp,""));
                  }
                //}old while now pushed up as end of while loop
                // in case an update is done after this save, will allow fresh upload
                if(dataReplaced){
                 clearUploadData();
                }else{
                  if(fromTable.isEmpty() || !fromTable.equals("blobdata")){
                   //continue, allow other changes  
                  }else{
                    FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                     FacesMessage.SEVERITY_INFO,bundle.getString("update")+" "+bundle.getString("bypassed")+", "+bundle.getString("no")+" "+bundle.getString("file")+" "+bundle.getString("uploaded"),""));
                    FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                     FacesMessage.SEVERITY_INFO,bundle.getString("either")+" "+bundle.getString("upload")+" "+bundle.getString("new")+" "+bundle.getString("or")+" "+bundle.getString("re-upload")+" "+bundle.getString("existing"),""));
                    return null;
                  }
                } 
           //end of documentField != "" ie item/customer and non clob/blob 

            // in update key value is always changed to reflect any change in description etc but also uses
            // current time, so key will always change. Do not use key value instead use sid no as int or as string
            // if subkeys have changed then key value needs to be reestablished unless rest or import (how?)
            subKey="";
               if (this.instance.getB1xxuszsbvxxxxxxxxxxdescript() != null && this.instance.getB1xxuszsbvxxxxxxxxxxdescript() !=null && this.instance.getB1xxuszsbvxxxxxxxxxxdescript().length() !=0){
                subKey=subKey+this.instance.getB1xxuszsbvxxxxxxxxxxdescript();
                timeStamp = new SimpleDateFormat("yyyy.MM.dd.HH.mm.ss").format(new Date());
                subKey=subKey+timeStamp.substring(17,18);
               }else{
                // need a random filler otherwise same subkey will be generated if same names are used ie say only * used as name
                timeStamp = new SimpleDateFormat("yyyy.MM.dd.HH.mm.ss").format(new Date());
                subKey=subKey+timeStamp.substring(17,18);
               } 
               if (this.instance.getC6xxusxrbv16xxxxxxxxtype() != null && this.instance.getC6xxusxrbv16xxxxxxxxtype() !=null && this.instance.getC6xxusxrbv16xxxxxxxxtype().length() !=0){
                subKey=subKey+this.instance.getC6xxusxrbv16xxxxxxxxtype();
                timeStamp = new SimpleDateFormat("yyyy.MM.dd.HH.mm.ss").format(new Date());
                subKey=subKey+timeStamp.substring(17,18);
               }else{
                // need a random filler otherwise same subkey will be generated if same names are used ie say only * used as name
                timeStamp = new SimpleDateFormat("yyyy.MM.dd.HH.mm.ss").format(new Date());
                subKey=subKey+timeStamp.substring(17,18);
               } 
               subKey=subKey+this.instance.getZ2xxcsxrlxxxxxxxxxxxdateadded().toString().substring(0,10)+this.instance.getZ2xxcsxrlxxxxxxxxxxxdateadded().toString().substring(this.instance.getZ2xxcsxrlxxxxxxxxxxxdateadded().toString().length()-6);
              subKey=subKeyFirst+subKey;
              int subL=subKey.length();
              if (subL !=0){
               String subKeyh=Integer.toString(subKey.hashCode());
               if (subL !=0){
                if (subL > 25){
                //needs logic for names
                 subKey=subKey.substring(0,11)+subKey.substring(subL-5,subL)+subKeyh;
                }
                else {
                 subKey=subKey+subKeyh;
                }
               }
              }
              if (subKey.length() > 32){
                subKey=subKey.substring(0,32);
              }
              //usagebyperiods have metrics whose key names should not change from subkeys ,apply to all usageby.. keys

              if(!this.instance.getA0xxukixbxxxxxxxxxxxmatcode().equals(subKey)){
               this.instance.setA0xxukixbxxxxxxxxxxxmatcode(subKey);
              } 
             // key set but return if the natural key already exists except for clob and blob where duplicates ok
             // in keyExists method, initCap will be applied and existing key always gets replaced
             if (key.length() > 7 && keyExists(key.substring(0,8))){
              FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
               FacesMessage.SEVERITY_INFO,bundle.getString("parent")+" "+ bundle.getString("corrected")+" "+bundle.getString("to")+" "+bundle.getString("null"),""));


              //return null;
             }

              // to allow system messages to be changed if raaspi,  show parent code in next edit
               if(this.instance!=null && this.instance.getFpxxfq1a5xwwqqhxxxxxitem() !=null){
                lastfpxxfq1a5xwwqqhxxxxxitemP=this.instance.getFpxxfq1a5xwwqqhxxxxxitem().getA0xxukixbxxxxxxxxxxxmatcode();
               }else{
                lastfpxxfq1a5xwwqqhxxxxxitemP="";
               }
             if(owner2Code.equals(masterSiteCode)){
               allowUpdate();     
             }else{
               superdotupdate();
             }    

           entityUpdated =true;
           setChangeDone(true);
           // better to return and show msg not sure why the redirect was there 
           // changedone did not work either because it got reinitilized and no change msg was being shown
           //or look into using jsf flush msg
           return "updated"; 
           //String viewId = FacesContext.getCurrentInstance().getViewRoot().getViewId();
           //return viewId + "?faces-redirect=true";// refresh

    }



    public String remove() {
     //jay added logic to delete related entities ie if a demo user is deleted then created employee should be deleted and/or
     // add logic to use employee resultlist rather than singleresult
     // useful for debugging validation failure and also to remove child entities first automatically(logic to be added)
     // some reversing logic needed for transactions aw well
     // allow raaspi user UH to delete SYSTEM records , needed for bad resource and blob etc
       //setDeletedMessage(createValueExpression(""));
        entityDeleted =false;
      // whats about other details like itemjobdetails etc?? 
      // add logic to adjust posting if invoice/payment
      // allow raaspi to delete SYSTEM records
      if((getInstance().getZzxxu2oxxhxxxxxxxxxxowner2().equals("SYSTEM") && !owner2Code.equals("myflowp") && !owner2Code.equals(masterSiteCode)) || (!getInstance().getZzxxu2oxxhxxxxxxxxxxowner2().equals("SYSTEM") && !getInstance().getZzxxu2oxxhxxxxxxxxxxowner2().equals(owner2Code))){
        FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
         FacesMessage.SEVERITY_ERROR,bundle.getString("delete")+" "+ bundle.getString("not")+" "+bundle.getString("allowed"),""));

                 bcontinue=false;
                 return null;
      }
      if (((customIdentity.getRestrict1() != null && customIdentity.getRestrict1().equals("D")) || customIdentity.hasRole("VW")) && !getInstance().getZexxutoxlhxxxxxxxxxxowner().equals(ownerCode)  ){ 
        FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
         FacesMessage.SEVERITY_ERROR,bundle.getString("delete")+" "+ bundle.getString("not")+" "+bundle.getString("allowed"),""));

                 bcontinue=false;
                 return null;
      }

        // entities without details ,function ix
        try {
         superdotremove();
        } catch ( Exception e){
          FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
           FacesMessage.SEVERITY_INFO,bundle.getString("delete")+" "+ bundle.getString("error")+" "+e.getMessage(),""));

           return null;
        }
           /* delete clob or blob as they will be orphan 
              a separate new method to purge closed records including parent/all children , it is too risky here
           */

                try{
                 List<Yxxxuq1n1xwwqqqxxxxxblobdata> results = entityManager
		 .createQuery(
			"select cc from Yxxxuq1n1xwwqqqxxxxxblobdata cc where cc.a0xxukbdlvxxxxxxxxxxfromtable=:blobdatafromtable and cc.a1xxuxxxbv49xxxxxxxxfromkey=:blobdatafromkey and cc.a3xxexnsbvxxxxxxxxxxsequence=:blobdatasequence and cc.a2xxuxxxbv50xxxxxxxxqualifier=:blobdataqualifier and cc.zzxxu2oxxhxxxxxxxxxxowner2 = :owner2  order by cc.a0xxuobxbxxxxxxxxxxxsid asc")
		           .setParameter("blobdatafromtable", "FPXXFQ1A5XWWQQHXXXXXITEM").setParameter("blobdatafromkey", this.instance.getW8xxuzdrbvxxxxxxxxxxdocmnt().substring(1))
                            .setParameter("owner2", owner2Code).setParameter("blobdatasequence",1)
                             .setParameter("blobdataqualifier","1").getResultList();
		if(!results.isEmpty() ){
                 //blob/clob are not constrained as foreign entity to item, so just remove it
                  yxxxuq1n1xwwqqqxxxxxblobdataHome.clearInstance();
                  yxxxuq1n1xwwqqqxxxxxblobdataHome.setInstance(results.get(0));
                  yxxxuq1n1xwwqqqxxxxxblobdataHome.superdotremove();
                }  
                 }catch ( Exception e){
                  FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                   FacesMessage.SEVERITY_ERROR,bundle.getString("remove")+" "+bundle.getString("binary")+" "+bundle.getString("data")+" "+bundle.getString("error")+" "+e.getMessage(),""));
                 }  
                try{
                 List<Yxxxuq1m1xwwqqqxxxxxclobdata> resultsc = entityManager
		 .createQuery(
			"select cc from Yxxxuq1m1xwwqqqxxxxxclobdata cc where cc.a0xxukcdlvxxxxxxxxxxfromtable=:blobdatafromtable and cc.a1xxuxxxbv49xxxxxxxxfromkey=:blobdatafromkey and cc.a3xxexnsbvxxxxxxxxxxsequence=:blobdatasequence and cc.a2xxuxxxbv50xxxxxxxxqualifier=:blobdataqualifier and cc.zzxxu2oxxhxxxxxxxxxxowner2 = :owner2  order by cc.a0xxuobxbxxxxxxxxxxxsid asc")
		           .setParameter("blobdatafromtable", "FPXXFQ1A5XWWQQHXXXXXITEM").setParameter("blobdatafromkey", this.instance.getW8xxuzdrbvxxxxxxxxxxdocmnt().substring(1))
                            .setParameter("owner2", owner2Code).setParameter("blobdatasequence",1)
                             .setParameter("blobdataqualifier","1").getResultList();
		if(!resultsc.isEmpty() ){
                 //blob/clob are not constrained as foreign entity to item, so just remove it
                  yxxxuq1m1xwwqqqxxxxxclobdataHome.clearInstance();
                  yxxxuq1m1xwwqqqxxxxxclobdataHome.setInstance(resultsc.get(0));
                  yxxxuq1m1xwwqqqxxxxxclobdataHome.superdotremove();
                }  
                 }catch ( Exception e){
                  FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                   FacesMessage.SEVERITY_ERROR,bundle.getString("remove")+" "+bundle.getString("text")+" "+bundle.getString("data")+" "+bundle.getString("error")+" "+e.getMessage(),""));
                   return "";
                 }  
   

           entityDeleted =true;
           setChangeDone(true);
           timeStamp = new SimpleDateFormat("yyyy.MM.dd.HH.mm.ss").format(new Date());
           FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
          FacesMessage.SEVERITY_INFO,bundle.getString("deleted")+" "+bundle.getString("selected")+" "+"Item"+" "+"at"+" "+timeStamp,""));
           return "removed"; 



    }


    /**
    * save in clobdata key being accounts,import,csv,1 note when calling clobdata needes extra character before import
    * The following methods supports import of csv data into entities.
    * A file containing csv data is uploaded in clob db under clob key kkkqqqseq where ttt is dollar{entityName}
    * kkk is "dollar{entityName} like accounts" and qqq is "csv" seq is 1
    * The csv data must have the first row containing name of target table columns corresponding to csv data
    * if there is data but no target column name then ,,
    * a template containing the matching column names can be downloaded using import wizard 
    * importCsvData method copies 
    * @param args -option one is to pass clob key  
    * @return none void type
    * @exception None.
    * @see " "
    * in the table called options, column called value will have filter value which will dictate whether it will be hidden,visible or 
    * to use the specified value rather than value in column called options
    * to hide a value in column called options for say activity entity put h=1a. to hide for both item and activity put value= h=1a,18
    * to show a value in column called options for say activity entity put s=1a. to show for both item and activity put value= s=1a,18
    * to show based on locale put in pupose ca=manual-cheque us=manual-check  in value put ca=m us=m
    * to use value rather than whats in options colimn, use v=xxx where xxx is the value.
    */
    /**
    * used by themeExport.xhtml which calls exportCsvData method > this exportItemClobCsvData > exportClobBlobCsvData
    * this calls exportclobblobCsvData with scope no and both to populate them.

    * Export theme contents including image urls to clob and images for theme contents or theme describing items to blob. 
    * Separate exportCsvData exist for Item which holds category and members.
    * For clob, the fromKey (page section) and qualifier(theme name) along with owner should be enough to select
    * As part of the theme Item export,an array of string will be built to contain theme name,data key and theme vendor
    * After items are exported as csv, the processs will loop through the array and call this method and export
    * related clobs.
    * Same array will be looped rhrough and if data has value blob method will be called to export item related images.
    * As the last step, all blob images matching vendor id and qualifier as theme name will be exported.
    * clobdata will have fromTable as clobdata,fromKey as A3R-TOP-BKGR-M,A3R-MID-TOP-M etc for page sections
    * and qualifier for theme name as ERP (Manufa6.354-1765137116, Nature/Gene7.023544634959, type as theme
    * and shared ie owner2 as SYSTEM and owner as content vendor.
    * For blob, the fromkey and sequence along with owner2 should be enough to select
    * blobdata will have fromTable as blobdata,fromKey as 3R-TOP-LEFT-C, pizza etc for page sections or content images.
    * These images are loaded as url /ImageServletCdi/?table=blobdata&seq=5&scope=SYSTEM&qlf=PIC&id=X3R-TOP-LEFT-C&width=700
    * currently there is no way to relate blob images to a specific theme, we can use item theme members array
    * and scan for ImageServlet and its parameters to call exportCsvdata for blob
    * This will allow csf export/import of default themes for master sites and also addons of new themes as free or paid
    * tbd copy csv files from one master site to another master site instead of download and then import
    * @param args -6, are key related and SYSTEM or not and theme vendor id. 
    * fromKey page sections,qualifier theme name
    * @return none void type
    * @exception file I/O and validation. Logged or error messages.
    * @see "exportCsvData for Item"
    *@see "preLoadThemes() if file.java"
    */

 public void exportItemClobCsvData(String scope,String themeCategory,String fromTable,String fromKey,String qualifier,int keySequence,String owner,String owner2Code) {
        //scope both covers  clob and blob if clob has embedded blob as themeCategory,fromTable FX..ITEM or clob/blob, fromKey-page section or docmnt key for 
        // text or image key, qualifier-themename/matcode,seq 0,1,2 owner vendor/user owner2 master site/SYSTEM
        String csvData="";
        String base64;
        String theme="";
        
  try {

    if(scope == null || scope.isEmpty()){
       scope="both";
    }

    if(themeCategory == null || themeCategory.isEmpty()){
       themeCategory="Pre built s4.2241967210614";
    }

    if(fromKey == null || fromKey.isEmpty()){
     fromKey="%";//page sections or docmnt key
    }
    if(owner == null || owner.isEmpty()){
     FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
      FacesMessage.SEVERITY_INFO,"clobdata, No Theme vendor name passed for Export",""));
     return ;
    }
    if(owner2Code == null || owner2Code.isEmpty()){
     owner2Code="SYSTEM";//accept shared ones and hardcode raaspi to allow legacy ones
    }

    if(fromTable == null || fromTable.isEmpty()){
       fromTable="clobdata";
    }
    if(qualifier == null || qualifier.isEmpty()){
     qualifier="TXT";// if fromtable clobdata then themeId
    }
    //tbd instead of hardcoding raaspi use master site owner2 
    List<Yxxxuq1m1xwwqqqxxxxxclobdata> items = getEntityManager()
	.createQuery(
	 "select cc from Yxxxuq1m1xwwqqqxxxxxclobdata cc where ((cc.a0xxukcdlvxxxxxxxxxxfromtable = :fromTable AND cc.a1xxuxxxbv49xxxxxxxxfromkey like :fromKey) OR (cc.a0xxukcdlvxxxxxxxxxxfromtable = 'clobdata' AND cc.a2xxuxxxbv50xxxxxxxxqualifier = :qualifier) AND (cc.z3xxutoxlhxxxxxxxxxxowner=:owner or cc.z3xxutoxlhxxxxxxxxxxowner='' ) AND (cc.zzxxu2oxxhxxxxxxxxxxowner2=:owner2 or cc.zzxxu2oxxhxxxxxxxxxxowner2=:owner22) )")
	  .setParameter("fromTable", fromTable).setParameter("fromKey", fromKey).setParameter("qualifier", qualifier).setParameter("owner", owner).setParameter("owner2", owner2Code).setParameter("owner22", masterSiteCode).getResultList();

    if(items.isEmpty()){
     FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
      FacesMessage.SEVERITY_INFO,"clobdata, No Theme data found for Export, category "+themeCategory+", fromKey "+fromKey+", qualifier "+qualifier,""));

     return ;
    } 

    // file already created in calling method, write to it 
    // there will be multiple entries so loop through clob items tbd owner to chage to new masterSite???
    // tbd replace , as "," in data
    for (Yxxxuq1m1xwwqqqxxxxxclobdata item:items){ 

      csvWriter.writeNext(new String[]{item.getA0xxukcdlvxxxxxxxxxxfromtable(), item.getA1xxuxxxbv49xxxxxxxxfromkey(),
       item.getA2xxuxxxbv50xxxxxxxxqualifier(), ""+item.getA3xxexnsbvxxxxxxxxxxsequence(),
       item.getA4xxexxxbvxxxxxxxxxxtype(), item.getB1xxuzaxbvxxxxxxxxxxdata(),
       item.getY3xxuxznbvxxxxxxxxxxnotes(), item.getZ3xxutoxlhxxxxxxxxxxowner(),
       item.getZzxxu2oxxhxxxxxxxxxxowner2()
       });

     }
     csvWriter.close();
     int found=0;

     if(scope.equals("both")){
      // loop through again for any blob data inside each clob html 
      for(Yxxxuq1m1xwwqqqxxxxxclobdata themeString : items){
       //look for string ImageServlet and get parameters ^start . any character $ ending
       Pattern pattern = Pattern.compile(";id=.+?&amp;");
       String data=themeString.getB1xxuzaxbvxxxxxxxxxxdata();
       Matcher matcher = pattern.matcher(data);
       theme="";
       //loop through this record
       int nextStart = 0;
       found=0;
       while (matcher.find(nextStart)) {
        found=found+1;
        theme="";
        int start = matcher.start();
        int end = matcher.end();
        end=end-5;
        theme= data.substring(start+5,end);//skip prefix 
        nextStart=end;
        fpxxfq1a5xwwqqhxxxxxitemHome.exportClobBlobCsvData("no",themeCategory,"blobdata",theme,"PIC",1,owner,"SYSTEM");
        //                                                                           no clob/image,item parent  ,fromtable                                         ,fromKey,qualf,seq,
       }//while
      }//for
     }//if

  } catch (Exception ex) {
    ex.printStackTrace();
  }




 } 
    /**
    * used by themeExport.xhtml which calls exportCsvData method > exportItemClobCsvData > this exportClobBlobCsvData
    * prepares either clob or blob records in csv text format. blobdata binary data > base64 so that it can be stored as csv text
    * csvWriter2 is for blobdata and calls opencsv csvWriter2.writeNext/close  to create csv records for blobdata
    */
 public void exportClobBlobCsvData(String scope,String themeCategory,String fromTable,String fromKey,String qualifier,int keySequence,String owner,String owner2Code) {
        //scope both covers clob data as well as blob inside clob as imageservlet
        String csvData="";
        String base64;
        String theme="";
        
  try {

    if(scope == null || scope.isEmpty()){
       scope="both";
    }

    if(themeCategory == null || themeCategory.isEmpty()){
       themeCategory="Pre built s4.2241967210614";
    }

    if(fromKey == null || fromKey.isEmpty()){
     fromKey="%";//page sections or docmnt key
    }
    if(owner == null || owner.isEmpty()){
     FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
      FacesMessage.SEVERITY_INFO,"blobdata, No Theme vendor name passed for Export",""));
     return ;
    }
    if(owner2Code == null || owner2Code.isEmpty()){
     owner2Code="SYSTEM";//accept shared ones and hardcode raaspi to allow legacy ones
    }

    if(fromTable == null || fromTable.isEmpty()){
       fromTable="blobdata";
    }
    if(qualifier == null || qualifier.isEmpty()){
     qualifier="PIC";
    }
    //like fromKey will bring all themes for a themecategory since 
    List<Yxxxuq1n1xwwqqqxxxxxblobdata> items = getEntityManager()
	.createQuery(
	 "select cc from Yxxxuq1n1xwwqqqxxxxxblobdata cc where (cc.a0xxukbdlvxxxxxxxxxxfromtable = :fromTable AND cc.a1xxuxxxbv49xxxxxxxxfromkey like :fromKey AND cc.a2xxuxxxbv50xxxxxxxxqualifier = :qualifier AND cc.z3xxutoxlhxxxxxxxxxxowner=:owner AND (cc.zzxxu2oxxhxxxxxxxxxxowner2=:owner2 or cc.zzxxu2oxxhxxxxxxxxxxowner2=:owner22))")
	  .setParameter("fromTable", fromTable).setParameter("fromKey", fromKey).setParameter("qualifier", qualifier).setParameter("owner", owner).setParameter("owner2", owner2Code).setParameter("owner22", masterSiteCode).getResultList();

    if(items.isEmpty()){
     FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
      FacesMessage.SEVERITY_INFO,"blobdata, No Theme data found for Export, category "+themeCategory+", fromKey "+fromKey,""));

     return ;
    } 

    Yxxxuq1n1xwwqqqxxxxxblobdata item =items.get(0);// since only one member in the list ??? why one

    base64 = Base64.getEncoder().encodeToString(item.getB1xxuzbxbvxxxxxxxxxxdata());//image byte data as base64 string
    //need to find a way to use column data/byte[] -> base64 ->csv  b1xxuzbxbvxxxxxxxxxxdata
      csvWriter2.writeNext(new String[]{item.getA0xxukbdlvxxxxxxxxxxfromtable(), item.getA1xxuxxxbv49xxxxxxxxfromkey(),
       item.getA2xxuxxxbv50xxxxxxxxqualifier(), ""+item.getA3xxexnsbvxxxxxxxxxxsequence(),
       item.getA4xxexxxbvxxxxxxxxxxtype(), base64,
       item.getY3xxuxznbvxxxxxxxxxxnotes(), item.getZ3xxutoxlhxxxxxxxxxxowner(),
       item.getZzxxu2oxxhxxxxxxxxxxowner2()
       });

      csvWriter2.close();
      //csv:"blobdata","3R-MID-TOP-M","restorative-yoga.jpg1936474490","PIC","1","pic","base64 data","","3R Computersss","SYSTEM"
     int found=0;


  } catch (Exception ex) {
    ex.printStackTrace();
  }




 } 




    /**
    * used by themeExport.xhtml which calls this exportCsvData method > exportItemClobCsvData > exportClobBlobCsvData
    * this method first creates and populates theme info (not content) related sitems.csv, sitemblob.csv and then creates theme content related sclob.csv and sblob.csv files
    * but calls exportItemClobCsvData which in turns calls exportclobblobCsvData with scope no and both to populate them.
    *
    * overall logic: theme items first, for the theme category build a list of theme items called items/members  and loop through items and create sitems.csv. 
    * Loop throgh once more and if the item has value in docmnt field and there is blob data, then convert into base64 and write sitemblob.csv
    * Next theme contents stored in clob/blob. Loop through members and extract theme id (matcode) and the clob/blob key (docmnt)
    * and call exportItemClobCsvData. A theme item content is in a clob but the clob itself may have images as blobdata using imageservlet.
    * for each member get the clobdata using the fromkey(item docmnt) and if present write sclob.csv.
    * In the clob data, look for imageServlet signature id=, if found, call exportClobBlobCsvData to handle clob>blob data.
    *
    * 
    * Exports theme category and members data kept in dataBase item records(descriptions) and in clob/blob records(contents). 
    * Theme descriptions in items include descript,notes text data and separate blob data records via docmnt field
    * as fromKey and fromtable as blob. Using clobdata for theme description is less common because it should be short.
    *
    * Theme contents reside in shared ie SYSTEM clob as HTML data which in turn can contain url for images in shared
    * /SYSTEM blob. The fromTable is XXXITEM and fromKey has the themename which is the matcode of the item.
    *    
    *
    * This method creates or reuses a dir in server and creates/overwrites item file for a theme category and members. 
    * category has type SI-L1 and members (children) have type SI-D. Both have subcodesn as TH and misccode1 has theme vendor
    * matCode is themeId  subcodesn3 has theme visual type/ theme business type, misccode2 theme visual type
    * if SI-L1 then its parent key has 0, SI-D then parent key will have sid of the parent. At import time we can insert the sid
    * For both item types, data field will have the key value say 795290653 matching either or both blob and clobdata
    * For now, hardode key value for SI-L1 as Pre built s4.2241967210614. Allow user prompt to make this changeable. 
    *  
    * explore using StatefulBeanToCsv, for now custom logic to support relations
    * instead of sid for a foreign key, fetch and write natural key value in csv. In import use the natural key to 
    * locate the sid and then use sid.
    * This means items need to be imported and created first and then blob and then clob.
    * @param args -6, are key related and SYSTEM or not and theme vendor id. 
    * fromKey page sections,qualifier theme name
    * @return none void type
    * @exception file I/O and validation. Logged or error messages.
    * @see "exportCsvData for clob and blob"
    * @see "preLoadThemes() in file.java"
    */
  public void exportCsvData(String themeGallery,String keyQualifier,String itemType,String subCodesn,String owner,String owner2Code) {
        // themeGallery,keyQualifier csv  subCodesn 'TH'
        // unlike clob and blob, theme items owner2 is normally master site
        String csvData="";
        String themeId="";
        String imageKey="";
        String fromKey="";
        List<Fpxxfq1a5xwwqqhxxxxxitem> members=null;
        List<Fpxxfq1a5xwwqqhxxxxxitem> items = null;
        if(themeGallery == null || themeGallery.isEmpty()){
         themeGallery="Pre built s4.2241967210614";
        }

        themeGallery=themeGallery.trim();
        if(owner2Code == null || owner2Code.isEmpty()){
         owner2Code="SYSTEM";//accept shared ones and hardcode raaspi to allow legacy ones
        }

   try {
    //get category first and then use its sid to get its members
    items = getEntityManager()
	.createQuery(
	 "select cc from Fpxxfq1a5xwwqqhxxxxxitem cc where (cc.c6xxusxrbv16xxxxxxxxtype = 'SI-L1' AND cc.g2xxuxn1bvxxxxxxxxxxsubcodesn = 'TH' AND cc.a0xxukixbxxxxxxxxxxxmatcode like :keyValue AND (cc.zzxxu2oxxhxxxxxxxxxxowner2=:owner2 or cc.zzxxu2oxxhxxxxxxxxxxowner2=:owner22))")
	  .setParameter("keyValue", themeGallery+"%").setParameter("owner2", owner2Code).setParameter("owner22", masterSiteCode).getResultList();
    if(items.isEmpty()){
     FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
      FacesMessage.SEVERITY_INFO,"No Theme category data found for Export",""));
     return ;
    }
    sidValue=items.get(0).getA0xxuobxbxxxxxxxxxxxsid();
    members = getEntityManager()
	.createQuery(
	 "select cc from Fpxxfq1a5xwwqqhxxxxxitem cc where (cc.c6xxusxrbv16xxxxxxxxtype = 'SI-D' AND cc.g2xxuxn1bvxxxxxxxxxxsubcodesn = 'TH' AND cc.fpxxfq1a5xwwqqhxxxxxitem.a0xxuobxbxxxxxxxxxxxsid=:sidValue AND (cc.zzxxu2oxxhxxxxxxxxxxowner2=:owner2 or cc.zzxxu2oxxhxxxxxxxxxxowner2=:owner22))")
	  .setParameter("sidValue", sidValue).setParameter("owner2", owner2Code).setParameter("owner22", masterSiteCode).getResultList();
    if(members.isEmpty()){
     FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
      FacesMessage.SEVERITY_INFO,"for Theme category "+themeGallery+" No details data found for Export",""));
     return ;
    }

    items.addAll(members);// category followed by all theme member items.
    //Actual text/images and theme contents are in clob/blob
    // create a file and write
    if(keyQualifier == null || keyQualifier.isEmpty()){
       keyQualifier="csv";
    }
    path_to = "resources" + java.io.File.separator + "csv";
    fileSavePath = FacesContext.getCurrentInstance().getExternalContext().getRealPath("") + this.path_to;
    newfilename = themeGallery + "items"+".csv";

    java.io.File fileToCreate = new java.io.File(fileSavePath, newfilename);//default creates/overwrites, append needs flag
    java.io.File folder = new java.io.File(fileSavePath);
    if (!folder.exists()) {
     folder.mkdirs();
    }
        FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
      FacesMessage.SEVERITY_INFO,"Folder for csv files: "+fileSavePath,""));

     csvWriter = new CSVWriter(new FileWriter(fileToCreate));
     //CSVWriter(Writer writer,char separator(,),quotechar("),escapechar(""),String lineEnd(\n)
     //quotechar to allow comma in data and escape char to allow quotechar itself in data.

     //StatefulBeanToCsv beanToCsv = new StatefulBeanToCsvBuilder(writer)
     //.withMappingStrategy(strategy)
     //.build(); //mapping not working ie output empty
     //StatefulBeanToCsv beanToCsv = new StatefulBeanToCsvBuilder(writer)
     //.build(); //no mapping but error related to jdbc handling collections
     //beanToCsv.write(items);
     //loop through items, create Array<String> themeItem of matcode,subcodesn etc
     // instead of saving parent sid which will change, save logical value ie matcode. parent sid may be null 
     String parentKey="";
     for(Fpxxfq1a5xwwqqhxxxxxitem item : items){
      parentKey="";
      if(item.getFpxxfq1a5xwwqqhxxxxxitem()!=null ){
       parentKey=item.getFpxxfq1a5xwwqqhxxxxxitem().getA0xxukixbxxxxxxxxxxxmatcode();
      }
      csvWriter.writeNext(new String[]{item.getA0xxukixbxxxxxxxxxxxmatcode(), item.getB1xxuszsbvxxxxxxxxxxdescript(),
       item.getY2xxuxxrbvxxxxxxxxxxmisccode1(), item.getY3xxuxxrbvxxxxxxxxxxmisccode2(),
       item.getC6xxusxrbv16xxxxxxxxtype(), parentKey,
       item.getG2xxuxn1bvxxxxxxxxxxsubcodesn(), item.getG2xxuxn3bvxxxxxxxxxxsubcodesn3(),
       item.getW7xxuznxbvxxxxxxxxxxnotes(), item.getW8xxuzdrbvxxxxxxxxxxdocmnt(),
       item.getZexxutoxlhxxxxxxxxxxowner(), item.getZzxxu2oxxhxxxxxxxxxxowner2()
       });
     }
     csvWriter.close();
     //csv: ""Agency /Gen50.94-1028397090"",""Agency /Generic/Agency"",""3R Computersss"",""Nature"",""SI-D"",""Pre built s4.2241967210614"",""TH"",""Generic/Agency"",""A generic theme under the Nature series and can be used as the base for any Agency site"",""B1987041908"",""3R Computersss"",""raaspi""
   } catch (Exception ex) {
    ex.printStackTrace();
   }

   try {
    newfilename = themeGallery + "itemblob"+".csv";

    java.io.File fileToCreate = new java.io.File(fileSavePath, newfilename);
    java.io.File folder = new java.io.File(fileSavePath);
    if (!folder.exists()) {
     folder.mkdirs();
    }

     csvWriter = new CSVWriter(new FileWriter(fileToCreate));
     //CSVWriter(Writer writer,char separator(,),quotechar("),escapechar(""),String lineEnd(\n)
     for(Fpxxfq1a5xwwqqhxxxxxitem item : items){
      if(!item.getW8xxuzdrbvxxxxxxxxxxdocmnt().isEmpty()){
       //check if any blobdata matching imageKey and create itemblob csv
       Yxxxuq1n1xwwqqqxxxxxblobdata blobdata=yxxxuq1n1xwwqqqxxxxxblobdataList.getDocmntWPrefixToEntity(item.getW8xxuzdrbvxxxxxxxxxxdocmnt());
       if(blobdata==null){
        continue;
       }
       //base64
       String base64 = Base64.getEncoder().encodeToString(blobdata.getB1xxuzbxbvxxxxxxxxxxdata());// image data in base64

       csvWriter.writeNext(new String[]{blobdata.getA0xxukbdlvxxxxxxxxxxfromtable(),blobdata.getA1xxuxxxbv49xxxxxxxxfromkey(),
       blobdata.getA2xxuxxxbv50xxxxxxxxqualifier(), ""+blobdata.getA3xxexnsbvxxxxxxxxxxsequence(),
       blobdata.getA4xxexxxbvxxxxxxxxxxtype(), base64,
       blobdata.getZ3xxutoxlhxxxxxxxxxxowner(), blobdata.getZzxxu2oxxhxxxxxxxxxxowner2()
       });
      }
     }
     csvWriter.close();

   } catch (Exception ex) {
    ex.printStackTrace();
   }


   // item csv file  and its blob csv file was created.
   //tbd in below loop also check getW8xxuzdrbvxxxxxxxxxxdocmnt() if not empty exportcsv for blob
   //create csv files here to avoid creating them in a loop
    // create a clob csv file and write
   try {
    path_to = "resources" + java.io.File.separator + "csv";//dir
    newfilename = themeGallery + "clob"+".csv";
    fileSavePath = FacesContext.getCurrentInstance().getExternalContext().getRealPath("") + this.path_to;

    fileToCreate = new java.io.File(fileSavePath, newfilename);
    folder = new java.io.File(fileSavePath);
    if (!folder.exists()) {
     folder.mkdirs();//should already exist
    }
    csvWriter = new CSVWriter(new FileWriter(fileToCreate));
    //CSVWriter(Writer writer,char separator(,),quotechar("),escapechar(""),String lineEnd(\n)

    // create a blob csv file and write
    newfilename = themeGallery + "blob"+".csv";
    fileSavePath = FacesContext.getCurrentInstance().getExternalContext().getRealPath("") + this.path_to;

    fileToCreate = new java.io.File(fileSavePath, newfilename);
    folder = new java.io.File(fileSavePath);
    if (!folder.exists()) {
     folder.mkdirs();//should already exist
    }
    csvWriter2 = new CSVWriter(new FileWriter(fileToCreate));
    //CSVWriter(Writer writer,char separator(,),quotechar("),escapechar(""),String lineEnd(\n)

    //now loop through theme members and call clob export, use item matcode as fromKey
    for(Fpxxfq1a5xwwqqhxxxxxitem theme : members){
     themeId= theme.getA0xxukixbxxxxxxxxxxxmatcode();
     fromKey= "%"; //theme.getW8xxuzdrbvxxxxxxxxxxdocmnt().substring(1) for theme descript but need to include content keys like MID- etc
     //csv files sclob.csv and sblob.csv created here but calls method to write. owner2 is masterSite for descript and SYSTEM for contents
     fpxxfq1a5xwwqqhxxxxxitemHome.exportItemClobCsvData("both",themeGallery,"clobdata",fromKey,themeId,0,owner,"SYSTEM");
     //method params                              scope,themeCategory,fromTable,fromKey,qualifier,keySequence,owner,owner2Code

     //ecah call creates website root/resources/csv/ a file named themecategory.clob
     //with multiple lines holding theme contents for many themes and their pages.
     // exportcsvData for clob at the end calls exportcsvData for blob for imageServlet entries,
     // which creates another blob csv file
    }
   } catch (Exception ex) {
    ex.printStackTrace();
   }

  }

    /**
    * The following method imports csv ie comma separated value as data base records  
    * theme related items,itemImage/Blobdata,item theme description and themecontent clobs and image/blobdata embedded in clobs   
    * Separate importCsvData files(4) exist for them, can be empty. 
    * @param args -2 csv file byte content, file name.  file name contains entity type ie item,itemblob,clob,blob
    * @return none 
    * @exception io errors and validation and messages are given
    * csv file needs to be recent to avoid old data  
    * @see "importCsvData for Account and also for item,customer etc"
    */
        //
	public void importThemeCsvData(byte[] fileContent,String fileName) {
/*
           // other than account, ignore table value assume as clobdata so that we can use editclobdata where table is allways clobdata
           // table can have other values via appl code
               importChosen=true;

               if(this.propSet.equals("N")){
                FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                 FacesMessage.SEVERITY_ERROR,bundle.getString("select")+" "+ bundle.getString("and")+" "+bundle.getString("confirm")+" "+bundle.getString("which")+" "+bundle.getString("fields")+" "+bundle.getString("will")+" "+bundle.getString("be")+" "+bundle.getString("imported"),""));

                  return;
               }
               int importexception=0;
               String jay="";
                String mykeyWPrefix=keyWPrefix;
                String mykeyQualifier=keyQualifier;
                int mykeySequence=keySequence;
                int mysize=size;
                int csvElements=11;
                int ii=0;
                importexception=0;     
               //try for customer/vendor/employee/item/address, loop inside
               try {
                 csvElements=7;//Item

	        if (this.instance == null) {
                 this.clearInstance();
	         this.instance=this.getInstance();
	        }

                 // date check, dont allow if older than 7 days,  removed csvElements count its fixed
                yxxxuq1m1xwwqqqxxxxxclobdata=yxxxuq1m1xwwqqqxxxxxclobdataList.getclobDataInstance("clobdata","a"+keyWPrefix,keyQualifier,keySequence);
                if (yxxxuq1m1xwwqqqxxxxxclobdata == null || yxxxuq1m1xwwqqqxxxxxclobdata.getB1xxuzaxbvxxxxxxxxxxdata().isEmpty()) {
                 FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                  FacesMessage.SEVERITY_INFO,"No CSV (Comma Separated Values) data found for Import",""));
                 return;
                }
                calendare.setTime(yxxxuq1m1xwwqqqxxxxxclobdata.getZ2xxcztxlxxxxxxxxxxxstatusfldt());
                calendare.add(Calendar.DAY_OF_YEAR,7);
                if(calendare.before(currbusdate) ){
                 FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                  FacesMessage.SEVERITY_ERROR,bundle.getString("csv")+" "+ bundle.getString("data")+" "+ bundle.getString("dated")+" "+yxxxuq1m1xwwqqqxxxxxclobdata.getZ2xxcztxlxxxxxxxxxxxstatusfldt().toString()+" "+bundle.getString("older")+" "+bundle.getString("than")+" "+bundle.getString("7")+" "+bundle.getString("days"),""));
                 FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                  FacesMessage.SEVERITY_ERROR,bundle.getString("not")+" "+bundle.getString("allowed")+", "+bundle.getString("import")+" "+ bundle.getString("adds")+"/"+ bundle.getString("overrides")+" "+bundle.getString("existing")+" "+bundle.getString("data"),""));
                 return; 
                }
                String csvData=yxxxuq1m1xwwqqqxxxxxclobdata.getB1xxuzaxbvxxxxxxxxxxdata();

                FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                 FacesMessage.SEVERITY_ERROR,"CSV (Comma Separated Values) data used- dated "+yxxxuq1m1xwwqqqxxxxxclobdata.getZ2xxcztxlxxxxxxxxxxxstatusfldt().toString(),""));

                String lines[] = csvData.split("\\r?\\n");
                String[] csvDataArray=null;
                String[] csvDataArray2=new String[11];
                String lastEmail="";
                int element=-1;
                int importdone=0;
                int importnotdone=0;
                int i=0;
                if(this.skipRecordOne.equals("Y")){
                  ii=1; 
                }

                for(i=ii;i<lines.length;i++){
                 element=-1;
                 csvDataArray=null;
                 jay=lines[i];
                 try{
                 if(!this.lineBy.equals("N")){
                  jay=jay.substring(0,jay.length()-1); 
                 }
                 if(this.enclosedBy.equals("D")){
                  jay=jay.replace("\"",""); 
                 }
                 if(this.enclosedBy.equals("S")){
                  jay=jay.replace("\'",""); 
                 }
                 if(this.delimeterBy.equals("C")){
                  csvDataArray=jay.split(",");
                 }
                 if(this.delimeterBy.equals("S")){
                  csvDataArray=jay.split(" ");
                 }
                 int k=csvDataArray.length;
                 int j=0;
                 for(j=0;j<11;j++){
                  if(j < k && csvDataArray[j] !=null){
                   csvDataArray2[j]=csvDataArray[j];
                  }else{
                   csvDataArray2[j]="";    
                  }
                 }
                 if(csvDataArray2.length != csvElements){
                  importnotdone=importnotdone+1;
                  if(importnotdone <6){

                   FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                    FacesMessage.SEVERITY_ERROR,bundle.getString("elements")+" "+ bundle.getString("found")+" "+csvDataArray.length+", "+ bundle.getString("expected")+" "+ csvElements+" "+bundle.getString("and")+" "+ bundle.getString("csv")+" "+ bundle.getString("elements")+" "+ jay,""));

                  }     
                 }
                 this.instance.setA0xxukixbxxxxxxxxxxxmatcode(csvDataArray2[0]);// check for non numeric
                 if(csvDataArray2[1]==null || csvDataArray2[1].isEmpty()){
                  this.instance.setB0xxziqxlvxxsaxxxxxxquantity(BigDecimal.ZERO);
                 }else{
                  this.instance.setB0xxziqxlvxxsaxxxxxxquantity(new BigDecimal(csvDataArray2[1]));
                 }
                 this.instance.setB1xxuszsbvxxxxxxxxxxdescript(csvDataArray2[2]);
                 if(csvDataArray2[3]==null || csvDataArray2[3].isEmpty()){
                  this.instance.setB6fbzicxbvxxxxxxxxxxcost(BigDecimal.ZERO);
                 }else{
                  this.instance.setB6fbzicxbvxxxxxxxxxxcost(new BigDecimal(csvDataArray2[3]));
                 }
                 if(csvDataArray2[4]==null || csvDataArray2[4].isEmpty()){
                  this.instance.setB8fbzpxxbvxxxxxxxxxxselprice(BigDecimal.ZERO);
                 }else{
                  this.instance.setB8fbzpxxbvxxxxxxxxxxselprice(new BigDecimal(csvDataArray2[4]));
                 }
                 this.instance.setZxxrbvxxxvxxxxxxxxxxbarupc(csvDataArray2[5]);
                 if(csvDataArray2[6] == null || csvDataArray2[6].isEmpty()){
                  csvDataArray2[6]="SI-D";
                 } 
                 this.instance.setZxxrbvxxxvxxxxxxxxxxbarupc(csvDataArray2[5]);
                 if(csvDataArray2[6] == null || csvDataArray2[6].isEmpty()){
                  csvDataArray2[6]="SI-D";
                 } 
                 this.instance.setC6xxusxrbv16xxxxxxxxtype(csvDataArray2[6]);
                 this.instance.setZexxutoxlhxxxxxxxxxxowner(customIdentity.getOwner());
                 this.instance.setZzxxu2oxxhxxxxxxxxxxowner2(owner2Code);
                 this.instance.setZ5xxzzfxhhxxxxxxxxxxstatusfl(mcopy);



                 this.subKey="";
                 this.persist();//customer etc
                 importdone=importdone+1;
                 this.clearInstance();
	         this.instance=this.getInstance();
                 if(!bcontinue){
                   FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                    FacesMessage.SEVERITY_ERROR,bundle.getString("aborting")+" "+ bundle.getString("import")+", "+ bundle.getString("changes")+" "+ bundle.getString("rolled")+" "+ bundle.getString("back")+", "+ bundle.getString("fix")+" "+ bundle.getString("and")+" "+ bundle.getString("try")+" "+ bundle.getString("again"),""));
                   return;
     
                 }
                 }catch (Exception ef){
                  importexception=importexception+1;
                  if(importexception <6){
                   FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                    FacesMessage.SEVERITY_ERROR,bundle.getString("exception")+" "+ ef.getCause()+", "+ ef.getMessage()+" "+jay,""));

		   log.severe(" import error "+owner2Code+' ' + ef.getCause()+' ' + ef.getMessage()+' '+jay);
                  }     
                 }
                 if(i >=400){
                  // runs out of memory,try session.flush and clear
                  FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                   FacesMessage.SEVERITY_ERROR,bundle.getString("upto")+" 400 "+ bundle.getString("records")+" "+bundle.getString("per")+" "+bundle.getString("import"),""));

                  break;
                 }
                }//for loop
                 FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                  FacesMessage.SEVERITY_INFO,bundle.getString("total")+" "+i+" = "+ bundle.getString("dropped")+" "+duplDropped+"  "+ bundle.getString("added")+" "+importAdded,""));

                 //FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                  //FacesMessage.SEVERITY_INFO,i+" "+bundle.getString("last")+" "+ bundle.getString("processed")+" "+lastEmail,""));

              


		} catch (Exception e) {
                  importexception=importexception+1;
                  if(importexception <6){
                   FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                    FacesMessage.SEVERITY_INFO,bundle.getString("exception")+" "+e.getMessage()+" "+ jay,""));

		   log.severe(" import error "+owner2Code+' ' + e.getMessage()+' '+jay);
                  }     
		}
*/
      } 




     // make sure to include @Inject clobdata if non clob entity and remove hardcoding below use entitynames

        private String propSet="N";
        private String delimeterBy="C";
        private String enclosedBy="D";
        private String lineBy="N";
        private String keyBy="N";
        private String descriptionBy="N";
        private String titleBy="N";
        private String lastfirstBy="LF";
        private String companyBy="N";
        private String ophoneBy="Y";
        private String hphoneBy="N";
        private String cphoneBy="Y";
        private String emailBy="Y";
        private String typeBy="N";
        private String skipRecordOne="N";

        public String getImportSet() {
         return propSet;
        }
        public void setImportSet(String propSet) { 
         this.propSet = propSet;
        }
        public String getDelimeterBy() {
         return delimeterBy;
        }
        public void setDelimeterBy(String delimeterBy) { 
         this.delimeterBy = delimeterBy;
        }

        public String getEnclosedBy() {
         return enclosedBy;
        }
        public void setEnclosedBy(String enclosedBy) { 
         this.enclosedBy = enclosedBy;
        }

        public String getLineBy() {
         return lineBy;
        }
        public void setLineBy(String lineBy) { 
         this.lineBy = lineBy;
        }
     
        public String getKeyBy() {
         return keyBy;
        }
        public void setKeyBy(String keyBy) { 
         this.keyBy = keyBy;
        }
        public String getDescriptionBy() {
         return descriptionBy;
        }
        public void setDescriptionBy(String descriptionBy) { 
         this.descriptionBy = descriptionBy;
        }
        public String getTitleBy() {
         return titleBy;
        }
        public void setTitleBy(String titleBy) { 
         this.titleBy = titleBy;
        }
        public String getLastfirstBy() {
         return lastfirstBy;
        }
        public void setLastfirstBy(String lastfirstBy) { 
         this.lastfirstBy = lastfirstBy;
        }
        public String getCompanyBy() {
         return companyBy;
        }
        public void setCompanyBy(String companyBy) { 
         this.companyBy = companyBy;
        }
        public String getOphoneBy() {
         return ophoneBy;
        }
        public void setOphoneBy(String ophoneBy) { 
         this.ophoneBy = ophoneBy;
        }
        public String getHphoneBy() {
         return hphoneBy;
        }
        public void setHphoneBy(String hphoneBy) { 
         this.hphoneBy = hphoneBy;
        }
        public String getCphoneBy() {
         return cphoneBy;
        }

        public void setCphoneBy(String cphoneBy) { 
         this.cphoneBy = cphoneBy;
        }
        public String getEmailBy() {
         return emailBy;
        }
        public void setEmailBy(String emailBy) { 
         this.emailBy = emailBy;
        }

        public String getTypeBy() {
         return typeBy;
        }
        public void setTypeBy(String typeBy) { 
         this.typeBy = typeBy;
        }
        public String getSkipRecordOne() {
         return skipRecordOne;
        }
        public void setSkipRecordOne(String skipRecordOne) { 
         this.skipRecordOne = skipRecordOne;
        }

    /**
    * The following method imports csv ie comma separated value as data base records  
    * currently customer/vendor/employee/item/address tables are supported. 
    * Relations not supported but tbd
    * Separate importCsvData exists for account and accountIntegration and supports relation
    * @param args -4 first 3 are key related and last is size. They are used based on the table
    * @return none 
    * @exception io errors and validation and messages are given
    * csv file needs to be recent 
    * @see "importCsvData for Account"
    */

	public void importCsvData(String keyWPrefix,String keyQualifier,int keySequence,int size) {
           // other than account, ignore table value assume as clobdata so that we can use editclobdata where table is allways clobdata
           // table can have other values via appl code
               importChosen=true;

               if(this.propSet.equals("N")){
                FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                 FacesMessage.SEVERITY_ERROR,bundle.getString("select")+" "+ bundle.getString("and")+" "+bundle.getString("confirm")+" "+bundle.getString("which")+" "+bundle.getString("fields")+" "+bundle.getString("will")+" "+bundle.getString("be")+" "+bundle.getString("imported"),""));

                  return;
               }
               int importexception=0;
               String jay="";
                String mykeyWPrefix=keyWPrefix;
                String mykeyQualifier=keyQualifier;
                int mykeySequence=keySequence;
                int mysize=size;
                int csvElements=11;
                int ii=0;
                importexception=0;     
               //try for customer/vendor/employee/item/address, loop inside
               try {
                 csvElements=7;//Item

	        if (this.instance == null) {
                 this.clearInstance();
	         this.instance=this.getInstance();
	        }

                 // date check, dont allow if older than 7 days,  removed csvElements count its fixed
                yxxxuq1m1xwwqqqxxxxxclobdata=yxxxuq1m1xwwqqqxxxxxclobdataList.getclobDataInstance("clobdata","a"+keyWPrefix,keyQualifier,keySequence);
                if (yxxxuq1m1xwwqqqxxxxxclobdata == null || yxxxuq1m1xwwqqqxxxxxclobdata.getB1xxuzaxbvxxxxxxxxxxdata().isEmpty()) {
                 FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                  FacesMessage.SEVERITY_INFO,"No CSV (Comma Separated Values) data found for Import",""));
                 return;
                }
                calendare.setTime(yxxxuq1m1xwwqqqxxxxxclobdata.getZ2xxcztxlxxxxxxxxxxxstatusfldt());
                calendare.add(Calendar.DAY_OF_YEAR,7);
                if(calendare.before(currbusdate) ){
                 FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                  FacesMessage.SEVERITY_ERROR,bundle.getString("csv")+" "+ bundle.getString("data")+" "+ bundle.getString("dated")+" "+yxxxuq1m1xwwqqqxxxxxclobdata.getZ2xxcztxlxxxxxxxxxxxstatusfldt().toString()+" "+bundle.getString("older")+" "+bundle.getString("than")+" "+bundle.getString("7")+" "+bundle.getString("days"),""));
                 FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                  FacesMessage.SEVERITY_ERROR,bundle.getString("not")+" "+bundle.getString("allowed")+", "+bundle.getString("import")+" "+ bundle.getString("adds")+"/"+ bundle.getString("overrides")+" "+bundle.getString("existing")+" "+bundle.getString("data"),""));
                 return; 
                }
                String csvData=yxxxuq1m1xwwqqqxxxxxclobdata.getB1xxuzaxbvxxxxxxxxxxdata();

                FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                 FacesMessage.SEVERITY_ERROR,"CSV (Comma Separated Values) data used- dated "+yxxxuq1m1xwwqqqxxxxxclobdata.getZ2xxcztxlxxxxxxxxxxxstatusfldt().toString(),""));

                String lines[] = csvData.split("\\r?\\n");
                String[] csvDataArray=null;
                String[] csvDataArray2=new String[11];
                String lastEmail="";
                int element=-1;
                int importdone=0;
                int importnotdone=0;
                int i=0;
                if(this.skipRecordOne.equals("Y")){
                  ii=1; 
                }

                for(i=ii;i<lines.length;i++){
                 element=-1;
                 csvDataArray=null;
                 jay=lines[i];
                 try{
                 if(!this.lineBy.equals("N")){
                  jay=jay.substring(0,jay.length()-1); 
                 }
                 if(this.enclosedBy.equals("D")){
                  jay=jay.replace("\"",""); 
                 }
                 if(this.enclosedBy.equals("S")){
                  jay=jay.replace("\'",""); 
                 }
                 if(this.delimeterBy.equals("C")){
                  csvDataArray=jay.split(",");
                 }
                 if(this.delimeterBy.equals("S")){
                  csvDataArray=jay.split(" ");
                 }
                 int k=csvDataArray.length;
                 int j=0;
                 for(j=0;j<11;j++){
                  if(j < k && csvDataArray[j] !=null){
                   csvDataArray2[j]=csvDataArray[j];
                  }else{
                   csvDataArray2[j]="";    
                  }
                 }
                 if(csvDataArray2.length != csvElements){
                  importnotdone=importnotdone+1;
                  if(importnotdone <6){

                   FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                    FacesMessage.SEVERITY_ERROR,bundle.getString("elements")+" "+ bundle.getString("found")+" "+csvDataArray.length+", "+ bundle.getString("expected")+" "+ csvElements+" "+bundle.getString("and")+" "+ bundle.getString("csv")+" "+ bundle.getString("elements")+" "+ jay,""));

                  }     
                 }
                 this.instance.setA0xxukixbxxxxxxxxxxxmatcode(csvDataArray2[0]);// check for non numeric
                 if(csvDataArray2[1]==null || csvDataArray2[1].isEmpty()){
                  this.instance.setB0xxziqxlvxxsaxxxxxxquantity(BigDecimal.ZERO);
                 }else{
                  this.instance.setB0xxziqxlvxxsaxxxxxxquantity(new BigDecimal(csvDataArray2[1]));
                 }
                 this.instance.setB1xxuszsbvxxxxxxxxxxdescript(csvDataArray2[2]);
                 if(csvDataArray2[3]==null || csvDataArray2[3].isEmpty()){
                  this.instance.setB6fbzicxbvxxxxxxxxxxcost(BigDecimal.ZERO);
                 }else{
                  this.instance.setB6fbzicxbvxxxxxxxxxxcost(new BigDecimal(csvDataArray2[3]));
                 }
                 if(csvDataArray2[4]==null || csvDataArray2[4].isEmpty()){
                  this.instance.setB8fbzpxxbvxxxxxxxxxxselprice(BigDecimal.ZERO);
                 }else{
                  this.instance.setB8fbzpxxbvxxxxxxxxxxselprice(new BigDecimal(csvDataArray2[4]));
                 }
                 this.instance.setZxxrbvxxxvxxxxxxxxxxbarupc(csvDataArray2[5]);
                 if(csvDataArray2[6] == null || csvDataArray2[6].isEmpty()){
                  csvDataArray2[6]="SI-D";
                 } 
                 this.instance.setZxxrbvxxxvxxxxxxxxxxbarupc(csvDataArray2[5]);
                 if(csvDataArray2[6] == null || csvDataArray2[6].isEmpty()){
                  csvDataArray2[6]="SI-D";
                 } 
                 this.instance.setC6xxusxrbv16xxxxxxxxtype(csvDataArray2[6]);
                 this.instance.setZexxutoxlhxxxxxxxxxxowner(customIdentity.getOwner());
                 this.instance.setZzxxu2oxxhxxxxxxxxxxowner2(owner2Code);
                 this.instance.setZ5xxzzfxhhxxxxxxxxxxstatusfl(mcopy);



                 this.subKey="";
                 this.persist();//customer etc
                 importdone=importdone+1;
                 this.clearInstance();
	         this.instance=this.getInstance();
                 if(!bcontinue){
                   FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                    FacesMessage.SEVERITY_ERROR,bundle.getString("aborting")+" "+ bundle.getString("import")+", "+ bundle.getString("changes")+" "+ bundle.getString("rolled")+" "+ bundle.getString("back")+", "+ bundle.getString("fix")+" "+ bundle.getString("and")+" "+ bundle.getString("try")+" "+ bundle.getString("again"),""));
                   return;
     
                 }
                 }catch (Exception ef){
                  importexception=importexception+1;
                  if(importexception <6){
                   FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                    FacesMessage.SEVERITY_ERROR,bundle.getString("exception")+" "+ ef.getCause()+", "+ ef.getMessage()+" "+jay,""));

		   log.severe(" import error "+owner2Code+' ' + ef.getCause()+' ' + ef.getMessage()+' '+jay);
                  }     
                 }
                 if(i >=400){
                  // runs out of memory,try session.flush and clear
                  FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                   FacesMessage.SEVERITY_ERROR,bundle.getString("upto")+" 400 "+ bundle.getString("records")+" "+bundle.getString("per")+" "+bundle.getString("import"),""));

                  break;
                 }
                }//for loop
                 FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                  FacesMessage.SEVERITY_INFO,bundle.getString("total")+" "+i+" = "+ bundle.getString("dropped")+" "+duplDropped+"  "+ bundle.getString("added")+" "+importAdded,""));

                 //FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                  //FacesMessage.SEVERITY_INFO,i+" "+bundle.getString("last")+" "+ bundle.getString("processed")+" "+lastEmail,""));

              


		} catch (Exception e) {
                  importexception=importexception+1;
                  if(importexception <6){
                   FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                    FacesMessage.SEVERITY_INFO,bundle.getString("exception")+" "+e.getMessage()+" "+ jay,""));

		   log.severe(" import error "+owner2Code+' ' + e.getMessage()+' '+jay);
                  }     
		}
      } 



    /**
    * persist true means came from copynsave ie convert order to invoice etc , false comes from show outstanding and resets totals but no copy
    * called by xxEdit convertToxx button to copy existing entity say order date into new invoice along with the details
    * Similar function as AddWithDetails or AddProductsToOrder but they are interactive, this one loops through existing data
    * Flow:loops through each copy from item like quote,order or invoice
    *       persist -> showTempRunt -> createcDetails ->setParent sets parent totals (loops through as parent details created)
    *          -> PersistRunT prepares Totals for persist -> actual persist of parent and then detail instance
    *      loop back for each item to be copied
    *
    *@see "R3RestClient SyncData where series of order data comes as json values    "
    */




public boolean isBitSet(Integer a, Integer n){ 
 if (a == null){
  a=0;
 }
 return (a & (1 << n)) != 0; 
}





// set initCap via client, make it true now
        public boolean initCap() {
         //jay add logic to check client table if initCap is on or not
            return true;
        }



      /* parentProperty org.hibernate.mapping.Property(fpxxfq1a5xwwqqhxxxxxitem) parentParentPojo Entity: com.rcomputer.genapp.model.Fpxxfq1a5xwwqqhxxxxxitem */
      /* parentProperty org.hibernate.mapping.Property(fxxxcq144xwwqqhxxxxxlocation) parentParentPojo Entity: com.rcomputer.genapp.model.Fxxxcq144xwwqqhxxxxxlocation */
    // compositekeylist is 
      //generated for non composite foreign fields
         public void validateAndSelectXxxxxxxxmatcode(FacesContext context,UIComponent toValidate,Object value) {
            if (skipValidation){
             //extended persist closes the copied from entity so validation will fail and we dont need validation at this point
             return;
            }
            // set bcontinue to true if set false by showrunt() at start of txn, because of property being null
            // jay not all showrunt() validate, vendor txn does not why??
            if(fpxxfq1a5xwwqqhxxxxxitem == null && bcontinue == false){
             bcontinue=true;
            }
            fpxxfq1a5xwwqqhxxxxxitem  = null;
            String enteredValue = (String) value;
            String jay = toValidate.getAttributes().get("required").toString();
            if (!jay.contains("true")  && (enteredValue ==null || enteredValue.trim().isEmpty())){ 
             return;
            }
            if (jay.contains("true")  && (enteredValue ==null || enteredValue.trim().isEmpty())){  
             FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
              FacesMessage.SEVERITY_WARN,bundle.getString("matcode")+" "+ bundle.getString("no")+" "+ bundle.getString("value"),""));
             bcontinue=false;
             return;
            }
            urlIndex=urlName.indexOf(">>");
            if (urlIndex != -1){
             enteredValue=enteredValue.substring(0,urlIndex);
            }
            Fpxxfq1a5xwwqqhxxxxxitem cc = fpxxfq1a5xwwqqhxxxxxitemHome.getInstance();
	      try {
                        List<Fpxxfq1a5xwwqqhxxxxxitem> results=null;
                        // include SYSTEM bundles   system blogs
                        if(owner2Code.equals(masterSiteCode)){
 			 results =  entityManager.createQuery("select cc from Fpxxfq1a5xwwqqhxxxxxitem cc where cc.a0xxukixbxxxxxxxxxxxmatcode = :keyOfEntity AND (cc.zzxxu2oxxhxxxxxxxxxxowner2=:owner2 or cc.zzxxu2oxxhxxxxxxxxxxowner2='SYSTEM')")
				.setParameter("keyOfEntity", enteredValue).setParameter("owner2", owner2Code).getResultList();
                        }else{
			 results =  entityManager.createQuery("select cc from Fpxxfq1a5xwwqqhxxxxxitem cc where cc.a0xxukixbxxxxxxxxxxxmatcode = :keyOfEntity AND cc.zzxxu2oxxhxxxxxxxxxxowner2=:owner2 order by cc.a0xxuobxbxxxxxxxxxxxsid asc")
				.setParameter("keyOfEntity", enteredValue).setParameter("owner2", owner2Code).getResultList();                      
                        }
                        if(!results.isEmpty()){
                            fpxxfq1a5xwwqqhxxxxxitem = results.get(0);
                            if (results.size()>1){
                             FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_WARN,bundle.getString("matcode")+" "+ bundle.getString("multiple")+" "+ bundle.getString("results")+", "+ bundle.getString("one")+" "+ bundle.getString("selected"),""));
                        
                            }           
                        }
                        else{
                         FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_WARN,bundle.getString("matcode")+" "+ enteredValue+" "+bundle.getString("not")+" "+ bundle.getString("found")+", "+ bundle.getString("create")+" "+ bundle.getString("first"),""));
                                     return;                           
                        } 
                        if (fpxxfq1a5xwwqqhxxxxxitem != null ) {
                             // that's fine - It should exist.
                             // check if selfreferencing foreign field
                           if(this.instance == null){
                            getInstance();
                            if(this.instance == null){//
                             FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                              FacesMessage.SEVERITY_WARN,bundle.getString("Item")+" "+bundle.getString("instance")+" "+ bundle.getString("empty")+", "+ bundle.getString("exit")+" "+ bundle.getString("and")+" "+ bundle.getString("try")+" "+ bundle.getString("again"),""));
                             return;
                            }
                           }
                          this.instance.setFpxxfq1a5xwwqqhxxxxxitem(fpxxfq1a5xwwqqhxxxxxitem);
                         /// check if atleast 1 detail persisted then assume a new item is being considered       
                         /// put a new flag to avoid query
                         ///if(trexuq233xwwqqhxxxxxcuquoteList.entityLessStatusDetailedList(trexuq233xwwqqhxxxxxcuquoteHome.instance.a0xxuobxbxxxxxxxxxxxsid,-1).size() ge 1 )
                         ///}                        
                           //if some other validation already failed, do not reset it 
                           if(bcontinue){
                            bcontinue=true;
                           }
                         }//end of shiptobill check
	      } catch (NoResultException nre) {
                 FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                   FacesMessage.SEVERITY_WARN,bundle.getString("Matcode"),""));
                 throw new ValidatorException(msg);
              }
         }
         // check again if selfreferencing foreign field fpxxfq1a5xwwqqhxxxxxitem fpxxfq1a5xwwqqhxxxxxitem jay may not be needed check edit.ftl
         String jay;
	    public String getItemAsParent() {
		return this.jay;
	    }
	    public void setItemAsParent(String jay) {
		this.jay = jay;
	    }
      /* parentProperty org.hibernate.mapping.Property(dxxxch1d3xwwqqhxxlxxcompany) parentParentPojo Entity: com.rcomputer.genapp.model.Dxxxch1d3xwwqqhxxlxxcompany */
      /* parentProperty org.hibernate.mapping.Property(fxxxuq111xwwqqhxxxxxaddress) parentParentPojo Entity: com.rcomputer.genapp.model.Fxxxuq111xwwqqhxxxxxaddress */
    // compositekeylist is 
      //generated for non composite foreign fields
         public void validateAndSelectXxxxxxxxlocation(FacesContext context,UIComponent toValidate,Object value) {
            if (skipValidation){
             //extended persist closes the copied from entity so validation will fail and we dont need validation at this point
             return;
            }
            // set bcontinue to true if set false by showrunt() at start of txn, because of property being null
            // jay not all showrunt() validate, vendor txn does not why??
            if(fxxxcq144xwwqqhxxxxxlocation == null && bcontinue == false){
             bcontinue=true;
            }
            fxxxcq144xwwqqhxxxxxlocation  = null;
            String enteredValue = (String) value;
            String jay = toValidate.getAttributes().get("required").toString();
            if (!jay.contains("true")  && (enteredValue ==null || enteredValue.trim().isEmpty())){ 
             return;
            }
            if (jay.contains("true")  && (enteredValue ==null || enteredValue.trim().isEmpty())){  
             FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
              FacesMessage.SEVERITY_WARN,bundle.getString("location")+" "+ bundle.getString("no")+" "+ bundle.getString("value"),""));
             bcontinue=false;
             return;
            }
            urlIndex=urlName.indexOf(">>");
            if (urlIndex != -1){
             enteredValue=enteredValue.substring(0,urlIndex);
            }
            Fxxxcq144xwwqqhxxxxxlocation cc = fxxxcq144xwwqqhxxxxxlocationHome.getInstance();
	      try {
                        List<Fxxxcq144xwwqqhxxxxxlocation> results=null;
                        // include SYSTEM bundles   system blogs
                        if(owner2Code.equals(masterSiteCode)){
 			 results =  entityManager.createQuery("select cc from Fxxxcq144xwwqqhxxxxxlocation cc where cc.a0xxukxxbvxxxxxxxxxxlocation = :keyOfEntity AND (cc.zzxxu2oxxhxxxxxxxxxxowner2=:owner2 or cc.zzxxu2oxxhxxxxxxxxxxowner2='SYSTEM')")
				.setParameter("keyOfEntity", enteredValue).setParameter("owner2", owner2Code).getResultList();
                        }else{
			 results =  entityManager.createQuery("select cc from Fxxxcq144xwwqqhxxxxxlocation cc where cc.a0xxukxxbvxxxxxxxxxxlocation = :keyOfEntity AND cc.zzxxu2oxxhxxxxxxxxxxowner2=:owner2 order by cc.a0xxuobxbxxxxxxxxxxxsid asc")
				.setParameter("keyOfEntity", enteredValue).setParameter("owner2", owner2Code).getResultList();                      
                        }
                        if(!results.isEmpty()){
                            fxxxcq144xwwqqhxxxxxlocation = results.get(0);
                            if (results.size()>1){
                             FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_WARN,bundle.getString("location")+" "+ bundle.getString("multiple")+" "+ bundle.getString("results")+", "+ bundle.getString("one")+" "+ bundle.getString("selected"),""));
                        
                            }           
                        }
                        else{
                         FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_WARN,bundle.getString("location")+" "+ enteredValue+" "+bundle.getString("not")+" "+ bundle.getString("found")+", "+ bundle.getString("create")+" "+ bundle.getString("first"),""));
                                     return;                           
                        } 
                        if (fxxxcq144xwwqqhxxxxxlocation != null ) {
                             // that's fine - It should exist.
                             // check if selfreferencing foreign field
                           if(this.instance == null){
                            getInstance();
                            if(this.instance == null){//
                             FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                              FacesMessage.SEVERITY_WARN,bundle.getString("Item")+" "+bundle.getString("instance")+" "+ bundle.getString("empty")+", "+ bundle.getString("exit")+" "+ bundle.getString("and")+" "+ bundle.getString("try")+" "+ bundle.getString("again"),""));
                             return;
                            }
                           }
                           //fxxxcq144xwwqqhxxxxxlocation = fxxxcq144xwwqqhxxxxxlocationHome.getDefinedInstance();
                          this.instance.setFxxxcq144xwwqqhxxxxxlocation(fxxxcq144xwwqqhxxxxxlocation);
                         /// check if atleast 1 detail persisted then assume a new item is being considered       
                         /// put a new flag to avoid query
                         ///if(trexuq233xwwqqhxxxxxcuquoteList.entityLessStatusDetailedList(trexuq233xwwqqhxxxxxcuquoteHome.instance.a0xxuobxbxxxxxxxxxxxsid,-1).size() ge 1 )
                         ///}                        
                           //if some other validation already failed, do not reset it 
                           if(bcontinue){
                            bcontinue=true;
                           }
                         }//end of shiptobill check
	      } catch (NoResultException nre) {
                 FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                   FacesMessage.SEVERITY_WARN,bundle.getString("Location"),""));
                 throw new ValidatorException(msg);
              }
         }
         // check again if selfreferencing foreign field fxxxcq144xwwqqhxxxxxlocation fpxxfq1a5xwwqqhxxxxxitem jay may not be needed check edit.ftl


public boolean keyExists(String key){
                //key has companyName or lastname+random or companyName or lastname+firstName+random, so if say first 8 chrs match to existing key then possible dupl
                // first 8 chosen rather than 16 to avoid short last and first names having random ss in key 
                // but need to check farther using email if present or phone # 
                // in case of import we need more checking
                String jay="";
                 key=key.substring(0,7).toLowerCase();
                 Fpxxfq1a5xwwqqhxxxxxitem cc = this.getInstance();
	try {
                        List<Fpxxfq1a5xwwqqhxxxxxitem> results= entityManager
                         .createQuery(
                          "select cc from Fpxxfq1a5xwwqqhxxxxxitem cc where lower(cc.a0xxukixbxxxxxxxxxxxmatcode) like :keyOfEntity AND cc.zzxxu2oxxhxxxxxxxxxxowner2=:owner2 order by cc.a0xxuobxbxxxxxxxxxxxsid asc")
                          .setParameter("keyOfEntity", key+"%").setParameter("owner2", owner2Code)
                          .getResultList();
                        if(!results.isEmpty()){
                         // loop through and pick most likely one ie check last name and first name
                         for (Fpxxfq1a5xwwqqhxxxxxitem fpxxfq1a5xwwqqhxxxxxitemk : results) {
                          if (fpxxfq1a5xwwqqhxxxxxitemk != null) {
                           // cannot be sure yet can add other phones later
                            return false;
                           }
                         }
			}
                       } catch (NoResultException nre) {
                         // that's fine - It should not exist.
                         // added extra logic to check other fields like say email exist 
                          
                } catch ( Exception e){
                  // error consider as dupilcate and skip   
                  FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                   FacesMessage.SEVERITY_WARN,bundle.getString("key")+" "+ key+" "+bundle.getString("error")+" "+bundle.getString("in")+" "+bundle.getString("key")+" "+bundle.getString("exists")+" "+bundle.getString("check")+", "+ bundle.getString("cause")+" "+ e.getMessage(),""));

                  return true;
                }
                return false;

}



//fpxxfq1a5xwwqqhxxxxxitem
	public void validateKeyDuplicateMatcode(FacesContext context,UIComponent toValidate,Object value) {

            String enteredValue = (String) value;
            Fpxxfq1a5xwwqqhxxxxxitem cc = this.getInstance();
            if (this.isManaged()){
             return;
            }
            // if composite natural key like in resource we need multiple field check
            // rate table do not check via jsf
            // check for dup stepname, if dupl and step also dupl then reject in persist logic
            // jay to add
 
	      try {
			Fpxxfq1a5xwwqqhxxxxxitem cc1 = (Fpxxfq1a5xwwqqhxxxxxitem) entityManager.createQuery("select cc from Fpxxfq1a5xwwqqhxxxxxitem cc where cc.a0xxukixbxxxxxxxxxxxmatcode = :keyOfEntity AND cc.zzxxu2oxxhxxxxxxxxxxowner2=:owner2 order by cc.a0xxuobxbxxxxxxxxxxxsid asc")
				.setParameter("keyOfEntity", enteredValue).setParameter("owner2", owner2Code).getSingleResult();
			if (cc1 != null ) {
                         FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                            FacesMessage.SEVERITY_WARN,bundle.getString("entered")+" "+bundle.getString("key")+" "+ bundle.getString("already")+" "+ bundle.getString("exists"),""));

			 throw new ValidatorException(msg);

			     // that's bad - It should not exist if add ie not managed
			}
	      } catch (NoResultException nre) {
		// Ok		throw new ValidatorException(new FacesMessage("Does not exist"));
              } catch (Exception e) {
                  FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                    FacesMessage.SEVERITY_ERROR,bundle.getString("duplicate")+" "+bundle.getString("key")+" "+bundle.getString("check")+" "+bundle.getString("failed")+" " + e.getMessage(),""));
                throw new ValidatorException(msg);
              }

	}









    public String more() {
    
  // 1A now a new item may be selected, so clear the old item values

     totaldel=new BigDecimal("0.0");
     totalmis=new BigDecimal("0.0");
     // make a new method describeStatus(int status)
       if(!isBitSet(this.instance.getZ5xxzzfxhhxxxxxxxxxxstatusfl(),_mactive) && this.getLastItemLine() == 2){ 
        if (customIdentity.isDebug()){ 
         FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
          FacesMessage.SEVERITY_INFO,bundle.getString("Further")+ " "+bundle.getString("edit")+ " "+bundle.getString("not")+" "+bundle.getString("allowed")+ ", "+bundle.getString("current")+ " "+bundle.getString("status")+" "+describeStatus(this.instance.getZ5xxzzfxhhxxxxxxxxxxstatusfl()),""));
        }  
        return null;
       }
     totalbaseamt=new BigDecimal("0.0");
     moreActive=true;
     nextShow=true;
     if(!restEntity && !cartPoStatus.equals("e")){
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
       FacesMessage.SEVERITY_INFO,bundle.getString("Manual")+ " "+bundle.getString("adjustment")+ " "+bundle.getString("fields")+" "+bundle.getString("like")+ " "+bundle.getString("MiscCharges")+ " "+bundle.getString("under")+" "+bundle.getString("More")+" "+bundle.getString("Fields")+ " "+bundle.getString("can")+ " "+bundle.getString("be")+", "+bundle.getString("used")+" "+bundle.getString("now")+", "+bundle.getString("if")+ " "+bundle.getString("needed")+" "+bundle.getString("before"),""));
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
       FacesMessage.SEVERITY_INFO,bundle.getString("using")+ " "+bundle.getString("save")+ " "+bundle.getString("next")+" "+bundle.getString("line")+ " "+bundle.getString("button")+" "+bundle.getString("to")+" "+bundle.getString("add")+" "+bundle.getString("this")+" "+bundle.getString("item"),""));
     }
     return null;
    }




    





/*
currentClientClass 
*/


/*
currentUserClass 
*/
/*
acperiodClass Y
*/
        private Yxxxch621xwwqqhxxxxxacperiod acperiod;
	public String getAcperiodFieldValue(String p) {
            String result="";
            //dont use owner2Code until genApp finished  needs try catch
            try{
             acperiod =(Yxxxch621xwwqqhxxxxxacperiod) entityManager
		.createQuery(
		 "select cc from Yxxxch621xwwqqhxxxxxacperiod cc where cc.a0xxukwpbv47xxxxxxxxrowid = :nKeyName  AND cc.zzxxu2oxxhxxxxxxxxxxowner2=:owner2 order by cc.a0xxuobxbxxxxxxxxxxxsid asc")
		.setParameter("nKeyName","01").setParameter("owner2", owner2Code)
		.getSingleResult();
            }catch(Exception exc){
             FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
               FacesMessage.SEVERITY_INFO,bundle.getString("account")+ " "+bundle.getString("period")+ " "+bundle.getString("01")+ " "+bundle.getString("read")+ " "+bundle.getString("failed")+", "+exc.getMessage(),""));
             acperiod=null;
            }

	    if (acperiod != null) {
                  if (p.equals("cp")){
                    if(acperiod.getA1xxuxwpbv47xxxxxxxxcurrperiod() != null){
                     return acperiod.getA1xxuxwpbv47xxxxxxxxcurrperiod();
                    }else{
                     return "12";//assume period 12
                    }
                  }
                  else {
                    if(acperiod.getB2xxdwerbvxxxxxxxxxxcurrbusdate() !=null){
                     return acperiod.getB2xxdwerbvxxxxxxxxxxcurrbusdate().toString();
                    }else{
                      SimpleDateFormat ss = new SimpleDateFormat("yyyy-MM-dd");

                     return ss.format(calendar.getTime()).toString();// assume toDay
                    }
                  }
            }
	    else{
                 FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                  FacesMessage.SEVERITY_INFO,bundle.getString("account")+ " "+bundle.getString("period")+ " "+bundle.getString("table")+ " "+bundle.getString("not")+ " "+bundle.getString("accessible"),""));

                  bcontinue=false;
			return null;
			
           }
      }
	public Date getAcperiodDateFieldValue(String p) {
            String result="";
             Yxxxch621xwwqqhxxxxxacperiod acperiod =(Yxxxch621xwwqqhxxxxxacperiod) entityManager
					.createQuery(
							"select cc from Yxxxch621xwwqqhxxxxxacperiod cc where cc.a0xxukwpbv47xxxxxxxxrowid = :nKeyName  AND cc.zzxxu2oxxhxxxxxxxxxxowner2=:owner2 order by cc.a0xxuobxbxxxxxxxxxxxsid asc")
					.setParameter("nKeyName","01").setParameter("owner2", owner2Code)
					.getSingleResult();

		if (acperiod != null) {
                  if (p.equals("cbd")){
                    return acperiod.getB2xxdwerbvxxxxxxxxxxcurrbusdate();
                  }
                  else{
			   return null;
                  }
           }
		else{
                  FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("accounting")+ " "+bundle.getString("period")+ " "+bundle.getString("table")+ " "+bundle.getString("not")+" "+bundle.getString("accessible"),""));

                  bcontinue=false;
			return null;
			
		}
      }


	public void setShowKeyFields() {
	}
        //cartPoPicked is a flag to allow/suppress key generation and is set to true in cartpersist if po already exists  
        private boolean cartPoPicked=false;
        private boolean restEntity =false;
     // vendor invoice uses key from supplier , add more logic to handle it
	private boolean picked = false;
	private boolean multipicked = false;

     //jay document purpose of using last and show. last may be to reuse what was used recently
     // and show may be for dynamic rendering look at useraux as well 
     // note the lastItemEntity is used in forum to hold replyTo , others are not used
	private boolean bcontinue = true;
	private boolean moreActive = false;
	private boolean includeNext = false;
/*The following needs to be defined only if we need an instance of an entity which is not already generated via default seam gen. example if the entity is not a foreign key like Journal entity.
For the Foreign key instance, use the variables used in wire() where a getInstance is issued.For others use the variable defined below and issue a getInstance later.
*/
	@Inject
	Yxxxch621xwwqqhxxxxxacperiodHome yxxxch621xwwqqhxxxxxacperiodHome;




      private Integer lastItemLine=new Integer(0);
      //@Begin(join=true)

	public BigDecimal getKeyedQuantity() {
		return keyedQuantity;
	}

	public void setKeyedQuantity(BigDecimal keyedQuantity) {
		this.keyedQuantity = keyedQuantity;
      }

	public BigDecimal getTotalbaseamt() {
		return totalbaseamt;
	}

	public void setTotalbaseamt(BigDecimal totalbaseamt) {
		this.totalbaseamt = totalbaseamt;
	}
        //
	public BigDecimal getChange() {
		return change;
	}

	public void setChange(BigDecimal change) {
		this.change = change;
	}

	public BigDecimal getTotalmis() {
		return totalmis;
	}

	public void setTotalmis(BigDecimal totalmis) {
		this.totalmis = totalmis;
	}

	public void setDetailMis(BigDecimal detailMis) {
		this.detailMis = detailMis;
	}

	public void setDetailDel(BigDecimal detailDel) {
		this.detailDel = detailDel;
	}

	public void setDetailTax1(BigDecimal detailTax1) {
		this.detailTax1 = detailTax1;
	}


	public void setTotaltax1(BigDecimal totaltax1) {
		this.totaltax1 = totaltax1;
	}

	public BigDecimal getTotaltax1() {
		return totaltax1;
	}

	public void setTotalamountTotal(BigDecimal amountTotal) {
		this.amountTotal = amountTotal;
	}

	public BigDecimal getTotalamountTotal() {
		return amountTotal;
	}

	public void setTotalqtyTotal(BigDecimal qtyTotal) {
		this.qtyTotal = qtyTotal;
	}

	public BigDecimal getTotalqtyTotal() {
		return qtyTotal;
	}
	public void setTotaltax2(BigDecimal totaltax2) {
		this.totaltax2 = totaltax2;
	}

	public BigDecimal getTotaltax2() {
		return totaltax2;
	}

	public void setTotaltax3(BigDecimal totaltax3) {
		this.totaltax3 = totaltax3;
	}

	public BigDecimal getTotaltax3() {
		return totaltax3;
	}

	public BigDecimal getTotaldel() {
		return totaldel;
	}

	public void setTotaldel(BigDecimal totaldel) {
		this.totaldel = totaldel;
	}

	public BigDecimal getTotalqty() {
		return totalqty;
	}
	public void setTotalqty(BigDecimal totalqty) {
		this.totalqty = totalqty;
	}

      public Integer getLastItemLine() {
       return lastItemLine;
      }

	public void setLastItemLine(Integer lastItemLine) {

		this.lastItemLine = lastItemLine;
	}

//jay look into automating the below logic using related property values
// getShow does not seem to be used?? may be future security
// The below is useed to handle foreign fields which are dropdown and the value cannot point to instance.foreign entity
// since the entity does not exist yet if create, list works
// enhance remembering last value by using userprofile table the way row and option value is used
	private boolean showfpxxfq1a5xwwqqhxxxxxitem = false;
	 private String  lastfpxxfq1a5xwwqqhxxxxxitem = " ";
	 private String  lastfpxxfq1a5xwwqqhxxxxxitemP = " ";
	public boolean getShowfpxxfq1a5xwwqqhxxxxxitem() {
		return this.showfpxxfq1a5xwwqqhxxxxxitem;
	}
	public void setShowfpxxfq1a5xwwqqhxxxxxitem(boolean showfpxxfq1a5xwwqqhxxxxxitem) {
		 this.showfpxxfq1a5xwwqqhxxxxxitem=showfpxxfq1a5xwwqqhxxxxxitem;
	}

	public String getLastfpxxfq1a5xwwqqhxxxxxitem() {
                if(this.instance !=null && this.instance.getA0xxukixbxxxxxxxxxxxmatcode() !=null){
                 lastfpxxfq1a5xwwqqhxxxxxitem= this.instance.getA0xxukixbxxxxxxxxxxxmatcode();
                }
		return this.lastfpxxfq1a5xwwqqhxxxxxitem;
	}

	public void setLastfpxxfq1a5xwwqqhxxxxxitem(String lastfpxxfq1a5xwwqqhxxxxxitem) {
		 this.lastfpxxfq1a5xwwqqhxxxxxitem=lastfpxxfq1a5xwwqqhxxxxxitem;
	}
	public String getLastfpxxfq1a5xwwqqhxxxxxitemP() {
                //if(this.instance !=null && this.instance.getFpxxfq1a5xwwqqhxxxxxitem().getA0xxukixbxxxxxxxxxxxmatcode() !=null){
                 //lastfpxxfq1a5xwwqqhxxxxxitemP= this.instance.getFpxxfq1a5xwwqqhxxxxxitem().getA0xxukixbxxxxxxxxxxxmatcode();
                //}
		return this.lastfpxxfq1a5xwwqqhxxxxxitemP;
	}

	public void setLastfpxxfq1a5xwwqqhxxxxxitemP(String lastfpxxfq1a5xwwqqhxxxxxitem) {
		 this.lastfpxxfq1a5xwwqqhxxxxxitemP=lastfpxxfq1a5xwwqqhxxxxxitem;
	}















	public boolean isPicked() {
		return picked;
	}
	public void setPicked(boolean picked) {
		this.picked= picked;
	}
	public boolean isMultipicked() {
		return multipicked;
	}


	public boolean isMoreActive() {
		return moreActive;
	}
	public boolean isEntityUpdated() {
		return entityUpdated;
	}


	public boolean isEntityDeleted() {
		return entityDeleted;
	}
     public Date getCurrentTime() {
        return new Date();
     }



































            public boolean addAnyAttachment(){
            return true;
            }
            public boolean updateShipmentOrPickUp(){
            return true;
            }







public void markAll() {
 // this needs to be here rather than xxxList bean because of persitence
 try {
                List<Fpxxfq1a5xwwqqhxxxxxitem> listofStatus=fpxxfq1a5xwwqqhxxxxxitemList.getResultList() ;
	Iterator<Fpxxfq1a5xwwqqhxxxxxitem> itr = listofStatus.iterator();
	while (itr.hasNext()) {
	  fpxxfq1a5xwwqqhxxxxxitemli = itr.next();
                    fpxxfq1a5xwwqqhxxxxxitemli.setZ5xxzzfxhhxxxxxxxxxxstatusfl(fpxxfq1a5xwwqqhxxxxxitemli.getZ5xxzzfxhhxxxxxxxxxxstatusfl()|mmark);
	}
                  FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                  FacesMessage.SEVERITY_INFO,bundle.getString("marking")+ " "+bundle.getString("done"),""));
 } catch (Exception e) {
	log.severe("Mark iterator error " + e.getMessage());
 }
 
}
	public void unmarkAll() {
		// this needs to be here rather than xxxList bean because of persitence
		try {
			List<Fpxxfq1a5xwwqqhxxxxxitem> listofStatus = fpxxfq1a5xwwqqhxxxxxitemList
					.getResultList();
			Iterator<Fpxxfq1a5xwwqqhxxxxxitem> itr = listofStatus.iterator();
			while (itr.hasNext()) {
				fpxxfq1a5xwwqqhxxxxxitemli = itr.next();
				fpxxfq1a5xwwqqhxxxxxitemli.setZ5xxzzfxhhxxxxxxxxxxstatusfl(fpxxfq1a5xwwqqhxxxxxitemli
						.getZ5xxzzfxhhxxxxxxxxxxstatusfl()
						& _mmark);
			}
                        FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("un")+" "+bundle.getString("marking")+ " "+bundle.getString("done"),""));
		} catch (Exception e) {
			log.severe("UnMark iterator error " + e.getMessage());
		}

	}

	public void toggleRowEditable(Integer id) {
          setFpxxfq1a5xwwqqhxxxxxitemA0xxuobxbxxxxxxxxxxxsid(id);
		getDefinedInstance();
		if (this.instance != null) {
			if (!isBitSet(this.instance.getZ5xxzzfxhhxxxxxxxxxxstatusfl(), _mclosed)) {
				this.instance.setZ5xxzzfxhhxxxxxxxxxxstatusfl(this.instance
						.getZ5xxzzfxhhxxxxxxxxxxstatusfl()
						& ~(1<<_mconsign));
			} else {
				this.instance.setZ5xxzzfxhhxxxxxxxxxxstatusfl(this.instance
						.getZ5xxzzfxhhxxxxxxxxxxstatusfl()
						| mconsign);
			}

                        FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("edit")+ " "+bundle.getString("toggle")+ " "+bundle.getString("done"),""));

		} else {
			log.severe("toggleRowEditable error-this.instance null value ");
		}
	}


	public void toggleRowDeleteable(Integer id) {
           setFpxxfq1a5xwwqqhxxxxxitemA0xxuobxbxxxxxxxxxxxsid(id);
		getDefinedInstance();
		if (this.instance != null) {
			if (isBitSet(this.instance.getZ5xxzzfxhhxxxxxxxxxxstatusfl(), _mdel)) {
				this.instance.setZ5xxzzfxhhxxxxxxxxxxstatusfl(this.instance
						.getZ5xxzzfxhhxxxxxxxxxxstatusfl()
						& ~(1<<_mdel));
			} else {
				this.instance.setZ5xxzzfxhhxxxxxxxxxxstatusfl(this.instance
						.getZ5xxzzfxhhxxxxxxxxxxstatusfl()
						| mdel);
			}

                        FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("delete")+ " "+bundle.getString("toggle")+ " "+bundle.getString("done"),""));

		} else {
			log.severe("toggleRowDeleteable error-this.instance null value ");
		}
	}


public boolean gethideAllMarked() {
 if (hideChosen){
                return true;
 }
 else {
             return false;
 }
}

public void sethideAllMarked(boolean chosen){
      this.hideChosen=chosen;
     }




public void deleteAllHidden() {
           // this needs to be here because of perstence
           // jay add more logic to check association ie referential integrity
                Integer count=0;

 try {
                List<Fpxxfq1a5xwwqqhxxxxxitem> listofStatus=fpxxfq1a5xwwqqhxxxxxitemList.getResultList() ;
	Iterator<Fpxxfq1a5xwwqqhxxxxxitem> itr = listofStatus.iterator();
         while (itr.hasNext()) {
	  fpxxfq1a5xwwqqhxxxxxitemli = itr.next();
                  if(isBitSet(fpxxfq1a5xwwqqhxxxxxitemli.getZ5xxzzfxhhxxxxxxxxxxstatusfl(),_mmark)){
                   count++;
                  }
                  
			}
                listofStatus=fpxxfq1a5xwwqqhxxxxxitemList.getResultList() ;
			itr = listofStatus.iterator();
			while (itr.hasNext()) {
			  fpxxfq1a5xwwqqhxxxxxitemli = itr.next();
                  if(isBitSet(fpxxfq1a5xwwqqhxxxxxitemli.getZ5xxzzfxhhxxxxxxxxxxstatusfl(),_mmark)){
		        // fpxxfq1a5xwwqqhxxxxxitemli.remove();
                  }
          }
 } catch (Exception e) {
    log.severe(" status field iterator error " + e.getMessage());
 }

}
 public void copyAllMarked() {
 // rename it to copyAllFlagged 
  //32

      try{
        // jay should reuse ComponentName rather than many variables like   itemChecked, listofstatus takes memory
        String oldKey="";
        String oldDescr="";
        int index = 0;
        for (Fpxxfq1a5xwwqqhxxxxxitem itemChecked : fpxxfq1a5xwwqqhxxxxxitemList.getResultList()) {
            this.clearInstance();
            if (checked.get(index)) {
                entityManager.detach(itemChecked);
                      itemChecked.setA0xxuobxbxxxxxxxxxxxsid(null);
                       // add copy(1) etc using a variable to natural key field assign natural key itemChecked.setdollar{keyField?cap_first}(null);
                       oldKey=itemChecked.getA0xxukixbxxxxxxxxxxxmatcode();
                       if (oldKey.length()+5 <= 32){
                        oldKey=oldKey.substring(0,oldKey.length()-5);
                        itemChecked.setA0xxukixbxxxxxxxxxxxmatcode(oldKey+"-copy");
                       }
                       else{
                        itemChecked.setA0xxukixbxxxxxxxxxxxmatcode("c"+oldKey.substring(1));
                       } 
                        oldDescr=itemChecked.getB1xxuszsbvxxxxxxxxxxdescript();
                        if (oldDescr.length()+5 > 19){
                         oldDescr=oldDescr.substring(0,oldDescr.length()-5);
                        }
                        itemChecked.setB1xxuszsbvxxxxxxxxxxdescript(oldDescr+"-copy");
                      itemChecked.setZ5xxzzfxhhxxxxxxxxxxstatusfl(0);
                      itemChecked.setZ5xxzzfxhhxxxxxxxxxxstatusfl(itemChecked.getZ5xxzzfxhhxxxxxxxxxxstatusfl()| mcopy);
                       itemChecked.setZ6xxcztxlxxxxxxxxxxxstatusfldt(calendar.getTime());
                       itemChecked.setZexxutoxlhxxxxxxxxxxowner(ownerCode);
                      this.setInstance(itemChecked);
                      //is this a copy of SYSTEM record
                      if (this.instance.getZzxxu2oxxhxxxxxxxxxxowner2().equals("SYSTEM")){
                       this.instance.setZzxxu2oxxhxxxxxxxxxxowner2(owner2Code);
                      }
                     this.persist();
                      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("copy")+ " "+bundle.getString("done"),""));

            }
            index++;
        }

        checked.clear(); 
      }
      catch ( Exception e){
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("checked")+ " "+bundle.getString("items")+ " "+bundle.getString("update")+ " "+bundle.getString("error")+" "+e.getMessage(),""));
      }

 }

 public void updateAllFlagged() {
 // this needs to be here because of perstence jay5 enhance this using getallflagged 
        int index = 0;

      try{
        // jay should reuse ComponentName rather than many variables like   itemChecked, listofstatus takes memory
        for (Fpxxfq1a5xwwqqhxxxxxitem itemChecked : fpxxfq1a5xwwqqhxxxxxitemList.getResultList()) {
            this.clearInstance();
            if (checked.get(index)) {
                this.setInstance(itemChecked);
                this.update();
            }
            index++;
        }

        checked.clear(); 
                        FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("update")+ " "+bundle.getString("done"),""));

      }
      catch ( Exception e){
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("checked")+ " "+bundle.getString("items")+ " "+bundle.getString("update")+ " "+bundle.getString("error")+" "+e.getMessage(),""));
      }


    }

	public void writeAsIcalText() {
		// this needs to be here because of perstence jay5 enhance this using getallflagged 

      try{
        // jay should reuse ComponentName rather than many variables like   itemChecked, listofstatus takes memory
        int index = 0;
        for (Fpxxfq1a5xwwqqhxxxxxitem itemChecked : fpxxfq1a5xwwqqhxxxxxitemList.getResultList()) {
            this.clearInstance();
            if (checked.get(index)) {
                this.setInstance(itemChecked);
                //this.update() put logic here
            }
            index++;
        }

        checked.clear(); 
      }
      catch ( Exception e){
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("checked")+ " "+bundle.getString("items")+ " "+bundle.getString("update")+ " "+bundle.getString("error")+" "+e.getMessage(),""));
      }


    }
   public void deleteAllRecentCopied() {
      // uses todays date and stausfl 2 so includes imported, scope is group members,item,customer etc 
      int index=0;
      try{
        index=0;
        count=0;
        calendar.add(Calendar.DATE, -5);
        Date toDay = calendar.getTime();
        for (Fpxxfq1a5xwwqqhxxxxxitem itemChecked : fpxxfq1a5xwwqqhxxxxxitemList.getFlaggedAsList(mcopy)) {
            //
            this.clearInstance();
            // extra check needed if duplicate keys need to check using sid?
            if (isBitSet(itemChecked.getZ5xxzzfxhhxxxxxxxxxxstatusfl(),_mcopy)
             && itemChecked.getZ6xxcztxlxxxxxxxxxxxstatusfldt().after( toDay)) {
             this.setInstance(itemChecked);
	     superdotremove();
             count++;


            }
            index++;
        }
             timeStamp = new SimpleDateFormat("yyyy.MM.dd.HH.mm.ss").format(new Date());
             FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
              FacesMessage.SEVERITY_INFO,bundle.getString("deleted")+" "+count+", "+bundle.getString("of")+" "+index+" "+"at"+" "+timeStamp,""));
             this.clearInstance();
      }
      catch ( Exception e){
       FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
        FacesMessage.SEVERITY_INFO,bundle.getString("checked")+ " "+bundle.getString("items")+ " "+bundle.getString("delete")+ " "+bundle.getString("error")+" "+e.getMessage(),""));
      }


   }

   public void closeRecord(Fpxxfq1a5xwwqqhxxxxxitem entity) {

      String key="";    
      //not all entities have key value 
      try{
            this.clearInstance();
            this.setInstance(entity);
            this.instance.setZ5xxzzfxhhxxxxxxxxxxstatusfl(mclosed);
            superdotupdate();//dont change statusfldt
             FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
              FacesMessage.SEVERITY_INFO,bundle.getString("Marked")+" "+bundle.getString("as")+" "+bundle.getString("closed")+", "+" "+bundle.getString("key")+" "+key,""));

      }catch ( Exception e){
       FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
        FacesMessage.SEVERITY_INFO,bundle.getString("Status")+ " "+bundle.getString("update")+ " "+bundle.getString("error")+ ", "+bundle.getString("key")+" "+key+" "+e.getMessage(),""));
      }


   }


   public void closeOldRecords(int days) {
      // uses todays date 
      int index=0;
      try{
        index=0;
        count=0;
        Date toDay = calendar.getTime();
        for (Fpxxfq1a5xwwqqhxxxxxitem itemChecked : fpxxfq1a5xwwqqhxxxxxitemList.getOldByList(days)) {
            //
            this.clearInstance();
            if (!isBitSet(itemChecked.getZ5xxzzfxhhxxxxxxxxxxstatusfl(),_mclosed)){
             itemChecked.setZ5xxzzfxhhxxxxxxxxxxstatusfl(mclosed);
             this.setInstance(itemChecked);
	     superdotupdate();//dont change statusfldt
             count++;
            }
            index++;
        }
             timeStamp = new SimpleDateFormat("yyyy.MM.dd.HH.mm.ss").format(new Date());
             FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
              FacesMessage.SEVERITY_INFO,bundle.getString("updated")+" "+count+", "+bundle.getString("of")+" "+index+" "+"at"+" "+timeStamp,""));

      }
      catch ( Exception e){
       FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
        FacesMessage.SEVERITY_INFO,bundle.getString("checked")+ " "+bundle.getString("items")+ " "+bundle.getString("delete")+ " "+bundle.getString("error")+" "+e.getMessage(),""));
      }


   }
   public void csvZapOldRecords(int days) {
      // uses todays date 
      int index=0;
      try{
        index=0;
        count=0;
        Date toDay = calendar.getTime();
        for (Fpxxfq1a5xwwqqhxxxxxitem itemChecked : fpxxfq1a5xwwqqhxxxxxitemList.getOldByList(days)) {
            // if we produce csv then they can be downloaded to local machine
            this.clearInstance();
            itemChecked.setZ5xxzzfxhhxxxxxxxxxxstatusfl(mclosed);
             this.setInstance(itemChecked);
	     superdotremove();//give msg about creating csv to download
             count++;

            index++;
        }
             timeStamp = new SimpleDateFormat("yyyy.MM.dd.HH.mm.ss").format(new Date());
             FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
              FacesMessage.SEVERITY_INFO,bundle.getString("updated")+" "+count+", "+bundle.getString("of")+" "+index+" "+"at"+" "+timeStamp,""));

      }
      catch ( Exception e){
       FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
        FacesMessage.SEVERITY_INFO,bundle.getString("checked")+ " "+bundle.getString("items")+ " "+bundle.getString("delete")+ " "+bundle.getString("error")+" "+e.getMessage(),""));
      }


   }




   public void deleteAllFlagged() {
  // this needs to be here because of perstence jay5 enhance this using getallflagged 
      int index=0;
      try{
        // jay should reuse ComponentName rather than many variables like   itemChecked, listofstatus takes memory
        for (Fpxxfq1a5xwwqqhxxxxxitem itemChecked : fpxxfq1a5xwwqqhxxxxxitemList.getResultList()) {
            if (checked.get(index)) {
             index++;
            }
        }
        if(index > 5){
             FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
             FacesMessage.SEVERITY_INFO,bundle.getString("Please")+" "+bundle.getString("select")+" "+bundle.getString("upto")+" "+bundle.getString("five"),""));
             return;
        }
        index=0;
        count=0;
        for (Fpxxfq1a5xwwqqhxxxxxitem itemChecked : fpxxfq1a5xwwqqhxxxxxitemList.getResultList()) {
            // restrict to 5 at a time to avoid UT000047 excceding max parameters 
            this.clearInstance();
            // extra check needed if duplicate keys need to check using sid?
            if (checked.get(index)) {
             //delete details if any first
              deleteDetails(itemChecked.getA0xxuobxbxxxxxxxxxxxsid());

             this.setInstance(itemChecked);
	     superdotremove();
             count++;

              /* delete clob or blob as they will be orphan 
                 they are not constrain so can be removed now
              */

                //delete all clob/blob whose from key matches the item docmnt value like B/A/Cnnnnnnnn
                List<Yxxxuq1n1xwwqqqxxxxxblobdata> results = entityManager
		 .createQuery(
			"select cc from Yxxxuq1n1xwwqqqxxxxxblobdata cc where cc.a0xxukbdlvxxxxxxxxxxfromtable=:blobdatafromtable and cc.a1xxuxxxbv49xxxxxxxxfromkey=:blobdatafromkey and cc.a3xxexnsbvxxxxxxxxxxsequence=:blobdatasequence and cc.a2xxuxxxbv50xxxxxxxxqualifier=:blobdataqualifier and cc.zzxxu2oxxhxxxxxxxxxxowner2 = :owner2 order by cc.a0xxuobxbxxxxxxxxxxxsid asc")
		           .setParameter("blobdatafromtable", "FPXXFQ1A5XWWQQHXXXXXITEM").setParameter("blobdatafromkey", this.instance.getW8xxuzdrbvxxxxxxxxxxdocmnt().substring(1))
                            .setParameter("owner2", owner2Code).setParameter("blobdatasequence",1)
                             .setParameter("blobdataqualifier","1").getResultList();
		if(!results.isEmpty() ){
                 //blob/clob are not constrained as foreign entity to item, so just remove it
                 try{
                  yxxxuq1n1xwwqqqxxxxxblobdataHome.clearInstance();
                  yxxxuq1n1xwwqqqxxxxxblobdataHome.setInstance(results.get(0));
                  yxxxuq1n1xwwqqqxxxxxblobdataHome.superdotremove();
                  countB++;
                 }catch ( Exception e){
                  FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                   FacesMessage.SEVERITY_ERROR,bundle.getString("remove")+" "+bundle.getString("binary")+" "+bundle.getString("data")+" "+bundle.getString("error")+" "+e.getMessage(),""));
                 }  
                }  
                try{
                 List<Yxxxuq1m1xwwqqqxxxxxclobdata> resultsc = entityManager
		 .createQuery(
			"select cc from Yxxxuq1m1xwwqqqxxxxxclobdata cc where cc.a0xxukcdlvxxxxxxxxxxfromtable=:blobdatafromtable and cc.a1xxuxxxbv49xxxxxxxxfromkey=:blobdatafromkey and cc.a3xxexnsbvxxxxxxxxxxsequence=:blobdatasequence and cc.a2xxuxxxbv50xxxxxxxxqualifier=:blobdataqualifier and cc.zzxxu2oxxhxxxxxxxxxxowner2 = :owner2 order by cc.a0xxuobxbxxxxxxxxxxxsid asc")
		           .setParameter("blobdatafromtable", "FPXXFQ1A5XWWQQHXXXXXITEM").setParameter("blobdatafromkey", this.instance.getW8xxuzdrbvxxxxxxxxxxdocmnt().substring(1))
                            .setParameter("owner2", owner2Code).setParameter("blobdatasequence",1)
                             .setParameter("blobdataqualifier","1").getResultList();
		  if(!resultsc.isEmpty() ){
                   //blob/clob are not constrained as foreign entity to item, so just remove it
                   yxxxuq1m1xwwqqqxxxxxclobdataHome.clearInstance();
                   yxxxuq1m1xwwqqqxxxxxclobdataHome.setInstance(resultsc.get(0));
                   yxxxuq1m1xwwqqqxxxxxclobdataHome.superdotremove();
                   countB++;
                  }   
                 }catch ( Exception e){
                  FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                   FacesMessage.SEVERITY_ERROR,bundle.getString("remove")+" "+bundle.getString("text")+" "+bundle.getString("data")+" "+bundle.getString("error")+" "+e.getMessage(),""));
                  return ; 
                 }  
   


            }
            index++;
        }
        checked.clear(); 
             timeStamp = new SimpleDateFormat("yyyy.MM.dd.HH.mm.ss").format(new Date());
             FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
             FacesMessage.SEVERITY_INFO,bundle.getString("deleted")+" "+count+" "+bundle.getString("selected")+" "+"Item"+" "+bundle.getString("and")+" "+bundle.getString("related")+" "+countB+" "+bundle.getString("and")+" "+bundle.getString("details")+" "+countD+" "+bundle.getString("entries")+" "+"at"+" "+timeStamp,""));

      }
      catch ( Exception e){
       FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("checked")+ " "+bundle.getString("items")+ " "+bundle.getString("delete")+ " "+bundle.getString("error")+" "+e.getMessage(),""));
      }


   }




     public void deleteDetails(Integer sid) {
      try{

        // get all details for this sid as parent, use entityLessStatusDetailedList not entityDetailedList to get all includind -1
        for (Fpxxfq1a5xwwqqhxxxxxitem detail : fpxxfq1a5xwwqqhxxxxxitemList.entityDetailedList(sid)) {
             fpxxfq1a5xwwqqhxxxxxitemHome.setInstance(detail);
	     fpxxfq1a5xwwqqhxxxxxitemHome.remove();
             entityManager.flush();
            countD++;
        }
      

      }
      catch ( Exception e){
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("detail")+ " "+bundle.getString("remove")+ " "+bundle.getString("error")+" "+e.getMessage(),""));
      }
    }



 public void toggleAllFlagged() {
 // this needs to be here because of perstence jay5 enhance this using getallflagged 
      try{
        // jay should reuse ComponentName rather than many variables like   itemChecked, listofstatus takes memory
        for (Fpxxfq1a5xwwqqhxxxxxitem itemChecked : fpxxfq1a5xwwqqhxxxxxitemList.getResultList()) {
            this.clearInstance();
            if (checked.get(itemChecked.getA0xxuobxbxxxxxxxxxxxsid())) {
                this.setInstance(itemChecked);
			if (isBitSet(this.instance.getZ5xxzzfxhhxxxxxxxxxxstatusfl(), _mmark)) {
				this.instance.setZ5xxzzfxhhxxxxxxxxxxstatusfl(this.instance
						.getZ5xxzzfxhhxxxxxxxxxxstatusfl()
						& ~(1<<_mmark));
			} else {
				this.instance.setZ5xxzzfxhhxxxxxxxxxxstatusfl(this.instance
						.getZ5xxzzfxhhxxxxxxxxxxstatusfl()
						| mmark);
             
			}
                this.update();
            }
        }
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("marking")+ " / "+bundle.getString("un")+" "+bundle.getString("marking")+ " "+bundle.getString("done"),""));
        checked.clear(); 
      }
      catch ( Exception e){
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("checked")+ " "+bundle.getString("items")+" "+ " "+bundle.getString("update")+ " "+bundle.getString("error")+" "+e.getMessage(),""));
      }


 }




	public void toggleRowMarked(Integer id) {
           setFpxxfq1a5xwwqqhxxxxxitemA0xxuobxbxxxxxxxxxxxsid(id);
		getDefinedInstance();
		if (this.instance != null) {
			if (isBitSet(this.instance.getZ5xxzzfxhhxxxxxxxxxxstatusfl(), _mmark)) {
				this.instance.setZ5xxzzfxhhxxxxxxxxxxstatusfl(this.instance
						.getZ5xxzzfxhhxxxxxxxxxxstatusfl()
						& ~(1<<_mmark));
                     // unmark should reset del and update tags as well
				this.instance.setZ5xxzzfxhhxxxxxxxxxxstatusfl(this.instance
						.getZ5xxzzfxhhxxxxxxxxxxstatusfl()
						& ~(1<<_mdel));
				this.instance.setZ5xxzzfxhhxxxxxxxxxxstatusfl(this.instance
						.getZ5xxzzfxhhxxxxxxxxxxstatusfl()
						& ~(1<<_mconsign));
			} else {
				this.instance.setZ5xxzzfxhhxxxxxxxxxxstatusfl(this.instance
						.getZ5xxzzfxhhxxxxxxxxxxstatusfl()
						| mmark);
             
			}
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("marking")+ " / "+bundle.getString("un")+bundle.getString("marking")+ " "+bundle.getString("done"),""));
		} else {
			log.severe("markThis error-this.instance null value,id is "+id);
		}

	}





 public void downloadThis(Integer id) {
           // made changes needed for jsf2.2, zd means data in clob/blob ex item,customer zb means blob and za means clob
         try{

	   // mime type
           String mime="";
           String extension="";
           setFpxxfq1a5xwwqqhxxxxxitemA0xxuobxbxxxxxxxxxxxsid(id);
           this.setInstance(getDefinedInstance()); 
           if(this.instance.getW8xxuzdrbvxxxxxxxxxxdocmnt().length()==1){
            FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("no")+ " "+bundle.getString("data"),""));

            return;
           }
                key=this.instance.getW8xxuzdrbvxxxxxxxxxxdocmnt();
                // need to get blobdatatype
                extension =this.getBlobdataType("FPXXFQ1A5XWWQQHXXXXXITEM",key,"1",1);
           //need to stripoff asis from type
           if(extension != null && extension.contains("asis")){
            extension=extension.substring(4);
           }
    FacesContext fc = FacesContext.getCurrentInstance();
    ExternalContext ec = fc.getExternalContext();

    ec.responseReset(); // Some JSF component library or some Filter might have set some headers in the buffer beforehand. We want to get rid of them, else it may collide.

    OutputStream output = ec.getResponseOutputStream();
			if ("bmp".equals(extension)) {
				mime = "image/bmp";
			} else if ("jpg".equals(extension)) {
				mime = "image/jpeg";
			} else if ("gif".equals(extension)) {
				mime = "image/gif";
			} else if ("png".equals(extension)) {
				mime = "image/png";
			} else if ("xml".equals(extension)) {
				mime = "text/xml";
			} else if ("doc".equals(extension)) {
				mime = "application/msword";
                                resp.setHeader("Cache-Control", "Public");  
			} else if ("txt".equals(extension)) {
				mime = "text/plain";
			} else if ("html".equals(extension)) {
				mime = "text/html";
			} else if ("pdf".equals(extension)) {
				mime = "application/pdf";
			} else if ("xls".equals(extension)) {
				mime = "application/vnd.ms-excel";
                                resp.setHeader("Cache-Control", "Public");  
			} else if ("ppt".equals(extension)) {
				mime = "application/vnd.ms-powerpoint";
                                resp.setHeader("Cache-Control", "Public");  
			} else if ("mp3".equals(extension)) {
				mime = "audio/mpeg";
			} else if ("mp4".equals(extension)) {
				mime = "video/mp4";
			} else {
				mime = "image/unknown";
			}

          
          // add logic to figure out text data or binary data, may need to look into data header first ??

		byte[] bytes = null;

		bytes = this.getBlobdata("FPXXFQ1A5XWWQQHXXXXXITEM",key,"1",1);
           if(bytes == null){
            FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
             FacesMessage.SEVERITY_ERROR,"Item"+" "+bundle.getString("no")+" "+bundle.getString("data")+" "+bundle.getString("found"),""));
             return;
           }

                String fileName="mydownload." + extension;
    ec.setResponseContentType(mime); // Check http://www.iana.org/assignments/media-types for all types. Use if necessary ExternalContext#getMimeType() for auto-detection based on filename.
    ec.setResponseContentLength(bytes.length); // Set it with the file size. This header is optional. It will work if it's omitted, but the download progress will be unknown.
    ec.setResponseHeader("Content-Disposition", "attachment; filename=\"" + fileName + "\""); // The Save As popup magic is done here. You can give it any file name you want, this only won't work in MSIE, it will use current request URL as file name instead.
    OutputStream outputStream = ec.getResponseOutputStream();
		outputStream.write(bytes, 0, bytes.length);
		outputStream.flush();
		outputStream.close();
    fc.responseComplete();

         }catch ( Exception e){
          FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
           FacesMessage.SEVERITY_INFO,"Item"+ " "+bundle.getString("key")+" "+bundle.getString("error")+" "+ e.getMessage(),""));
           log.severe("list download error " + e.getCause());
         }



      


 }



// same as checking for "1B"



	

	public String getCleaned(String strHTML) {
         String cleanedHTML = Jsoup.clean(strHTML, Whitelist.none());  
         String text= cleanedHTML.replace("&nbsp;"," "); 
         text= text.replace("&amp;","&"); 
         return text;
        }



     // it seems you cannot call the following get methods directly from clob or blob home, so local method are
     // created , otherwise compile error about calling non static method
    /**
    * The following method gets clobdata and for geeral usage
    * if both a site and SYSTEM records exist, site record is returned 
    * Return value if null will show drop down menu, otherwise the content
    * @param 5 args String table,keyWPrefix,String keyQualifier,int keySequence,int size
    * @return String
    * @exception No Record Exists
    * @see "getClobdata(String theme,String vendor,String table,String keyWPrefix,String keyQualifier,int keySequence,int size) for theme content"
    * 
    */

     public String getClobdata(String table,String keyWPrefix,String keyQualifier,int keySequence,int size) {
           String actualTable=table;
           if(keyWPrefix.length() > 0){
            slobkeyhash = keyWPrefix.substring(1);
           }else{
            return null;
           }
          String qualifier = keyQualifier;
          int sequence = keySequence;
           try {
               Yxxxuq1m1xwwqqqxxxxxclobdata clobdata=null;
		    List<Yxxxuq1m1xwwqqqxxxxxclobdata> results =  entityManager
					.createQuery(
							"select cc from Yxxxuq1m1xwwqqqxxxxxclobdata cc where cc.a0xxukcdlvxxxxxxxxxxfromtable=:clobdatafromtable and cc.a1xxuxxxbv49xxxxxxxxfromkey=:clobdatafromkey and cc.a2xxuxxxbv50xxxxxxxxqualifier=:clobdataqualifier and a3xxexnsbvxxxxxxxxxxsequence = :clobdatasequence and cc.zzxxu2oxxhxxxxxxxxxxowner2 = :owner2  ")
					.setParameter("clobdatafromtable", actualTable).setParameter(
							"clobdatafromkey", slobkeyhash).setParameter(
							"clobdataqualifier", qualifier).setParameter(
							"clobdatasequence", sequence).setParameter("owner2", owner2Code).getResultList();
                if(!results.isEmpty()){
                 if ( !results.get(0).getZzxxu2oxxhxxxxxxxxxxowner2().equals("SYSTEM")) {
                  clobdata= results.get(0);
                 }else{
                  if (results.size() > 1){
                   clobdata= results.get(1);
                  }else{
                   clobdata= results.get(0);
                  }
                 }
                 if(clobdata==null){
                  return null; 
                 }
                }
                else{
                 return null;
                }
                if(clobdata.getB1xxuzaxbvxxxxxxxxxxdata()==null){
                 return null;
                }
                else{
                 int dl=clobdata.getB1xxuzaxbvxxxxxxxxxxdata().length();
                 if (dl > size){
	  return clobdata.getB1xxuzaxbvxxxxxxxxxxdata().substring(0,size);
                 }else {
	  return clobdata.getB1xxuzaxbvxxxxxxxxxxdata();
                 }
                } 
           } catch (NoResultException nre) {
             return null;
          } catch (Exception e) {
                   FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                     FacesMessage.SEVERITY_INFO,bundle.getString("clobdata")+ " "+bundle.getString("unexpcted")+ " "+bundle.getString("error")+ " "+e.getMessage(),""));
             return null;
          }
     }

    /**
    * The following method gets clobdata from SYSTEM if qualifier matches theme name 
    * No logic yet to use vendor and clob type hdr
    * Quick check and return null if no SYSTEM record for the key, if key exists then key qualifier part is
    * changed to theme name and searched again. If found String data returned (why two passes?) 
    * @param 7 args String theme,vendor,table,keyWPrefix,String keyQualifier,int keySequence,int size
    * theme comes from session variable value skinBean.previewTh
    * @return byte[] image stream
    * @exception No Record Exists
    * @see "getClobdata(String table,String keyWPrefix,String keyQualifier,int keySequence,int size) for non theme content"
    * 
    */


     public String getClobdata(String theme,String vendor,String table,String keyWPrefix,String keyQualifier,int keySequence,int size) {
           String actualTable=table;
           if(theme.isEmpty()){
            theme="Service-Lan";
           }
           if(vendor.isEmpty()){
            vendor="3R";
           }
           
           if(keyWPrefix.length() > 0){
	     	 slobkeyhash = keyWPrefix.substring(1);
           }else{
            return null;
           }
		String qualifier = keyQualifier;
		int sequence = keySequence;
                //first check if any system record exists for the key.if txt not hdr then change qualifier to theme
                // and search again 
		try {
                 Yxxxuq1m1xwwqqqxxxxxclobdata clobdata=null;
		    List<Yxxxuq1m1xwwqqqxxxxxclobdata> results =  entityManager
					.createQuery(
							"select cc from Yxxxuq1m1xwwqqqxxxxxclobdata cc where cc.a0xxukcdlvxxxxxxxxxxfromtable=:clobdatafromtable and cc.a1xxuxxxbv49xxxxxxxxfromkey=:clobdatafromkey and cc.a2xxuxxxbv50xxxxxxxxqualifier LIKE :clobdataqualifier and a3xxexnsbvxxxxxxxxxxsequence = :clobdatasequence and cc.zzxxu2oxxhxxxxxxxxxxowner2 = :owner2 ")
					.setParameter("clobdatafromtable", actualTable).setParameter(
							"clobdatafromkey", slobkeyhash).setParameter(
							"clobdataqualifier", qualifier).setParameter(
							"clobdatasequence", sequence).setParameter("owner2", "SYSTEM").getResultList();

	} catch (NoResultException nre) {
	return null;
	} catch (Exception e) {
                  FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                   FacesMessage.SEVERITY_ERROR,bundle.getString("text")+ " "+bundle.getString("data")+ " "+bundle.getString("unexpcted")+ " "+bundle.getString("error")+ " "+e.getMessage(),""));
	return null;
	}
                // if HDR then dont show anything, may be in future. if TXT show vendor theme if any otherwise null
                // if multiple returns last one, enhance logic to avoid first 10 ?? chrs being same
                if(qualifier.equals("HDR")){
                 return null;
                }
                //qualifier=theme.substring(0,10)+"%"; can have same first 10 
                qualifier=theme;// 
		try {
                 Yxxxuq1m1xwwqqqxxxxxclobdata clobdata=null;
		    List<Yxxxuq1m1xwwqqqxxxxxclobdata> results =  entityManager
					.createQuery(
							"select cc from Yxxxuq1m1xwwqqqxxxxxclobdata cc where cc.a0xxukcdlvxxxxxxxxxxfromtable=:clobdatafromtable and cc.a1xxuxxxbv49xxxxxxxxfromkey=:clobdatafromkey and cc.a2xxuxxxbv50xxxxxxxxqualifier LIKE :clobdataqualifier and a3xxexnsbvxxxxxxxxxxsequence = :clobdatasequence and cc.zzxxu2oxxhxxxxxxxxxxowner2 = :owner2 ")
					.setParameter("clobdatafromtable", actualTable).setParameter(
							"clobdatafromkey", slobkeyhash).setParameter(
							"clobdataqualifier", qualifier).setParameter(
							"clobdatasequence", sequence).setParameter("owner2", "SYSTEM").getResultList();
                if(!results.isEmpty()){
                 if ( !results.get(0).getZzxxu2oxxhxxxxxxxxxxowner2().equals("SYSTEM")) {
                  clobdata= results.get(0);
                 }else{
                  if (results.size() > 1){
                   clobdata= results.get(1);
                  }else{
                   clobdata= results.get(0);
                  }
                 }
                 if(clobdata==null){
                  return null; 
                 }
                }
                else{
                 return null;
                }
                if(clobdata.getB1xxuzaxbvxxxxxxxxxxdata()==null){
                 return null;
                }
                else{
                 int dl=clobdata.getB1xxuzaxbvxxxxxxxxxxdata().length();
                 if (dl > size){
			  return clobdata.getB1xxuzaxbvxxxxxxxxxxdata().substring(0,size);
                 }else {
			  return clobdata.getB1xxuzaxbvxxxxxxxxxxdata();
                 }
                } 
		} catch (NoResultException nre) {
			return null;
		} catch (Exception e) {
                  FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                   FacesMessage.SEVERITY_ERROR,bundle.getString("text")+ " "+bundle.getString("data")+ " "+bundle.getString("unexpcted")+ " "+bundle.getString("error")+ " "+e.getMessage(),""));
		   return null;
		}
	}

    /**
    * The following method used by non faces env like servlet or rest and needs set the owner2Code SYSTEM or new site etc
    * @param args String table,keyWPrefix,String keyQualifier,int keySequence,String owner2Code
    * @return byte[] image stream
    * @exception None 
    * @see 
    * 
    */

     public byte[] getBlobdata(String table,String keyWPrefix,String keyQualifier,int keySequence,String owner2Code) {
         this.owner2Code=owner2Code;
         return getBlobdata(table,keyWPrefix,keyQualifier,keySequence); 
        }


    /**
    * The following method gets blobdata from both user for a specific key
    * @param args String table,keyWPrefix,String keyQualifier,int keySequence
    * @return byte[] image stream
    * @exception No Record Exists 
    * @see 
    * 
    */

	public byte[] getBlobdata(String table,String keyWPrefix,String keyQualifier,int keySequence) {
           String actualTable=table;
           if(keyWPrefix.length() > 0){
	     	 slobkeyhash = keyWPrefix.substring(1);
           }else{
            return null;
           }
		String qualifier = keyQualifier;
		int sequence = keySequence;

		try {
               Yxxxuq1n1xwwqqqxxxxxblobdata blobdata=null;
		    List<Yxxxuq1n1xwwqqqxxxxxblobdata> results = entityManager
					.createQuery(
							"select cc from Yxxxuq1n1xwwqqqxxxxxblobdata cc where cc.a0xxukbdlvxxxxxxxxxxfromtable=:blobdatafromtable and cc.a1xxuxxxbv49xxxxxxxxfromkey=:blobdatafromkey and cc.a2xxuxxxbv50xxxxxxxxqualifier=:blobdataqualifier and a3xxexnsbvxxxxxxxxxxsequence = :blobdatasequence and cc.zzxxu2oxxhxxxxxxxxxxowner2 = :owner2  ")
					           .setParameter("blobdatafromtable", actualTable).setParameter(
							"blobdatafromkey", slobkeyhash).setParameter(
							"blobdataqualifier", qualifier).setParameter(
							"blobdatasequence", sequence).setParameter("owner2", owner2Code).getResultList();
                if(!results.isEmpty()){
                 if ( !results.get(0).getZzxxu2oxxhxxxxxxxxxxowner2().equals("SYSTEM")) {
                  return results.get(0).getB1xxuzbxbvxxxxxxxxxxdata();
                 }else{
                  if (results.size() > 1){
                   return results.get(1).getB1xxuzbxbvxxxxxxxxxxdata();
                  }else{
                   return results.get(0).getB1xxuzbxbvxxxxxxxxxxdata();
                  }
                 }
                }else{
                 // use bkgr color richSkin.headerGradientColor if no image supplied , which is default
                  return null; 
                }
         } catch (NoResultException e) {
               return null;
	 } catch (Exception e) {
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("unexpcted")+ " "+bundle.getString("error")+ " "+e.getMessage(),""));
               return null;
         }
	}

/**
 get system blobs, harcode qualifier using theme, owner2 as SYSTEM. add vendor matching blob type ??
*/
	public byte[] getBlobdata(String theme,String vendor,String table,String keyWPrefix,String keyQualifier,int keySequence) {
           String actualTable=table;
           if(theme.isEmpty()){
            theme="Service-Lan";
           }
           if(vendor.isEmpty()){
            vendor="3R";
           }
           if(keyWPrefix.length() > 0){
	     	 slobkeyhash = keyWPrefix.substring(1);
           }else{
            return null;
           }
		String qualifier = keyQualifier;
                //qualifier=theme.substring(0,10)+"%";
                qualifier=theme;

		int sequence = keySequence;

		try {
               Yxxxuq1n1xwwqqqxxxxxblobdata blobdata=null;
		    List<Yxxxuq1n1xwwqqqxxxxxblobdata> results = entityManager
					.createQuery(
							"select cc from Yxxxuq1n1xwwqqqxxxxxblobdata cc where cc.a0xxukbdlvxxxxxxxxxxfromtable=:blobdatafromtable and cc.a1xxuxxxbv49xxxxxxxxfromkey=:blobdatafromkey and cc.a2xxuxxxbv50xxxxxxxxqualifier LIKE :blobdataqualifier and a3xxexnsbvxxxxxxxxxxsequence = :blobdatasequence and cc.zzxxu2oxxhxxxxxxxxxxowner2 = :owner2  ")
					           .setParameter("blobdatafromtable", actualTable).setParameter(
							"blobdatafromkey", slobkeyhash).setParameter(
							"blobdataqualifier", qualifier).setParameter(
							"blobdatasequence", sequence).setParameter("owner2", "SYSTEM").getResultList();
                if(!results.isEmpty()){
                 if ( !results.get(0).getZzxxu2oxxhxxxxxxxxxxowner2().equals("SYSTEM")) {
                  return results.get(0).getB1xxuzbxbvxxxxxxxxxxdata();
                 }else{
                  if (results.size() > 1){
                   return results.get(1).getB1xxuzbxbvxxxxxxxxxxdata();
                  }else{
                   return results.get(0).getB1xxuzbxbvxxxxxxxxxxdata();
                  }
                 }
                }else{
                 // use bkgr color richSkin.headerGradientColor if no image supplied , which is default
                  return null; 
                }
         } catch (NoResultException e) {
               return null;
	 } catch (Exception e) {
           FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("unexpcted")+ " "+bundle.getString("error")+ " "+e.getMessage(),""));
               return null;
         }
	}


	public String getBlobdataType(String table,String keyWPrefix, String keyQualifier, int keySequence) {
           //  type like jpg etc not formal mime type
           //String table="FPXXFQ1A5XWWQQHXXXXXITEM";
           String actualTable=table;
           if(keyWPrefix.length() > 0){
	     	 slobkeyhash = keyWPrefix.substring(1);
           }else{
            return null;
           }
		String qualifier = keyQualifier;
		int sequence = keySequence;

		Yxxxuq1n1xwwqqqxxxxxblobdata blobdata;

		try {
			blobdata = (Yxxxuq1n1xwwqqqxxxxxblobdata) entityManager
					.createQuery(
							"select cc from Yxxxuq1n1xwwqqqxxxxxblobdata cc where cc.a0xxukbdlvxxxxxxxxxxfromtable=:blobdatafromtable and cc.a1xxuxxxbv49xxxxxxxxfromkey=:blobdatafromkey and cc.a2xxuxxxbv50xxxxxxxxqualifier=:blobdataqualifier and a3xxexnsbvxxxxxxxxxxsequence = :blobdatasequence and cc.zzxxu2oxxhxxxxxxxxxxowner2 = :owner2 order by cc.a0xxuobxbxxxxxxxxxxxsid asc")
					.setParameter("blobdatafromtable", actualTable).setParameter(
							"blobdatafromkey", slobkeyhash).setParameter(
							"blobdataqualifier", qualifier).setParameter(
							"blobdatasequence", sequence).setParameter("owner2", owner2Code).getSingleResult();
			return blobdata.getA4xxexxxbvxxxxxxxxxxtype();
		} catch (NoResultException nre) {
			return null;
		} catch (NonUniqueResultException e) {
                 FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                  FacesMessage.SEVERITY_ERROR,bundle.getString("item")+" "+bundle.getString("key")+" "+slobkeyhash+" "+bundle.getString("error")+" "+e.getMessage(),""));
                 return null;
		}
	}
 
     //jay look into changing the name to just getDataTypeMime as it applies to both clob and blob
	public String getBlobdataTypeMime(String table,String keyWPrefix, String keyQualifier, int keySequence) {
           // mime type
           String mime="x";
           String extension="";
           //String table="FPXXFQ1A5XWWQQHXXXXXITEM";
           String actualTable=table;
           if(keyWPrefix == null  || keyWPrefix.length() < 2){
            return mime;
           }
           if(keyWPrefix.length() > 0){
	     	 slobkeyhash = keyWPrefix.substring(1);
           }else{
            return null;
           }
		String qualifier = keyQualifier;
		int sequence = keySequence;

		Yxxxuq1n1xwwqqqxxxxxblobdata blobdata;

		try {
		    List<Yxxxuq1n1xwwqqqxxxxxblobdata> results = entityManager
					.createQuery(
							"select cc from Yxxxuq1n1xwwqqqxxxxxblobdata cc where cc.a0xxukbdlvxxxxxxxxxxfromtable=:blobdatafromtable and cc.a1xxuxxxbv49xxxxxxxxfromkey=:blobdatafromkey and cc.a2xxuxxxbv50xxxxxxxxqualifier=:blobdataqualifier and a3xxexnsbvxxxxxxxxxxsequence = :blobdatasequence and cc.zzxxu2oxxhxxxxxxxxxxowner2 = :owner2 order by cc.a0xxuobxbxxxxxxxxxxxsid asc")
					.setParameter("blobdatafromtable", actualTable).setParameter(
							"blobdatafromkey", slobkeyhash).setParameter(
							"blobdataqualifier", qualifier).setParameter(
							"blobdatasequence", sequence).setParameter("owner2", owner2Code).getResultList();
                if(!results.isEmpty()){
                 blobdata=results.get(0);
                 extension =blobdata.getA4xxexxxbvxxxxxxxxxxtype();
                }else{
                 return mime;
                } 
			if ("bmp".equals(extension)) {
				mime = "image/bmp";
			} else if ("jpg".equals(extension)) {
				mime = "image/jpeg";
			} else if ("gif".equals(extension)) {
				mime = "image/gif";
			} else if ("png".equals(extension)) {
				mime = "image/png";
			} else if ("xml".equals(extension)) {
				mime = "text/xml";
			} else if ("doc".equals(extension)) {
				mime = "application/msword";
			} else if ("txt".equals(extension)) {
				mime = "text/plain";
			} else if ("txt".equals(extension)) {
				mime = "text/plain";
			} else if ("pdf".equals(extension)) {
				mime = "application/pdf";
			} else if ("xls".equals(extension)) {
				mime = "application/vnd.ms-excel";
			} else if ("ppt".equals(extension)) {
				mime = "application/vnd.ms-powerpoint";
			} else if ("mp3".equals(extension)) {
				mime = "audio/mpeg";
			} else {
				mime = "image/unknown";
			}

			return mime;
		} catch (NoResultException nre) {
			return null;
		}
	}




 public int getSize() {
   if (yxxxuq1n1xwwqqqxxxxxblobdataHome.getFiles().size()>0){
   return yxxxuq1n1xwwqqqxxxxxblobdataHome.getFiles().size();
  }else 
  {
   return 0;
  }
 }

 public static String padRight(String s, int n) {
  // s is string, n number of padding 
  //format(String format, Object... args) 
  //%[argument number] [flags] [width] [.precision] type
  return String.format("%1$-" + n + "s", s);
 }
 public static String padLeft(String s, int n) {
    return String.format("%1$" + n + "s", s);  
}

	public String getClobTruncateddata(String data,int size) {
            int dl=data.length();
                if (dl > size){
			 return data.substring(0,size);
                }else {
			 return data;
                }

	}

    




 public String clearUploadData() {
  if(yxxxuq1n1xwwqqqxxxxxblobdataHome.getFiles() !=null){
   yxxxuq1n1xwwqqqxxxxxblobdataHome.getFiles().clear();
   setUploadsAvailable(1);
  }
  return null;
 }

 public long getTimeStamp(){
  return System.currentTimeMillis();
 }


 public int getUploadsAvailable() {
  return uploadsAvailable;
 }

 public void setUploadsAvailable(int uploadsAvailable) {
  this.uploadsAvailable = uploadsAvailable;
 }

 public boolean isAutoUpload() {
 return autoUpload;
 }

 public void setAutoUpload(boolean autoUpload) {
  this.autoUpload = autoUpload;
 }

 public boolean isUseFlash() {
 return useFlash;
 }

 public void setUseFlash(boolean useFlash) {
 this.useFlash = useFlash; 
 }




	public boolean getButtonPressed() {

		if (buttonPressed){
                return true;
           }
		else {
             return false;
          }
     }

     public void setButtonPressed(boolean pressed){
      this.buttonPressed=pressed;
     }


	public String getButtonPressedLabel() {

          return buttonPressedLabel;
     }

     public void setButtonPressedLabel(){
     }

     public String getupLoadPurpose() {

          return upLoadPurpose;
     }

     public void setupLoadPurpose(String upLoadPurpose){
      this.upLoadPurpose=upLoadPurpose;
     }

     public int getuseSeq() {

          return useSeq;
     }

     public void setuseSeq(int useSeq){
      this.useSeq=useSeq;
     }
	public String getdiscountType() {

          return discountType;
     }

     public void setupDiscountType(String discountType){
      this.discountType=discountType;
     }

	public int getUploadsDoneCount() {

          return uploadsDoneCount;
     }

     public void setUploadsDoneCount(){
     }

     public void makeButtonPressed(){
      if (buttonPressedLabel.equals("+ Upload")){
       this.buttonPressed=true;
       this.buttonPressedLabel="- Upload";
      }
      else{
       this.buttonPressed=false;
       this.buttonPressedLabel="+ Upload";
      }
     }

     public void makeButtonPressedPlusB(){
      Integer maxAttach=5;
      makeButtonPressed();
      /**
       used by basketOut,basketOutCast and in mailingSend
      */
      // 3r-attachment records are reused seq 1 to max say 5. if record count = max then get oldest record and update that record
      // if record count is less than max then add a record and set seq to record count+1 
      // since records are reused within a client, we need to change owner to restrict view as needed in case item mgmt
      // but can be ignored for mailing attachment
      // also in jsf render the attachment records    
                 temps=file.getMime();
			 if ("image/bmp".equals(temps)) {
				lobDataType = "bmp";
			 } else if ("image/jpeg".equals(temps)) {
				lobDataType = "jpg";
			 } else if ("image/gif".equals(temps)) {
				lobDataType = "gif";
			 } else if ("image/png".equals(temps)) {
				lobDataType = "png";
			 } else if ("text/xml".equals(temps)) {
				lobDataType = "xml";
			 } else if ("application/msword".equals(temps)) {
				lobDataType = "doc";
			 } else if ("text/plain".equals(temps)) {
				lobDataType = "txt";
			 } else if ("text/html".equals(temps)) {
				lobDataType = "html";
			 } else if ("application/pdf".equals(temps)) {
				lobDataType = "pdf";
			 } else if ("application/vnd.ms-excel".equals(temps)) {
				lobDataType = "xls";
			 } else if ("application/vnd.ms-powerpoint".equals(temps)) {
				lobDataType = "ppt";
			 } else if ("audio/mpeg".equals(temps)) {
				lobDataType = "mp3";
			 } else if ("video/mp4".equals(temps)) {
				lobDataType = "mp4";
			 } else {
				lobDataType = "unkn";
			 }
      if (lobDataType.equals("txt") || lobDataType.equals("xml") || lobDataType.equals("html")) {
       makeButtonPressedPlusC();
       return;
      }       

      if(yxxxuq1n1xwwqqqxxxxxblobdataList.getAttachCount() == maxAttach){
       yxxxuq1n1xwwqqqxxxxxblobdata=yxxxuq1n1xwwqqqxxxxxblobdataList.getOldest();
       yxxxuq1n1xwwqqqxxxxxblobdata.setY3xxuxznbvxxxxxxxxxxnotes(yxxxuq1n1xwwqqqxxxxxblobdataHome.getFiles().get(0).getName());
       yxxxuq1n1xwwqqqxxxxxblobdata.setB1xxuzbxbvxxxxxxxxxxdata(file.getData());
       yxxxuq1n1xwwqqqxxxxxblobdata.setA4xxexxxbvxxxxxxxxxxtype(lobDataType);
       yxxxuq1n1xwwqqqxxxxxblobdata.setZ3xxutoxlhxxxxxxxxxxowner(ownerCode);
       yxxxuq1n1xwwqqqxxxxxblobdataHome.setInstance(yxxxuq1n1xwwqqqxxxxxblobdata);
       // ready to persist, use superUpdate
       yxxxuq1n1xwwqqqxxxxxblobdataHome.superUpdate();
       clearUploadData();
      }else{
       yxxxuq1n1xwwqqqxxxxxblobdataHome.clearInstance();
       yxxxuq1n1xwwqqqxxxxxblobdata=yxxxuq1n1xwwqqqxxxxxblobdataHome.getInstance();
       //already has blobdata and PIC
       yxxxuq1n1xwwqqqxxxxxblobdata.setA1xxuxxxbv49xxxxxxxxfromkey("3R-ATTACHMENT-1-C");
       yxxxuq1n1xwwqqqxxxxxblobdata.setA3xxexnsbvxxxxxxxxxxsequence( yxxxuq1n1xwwqqqxxxxxblobdataList.getAttachCount()+1);
       yxxxuq1n1xwwqqqxxxxxblobdata.setY3xxuxznbvxxxxxxxxxxnotes(yxxxuq1n1xwwqqqxxxxxblobdataHome.getFiles().get(0).getName());
       yxxxuq1n1xwwqqqxxxxxblobdata.setB1xxuzbxbvxxxxxxxxxxdata(file.getData());
       yxxxuq1n1xwwqqqxxxxxblobdata.setA4xxexxxbvxxxxxxxxxxtype(lobDataType);
       yxxxuq1n1xwwqqqxxxxxblobdataHome.persist();
       clearUploadData();
      }
     }
     public void makeButtonPressedPlusC(){
      Integer maxAttach=5;
      makeButtonPressed();
      // 3r-attachment records are reused seq 1 to max say 5. if record count = max then get oldest record and update that record
      // if record count is less than max then add a record and set seq to record count+1 
      // also in jsf render the attachment records    
      if(yxxxuq1m1xwwqqqxxxxxclobdataList.getAttachCount() == maxAttach){
       yxxxuq1m1xwwqqqxxxxxclobdata=yxxxuq1m1xwwqqqxxxxxclobdataList.getOldest();
       yxxxuq1m1xwwqqqxxxxxclobdata.setY3xxuxznbvxxxxxxxxxxnotes(yxxxuq1n1xwwqqqxxxxxblobdataHome.getFiles().get(0).getName());
       yxxxuq1m1xwwqqqxxxxxclobdata.setB1xxuzaxbvxxxxxxxxxxdata(new String(file.getData()));
       yxxxuq1m1xwwqqqxxxxxclobdata.setA4xxexxxbvxxxxxxxxxxtype(lobDataType);
       yxxxuq1m1xwwqqqxxxxxclobdata.setZ3xxutoxlhxxxxxxxxxxowner(ownerCode);
       yxxxuq1m1xwwqqqxxxxxclobdataHome.update();
       clearUploadData();
      }else{
       yxxxuq1m1xwwqqqxxxxxclobdataHome.clearInstance();
       yxxxuq1m1xwwqqqxxxxxclobdata=yxxxuq1m1xwwqqqxxxxxclobdataHome.getInstance();
       //already has clobdata but not qualifier since it could be TXT or HDR
       yxxxuq1m1xwwqqqxxxxxclobdata.setA2xxuxxxbv50xxxxxxxxqualifier("TXT");
       yxxxuq1m1xwwqqqxxxxxclobdata.setA1xxuxxxbv49xxxxxxxxfromkey("3R-ATTACHMENT-1-C");
       yxxxuq1m1xwwqqqxxxxxclobdata.setA3xxexnsbvxxxxxxxxxxsequence(yxxxuq1m1xwwqqqxxxxxclobdataList.getAttachCount()+1);
       yxxxuq1m1xwwqqqxxxxxclobdata.setY3xxuxznbvxxxxxxxxxxnotes(yxxxuq1n1xwwqqqxxxxxblobdataHome.getFiles().get(0).getName());
                   String uploadedText=file.getText();
                   String jay=uploadedText;
                   try{
                    uploadedText=this.sanitize(uploadedText);//
                    uploadedText=jay;
                   } catch ( Exception e){
                    FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                    FacesMessage.SEVERITY_INFO," "+"invalid"+" "+" "+bundle.getString("content")+",  "+e.getMessage(),""));
                    return;
                   }
                   yxxxuq1m1xwwqqqxxxxxclobdata.setB1xxuzaxbvxxxxxxxxxxdata(uploadedText);

       yxxxuq1m1xwwqqqxxxxxclobdata.setA4xxexxxbvxxxxxxxxxxtype(lobDataType);
       yxxxuq1m1xwwqqqxxxxxclobdataHome.persist();
       clearUploadData();
      }
     }




 public String sanitizeApply(String unsafe) throws IOException{
         String safe = Jsoup.clean(unsafe, Whitelist.relaxed().addTags("iframe").addAttributes("p", "style"));
         return unsafe;

 }

    /**
    * The following method sanitizes ie drops unwanted html tags to reduce xss attack 
    * called by xxxlist.send (email)  and clobdataEdit and theme pages etc
    * @param args unsafe data entered by untrusted user 
    * @return safe string
    * @exception IOException
    * @see 
    *  use sanitize wherever clbdata is used or in future used 
    *  default is is ignore sanitize but added a new method sanitizeApply
    */  

 public String sanitize(String unsafe) throws IOException{
         //String safe = Jsoup.clean(unsafe, Whitelist.relaxed().addTags("iframe").addAttributes("p", "style"));
         return unsafe;

 }

/*      addTags for tag, addAttributes for attribute within a specific tag only
	.addTags("meta", "title", "script", "iframe")
	.addAttributes("meta", "charset")
	.addAttributes("iframe", "src")
	.addProtocols("iframe", "src", "http", "https");
*/


     // generate 






	public String getCouponCode() {
	  return couponCode;
	}
     
	public void setCouponCode(String couponCode) {
		this.couponCode = couponCode;
	}

	public BigDecimal getCouponValue() {
	  return couponValue;
	}
     
	public void setCouponValue(BigDecimal couponValue) {
		this.couponValue = couponValue;
	}

	public BigDecimal getSaleValue() {
	  return saleValue;
	}
     
	public void setSaleValue(BigDecimal saleValue) {
		this.saleValue = saleValue;
	}

	public BigDecimal getDiscountValue() {
	  return discountValue;
	}
     
	public void setDiscountValue(BigDecimal discountValue) {
		this.discountValue = discountValue;
	}




	public String getUnitLength() {
		return unitLength;
	}
	public void setUnitLength(String unitLength) {
		this.unitLength = unitLength;
	}


	public String getUnitWidth() {
		return unitWidth;
	}

	public void setUnitWidth(String unitWidth) {
		this.unitWidth = unitWidth;
	}
	public String getUnitHeight() {
		return unitHeight;
	}

	public void setUnitHeight(String unitHeight) {
		this.unitHeight = unitHeight;
	}
	public String getUnitWeight() {
		return unitWeight;
	}

	public void setUnitWeight(String unitWeight) {
		this.unitWeight = unitWeight;
	}

	public BigDecimal getValueLength() {
		return valueLength;
	}

	public void setValueLength(BigDecimal valueLength) {
		this.valueLength = valueLength;
	}
	public BigDecimal getValueWidth() {
		return valueWidth;
	}

	public void setValueWidth(BigDecimal valueWidth) {
		this.valueWidth = valueWidth;
	}
	public BigDecimal getValueHeight() {
		return valueHeight;
	}

	public void setValueHeight(BigDecimal valueHeight) {
		this.valueHeight = valueHeight;
	}
	public BigDecimal getValueWeight() {
		return valueWeight;
	}

	public void setValueWeight(BigDecimal valueWeight) {
		this.valueWeight = valueWeight;
	}

	public String getItemVariantSize() {
		return itemVariantSize;
	}
	public void setItemVariantSize(String itemVariantSize) {
		this.itemVariantSize = itemVariantSize;
	}
	public String getItemVariantColour() {
		return itemVariantColour;
	}
	public void setItemVariantColour(String itemVariantColour) {
		this.itemVariantColour = itemVariantColour;
	}
	public String getItemVariantBrand() {
		return itemVariantBrand;
	}
	public void setItemVariantBrand(String itemVariantBrand) {
		this.itemVariantBrand = itemVariantBrand;
	}
	public String getItemVariantMaterial() {
		return itemVariantMaterial;
	}
	public void setItemVariantMaterial(String itemVariantMaterial) {
		this.itemVariantMaterial = itemVariantMaterial;
	}
	public String getItemVariantSizeL() {
		return itemVariantSizeL;
	}
	public void setItemVariantSizeL(String itemVariantSizeL) {
		this.itemVariantSizeL = itemVariantSizeL;
	}
	public String getItemVariantColourL() {
		return itemVariantColourL;
	}
	public void setItemVariantColourL(String itemVariantColourL) {
		this.itemVariantColourL = itemVariantColourL;
	}
	public String getItemVariantBrandL() {
		return itemVariantBrandL;
	}
	public void setItemVariantBrandL(String itemVariantBrandL) {
		this.itemVariantBrandL = itemVariantBrandL;
	}
	public String getItemVariantMaterialL() {
		return itemVariantMaterialL;
	}
	public void setItemVariantMaterialL(String itemVariantMaterialL) {
		this.itemVariantMaterialL = itemVariantMaterialL;
	}




    public String verifyAnswer(String questionA,String answerU,Integer sid,String type){
     // parameter questionA has stored answer and answerU has entered answer
     // changed equals to contains to allow multiple answer match ex if stored Answer is jayanta Mitra and question is my name?
     // then jay or jayanta or mitra or tra will match. min 3 chrs to ignore space or just j 
     // also allows multiple password values or multiple city names as answer
     skinBean.setHoldSid(sid);// needed by datascroller
     if(type.contains("SI-")){
      return "";// no challenge holds theme vendor and theme name or empty
     }
     if(questionA.isEmpty() ){
      //no challenge involved
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
         FacesMessage.SEVERITY_INFO,bundle.getString("details")+", "+bundle.getString("shown")+" "+bundle.getString("at")+" "+bundle.getString("bottom"),""));
      if(type.equals("image")){
       return "ImagesBrowse.xhtml??faces-redirect=true&catsubJay="+sid;// use carsubJay notcategory
      }else{
       if(type.equals("item")){
        return "ItemDetailsBrowse.xhtml??faces-redirect=true&category="+sid;// category
       }else{
        return "BlogDetailsBrowse.xhtml??faces-redirect=true&catsubJay="+sid;//category
       }
      }
     }
     if(questionA.isEmpty() && answerU.isEmpty()){
      //sometimes parameter values come as empty
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_ERROR,bundle.getString("sorry")+", "+bundle.getString("no")+" "+bundle.getString("value")+" "+bundle.getString("received"),""));
      return "";//same page
     }
     String quA=questionA.trim().toLowerCase();
     String anU=answerU.trim().toLowerCase();
     if((anU.length() > 2 && quA.contains(anU)) || (anU.length() < 3 && quA.equals(anU))){
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
         FacesMessage.SEVERITY_ERROR,bundle.getString("details")+", "+bundle.getString("shown")+" "+bundle.getString("at")+" "+bundle.getString("bottom"),""));
      if(type.equals("image")){
       return "ImagesBrowse.xhtml??faces-redirect=true&category="+sid;//category
      }else{
       if(type.equals("item")){
        return "ItemDetailsBrowse.xhtml??faces-redirect=true&category="+sid;//category
       }else{
        return "BlogDetailsBrowse.xhtml??faces-redirect=true&category="+sid;//category
       }
      }
     }else{
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_ERROR,bundle.getString("sorry")+", "+bundle.getString("answer")+" "+answerU+" "+bundle.getString("did")+" "+bundle.getString("not")+" "+bundle.getString("match"),""));
      return "";//stay same page to show msg
     }
    } 

    public String goSITree() {
     return "ItemSITree.xhtml?faces-redirect=true&includeViewParams=true";
    }

    public String goItemBrowse() {
     return "ItemDetailsBrowse.xhtml?faces-redirect=true&includeViewParams=true";
    }

    public void addChildToItem(Fpxxfq1a5xwwqqhxxxxxitem issue) {
      if (fpxxfq1a5xwwqqhxxxxxitem == null) {
       fpxxfq1a5xwwqqhxxxxxitem=fpxxfq1a5xwwqqhxxxxxitemHome.getInstance();
      }
      fpxxfq1a5xwwqqhxxxxxitem.setFpxxfq1a5xwwqqhxxxxxitem(issue);
      fpxxfq1a5xwwqqhxxxxxitem.setZzxxu2oxxhxxxxxxxxxxowner2("SYSTEM");
      fpxxfq1a5xwwqqhxxxxxitemHome.clearInstance();
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("added")+" "+bundle.getString("as")+" "+bundle.getString("reply"),""));
   }

    public String acceptAnswerF(Fpxxfq1a5xwwqqhxxxxxitem issue) {
     acceptAnswer(issue);  
      return "";
    }


    public String acceptAnswer(Fpxxfq1a5xwwqqhxxxxxitem issue) {

      if (issue == null) {
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_ERROR,bundle.getString("no")+" "+bundle.getString("answer")+" "+bundle.getString("to")+" "+bundle.getString("accept"),""));


      }
      else{
       //fetch and update parent as closed
       this.setInstance(issue.getFpxxfq1a5xwwqqhxxxxxitem());
       // set null to parent
       this.instance.setFpxxfq1a5xwwqqhxxxxxitem( null );
       this.instance.setZ5xxzzfxhhxxxxxxxxxxstatusfl( mclosed );
       try{
        this.update();
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("accepted"),""));

      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,this.instance.getA0xxukixbxxxxxxxxxxxmatcode()+" "+bundle.getString("now")+" "+bundle.getString("closed"),""));

       } catch (Exception e) {
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_ERROR,this.instance.getA0xxukixbxxxxxxxxxxxmatcode()+" "+bundle.getString("error")+" "+e.getMessage(),""));

       }
      }
      return "";
   }
	public String getAddrL1() {
		return addrL1;
	}

	public void setAddrL1(String addrL1) {
		this.addrL1 = addrL1;
	}

	public String getAddrL2() {
		return addrL2;
	}

	public void setAddrL2(String addrL2) {
		this.addrL2 = addrL2;
	}

	public String getCity() {
		return city;
	}

	public void setCity(String city) {
		this.city = city;
	}

	public String getProvstate() {
		return provstate;
	}

	public void setProvstate(String provstate) {
		this.provstate = provstate;
	}

	public String getPzcode() {
		return pzcode;
	}

	public void setPzcode(String pzcode) {
		this.pzcode = pzcode;
	}

	public String getCountry() {
		return country;
	}

	public void setCountry(String country) {
		this.country = country;
	}
	public String getImailaddr() {
		return imailaddr;
	}

	public void setImailaddr(String imailaddr) {
		this.imailaddr = imailaddr;
	}
	public String getImailaddrAlt() {
		return imailaddrAlt;
	}

	public void setImailaddrAlt(String imailaddrAlt) {
		this.imailaddrAlt = imailaddrAlt;
	}

	  public void validateAndSelectXxxxxxxxmatsid(FacesContext context,UIComponent toValidate,Object value) {
            if (skipValidation){
             //extended persist closes the copied from entity so validation will fail and we dont need validation at this point
             return;
            }
            // set bcontinue to true if set false by showrunt() at start of txn, because of property being null
            // jay not all showrunt() validate, vendor txn does not why??
            if(fpxxfq1a5xwwqqhxxxxxitem == null && bcontinue == false){
             bcontinue=true;
            }
            fpxxfq1a5xwwqqhxxxxxitem  = null;
            String enteredValue = (String) value;//sid but passed as string using notesToPass(cartPOS) or matcode(countItem/countAlias) variable
            String jay = toValidate.getAttributes().get("required").toString();
            if (!jay.contains("true")  && (enteredValue ==null || enteredValue.trim().isEmpty())){ 
             return;
            }
            if (jay.contains("true")  && (enteredValue ==null || enteredValue.trim().isEmpty())){  
             FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
              FacesMessage.SEVERITY_WARN,bundle.getString("matcode")+" "+ bundle.getString("no")+" "+ bundle.getString("value"),""));

             bcontinue=false;
             return;
            }
            urlIndex=urlName.indexOf(">>");
            if (urlIndex != -1){
             enteredValue=enteredValue.substring(0,urlIndex);
            }
            Integer entvToInteger=null;
            try{
             entvToInteger= Integer.parseInt(enteredValue);
            } catch (Exception ex) {
                 FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                   FacesMessage.SEVERITY_WARN,bundle.getString("Matcode")+" "+enteredValue+" "+bundle.getString("invalid"),""));
			 throw new ValidatorException(msg);
            }


            Fpxxfq1a5xwwqqhxxxxxitem cc = fpxxfq1a5xwwqqhxxxxxitemHome.getInstance();
              // if the Item has upc code and scanned value matched it then also use the item
              //The UPC or any code could be added to UPC field and can act as alternative to using sid for scanning
              //This saves on printing new labels with sid if upc label already exists.
              // if the Item has a matching serialnumber of type s then also consider the item as scanned
	      try {
			 List<Fpxxfq1a5xwwqqhxxxxxitem> results =  entityManager.createQuery("select cc from Fpxxfq1a5xwwqqhxxxxxitem cc where (cc.a0xxuobxbxxxxxxxxxxxsid = :keyOfEntity OR cc.b5fbuxxrbvxxxxxxxxxxupccode = :upcCode ) AND cc.zzxxu2oxxhxxxxxxxxxxowner2=:owner2 order by cc.a0xxuobxbxxxxxxxxxxxsid asc")
				.setParameter("keyOfEntity", entvToInteger).setParameter("upcCode", enteredValue).setParameter("owner2", owner2Code).getResultList();    
                  
                         if(results.isEmpty()){
                          List<Fxxxuq1ffxwwqqhefxxxserialnumbers> resultsS =fxxxuq1ffxwwqqhefxxxserialnumbersList.getSuggestList("sm"+enteredValue);
                          if(resultsS.isEmpty()){
                           FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                            FacesMessage.SEVERITY_WARN,bundle.getString("matcode")+"/ "+bundle.getString("barcode")+" "+ enteredValue+" "+bundle.getString("not")+" "+ bundle.getString("found")+", "+ bundle.getString("create")+" "+ bundle.getString("first"),""));
                            return;                           
                          }else{
                           fpxxfq1a5xwwqqhxxxxxitem = fpxxfq1a5xwwqqhxxxxxitemList.getKeyToEntity(resultsS.get(0).getB1xxuxxrbvxxxxxxxxxxmatcode()); 
                          }
                         }else{
                          fpxxfq1a5xwwqqhxxxxxitem = results.get(0);
                         }
                         if (results.size()>1){
                          FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                           FacesMessage.SEVERITY_WARN,bundle.getString("matcode")+" "+ bundle.getString("multiple")+" "+ bundle.getString("results")+", "+ bundle.getString("one")+" "+ bundle.getString("selected"),""));
                         }           
                         if (fpxxfq1a5xwwqqhxxxxxitem != null ) {
			     // that's fine - It should exist.
                             // check if selfreferencing foreign field
                           if(this.instance == null){
                            this.clearInstance();
                            this.setInstance(fpxxfq1a5xwwqqhxxxxxitem);

                           }
                           fpxxfq1a5xwwqqhxxxxxitem.setB0xxziqxlvxxsaxxxxxxquantity(BigDecimal.ONE);//each scan means qty 1
                           if(this.instance !=null){
			    this.instance.setFpxxfq1a5xwwqqhxxxxxitem(fpxxfq1a5xwwqqhxxxxxitem);
                            //each scan will add one to phy qty saved in serial table for same sid/matcode/sku
                            //also disable/enable button calling the same method to avoid double count
                            //if some other validation already failed, do not reset it 
                            if(fpxxfq1a5xwwqqhxxxxxitem.getB8fbzpxxbvxxxxxxxxxxselprice().compareTo(BigDecimal.ZERO)==0){
                             FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                             FacesMessage.SEVERITY_WARN,bundle.getString("Price")+ " "+bundle.getString("is")+ " "+bundle.getString("ZERO"),""));
                            }     
                           }else{
                            bcontinue=false;
                             FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                             FacesMessage.SEVERITY_WARN,bundle.getString("Instance")+ " "+bundle.getString("empty")+ "- "+bundle.getString("error"),""));
                            return;
                           }
                           if(bcontinue){
                            bcontinue=true;
                           }
                         }//end of shiptobill check
	      } catch (NoResultException nre) {
                 FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                   FacesMessage.SEVERITY_WARN,bundle.getString("Matcode"),""));
			 throw new ValidatorException(msg);
              }
	 }

	  public void validateAndSelectXxxxxxxxskusid(FacesContext context,UIComponent toValidate,Object value) {
            if (skipValidation){
             //extended persist closes the copied from entity so validation will fail and we dont need validation at this point
             return;
            }
            // set bcontinue to true if set false by showrunt() at start of txn, because of property being null
            // jay not all showrunt() validate, vendor txn does not why??
            if(fpxxfq1a5xwwqqhxxxxxitem == null && bcontinue == false){
             bcontinue=true;
            }
            fpxxfq1a5xwwqqhxxxxxitem  = null;
            String enteredValue = (String) value;//sid but paased as string
            String jay = toValidate.getAttributes().get("required").toString();
            if (!jay.contains("true")  && (enteredValue ==null || enteredValue.trim().isEmpty())){ 
             return;
            }
            if (jay.contains("true")  && (enteredValue ==null || enteredValue.trim().isEmpty())){  
             FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
              FacesMessage.SEVERITY_WARN,bundle.getString("SKU")+" "+ bundle.getString("no")+" "+ bundle.getString("value"),""));

             bcontinue=false;
             return;
            }
            urlIndex=urlName.indexOf(">>");
            if (urlIndex != -1){
             enteredValue=enteredValue.substring(0,urlIndex);
            }
            Integer entvToInteger=null;
            try{
             entvToInteger= Integer.parseInt(enteredValue);
            } catch (Exception nre) {
                 FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                   FacesMessage.SEVERITY_WARN,bundle.getString("Matcode")+" "+enteredValue+" "+bundle.getString("invalid"),""));
			 throw new ValidatorException(msg);
            }
              // if the Item has upc code and scanned value matched it then also use the item
              //The UPC or any code could be added to UPC field and can act as alternative to using sid for scanning
              //This saves on printing new labels with sid if upc label already exists.
              // if the Item has a matching serialnumber of type s then also consider the item as scanned

            Fpxxfq1a5xwwqqhxxxxxitem cc = fpxxfq1a5xwwqqhxxxxxitemHome.getInstance();
	      try {
			 List<Fpxxfq1a5xwwqqhxxxxxitem> results =  entityManager.createQuery("select cc from Fpxxfq1a5xwwqqhxxxxxitem cc where (cc.a0xxuobxbxxxxxxxxxxxsid = :keyOfEntity OR cc.b5fbuxxrbvxxxxxxxxxxupccode = :upcCode ) AND cc.zzxxu2oxxhxxxxxxxxxxowner2=:owner2 order by cc.a0xxuobxbxxxxxxxxxxxsid asc")
				.setParameter("keyOfEntity", entvToInteger).setParameter("upcCode", enteredValue).setParameter("owner2", owner2Code).getResultList();    
                  
                         if(results.isEmpty()){
                          List<Fxxxuq1ffxwwqqhefxxxserialnumbers> resultsS =fxxxuq1ffxwwqqhefxxxserialnumbersList.getSuggestList("sm"+enteredValue);
                          if(resultsS.isEmpty()){
                           FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                            FacesMessage.SEVERITY_WARN,bundle.getString("SKU")+"/ "+bundle.getString("barcode")+" "+ enteredValue+" "+bundle.getString("not")+" "+ bundle.getString("found")+", "+ bundle.getString("create")+" "+ bundle.getString("first"),""));
                            return;                           
                          }else{
                           fpxxfq1a5xwwqqhxxxxxitem = fpxxfq1a5xwwqqhxxxxxitemList.getKeyToEntity(resultsS.get(0).getB1xxuxxrbvxxxxxxxxxxmatcode()); 
                          }
                         }else{
                          fpxxfq1a5xwwqqhxxxxxitem = results.get(0);
                         }
                         if (results.size()>1){
                             FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                              FacesMessage.SEVERITY_WARN,bundle.getString("matcode")+" "+ bundle.getString("multiple")+" "+ bundle.getString("results")+", "+ bundle.getString("one")+" "+ bundle.getString("selected"),""));
                        
                         }           
                         if (fpxxfq1a5xwwqqhxxxxxitem != null ) {
			     // that's fine - It should exist.
                             // check if selfreferencing foreign field
                           if(this.instance == null){
                            this.clearInstance();
                            this.setInstance(fpxxfq1a5xwwqqhxxxxxitem);
                           }
                           fpxxfq1a5xwwqqhxxxxxitem.setB0xxziqxlvxxsaxxxxxxquantity(BigDecimal.ONE);//each scan means qty 1
			   this.instance.setFpxxfq1a5xwwqqhxxxxxitem(fpxxfq1a5xwwqqhxxxxxitem);
                           //each scan will add one to phy qty saved in serial table for same sid/matcode/sku
                           //also disable/enable button calling the same method to avoid double count
                           //if some other validation already failed, do not reset it 
                           if(fpxxfq1a5xwwqqhxxxxxitem.getB8fbzpxxbvxxxxxxxxxxselprice().compareTo(BigDecimal.ZERO)==0){
                            FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                            FacesMessage.SEVERITY_WARN,bundle.getString("Price")+ " "+bundle.getString("is")+ " "+bundle.getString("ZERO"),""));
                           }     
                           //if some other validation already failed, do not reset it 
                           if(bcontinue){
                            bcontinue=true;
                           }
                         }//end of shiptobill check
	      } catch (NoResultException nre) {
                 FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                   FacesMessage.SEVERITY_WARN,bundle.getString("Matcode"),""));


			 throw new ValidatorException(msg);
              }
	 }


    @Transactional
    public void itemCount(String matCode,String mode, BigDecimal quantity,String type) {
    /**
    * for itemCount, serialnumbers records are used to store item physical counts ie one to one relation
    * check scandate to allow count, if valid then entered quantity will be added to physqty. Give warning
    * if quantity exists
    * @param args -3
    * matCode ie item key or serial key, this method is called by countItem, countAlias or by 
    * quantity is normally 1 if not SI-D (shopping)
    * mode s=set/replace with new quantity, a=adjust +- to existing quantity
    * type m-item matCode,a-alias(SKU) matCode,s-item serial#
    * if ci-L1 , quantity passed is 0
    * type cart or basket or cartInvoice
    * checks against 
    */
     // matcode is too long for barcode, use sid instead
     // for manufacturing allow serialized inventory via client field altseria. tbd item type? or source? to override
     //default is one serialnumber record withe serialno key same as item sid and holds phy count in physqty and gets updated
     // if serialized then item receive time a serialnumber record was created with ie many serials to one item. Each serialno
     // key holds the same item sid. It will have a tree structure and each may or may not have physqty or flag
     // should be one scandate record
     SimpleDateFormat ss = new SimpleDateFormat("yyyy-MM-dd");
     List<Xlrxuq1iixwwqqhexxxxscandate> resultsSc=null;
     Xlrxuq1iixwwqqhexxxxscandate scandate=null;
     resultsSc=xlrxuq1iixwwqqhexxxxscandateList.getResultList();//get all, should be one only unless ERP needs 2nd one
      if(resultsSc.size() == 0  ){
          FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
           FacesMessage.SEVERITY_ERROR,bundle.getString("Stock")+" "+bundle.getString("count")+" "+bundle.getString("not")+" "+bundle.getString("setup")+ ", "+" "+bundle.getString("or")+" "+bundle.getString("trying")+" "+bundle.getString("outside")+" "+bundle.getString("counting")+" "+bundle.getString("setup")+" "+bundle.getString("date")+ " "+bundle.getString("range"),""));
          return;

      }else{
       scandate=resultsSc.get(0);
       Date toDay = calendar.getTime();

       if(!(toDay.compareTo(scandate.getB1xxcsxraxxxxxxxxxxxdatetimeofscan()) >= 0 && toDay.compareTo(scandate.getZ1xxcxxrlvxxxxxxxxxxlastdate()) <= 0)){
          FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
           FacesMessage.SEVERITY_ERROR,bundle.getString("Outside")+" "+bundle.getString("Stock")+" "+bundle.getString("count")+" "+bundle.getString("date")+" "+bundle.getString("range")+ ", "+bundle.getString("start")+": "+ss.format(scandate.getB1xxcsxraxxxxxxxxxxxdatetimeofscan()).toString()+" "+bundle.getString("end")+": "+ss.format(scandate.getZ1xxcxxrlvxxxxxxxxxxlastdate()).toString(),""));
          return;

       }

      }
     
     List<Fxxxuq1ffxwwqqhefxxxserialnumbers> results=null;
     Fxxxuq1ffxwwqqhefxxxserialnumbers serial=null;
     String action="";
     BigDecimal oldAmount = new BigDecimal("0.0");
     Integer sid=0;
     String typeE=null;//"X" makes it immutable
     String descript="";
     // type s means param1 is serial # and was created whem item was received and assigned a serial #
     // needs more logic, do not show in menu now, only type m and a  
     if(type==null){
      type="m";
     }
    
     if (fpxxfq1a5xwwqqhxxxxxitem == null){
       fpxxfq1a5xwwqqhxxxxxitem=fpxxfq1a5xwwqqhxxxxxitemList.getKeyToEntity(matCode);
     }

     if (fpxxfq1a5xwwqqhxxxxxitem == null){
          FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
           FacesMessage.SEVERITY_ERROR,bundle.getString("Invalid")+" "+bundle.getString("value")+" "+matCode+" "+bundle.getString("received")+", "+bundle.getString("check")+ " "+bundle.getString("entered")+" "+bundle.getString("value")+" "+bundle.getString("and")+" "+bundle.getString("use")+ " "+bundle.getString("correct")+" "+bundle.getString("button")+" "+bundle.getString("scanned")+ " / "+bundle.getString("select"),""));
          return;

     }else{
      descript=fpxxfq1a5xwwqqhxxxxxitem.getB1xxuszsbvxxxxxxxxxxdescript();// type s, see logic below
      sid=fpxxfq1a5xwwqqhxxxxxitem.getA0xxuobxbxxxxxxxxxxxsid();
     }
     try{
      if(quantity.compareTo(BigDecimal.ZERO) == 0){
       fpxxfq1a5xwwqqhxxxxxitemHome.getInstance().setB0xxziqxlvxxsaxxxxxxquantity(BigDecimal.ONE);//each scan means qty 1
       quantity=BigDecimal.ONE;// make one for each scan/enter
      }  
      String sidS=sid+"";
      String strLeftPad = String.format("%8s", sidS).replace(" " , "0");
      results=fxxxuq1ffxwwqqhefxxxserialnumbersList.getSuggestList(strLeftPad);//suggestList uses key which is string value of Item sid
      //since setup() for baseline already created serialnumbers records most of the time will involve updating
      // if new following logic will set type as a(sku)/m(matcode)/s(serial for erp)
      // if update check if null then put a(sku)/m(matcode)/s(serial for erp) as indicated via parameter above
      if(results.size() == 0 || (results.size() > 0 && !results.get(0).getA0xxukxxbvxxxxxxxxxxserialno().equals(strLeftPad))  ){
       // check againsts scandate, new entity no need to check mode as existing quantity in serial is 0
       fxxxuq1ffxwwqqhefxxxserialnumbersHome.clearInstance();
       serial=fxxxuq1ffxwwqqhefxxxserialnumbersHome.getInstance();
       serial.setB1xxuxxrbvxxxxxxxxxxmatcode(matCode);
       serial.setD5xxcxqrlxxxxxxxxxxxphysqty(quantity);
       serial.setA0xxukxxbvxxxxxxxxxxserialno(String.format("%08d", sid));
       if(type.equals("m")){
        serial.setYcxxuxxrbvxxxxxxxxxxtype("m");
        typeE="m("+bundle.getString("item")+")";
       }else{
        if(type.equals("a")){
         serial.setYcxxuxxrbvxxxxxxxxxxtype("a");
         typeE="a("+bundle.getString("SKU")+")";
        }else{
         if(type.equals("s")){
          serial.setYcxxuxxrbvxxxxxxxxxxtype("s");
          typeE="s("+bundle.getString("barcode")+")";
         }else{
          FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
           FacesMessage.SEVERITY_ERROR,bundle.getString("Invalid")+" "+bundle.getString("value")+" "+type+" "+bundle.getString("received")+" "+bundle.getString("as")+ " "+bundle.getString("parameter"),""));
          return;
         }  
        }  
       }
       fxxxuq1ffxwwqqhefxxxserialnumbersHome.setInstance(serial);
       fxxxuq1ffxwwqqhefxxxserialnumbersHome.superdotpersist();
       FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
        FacesMessage.SEVERITY_INFO,bundle.getString("Stock")+" "+bundle.getString("record")+" "+bundle.getString("for")+" "+bundle.getString("Item")+": "+matCode+" ("+descript+") "+bundle.getString("Stock")+" "+bundle.getString("saved")+" "+bundle.getString("as")+" "+bundle.getString("id")+" "+serial.getA0xxukxxbvxxxxxxxxxxserialno()+", "+bundle.getString("quantity")+" "+quantity,""));
       return;
      }
      if(results.size() > 0){
       // check againsts id strLeftPad, scandate, existing serial so need to check mode to set or adjust qty
   
       fxxxuq1ffxwwqqhefxxxserialnumbersHome.clearInstance();
       serial=results.get(0);
       String serType=serial.getYcxxuxxrbvxxxxxxxxxxtype();
       if(serType !=null && !serType.equals(type)){// type null was set by setup() reject not null and not a/m/s
         FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
          FacesMessage.SEVERITY_ERROR,bundle.getString("Selected")+" "+bundle.getString("Stock")+" "+bundle.getString("record")+" "+bundle.getString("for")+" "+bundle.getString("Item")+": "+matCode+" ("+descript+") "+bundle.getString("has")+" "+bundle.getString("type")+" "+serType+" "+bundle.getString("not")+ " "+typeE+ " ",""));
          return;
       }
       if(type.equals("s")){
        // serial should already have matcode, go get item descript
        fpxxfq1a5xwwqqhxxxxxitem=fpxxfq1a5xwwqqhxxxxxitemList.getKeyToEntity(serial.getB1xxuxxrbvxxxxxxxxxxmatcode()); 
        descript=fpxxfq1a5xwwqqhxxxxxitem.getB1xxuszsbvxxxxxxxxxxdescript();
       }else{//m or a 
        serial.setB1xxuxxrbvxxxxxxxxxxmatcode(matCode);
        serial.setYcxxuxxrbvxxxxxxxxxxtype(type);//override null with a or m

       }
       oldAmount=serial.getD5xxcxqrlxxxxxxxxxxxphysqty();
       if(mode.equals("a")){//mode is adjust or set
        serial.setD5xxcxqrlxxxxxxxxxxxphysqty(oldAmount.add(quantity));

       }else{
        if(quantity.compareTo(BigDecimal.ZERO) == 1){
         serial.setD5xxcxqrlxxxxxxxxxxxphysqty(oldAmount.add(quantity));
        }else{
         FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
          FacesMessage.SEVERITY_ERROR,bundle.getString("Physical")+" "+bundle.getString("count")+" "+bundle.getString("needs")+" "+bundle.getString("to")+" "+bundle.getString("be")+" "+bundle.getString("more")+" "+bundle.getString("than")+" "+bundle.getString("zero")+", "+bundle.getString("use")+" "+bundle.getString("adjust")+" "+bundle.getString("if")+" "+bundle.getString("needed"),""));
          return;
        }
       }
       fxxxuq1ffxwwqqhefxxxserialnumbersHome.setInstance(serial);
       fxxxuq1ffxwwqqhefxxxserialnumbersHome.superUpdate();
       FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
        FacesMessage.SEVERITY_INFO,bundle.getString("Item")+": "+matCode+" ("+descript+") "+bundle.getString("Stock")+" "+bundle.getString("code")+" "+serial.getA0xxukxxbvxxxxxxxxxxserialno()+" "+bundle.getString("updated")+ ", "+ bundle.getString("quantity")+" "+oldAmount+" "+bundle.getString("to")+"  "+serial.getD5xxcxqrlxxxxxxxxxxxphysqty(),""));
       return;
      }

     }catch ( Exception e){
             FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                FacesMessage.SEVERITY_ERROR,matCode+" ("+descript+")-"+quantity+" "+bundle.getString("Stock")+" "+bundle.getString("saving")+ " "+bundle.getString("error")+" "+e.getMessage(),""));

             return ;
     }  
       




    }
    public String removeImage() {
     //removes blobdata, if any, associated with item but leave the docmnt value in item itself
                 try{
                List<Yxxxuq1n1xwwqqqxxxxxblobdata> results = entityManager
		 .createQuery(
			"select cc from Yxxxuq1n1xwwqqqxxxxxblobdata cc where cc.a0xxukbdlvxxxxxxxxxxfromtable=:blobdatafromtable and cc.a1xxuxxxbv49xxxxxxxxfromkey=:blobdatafromkey and cc.a3xxexnsbvxxxxxxxxxxsequence=:blobdatasequence and cc.a2xxuxxxbv50xxxxxxxxqualifier=:blobdataqualifier and cc.zzxxu2oxxhxxxxxxxxxxowner2 = :owner2 order by cc.a0xxuobxbxxxxxxxxxxxsid asc")
		           .setParameter("blobdatafromtable", "FPXXFQ1A5XWWQQHXXXXXITEM").setParameter("blobdatafromkey", this.instance.getW8xxuzdrbvxxxxxxxxxxdocmnt().substring(1))
                            .setParameter("owner2", owner2Code).setParameter("blobdatasequence",1)
                             .setParameter("blobdataqualifier","1").getResultList();
		if(!results.isEmpty() ){
                 //blob/clob are not constrained as foreign entity to item, so just remove it
                  yxxxuq1n1xwwqqqxxxxxblobdataHome.clearInstance();
                  yxxxuq1n1xwwqqqxxxxxblobdataHome.setInstance(results.get(0));
                  yxxxuq1n1xwwqqqxxxxxblobdataHome.superdotremove();
                  FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                   FacesMessage.SEVERITY_ERROR,bundle.getString("remove")+" "+bundle.getString("image")+" "+bundle.getString("data")+" "+bundle.getString("done")+", "+bundle.getString("key")+" "+results.get(0).getA1xxuxxxbv49xxxxxxxxfromkey(),""));

                }
                 }catch ( Exception e){
                  FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                   FacesMessage.SEVERITY_ERROR,bundle.getString("remove")+" "+bundle.getString("binary")+" "+bundle.getString("data")+" "+bundle.getString("error")+" "+e.getMessage(),""));
                 }  
                return "";  

    }

    public String removeText() {
                List<Yxxxuq1m1xwwqqqxxxxxclobdata> resultsc = entityManager
		 .createQuery(
			"select cc from Yxxxuq1m1xwwqqqxxxxxclobdata cc where cc.a0xxukcdlvxxxxxxxxxxfromtable=:blobdatafromtable and cc.a1xxuxxxbv49xxxxxxxxfromkey=:blobdatafromkey and cc.a3xxexnsbvxxxxxxxxxxsequence=:blobdatasequence and cc.a2xxuxxxbv50xxxxxxxxqualifier=:blobdataqualifier and cc.zzxxu2oxxhxxxxxxxxxxowner2 = :owner2 order by cc.a0xxuobxbxxxxxxxxxxxsid asc")
		           .setParameter("blobdatafromtable", "FPXXFQ1A5XWWQQHXXXXXITEM").setParameter("blobdatafromkey", this.instance.getW8xxuzdrbvxxxxxxxxxxdocmnt().substring(1))
                            .setParameter("owner2", owner2Code).setParameter("blobdatasequence",1)
                             .setParameter("blobdataqualifier","1").getResultList();
		if(!resultsc.isEmpty() ){
                 //blob/clob are not constrained as foreign entity to item, so just remove it
                 try{
                  yxxxuq1m1xwwqqqxxxxxclobdataHome.clearInstance();
                  yxxxuq1m1xwwqqqxxxxxclobdataHome.setInstance(resultsc.get(0));
                  yxxxuq1m1xwwqqqxxxxxclobdataHome.superdotremove();
                  FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                   FacesMessage.SEVERITY_ERROR,bundle.getString("remove")+" "+bundle.getString("text")+" "+bundle.getString("data")+" "+bundle.getString("done")+", "+bundle.getString("key")+" "+resultsc.get(0).getA1xxuxxxbv49xxxxxxxxfromkey(),""));

                 }catch ( Exception e){
                  FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                   FacesMessage.SEVERITY_ERROR,bundle.getString("remove")+" "+bundle.getString("text")+" "+bundle.getString("data")+" "+bundle.getString("error")+" "+e.getMessage(),""));
                 }  
                }  
                return "";  

    } 





    @Transactional
    public void addScanToOrder(String scanKey, BigDecimal quantity,String type) {
     //add logic to check scanned input to match item key,aliaskey and  barcode and get the entity
     if(fpxxfq1a5xwwqqhxxxxxitem == null){//should be already set by validate
      fpxxfq1a5xwwqqhxxxxxitem=fpxxfq1a5xwwqqhxxxxxitemList.getKeyToEntity(scanKey);
     }
     if(fpxxfq1a5xwwqqhxxxxxitem == null){
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
        FacesMessage.SEVERITY_ERROR,bundle.getString("invalid")+ " "+bundle.getString("key")+ " "+scanKey,""));
      return;
     }
     this.addProductToOrder(fpxxfq1a5xwwqqhxxxxxitem,quantity,type);
     this.clearInstance();// clear scan in field

    }

    @Transactional
    public String addScanToCart(String scanKey, BigDecimal quantity,String type) {
     //add logic to check scanned input to match item key,aliaskey and  barcode and get the entity
     if(fpxxfq1a5xwwqqhxxxxxitem == null){//should be already set by validate
      fpxxfq1a5xwwqqhxxxxxitem=fpxxfq1a5xwwqqhxxxxxitemList.getKeyToEntity(scanKey);
     }
     if(fpxxfq1a5xwwqqhxxxxxitem == null){
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
        FacesMessage.SEVERITY_ERROR,bundle.getString("invalid")+ " "+bundle.getString("key")+ " "+scanKey,""));
      return "";
     }
      // reset scanKey to sid in case UPCCode was used in validation
      scanKey=""+fpxxfq1a5xwwqqhxxxxxitem.getA0xxuobxbxxxxxxxxxxxsid();  
      if(quantity.compareTo(BigDecimal.ZERO) == 0){
       fpxxfq1a5xwwqqhxxxxxitemHome.getInstance().setB0xxziqxlvxxsaxxxxxxquantity(BigDecimal.ONE);//each scan means qty 1
       quantity=BigDecimal.ONE;// make one for each scan/enter
      }  
                           if(fpxxfq1a5xwwqqhxxxxxitem.getB8fbzpxxbvxxxxxxxxxxselprice().compareTo(BigDecimal.ZERO)==0){
                            FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                            FacesMessage.SEVERITY_WARN,bundle.getString("Price")+ " "+bundle.getString("is")+ " "+bundle.getString("ZERO"),""));
                           }     

     this.clearInstance();// clear scan in field 
     return "/cartPOS.wflow??faces-redirect=true&categoryJay="+scanKey;
   }
    /**
    * method is a gateway to call other methods to process order based on customer chosen PayBy value 
    * for paynow values pp and pd it calls r3cart/ShoppingCartBean for card processing and order status/terms update
    * for no paynow ie np and cd it calls updateOrderTermCode bypassing any card processing because no payment now
    * order type will be cart and terms initially null will be changed to as follows
    * pp > PrePay and Pickup, pd > PrePay and Delivery, np > ToPay and Pickup, cd > ToPay and Delivery
    * Based on customer ?? tbd or backoffice can change terms to dd/Pickup or dd/Deliv where dd days like 30/Deliv for 30 days 
    * @return null or empty 
    * @param arg cpoId not used for now null, payBy ie pd- paynow/deliver, pp- paynow/pickup, np- no paynow/pay at pickup, cd- no paynow/delivery time pay cash or credit 
    * itemList.getCurrentCartOrder(xx) is used later to get cpoId
    * @exception tbd
    */ 


    public String payByController(Integer cpoId, String code) {
     //call diff r3cart method based on code pp,pd,cd and np
     //pd:Make_payment_for_delivery pp:Make_payment_for_pickup. Customer pre pay using paypal. Goods are delivered or picked up
     //order/invoice auto created. backoffice invoice -> shipment. either calls calls/informs shipper or calls/informs customer
     //for pick up. invoice -> payment and capture money from paypal. no POS involved
     //
     //np:Pay_later_at_pickup cd:COD_payment_at_delivery
     //only order auto created. back office order ->shipment and either calls calls/informs shipper or calls/informs customer for pickup
     //For both raaspi POS screen is shown and either pays cash or via Square POS 
     //for now, enter item id and qty from shipment report into cartPOS and checkout to take payment. invoice auto created but payment manual ??
     // added a button to cartPOS to convert order (if shipment exists) to cartPOS entries   
     //find or create current pos order for the pos operator id/customer
     // check if shipment record exists for the order. if no give msg and exit
     // if yes,get the existing cart order details, update all setails order sid to current pos order sid 
     // then update existing order term as codcoppos for history.
     // the page should show the cart items under POS cart items
     // if pickup at store or employee at customer premise show raaspi checkoutPOS page.
     // customer will enter card and submit or give cash/chq or payment info like draft,email xfer ref# and employee
     // take cash/chq/draft payment.
     // if shipper delivers then they will take payment and settle later with the merchant. Employee will take it as cash/chq/draft paynent.
     // cart -> cartPOS and take card payment via Square POS terminal, cash or others (draft, settlement from post office) 
     // checkoutPOS creates invoice and can be printed or emailed. The invoice will act as receipt but 
     // backoffice need to follow up and use invoice>payment so that if card the money is captured and if cash etc mark as paid.
     //
     //if(r3Cart.getInSaleReady() && !r3Cart.getInConfirmed()){
     try{
      if(code.equals("pd")){
       // update order Terms later in shoppingCart to avoid premature exit via updateOrderTermCode
        r3Cart.saleNAproveRequest("PrePay and Delivery");//terms calls confirmPayment which takes order to invoice/shipment, emails
      }else{
       if(code.equals("pp")){
       // update order Terms later in shoppingCart
        r3Cart.saleNAproveRequest("PrePay and PickUp");
       }else{
        if(code.equals("np")){
          trexuq244xwwqqhxxxxxcuordersHome.updateOrderTermCode(fpxxfq1a5xwwqqhxxxxxitemList.getCurrentCartOrder("cart").get(0).getA0xxuobxbxxxxxxxxxxxsid(),"ToPay and PickUp");//cash/credit on pickup
          //needs back office followup 
        }else{
         if(code.equals("cd")){
          // need to mimic order to invoice/shipment and collect payment, check old logic
          // do not show unless loggedin and open  modal panel and collect addrress info if missing
          if(fpxxfq1a5xwwqqhxxxxxitemList.getCurrentCartOrder("cart")==null 
              || fpxxfq1a5xwwqqhxxxxxitemList.getCurrentCartOrder("cart").size()==0){
           FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
            FacesMessage.SEVERITY_ERROR,bundle.getString("Checkout")+" "+bundle.getString("error")+", "+bundle.getString("order")+" "+bundle.getString("not")+" "+bundle.getString("found")+" "+bundle.getString("for")+" "+bundle.getString("COD_payment_at_delivery") ,""));
            return "";
          }else{
           trexuq244xwwqqhxxxxxcuordersHome.updateOrderTermCode(fpxxfq1a5xwwqqhxxxxxitemList.getCurrentCartOrder("cart").get(0).getA0xxuobxbxxxxxxxxxxxsid(),"ToPay and Delivery");
           //needs back office followup
          }
          //needs back office followup
         }else{
          FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
           FacesMessage.SEVERITY_ERROR,bundle.getString("Checkout")+" "+bundle.getString("error")+", "+bundle.getString("unknown")+" "+bundle.getString("options")+" "+bundle.getString("code")+" "+code ,""));
           return "";

         } 
        }
       }
      }//top
     } catch ( Exception e){
          FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
           FacesMessage.SEVERITY_ERROR,bundle.getString("Checkout")+ " "+bundle.getString("error")+", "+ e.getMessage(),""));
           return "";
       }


     return "";
    }


    public String validateEmail(String email){
              try{
                       if(email == null || email.isEmpty()){
                        FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                         FacesMessage.SEVERITY_ERROR,bundle.getString("email")+ " "+email+" "+bundle.getString("invalid"),""));
                        customIdentity.setImailaddr(null);// otherwise checkout will continue
                        return "''?faces-redirect=true&includeViewParams=true";
                       }

                       //get type from order > item itself, it can come here from each type ie cart, basket etc
                       
                       String type="cart";// can it be pos???  check for null
                       if(this.instance !=null && !this.instance.getC6xxusxrbv16xxxxxxxxtype().equals("SI-D")){
                        type="basket";// check for null
                       }
                       Pattern pattern = Pattern.compile("^.+@.+\\..+$");
                       Matcher matcher = pattern.matcher(email);
                       if(!matcher.matches()){
                        FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                         FacesMessage.SEVERITY_ERROR,bundle.getString("email")+ " "+email+" "+bundle.getString("invalid"),""));
                        customIdentity.setImailaddr(null);// otherwise checkout will continue
                        return null;
                       }
                       // may need to update temp customer with email address, create order without email now allowed
                       Trexuq244xwwqqhxxxxxcuorders corder=fpxxfq1a5xwwqqhxxxxxitemList.getCurrentCartOrder(type).size()==0?null:fpxxfq1a5xwwqqhxxxxxitemList.getCurrentCartOrder(type).get(0);
                       // can come here before confirming order
                       if(corder == null){
                        return "''?faces-redirect=true&includeViewParams=true";
                       }
                       Jxxxuq201xwwqqhxxxxxcustomer customer=corder.getJxxxuq201xwwqqhxxxxxcustomer();
                       if ( customer!=null
                        && customer.getQ4xxhxxxbv24xxxxxxxximailaddr()==null
                         || customer.getQ4xxhxxxbv24xxxxxxxximailaddr().isEmpty()){
                        customer.setQ4xxhxxxbv24xxxxxxxximailaddr(email);
                        corder.setJxxxuq201xwwqqhxxxxxcustomer(customer);   
                       }           
                       //
                        jxxxuq201xwwqqhxxxxxcustomerHome.clearInstance();
                        jxxxuq201xwwqqhxxxxxcustomerHome.setInstance(customer);
                        jxxxuq201xwwqqhxxxxxcustomerHome.superUpdate();


  
                       //update temp user already created before email entered
                       if(yxxxuh566xwwqqwxxxxxuser == null){
                        yxxxuh566xwwqqwxxxxxuser=yxxxuh566xwwqqwxxxxxuserList.getKeyToEntity(customIdentity.getUsername());   
                       }
                       if(yxxxuh566xwwqqwxxxxxuser != null){
                        yxxxuh566xwwqqwxxxxxuser.setC1xxuxxxbvxxxxxxxxxxotherid(customIdentity.getImailaddr());
                        yxxxuh566xwwqqwxxxxxuserHome.clearInstance();
                        yxxxuh566xwwqqwxxxxxuserHome.setInstance(yxxxuh566xwwqqwxxxxxuser);
                        yxxxuh566xwwqqwxxxxxuserHome.superUpdate();
                       }
                        FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                         FacesMessage.SEVERITY_ERROR,bundle.getString("email")+ " "+email+" "+bundle.getString("will")+" "+bundle.getString("be")+" "+bundle.getString("used")+" "+bundle.getString("to")+" "+bundle.getString("notify") ,""));

                       return "''?faces-redirect=true&includeViewParams=true";
             } catch (Exception e) {
                        FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                         FacesMessage.SEVERITY_ERROR,bundle.getString("email")+ " "+email+" "+bundle.getString("validation")+" "+bundle.getString("error")+" "+ e.getMessage(),""));
                        customIdentity.setImailaddr(null);// otherwise checkout will continue
                        return null;
             }

    }    

    public String addProductToTrial(Fpxxfq1a5xwwqqhxxxxxitem product, BigDecimal quantity,String type) {
           // added trial instead of cart if miscode1 has trial1 or triala1 etc 1 or a1 is function
           //If trial+1,2,3,4 then existing 4 products like business,organization etc
           //If trial a1,a2,a3,a4 then addon products like stock count,ecommerce etc. Type here is type of request
           //item misccode1 trial or recur 5ch then 1 or 45 or a2 1 or 2ch then period 14 or 280 or 365 days
           //
           //item table misccode1 period is used if ratetable entry PC is used. If SC then each coupon value has period days
           //ratetable if type PC then maps item sid to function like ee or ef in incentive
           //ratetable if type DC then maps item sid to discount amt/% in step and coupn code in incentive
           //ratetable if type SC then maps item sid to period in value and coupn code in incentive
           //ratetable when creating random coupons put #random as incentive and number of coupons in step 
           // and period days in value. It will generate random coupon codes but replace incentive with coupon codes
           if(type.equals("trial")){
            String from=product.getY2xxuxxrbvxxxxxxxxxxmisccode1().substring(5);//skip trial prefix
            int period=14;//default 14 days trial period unless misccode1 overrides it
            if(from.length() > 1){// could a1 or a1xxx or 12 ie 2 days or 114 14 days trial or 4520 20 days trial
             // use a2 etc or 45 not 4 to allow using existing direct register via free trial link 
             try{
              if(from.substring(0,1).equals("a")||from.substring(0,1).equals("4")||from.substring(0,1).equals("6")||from.substring(0,1).equals("8")){
               if(from.length() > 2){
                period=Integer.parseInt(from.substring(2)); 
               }
               from=from.substring(0,2);
              }else{
               if(from.length() > 1){
                period=Integer.parseInt(from.substring(1)); 
               }
               from=from.substring(0,1);
              }
             } catch (Exception e) {
               FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                FacesMessage.SEVERITY_ERROR,"invalid value for product subscription code,contact support " + e.getMessage(),""));
                bcontinue=false;
                return null;
             }
           }
            switch(from){
             case "a1":
              return "/trial.wflow?email=mail@yourdomain.com&amp;registrationName=name&amp;websiteName=sitename&amp;functionGroup=a1"+period+"&amp;faces-redirect=true";
             case "a2":
              return "/trial.wflow?email=mail@yourdomain.com&amp;registrationName=name&amp;websiteName=sitename&amp;functionGroup=a2"+period+"&amp;faces-redirect=true";
             case "a3":
              return "/trial.wflow?email=mail@yourdomain.com&amp;registrationName=name&amp;websiteName=sitename&amp;functionGroup=a3"+period+"&amp;faces-redirect=true";
             case "a4":
              return "/trial.wflow?email=mail@yourdomain.com&amp;registrationName=name&amp;websiteName=sitename&amp;functionGroup=a4"+period+"&amp;faces-redirect=true";
             case "1":
              return "/register.wflow?email=mail@yourdomain.com&amp;registrationName=name&amp;websiteName=sitename&amp;functionGroup=1"+period+"&amp;faces-redirect=true";
             case "2":
              return "/register.wflow?email=mail@yourdomain.com&amp;registrationName=name&amp;websiteName=sitename&amp;functionGroup=2"+period+"&amp;faces-redirect=true";
             case "3":
              return "/register.wflow?email=mail@yourdomain.com&amp;registrationName=name&amp;websiteName=sitename&amp;functionGroup=3"+period+"&amp;faces-redirect=true";
             case "45":
              return "/register.wflow?email=mail@yourdomain.com&amp;registrationName=name&amp;websiteName=sitename&amp;functionGroup=45"+period+"&amp;faces-redirect=true";
             case "67":
              return "/register.wflow?email=mail@yourdomain.com&amp;registrationName=name&amp;websiteName=sitename&amp;functionGroup=67"+period+"&amp;faces-redirect=true";
             case "89":
              return "/register.wflow?email=mail@yourdomain.com&amp;registrationName=name&amp;websiteName=sitename&amp;functionGroup=89"+period+"&amp;faces-redirect=true";
             default :
               FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                 FacesMessage.SEVERITY_INFO,bundle.getString("invalid")+ " "+bundle.getString("request")+ "- "+ from,""));
            }  
           }
               return "";    

    }

    @Transactional
/**
    * called by ItemDetailsBrowse by customer and ItemDetailsPOS by backOffice to process free trial for a product
    * calls addProductToTrial if type trial or addProductToOrder for other types
    * @param arg2-2 quantity, type(trial or others)
    * sid from item selected comes overRideValue and calling sidToEntity   
    * @see "addProductToOrder"
*/

    public String addProductToOrderParam(BigDecimal quantity,String type) {
     // via form post passRow parameter value available. passing row via method param not reliable if from iterator
     try{
      fpxxfq1a5xwwqqhxxxxxitemli=fpxxfq1a5xwwqqhxxxxxitemList.getSidToEntity(Integer.parseInt(overRideValue));
     } catch (Exception ex) {
                 FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                   FacesMessage.SEVERITY_WARN,bundle.getString("Matcode")+" "+bundle.getString("record")+" "+bundle.getString("number")+" "+overRideValue+" "+bundle.getString("invalid")+", "+ex.getMessage(),""));
       return null;
     }
   
     if(type.equals("trial")){
      return addProductToTrial(fpxxfq1a5xwwqqhxxxxxitemli, quantity, type);
     }else{
      addProductToOrder(fpxxfq1a5xwwqqhxxxxxitemli, quantity, type);
      return null;
     }
    }

    @Transactional
/**
    * called by ItemDetailsBrowse(via addProductToOrderParam) /ItemDetailsBrow-1/itemsReviewSelect/ItemDetailsFees/ItemsPaidSelect/ItemSITree
    * /ItemsGetQuote/BlogSITree/cart/cartItem/cartPOS  for a product.
    * shopping(SI-D)/case(CI-D)/fee item (FI-D) in cart/basket
    * quantity is always 1 if not SI-D (shopping)
    * in case of reviewSelect, product refers to CI-L1 item since SI-D not created yet and will be created further down 
    * quantity passed is 0  if type basket, affects dummyaddress create
    * 
    * method calls customerHome.persist(),userHomePersist(),itemHome persist ,cuordersHome.cartpersist()(which in turn calls cuorderHome.persist())
    * if called by user UH role then case item source is backoffice user, case item miscode1 holdvalue2/customer 
    * case order agent is assigned employee
    *  allows backoffice to open case on behalf of customers and assign case to employee
    * @param args -3 item,quantity, type cart,basket or cartInvoice. cart covers both cart and cart(pos) 
    * At this point if order type is cart then term is blank because payment/deliv option not chosen yet
    * @see "addProductToOrderParam"
*/
    public void addProductToOrder(Fpxxfq1a5xwwqqhxxxxxitem product, BigDecimal quantity,String type) {
                 // moved on top to allow query without email/login
                 // order check for pos
                 if (quantity.compareTo( new BigDecimal("0.0")) != 0  && product.getB0xxziqxlvxxsaxxxxxxquantity().compareTo( new BigDecimal("1.0")) == -1){
                         // add logic to keep stat re out of stock
                          calendar.getTime();
                          if(product.getY5xxcxxrlxxxxxxxxxxxdatetorenew() !=null){
                           calendare.setTime(product.getY5xxcxxrlxxxxxxxxxxxdatetorenew());
                           if(calendare.before(calendar)){
                            FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("no")+ " "+bundle.getString("availibility")+ " "+bundle.getString("date"),""));

                           }else{
                            FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("expected")+ " "+bundle.getString("availibility")+ " "+ sdf.format(calendare.getTime()),""));

                           }
                          }else{
                                FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("no")+ " "+bundle.getString("availibility")+ " "+ bundle.getString("date"),""));

                          }
                         return;
                 } 

          String valueType="";
          if (!identity.isLoggedIn()){
                     //removed required and validation to allow email entries either at top or at bottom
                     // if imailAddr has value take it, otherwise take Alt and if none return
                     if(customIdentity.getImailaddr() !=null && !customIdentity.getImailaddr().isEmpty()){
                      //take it
                      // save this as attach in cuorder for later use in shopping cart 
                       Pattern pattern = Pattern.compile("^.+@.+\\..+$");
                       Matcher matcher = pattern.matcher(customIdentity.getImailaddr());
                       if(!matcher.matches()){
                        FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                         FacesMessage.SEVERITY_ERROR,bundle.getString("email")+ " "+bundle.getString("invalid"),""));

                        return;
                       }

                     }else{

                       //return; alert msg addded in view
                     }  

          }
          // both logged in or temp user, clear prev error msg
          FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
           FacesMessage.SEVERITY_INFO,bundle.getString(""),""));
          Integer sid=0;
	  Map<String,String> params = 
                FacesContext.getCurrentInstance().getExternalContext().getRequestParameterMap();
          /* 
          if (params.get("categoryJay") != null &&  !params.get("categoryJay").isEmpty()){ 
	   sid = Integer.parseInt(params.get("categoryJay"));
           // clear existing instance to force changing it, sometimes we want to get existing instance
           clearInstance();
           setFpxxfq1a5xwwqqhxxxxxitemA0xxuobxbxxxxxxxxxxxsid(sid);
           // jay are we not changing the product passed as parameter, debug and check
	   product=getDefinedInstance();

          }
      */

          // not logged in, so visitor shopping, not POS which is backoffice function
          if (!identity.isLoggedIn() && customIdentity.getOwner().equals("sss") ){
                     // bypass creating a new user, if continuing more purchase, overRideValue holds PO sid from checkOut
                     // return; use timestamp and ip to as owner, ip for analysis and timestamp with ms  to hide from some one else using same ip like in a cafe
                     // replace with real logon id later as part of payment or save as is but will stay as orphan for analysis and later purged  
                     // check same temp user or not, customIdentity is per session and values are for each session and is sss to start with
                     // check whether customIdent
           // put dummy address so that dummy shipment/pickup can be done for items to allow invoice etc
           String subKeyA=""; 
	   if (fxxxuq111xwwqqhxxxxxaddress == null) {
	    fxxxuq111xwwqqhxxxxxaddress=fxxxuq111xwwqqhxxxxxaddressHome.getInstance();
	   }
              if(fxxxuq111xwwqqhxxxxxaddress.getB1pxusa1bvxxxxxxxxxxaddrl1() == null){
               if(type.equals("basket")){//CI-D instance created further down no matcode yet
                fxxxuq111xwwqqhxxxxxaddress.setB1pxusa1bvxxxxxxxxxxaddrl1(notesToPass.length()>60?notesToPass.substring(0,60)+" address":notesToPass+" address");
               }else{
                fxxxuq111xwwqqhxxxxxaddress.setB1pxusa1bvxxxxxxxxxxaddrl1(this.instance.getA0xxukixbxxxxxxxxxxxmatcode()+" address");
               }
              }// city 20ch
              if(fxxxuq111xwwqqhxxxxxaddress.getB3xxh2acbv11xxxxxxxxcity() == null || fxxxuq111xwwqqhxxxxxaddress.getB3xxh2acbv11xxxxxxxxcity().isEmpty() ){
               if(type.equals("basket")){//CI-D instance created further down no matcode yet
                fxxxuq111xwwqqhxxxxxaddress.setB3xxh2acbv11xxxxxxxxcity(notesToPass.length()>14?notesToPass.substring(0,14)+" City":notesToPass+" City");
               }else{
                if(this.instance.getA0xxukixbxxxxxxxxxxxmatcode().length()>14){      
                 fxxxuq111xwwqqhxxxxxaddress.setB3xxh2acbv11xxxxxxxxcity(this.instance.getA0xxukixbxxxxxxxxxxxmatcode().substring(0,14)+" City");
                }else{
                 fxxxuq111xwwqqhxxxxxaddress.setB3xxh2acbv11xxxxxxxxcity(this.instance.getA0xxukixbxxxxxxxxxxxmatcode()+" City");
                } 
               }
              }
              subKeyA=fxxxuq111xwwqqhxxxxxaddress.getB1pxusa1bvxxxxxxxxxxaddrl1()+fxxxuq111xwwqqhxxxxxaddress.getB3xxh2acbv11xxxxxxxxcity();
              if (subKeyA.length() !=0){
               String subKeyh=Integer.toString(subKeyA.hashCode());//
               if (subKeyA.length() > 9){
                subKeyA=subKeyA.substring(0,10)+subKeyh;
               }
               else {
                subKeyA=subKeyA+subKeyh;//
               }
               

               fxxxuq111xwwqqhxxxxxaddress.setA0xxukbxbxxxxxxxxxxxaddrescode(subKeyA);
               fxxxuq111xwwqqhxxxxxaddress.setZzxxu2oxxhxxxxxxxxxxowner2(owner2Code);
               fxxxuq111xwwqqhxxxxxaddressHome.superdotpersist();// avoid persist recreates subkey etc);
               bcontinue=true;
              }else{
               FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                FacesMessage.SEVERITY_ERROR,bundle.getString("create")+" "+bundle.getString("address")+" "+subKey+" "+bundle.getString("error"),""));

               bcontinue=false;
              }
                      String ts=new SimpleDateFormat("yyyy.MM.dd.HH.mm.ss").format(new Date());
                      // use email as last name to help identify whose order
                      // same customer can buy multiple items in same session and be here again after a few secs, so reuse subkey 
                      if(subKey.isEmpty()){
                       subKey=ts.substring(17,19)+ts.substring(14,16)+ts.substring(11,13)+ts.substring(0,7)+userIP;
                       ownerCode=subKey+"sss";
                       customIdentity.setOwner(ownerCode);
                      }
                      // create temp customer record but needs to deleted later after stats, follow up etc
                      //viewscoped bean will retain values
 	              if (jxxxuq201xwwqqhxxxxxcustomer == null) {
 	               jxxxuq201xwwqqhxxxxxcustomer=jxxxuq201xwwqqhxxxxxcustomerHome.getInstance();

                       jxxxuq201xwwqqhxxxxxcustomer.setA0xxukxxbvxxxxxxxxxxcustomer(subKey);
                       jxxxuq201xwwqqhxxxxxcustomer.setZdxxutoxlhxxxxxxxxxxowner(ownerCode);
                       jxxxuq201xwwqqhxxxxxcustomer.setZzxxu2oxxhxxxxxxxxxxowner2(owner2Code);
                       jxxxuq201xwwqqhxxxxxcustomer.setF2xxuwmxbv40xxxxxxxxintegrset("DEFAULT");
                       jxxxuq201xwwqqhxxxxxcustomer.setC1xxuslnbvixxxxxxxxxlastname(customIdentity.getImailaddr());
                       jxxxuq201xwwqqhxxxxxcustomer.setQ4xxhxxxbv24xxxxxxxximailaddr(customIdentity.getImailaddr());
                       if (bcontinue){
                        jxxxuq201xwwqqhxxxxxcustomer.setFxxxuq111xwwqqhxxxxxaddressByMailtocode(fxxxuq111xwwqqhxxxxxaddress);
                       }
                       // email can be empty, logic added in validateEmail to update customer
                       // make drop down list unique if same email and ip is reused
                       jxxxuq201xwwqqhxxxxxcustomer.setY0xxuzsxbvxxxxxxxxxxdescript(ownerCode);
                       if(jxxxuq201xwwqqhxxxxxcustomerHome.superdotpersist()==null){//avoid persist recreates subkey etc
                        return;
                       }
                       // added logic to prompt for shipping address during checkout
	              }

                      // create temp user record , if temp user exists bypass creation 
 	              if (yxxxuh566xwwqqwxxxxxuser == null) {
 	               yxxxuh566xwwqqwxxxxxuser=yxxxuh566xwwqqwxxxxxuserHome.getInstance();
  
                       yxxxuh566xwwqqwxxxxxuser.setA0xxukuxbvxxxxxxxxxxid(subKey);
                       yxxxuh566xwwqqwxxxxxuser.setJxxxuq201xwwqqhxxxxxcustomer(jxxxuq201xwwqqhxxxxxcustomer);
                       yxxxuh566xwwqqwxxxxxuser.setZ5xxutoxlhxxxxxxxxxxowner(ownerCode);
                       yxxxuh566xwwqqwxxxxxuser.setZzxxu2oxxhxxxxxxxxxxowner2(owner2Code);
                       yxxxuh566xwwqqwxxxxxuser.setC1xxuxxxbvxxxxxxxxxxotherid(customIdentity.getImailaddr());
                       // not set yet, put logic in validateEmail to update temp user 
                       if(yxxxuh566xwwqqwxxxxxuserHome.superdotpersist()==null){
                        return;
                       }
	              }
                      customIdentity.setOwner(ownerCode);
                      // set currentUserName to this temp user 
                      customIdentity.setUsername(subKey);
                      // update usagebyperiods record to capture username and ip
                      Fxxxuq1bhxwwqqhxxxxxusagebyperiods usagebyperiods=null;

                 try{
                 usagebyperiods =(Fxxxuq1bhxwwqqhxxxxxusagebyperiods) entityManager
                  .createQuery(
                        "select cc from Fxxxuq1bhxwwqqhxxxxxusagebyperiods cc where cc.usagetrackerid = :nKeyName and cc.zzxxu2oxxhxxxxxxxxxxowner2 = :owner2 order by cc.a0xxuobxbxxxxxxxxxxxsid asc")
                       .setParameter("nKeyName","visitstats3r")
					.setParameter("owner2", owner2Code)
					.getSingleResult();
		} catch (Exception ex) {
                  //ignore will get caught in authenticator
		}
		if (usagebyperiods != null) {
                         usagebyperiods.setD5xxzc0rbxxxxxxxxxxxperiod0formulae(userIP);//current
                         if(!identity.isLoggedIn() && customIdentity.getOwner().equals("sss")){
                          if(customIdentity.getImailaddr().length()>10){
                           usagebyperiods.setD3xxul0rbvxxxxxxxxxxperiod0label(customIdentity.getImailaddr().substring(0,10));//current
                          }else{
                           usagebyperiods.setD3xxul0rbvxxxxxxxxxxperiod0label(customIdentity.getImailaddr());//current                        }
                           String lastVisitDt=new SimpleDateFormat("yyyy.MM.dd").format(Calendar.getInstance().getTime());
                           usagebyperiods.setE3xxul0rbvxxxxxxxxxxperiodtotalslabel(lastVisitDt);//current
                          }
                         }

                          fxxxuq1bhxwwqqhxxxxxusagebyperiodsHome.clearInstance();
                          fxxxuq1bhxwwqqhxxxxxusagebyperiodsHome.setInstance(usagebyperiods);
                          fxxxuq1bhxwwqqhxxxxxusagebyperiodsHome.superdotupdate();
                }

          }//end of not logged in
                 // loggedin/not logged in but customer exists/just created and user has a pointer for customer record
                 // for POS usage, user should have a customer record linked
	         if (trexuq244xwwqqhxxxxxcuorders == null) {
                      // getInstance() will create one  exclude orders of type COP/COD they are for backoffice
	              trexuq244xwwqqhxxxxxcuorders=trexuq244xwwqqhxxxxxcuordersHome.getInstance();
	         }

                 if(fpxxfq1a5xwwqqhxxxxxitemList.getCurrentCartOrder(type) !=null && !fpxxfq1a5xwwqqhxxxxxitemList.getCurrentCartOrder(type).isEmpty()){
                  trexuq244xwwqqhxxxxxcuorders =fpxxfq1a5xwwqqhxxxxxitemList.getCurrentCartOrder(type).get(0);//
                 }else{
                  trexuq244xwwqqhxxxxxcuorders =null;
                 }
                 /* 
                  try{

			 trexuq244xwwqqhxxxxxcuorders = (Trexuq244xwwqqhxxxxxcuorders) entityManager
 					.createQuery(
 							"select cc from Trexuq244xwwqqhxxxxxcuorders cc where cc.y9xxcxxxbv10xxxxxxxxtype = :t AND cc.zcxxzzfxhhxxxxxxxxxxstatusfl = :s and (c2xxcxxxbv09xxxxxxxxterms is  null or c2xxcxxxbv09xxxxxxxxterms = '' or (c2xxcxxxbv09xxxxxxxxterms !='COD' AND c2xxcxxxbv09xxxxxxxxterms !='COP' AND c2xxcxxxbv09xxxxxxxxterms !='POS')) and cc.zzxxu2oxxhxxxxxxxxxxowner2 = :p AND cc.zexxutoxlhxxxxxxxxxxowner=:owner ")
 					.setParameter("t", type).setParameter("s", mordered).setParameter("p", owner2Code).setParameter("owner", ownerCode)
 					.getSingleResult();
                  */
	            if (trexuq244xwwqqhxxxxxcuorders == null) {
	              trexuq244xwwqqhxxxxxcuorders=trexuq244xwwqqhxxxxxcuordersHome.getInstance();
	            }else{
                     currentCartedPO=trexuq244xwwqqhxxxxxcuorders.getA0xxuncobvxxxxxxxxxxpurchsno();
                     currentCartedPOSID=trexuq244xwwqqhxxxxxcuorders.getA0xxuobxbxxxxxxxxxxxsid();
                    } 
                 if(identity.isLoggedIn()){
                  // add logic for  (customIdentity.hasRole("UH") || customIdentity.hasRole("UQ")) ){
                  // jay add logic backoffice will handle POS for other users 
                 }

                Yxxxuh566xwwqqwxxxxxuser user=null;
                try{

                // do query against existing user or just created above  to get customer record and use that record below for customer
                // employee needs to be set up as customer if they want to buy
                // identity can have username from lastlogon, so use customIdentity.getOwner()
			user = (Yxxxuh566xwwqqwxxxxxuser) entityManager
 					.createQuery(
 							"select cc from Yxxxuh566xwwqqwxxxxxuser cc where cc.a0xxukuxbvxxxxxxxxxxid = :username and cc.zzxxu2oxxhxxxxxxxxxxowner2 = :owner2 ")
 					.setParameter("username", customIdentity.getOwner().substring(0,ownerCode.length()-3))
 					.setParameter("owner2", owner2Code)
 					.getSingleResult();
                        if (user == null){
                         FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_ERROR,bundle.getString("user")+" "+bundle.getString("null"),""));

                         return;
                        }
                        if(user.getC2xxuxuaiv38xxxxxxxxalevel() != null && user.getC2xxuxuaiv38xxxxxxxxalevel().equals("P")){
                         FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                          FacesMessage.SEVERITY_ERROR,bundle.getString("not")+" "+bundle.getString("allowed"),""));

                         return;
                        }
                        if(user.getJxxxuq201xwwqqhxxxxxcustomer()==null){
                         FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                          FacesMessage.SEVERITY_ERROR,bundle.getString("user")+ " "+bundle.getString("need")+ " "+ bundle.getString("customer")+ " "+ bundle.getString("record"),""));

                         FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                          FacesMessage.SEVERITY_ERROR,bundle.getString("use")+ " "+bundle.getString("edit")+ " "+ bundle.getString("user"),""));

                         return;
                        }

			 jxxxuq201xwwqqhxxxxxcustomer = (Jxxxuq201xwwqqhxxxxxcustomer) entityManager
 					.createQuery(
 							"select cc from Jxxxuq201xwwqqhxxxxxcustomer cc where cc.a0xxuobxbxxxxxxxxxxxsid = :customerId and cc.zzxxu2oxxhxxxxxxxxxxowner2 = :owner2 ")
 					.setParameter("customerId", user.getJxxxuq201xwwqqhxxxxxcustomer().getA0xxuobxbxxxxxxxxxxxsid())
 					.setParameter("owner2", owner2Code)
 					.getSingleResult();
                        if(jxxxuq201xwwqqhxxxxxcustomer !=null && jxxxuq201xwwqqhxxxxxcustomer.getQ4xxhxxxbv24xxxxxxxximailaddr()!=null){
                         this.setImailaddr(jxxxuq201xwwqqhxxxxxcustomer.getQ4xxhxxxbv24xxxxxxxximailaddr());
                        }

                } catch ( Exception e){
                  FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                   FacesMessage.SEVERITY_ERROR,bundle.getString("user")+ " "+bundle.getString("or")+" "+bundle.getString("customer")+" "+bundle.getString("error")+ " "+ bundle.getString("record")+" "+e.getMessage(),""));

                  return;
                }

               if (identity.isLoggedIn()){
                // shipping address will come from paypal/payment service, just make sure email address exists or entered
                // if not paypal ship address may not be there, then print ship/pick up label and 
                // hold it for pick up or manually find it
                //if( !product.getC3fbuxscbvxxxxxxxxxxshipcode().substring(0,1).equals("P") && !product.getC3fbuxscbvxxxxxxxxxxshipcode().substring(0,1).equals("X") ){
                 //if(customIdentity.getImailaddr() !=null && customIdentity.getImailaddr().isEmpty()){  
                  //FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                  //                   FacesMessage.SEVERITY_ERROR,bundle.getString("enter")+ " "+bundle.getString("email")+" "+bundle.getString("address"),""));

                 //} customIdentity.imail is for visitor only
               }else{
                //not logged in, allow pickup items, otherwise get shipping address from paypal
                // if shipping item but not via paypal, then print label, reduce qty and hold it and get ship address manually
                //if(!product.getC3fbuxscbvxxxxxxxxxxshipcode().substring(0,1).equals("P") && !product.getC3fbuxscbvxxxxxxxxxxshipcode().substring(0,1).equals("X") ){
                 if(customIdentity.getImailaddr() !=null && customIdentity.getImailaddr().isEmpty()){  
                  //FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                  // FacesMessage.SEVERITY_ERROR,bundle.getString("enter")+ " "+bundle.getString("email")+" "+bundle.getString("address"),""));

                  //return; //check in checkout
                 }
               }    


 	          if (user != null && type.equals("basket") && product.getC6xxusxrbv16xxxxxxxxtype().equals("FI-D")) {
                   //if prepay option check against userprofl footer counter
                      BigDecimal paidLimit=new BigDecimal("0.0");
                      try{
                       yxxxch575xwwqqhxxxxxuserprofl=yxxxuh566xwwqqwxxxxxuserList.getUserProfiles();
                       if (yxxxch575xwwqqhxxxxxuserprofl != null && yxxxch575xwwqqhxxxxxuserprofl.getE4xxzxxxlvxxxxxxxxxxfooter() != null){
                        paidLimit=yxxxch575xwwqqhxxxxxuserprofl.getE4xxzxxxlvxxxxxxxxxxfooter();
                       }
                      }catch (Exception ignore){
                      } 
                      if(paidLimit.compareTo(new BigDecimal("0.0")) == -1){
                       FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                 FacesMessage.SEVERITY_ERROR,bundle.getString("prepaid")+ " "+bundle.getString("limit")+" "+bundle.getString("exceeded")+" "+bundle.getString("or")+" "+bundle.getString("not")+" "+bundle.getString("prepaid"),""));

                       return;
                      }
                     
	          }
      // handling cuuorder for CI-L1 and other item types
      // order number will be created or reused under cuorder persist logic which is called by cartpersist below
      // if item type case ie CI-L1, create a new case item (CI-D) and capture any new notes as its child item to keep
      // chronological history and allow tree viewing
      // look into doing for FI-D as well 
    try{
      if (product.getC6xxusxrbv16xxxxxxxxtype().equals("CI-L1")){
       // we do not need the original item, it was like a category, for FI-D we may need the original ? 
       fpxxfq1a5xwwqqhxxxxxitemHome.clearInstance();
       fpxxfq1a5xwwqqhxxxxxitem=fpxxfq1a5xwwqqhxxxxxitemHome.getInstance();
       String header=this.getNotesToPass().trim();
       header=header.length()>60?header.substring(0,60):header;
       if(identity.isLoggedIn() && (customIdentity.hasRole("UH") || customIdentity.hasRole("UQ")) ){
        //use item decription entered by backoffice
        String d120=bundle.getString("item")+": "+customIdentity.getHoldValue()+" "+bundle.getString("customer")+": "+customIdentity.getHoldValue2()+" " +bundle.getString("assigned")+": "+customIdentity.getHoldValue3()+", "+header;
        if(d120.length()>120){
         d120=d120.substring(0,120);
        }
        fpxxfq1a5xwwqqhxxxxxitem.setB1xxuszsbvxxxxxxxxxxdescript(d120);
       }else{
        //item is the case detail, if VH or PH use temp customer info
        fpxxfq1a5xwwqqhxxxxxitem.setB1xxuszsbvxxxxxxxxxxdescript(jxxxuq201xwwqqhxxxxxcustomer.getC1xxuslnbvixxxxxxxxxlastname()+jxxxuq201xwwqqhxxxxxcustomer.getA0xxukxxbvxxxxxxxxxxcustomer()+header);
       }
       timeStamp = new SimpleDateFormat("yyyy.MM.dd.HH.mm.ss").format(new Date());
       fpxxfq1a5xwwqqhxxxxxitem.setW7xxuznxbvxxxxxxxxxxnotes(timeStamp+":"+this.getNotesToPass());
       fpxxfq1a5xwwqqhxxxxxitem.setC6xxusxrbv16xxxxxxxxtype("CI-D");
       calendar.setTime(Calendar.getInstance().getTime());
       calendar.add(Calendar.MONTH, 3);
       fpxxfq1a5xwwqqhxxxxxitem.setZ2xxcxxrlxxxxxxxxxxxdateexpiry(calendar.getTime());
       if(identity.isLoggedIn() && (customIdentity.hasRole("UH") || customIdentity.hasRole("UQ")) ){
        fpxxfq1a5xwwqqhxxxxxitem.setY2xxuxxrbvxxxxxxxxxxmisccode1(customIdentity.getHoldValue2());// holdvalue2
        //try getting customer info using holdvalue2 and use it 
        if(jxxxuq201xwwqqhxxxxxcustomerList.getSuggestList("keyWord").size() > 1){
          //FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
            //FacesMessage.SEVERITY_INFO,bundle.getString("name")+ " "+bundle.getString("entered")+ " "+bundle.getString("returning")+ " "+bundle.getString("multiple")+" "+bundle.getString("records")+ ", "+bundle.getString("continuing")+" "+bundle.getString("for")+" "+bundle.getString("now")+", "+bundle.getString("may")+" "+bundle.getString("edit")+" "+bundle.getString("later"),""));
        }else{
          //if not null , use it jay to be done       
        }
        //
        fpxxfq1a5xwwqqhxxxxxitemHome.persist();
       }else{
        fpxxfq1a5xwwqqhxxxxxitemHome.persist();
       }
       this.setNotesToPass("");//avoid reusing the same content
       trexuq244xwwqqhxxxxxcuorders.setFpxxfq1a5xwwqqhxxxxxitem(fpxxfq1a5xwwqqhxxxxxitem);
      }else{
        // update item tempqty with qty ordrrd
        product.setTempQuantity(quantity);
       trexuq244xwwqqhxxxxxcuorders.setFpxxfq1a5xwwqqhxxxxxitem(product);
      }
      trexuq244xwwqqhxxxxxcuorders.setJxxxuq201xwwqqhxxxxxcustomer(jxxxuq201xwwqqhxxxxxcustomer);
      // make type basket if prepaid and/or for approval
      if(type.equals("basket")){
       trexuq244xwwqqhxxxxxcuorders.setY9xxcxxxbv10xxxxxxxxtype("basket");
      }else{
       trexuq244xwwqqhxxxxxcuorders.setY9xxcxxxbv10xxxxxxxxtype("cart");
       product.setTempQuantity(quantity);
       // replace selprice with new if change enddate is not in future ie not temp change.
       couponValue=BigDecimal.ZERO;//deduction
       saleValue=BigDecimal.ZERO;//deduction not saleprice
       String stepNamekey=product.getA0xxuobxbxxxxxxxxxxxsid()+"";// use sidS not matcode
       if(stepNamekey.length()>32){
        stepNamekey=stepNamekey.substring(0,32);
       }
       couponValue=yxxxuq591xwwqqhxxxxxrate1fList.getCouponCodeValue(stepNamekey);//uses entered couponCode value  
       valueType=yxxxuq591xwwqqhxxxxxrate1fList.getCouponCodeValueType(stepNamekey);
       //if(couponValue.compareTo(new BigDecimal("-999.09")) == 0){
        //return; //error msg given by rate1flist, jay check if any db change then need to raise exception to roll back
       //} may not care about coupon  check for null
       if(product.getC1xxzxxxbhxxsxxxxxxxspricnew() != null && product.getC1xxzxxxbhxxsxxxxxxxspricnew().compareTo(BigDecimal.ZERO) > 0 
          && product.getH1xxcxxrbxxxxxxxxxxxeffdate() !=null && product.getH1xxcxxrbxxxxxxxxxxxeffdate().compareTo(Calendar.getInstance().getTime()) >0 ){//sale in effect
        //check sale and coupon
        saleValue=product.getB8fbzpxxbvxxxxxxxxxxselprice().subtract(product.getC1xxzxxxbhxxsxxxxxxxspricnew());
        if(valueType.equals("DC%")){
         couponValue=product.getB8fbzpxxbvxxxxxxxxxxselprice().multiply(couponValue).divide(new BigDecimal("100.00"));
        }else{
        }
        if((couponValue.compareTo(BigDecimal.ZERO) == 0) || (couponValue.compareTo(BigDecimal.ZERO) != 0 && saleValue.subtract(couponValue).compareTo(BigDecimal.ZERO)>0)){//sale is better than regular-coupon
         if(couponValue.compareTo(BigDecimal.ZERO) != 0){
          FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
           FacesMessage.SEVERITY_INFO,bundle.getString("Coupon")+ " "+bundle.getString("apply")+ " "+bundle.getString("to")+ " "+bundle.getString("regular")+ " "+bundle.getString("price")+ " "+bundle.getString("only"),""));
          FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
           FacesMessage.SEVERITY_INFO,bundle.getString("Sale")+ " "+bundle.getString("price")+ " "+bundle.getString("saving")+ " "+saleValue+" "+bundle.getString("applied")+ ", "+bundle.getString("which")+ " "+bundle.getString("is")+ " "+bundle.getString("lower")+ " "+bundle.getString("than")+ " "+bundle.getString("coupon")+ " "+bundle.getString("saving")+" "+couponValue,""));
         }else{
          FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
           FacesMessage.SEVERITY_INFO,bundle.getString("Sale")+ " "+bundle.getString("price")+ " "+bundle.getString("saving")+ " "+saleValue+" "+bundle.getString("applied"),""));
         }
         if(product.getC2fbcxxrehxxsxxxxxxxspriceffdt().compareTo(Calendar.getInstance().getTime()) <= 0 && product.getH1xxcxxrbxxxxxxxxxxxeffdate().compareTo(Calendar.getInstance().getTime()) >=0 ){
          discountValue=saleValue;//item selprice does not change, but order ordprice will be selprice-discountValue
         }
        }else{//coupon has value and regular price minus coupon better than sale price
         discountValue=couponValue;//item selprice does not change, but order ordprice will be selprice-discountValue 
         FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
          FacesMessage.SEVERITY_INFO,bundle.getString("Coupon")+ " "+bundle.getString("apply")+ " "+bundle.getString("to")+ " "+bundle.getString("regular")+ " "+bundle.getString("price")+ " "+bundle.getString("only"),""));
         FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
          FacesMessage.SEVERITY_INFO,bundle.getString("Coupon")+ " "+bundle.getString("value")+ " "+bundle.getString("of")+ " "+couponValue+" "+bundle.getString("applied"),""));
        }
       }else{//no sale check coupon only
        if(valueType.equals("DC%")){
         couponValue=product.getB8fbzpxxbvxxxxxxxxxxselprice().multiply(couponValue).divide(new BigDecimal("100.00"));
        }else{
        }
        if(couponValue.compareTo(BigDecimal.ZERO) != 0){//no sale only coupon
         discountValue=couponValue;//item selprice does not change, but order ordprice will be selprice-discountValue 
         FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
          FacesMessage.SEVERITY_INFO,bundle.getString("Coupon")+ " "+bundle.getString("value")+ " "+bundle.getString("of")+ " "+couponValue+" "+bundle.getString("applied"),""));
        }else{//no sale or coupon , no change to price
         // ignore only if no coupon code entered
         if(couponCode !=null && !couponCode.isEmpty()){
          FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
           FacesMessage.SEVERITY_INFO,bundle.getString("Coupon")+ " "+bundle.getString("value")+ " "+bundle.getString("of")+ " "+couponCode+" "+bundle.getString("not")+" "+bundle.getString("matching")+", "+bundle.getString("clear")+" "+bundle.getString("it")+" "+bundle.getString("to")+" "+bundle.getString("continue"),""));
          return;         
         }
        } 
       }
      }
      customIdentity.setDiscountValue(discountValue);//save as session variable, value can be absolute or in %
      customIdentity.setDiscountType(valueType);  //DC or DC% 
      // discount value/type is calculted in itemHome but actual usage is in cuorders and passed via session variable
      trexuq244xwwqqhxxxxxcuorders.setYbxxuxxrblxxxxxxxxxxattach(customIdentity.getImailaddr());
      // establish customer key from customer name key word and put item ordered involved  in misccode1 of new case item
      // user to act as misccode1 in new case item , user (UH) as agent in new case order 
      if(identity.isLoggedIn() && (customIdentity.hasRole("UH") || customIdentity.hasRole("UQ")) ){
        // case order agent field will have assigned to employee entity 
        trexuq244xwwqqhxxxxxcuorders.setJxxxbh400xwwqqhxxxxxemployee(jxxxbh400xwwqqhxxxxxemployeeList.getKeyToEntity(customIdentity.getHoldValue3()));
      }
      trexuq244xwwqqhxxxxxcuorders.setZexxutoxlhxxxxxxxxxxowner(customIdentity.getOwner());
      trexuq244xwwqqhxxxxxcuorders.setZzxxu2oxxhxxxxxxxxxxowner2(owner2Code);
      if(type.equals("pos")){
       trexuq244xwwqqhxxxxxcuorders.setC2xxcxxxbv09xxxxxxxxterms("POS");  
      }     
      // empty cart deletetes orderdetails but keeps the cuorder for reuse , cuorder should be close status (deleted via batch ) after shipment and payment
      // below will create/update cuorder and also create new orderdetails under createcdetails method 
      // where it copies item/customer info from cuorder instance
      // and calculate order details line cost and total order cost under persistrunt method 
      // parameter o tells that it came from shopping cart
      trexuq244xwwqqhxxxxxcuordersHome.setInstance(trexuq244xwwqqhxxxxxcuorders);
      currentCartedPOSID=trexuq244xwwqqhxxxxxcuorders.getA0xxuobxbxxxxxxxxxxxsid();
      // cartpersist persists cuorder first and then cuodetails logic is complicated. createcdetails create details
      // debug and find a place to add default ship option and then also apply customer chosen ship option cost
      Integer currentDetailLine=0;
      if (fpxxfq1a5xwwqqhxxxxxitemList.getCartedList(type) != null){
       currentDetailLine = fpxxfq1a5xwwqqhxxxxxitemList.getCartedList(type).size();
      }
      // call updatedetailsall 
      //-----------order final processing here via moreToCart or cartpersist----------------------------
      //
      if(currentDetailLine > 0){
          trexuq244xwwqqhxxxxxcuordersHome.setInstance(trexuq244xwwqqhxxxxxcuorders);
          trexuq244xwwqqhxxxxxcuordersHome.moreToCart();
          // more clears details but does not put new item may need to put this in txns logic
          xoxxuq2b4xwwqqhxxxxxcuodetailsHome.getInstance().setFpxxfq1a5xwwqqhxxxxxitem(product);
          trexuq244xwwqqhxxxxxcuordersHome.updateDetailsAll();               
      }else{
       trexuq244xwwqqhxxxxxcuordersHome.cartpersist(currentCartedPOSID,"o",currentDetailLine,quantity);
      }
       // error msg if any already produced in called method
       trexuq244xwwqqhxxxxxcuordersHome.clearInstance();
       // after persist cartCnt should have a value but not sure why query is not doing flush
       //call keyvalue to force feching each time item added
       if (fpxxfq1a5xwwqqhxxxxxitemList.getCartedList(type) != null && fpxxfq1a5xwwqqhxxxxxitemList.getCartedList(type).size()>0){
        trexuq244xwwqqhxxxxxcuordersList.getKeyValue(fpxxfq1a5xwwqqhxxxxxitemList.getCartedList(type).get(0).getTrexuq244xwwqqhxxxxxcuorders().getA0xxuobxbxxxxxxxxxxxsid());
       } 
       if (fpxxfq1a5xwwqqhxxxxxitemList.getCartedList(type) != null){
        int cartCnt=fpxxfq1a5xwwqqhxxxxxitemList.getCartedList(type).size();
        if (cartCnt < 1){ 
         if (customIdentity.isDebug()){
          FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
           FacesMessage.SEVERITY_INFO,bundle.getString("item")+ " "+product.getA0xxukixbxxxxxxxxxxxmatcode()+" "+bundle.getString("added")+" "+bundle.getString("to")+" "+bundle.getString("cart"),""));
         }
         if(type.equals("basket")){
          //if (customIdentity.isDebug()){
           FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
            FacesMessage.SEVERITY_INFO,bundle.getString("click")+ " "+bundle.getString("on")+ " "+bundle.getString("folder")+ " "+bundle.getString("to")+ " "+bundle.getString("continue")+ " / "+bundle.getString("submit"),""));
          //}
          customIdentity.setHoldValue("");
          customIdentity.setHoldValue2("");
          customIdentity.setHoldValue3("");

         }else{
              //if (customIdentity.isDebug()){ 
               FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                FacesMessage.SEVERITY_INFO,bundle.getString("click")+ " "+bundle.getString("on")+ " "+bundle.getString("cart")+ " / "+bundle.getString("checkout")+ " "+bundle.getString("to")+ " "+bundle.getString("place")+ " "+bundle.getString("order")+ " "+bundle.getString("or")+ " "+bundle.getString("select")+ " "+bundle.getString("Next")+ " "+bundle.getString("Item"),""));
              //}
              customIdentity.setDiscountValue(BigDecimal.ZERO);
              customIdentity.setDiscountType("");//clear so that next cart/backoffice order does not use previous value

         } 
        }else{
         if (customIdentity.isDebug()){
          FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
           FacesMessage.SEVERITY_INFO,bundle.getString("item")+" "+product.getA0xxukixbxxxxxxxxxxxmatcode()+ " "+bundle.getString("added"),""));
         }
         if(type.equals("basket")){
          FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
           FacesMessage.SEVERITY_INFO,bundle.getString("click")+ " "+bundle.getString("on")+ " "+bundle.getString("folder")+ " "+bundle.getString("to")+ " "+bundle.getString("continue")+ " / "+bundle.getString("submit"),""));

         }else{
          if (customIdentity.isDebug()){
           FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
            FacesMessage.SEVERITY_INFO,bundle.getString("click")+ " "+bundle.getString("on")+ " "+bundle.getString("cart")+ " "+bundle.getString("to")+ " "+bundle.getString("place")+ " "+bundle.getString("order")+ " "+bundle.getString("or")+ " "+bundle.getString("select")+ " "+bundle.getString("Next")+ " "+bundle.getString("Item"),""));
          } 
         } 
        }
       }else{
         if(type.equals("basket")){
          FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
           FacesMessage.SEVERITY_INFO,bundle.getString("click")+ " "+bundle.getString("on")+ " "+bundle.getString("folder")+ " "+bundle.getString("to")+ " "+bundle.getString("continue")+ " / "+bundle.getString("submit"),""));

         }else{
           FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
            FacesMessage.SEVERITY_INFO,bundle.getString("click")+ " "+bundle.getString("on")+ " "+bundle.getString("cart")+ " "+bundle.getString("to")+ " "+bundle.getString("place")+ " "+bundle.getString("order")+ " "+bundle.getString("or")+ " "+bundle.getString("select")+ " "+bundle.getString("Next")+ " "+bundle.getString("Item"),""));

         } 
       } 
    } catch ( Exception e){
      if(type.equals("basket")){
       FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
        FacesMessage.SEVERITY_ERROR,bundle.getString("basket")+ " "+bundle.getString("submit")+ " "+bundle.getString("error")+ " "+e.getMessage(),""));
      }else{

       FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
        FacesMessage.SEVERITY_ERROR,bundle.getString("shopping")+ " "+bundle.getString("cart")+ " "+bundle.getString("error")+ " "+e.getMessage(),""));
                customIdentity.setDiscountValue(BigDecimal.ZERO);
                customIdentity.setDiscountType("");//clear so that next cart/backoffice order does not use previous value

      }
   }
  }

//----------------------------
    @Transactional
    public void addProductToQuote(Fpxxfq1a5xwwqqhxxxxxitem product, BigDecimal quantity,String type) {
/**
    * @param args -3
    * product ie item , this method is called by ItemDetailsBrowse for each
    * shopping(SI-(q)
    * type cart
    * method called customerHome.persist(),userHomePersist(),itemHome persist ,cuquoteHome.cartpersist()(which in turn calls cuorderHome.persist())
    * if called by user UH role then case item source is backoffice user, case item miscode1 holdvalue2/customer 
*/
          String valueType="";
          if (!identity.isLoggedIn()){
                     //removed required and validation to allow email entries either at top or at bottom
                     // if imailAddr has value take it, otherwise take Alt and if none return
                     if(customIdentity.getImailaddr() !=null && !customIdentity.getImailaddr().isEmpty()){
                      //take it
                     }else{
                       FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                        FacesMessage.SEVERITY_ERROR,bundle.getString("enter")+ " "+bundle.getString("email")+ " "+bundle.getString("address"),""));

                       return;
                     }  
                     // save this as attach in cuquote for later use in shopping cart 
                       Pattern pattern = Pattern.compile("^.+@.+\\..+$");
                       Matcher matcher = pattern.matcher(customIdentity.getImailaddr());
                       if(!matcher.matches()){
                        FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                         FacesMessage.SEVERITY_ERROR,bundle.getString("email")+ " "+bundle.getString("invalid"),""));

                        return;
                       }

          }
          // for now just send email to client email as notify for manual entry
         
          String msg="@notify-"+product.getA0xxukixbxxxxxxxxxxxmatcode()+" qty "
           +quantity.setScale(2, RoundingMode.HALF_UP)+" type "+type+" for "+customIdentity.getImailaddr();
          if(!msg.isEmpty()){
           try{
            sqlSupport.emailRender(msg);
            // added email to customer as well
            msg="@notifC-"+customIdentity.getImailaddr()+", Quotation Request received for "+product.getB1xxuszsbvxxxxxxxxxxdescript()+" quantity "
            +quantity.setScale(2, RoundingMode.HALF_UP);
            sqlSupport.emailRender(msg);
            FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
             FacesMessage.SEVERITY_INFO,bundle.getString("Quotation")+ " "+bundle.getString("request")+ " "+bundle.getString("received")+", "+bundle.getString("email")+ " "+bundle.getString("sent"),""));

            return;
           } catch (Exception ex) {
             FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
              FacesMessage.SEVERITY_ERROR,bundle.getString("quote")+ " "+product.getA0xxukixbxxxxxxxxxxxmatcode()+" "+bundle.getString("email")+ " "+bundle.getString("failed")+ ", "+bundle.getString("notify")+ " "+bundle.getString("support"),""));
             log.severe("Error quotation "+ msg+" "+ex.getMessage());

            return;
                  
           }
          }

          // both logged in or temp user, clear prev error msg
          FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
           FacesMessage.SEVERITY_INFO,bundle.getString(""),""));
          Integer sid=0;
	  Map<String,String> params = 
                FacesContext.getCurrentInstance().getExternalContext().getRequestParameterMap();
       /*
          if (params.get("categoryJay") != null &&  !params.get("categoryJay").isEmpty()){ 
	   sid = Integer.parseInt(params.get("categoryJay"));
           // clear existing instance to force changing it, sometimes we want to get existing instance
           clearInstance();
           setFpxxfq1a5xwwqqhxxxxxitemA0xxuobxbxxxxxxxxxxxsid(sid);
           // jay are we not changing the product passed as parameter, debug and check
	   product=getDefinedInstance();

          }
       */ 
                 if (quantity.compareTo( new BigDecimal("0.0")) != 0  && product.getB0xxziqxlvxxsaxxxxxxquantity().compareTo( new BigDecimal("1.0")) == -1){
                         // add logic to keep stat re out of stock
                          calendar.getTime();
                          if(product.getY5xxcxxrlxxxxxxxxxxxdatetorenew() !=null){
                           calendare.setTime(product.getY5xxcxxrlxxxxxxxxxxxdatetorenew());
                           if(calendare.before(calendar)){
                            FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                             FacesMessage.SEVERITY_INFO,bundle.getString("no")+ " "+bundle.getString("availibility")+ " "+bundle.getString("date"),""));

                           }else{
                            FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                             FacesMessage.SEVERITY_INFO,bundle.getString("expected")+ " "+bundle.getString("availibility")+ " "+ sdf.format(calendare.getTime()),""));

                           }
                          }else{
                           FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                            FacesMessage.SEVERITY_INFO,bundle.getString("no")+ " "+bundle.getString("availibility")+ " "+ bundle.getString("date"),""));

                          }
                         return;
                 } 
                 // not logged in 
                 if (!identity.isLoggedIn() && customIdentity.getOwner().equals("sss") ){
                     // bypass creating a new user, if continuing more purchase, overRideValue holds PO sid from checkOut
                     // return; use timestamp and ip to as owner, ip for analysis and timestamp with ms  to hide from some one else using same ip like in a cafe
                     // replace with real logon id later as part of payment or save as is but will stay as orphan for analysis and later purged  
                     // check same temp user or not, customIdentity is per session and values are for each session and is sss to start with
                     // check whether customIdent
                      String ts=new SimpleDateFormat("yyyy.MM.dd.HH.mm.ss").format(new Date());
                      // use email as last name to help identify whose order
                      // same customer can buy multiple items in same session and be here again after a few secs, so reuse subkey 
                      if(subKey.isEmpty()){
                       subKey=ts.substring(17,19)+ts.substring(14,16)+ts.substring(11,13)+ts.substring(0,7)+userIP;
                       ownerCode=subKey+"sss";
                       customIdentity.setOwner(ownerCode);
                      }
                      // create temp customer record but needs to deleted later after stats, follow up etc
                      //viewscoped bean will retain values
 	              if (jxxxuq201xwwqqhxxxxxcustomer == null) {
 	               jxxxuq201xwwqqhxxxxxcustomer=jxxxuq201xwwqqhxxxxxcustomerHome.getInstance();

                       jxxxuq201xwwqqhxxxxxcustomer.setA0xxukxxbvxxxxxxxxxxcustomer(subKey);
                       jxxxuq201xwwqqhxxxxxcustomer.setZdxxutoxlhxxxxxxxxxxowner(ownerCode);
                       jxxxuq201xwwqqhxxxxxcustomer.setZzxxu2oxxhxxxxxxxxxxowner2(owner2Code);
                       jxxxuq201xwwqqhxxxxxcustomer.setF2xxuwmxbv40xxxxxxxxintegrset("DEFAULT");
                       jxxxuq201xwwqqhxxxxxcustomer.setC1xxuslnbvixxxxxxxxxlastname(customIdentity.getImailaddr());
                       jxxxuq201xwwqqhxxxxxcustomer.setQ4xxhxxxbv24xxxxxxxximailaddr(customIdentity.getImailaddr());
                       // make drop down list unique if same email and ip is reused
                       jxxxuq201xwwqqhxxxxxcustomer.setY0xxuzsxbvxxxxxxxxxxdescript(ownerCode);
                       if(jxxxuq201xwwqqhxxxxxcustomerHome.persist()==null){
                        return;
                       }
                       // added logic to prompt for shipping address during checkout
	              }

                      // create temp user record , if temp user exists bypass creation 
 	              if (yxxxuh566xwwqqwxxxxxuser == null) {
 	               yxxxuh566xwwqqwxxxxxuser=yxxxuh566xwwqqwxxxxxuserHome.getInstance();
  
                       yxxxuh566xwwqqwxxxxxuser.setA0xxukuxbvxxxxxxxxxxid(subKey);
                       yxxxuh566xwwqqwxxxxxuser.setJxxxuq201xwwqqhxxxxxcustomer(jxxxuq201xwwqqhxxxxxcustomer);
                       yxxxuh566xwwqqwxxxxxuser.setZ5xxutoxlhxxxxxxxxxxowner(ownerCode);
                       yxxxuh566xwwqqwxxxxxuser.setZzxxu2oxxhxxxxxxxxxxowner2(owner2Code);
                       yxxxuh566xwwqqwxxxxxuser.setC1xxuxxxbvxxxxxxxxxxotherid(customIdentity.getImailaddr());
                       if(yxxxuh566xwwqqwxxxxxuserHome.persist()==null){
                        return;
                       }
	              }
                      customIdentity.setOwner(ownerCode);
                      // set currentUserName to this temp user 
                      customIdentity.setUsername(subKey);
                      // update usagebyperiods record to capture username and ip
                 Fxxxuq1bhxwwqqhxxxxxusagebyperiods usagebyperiods=null;

                 try{
                 usagebyperiods =(Fxxxuq1bhxwwqqhxxxxxusagebyperiods) entityManager
					.createQuery(
							"select cc from Fxxxuq1bhxwwqqhxxxxxusagebyperiods cc where cc.usagetrackerid = :nKeyName and cc.zzxxu2oxxhxxxxxxxxxxowner2 = :owner2 order by cc.a0xxuobxbxxxxxxxxxxxsid asc")
					.setParameter("nKeyName","visitstats3r")
					.setParameter("owner2", owner2Code)
					.getSingleResult();
		} catch (Exception ex) {
                  //ignore will get caught in authenticator
		}
		if (usagebyperiods != null) {
                         usagebyperiods.setD5xxzc0rbxxxxxxxxxxxperiod0formulae(userIP);//current
                         if(!identity.isLoggedIn() && customIdentity.getOwner().equals("sss")){
                          if(customIdentity.getImailaddr().length()>10){
                           usagebyperiods.setD3xxul0rbvxxxxxxxxxxperiod0label(customIdentity.getImailaddr().substring(0,10));//current
                          }else{
                           usagebyperiods.setD3xxul0rbvxxxxxxxxxxperiod0label(customIdentity.getImailaddr());//current                        }
                           String lastVisitDt=new SimpleDateFormat("yyyy.MM.dd").format(Calendar.getInstance().getTime());
                           usagebyperiods.setE3xxul0rbvxxxxxxxxxxperiodtotalslabel(lastVisitDt);//current
                          }
                         }

                          fxxxuq1bhxwwqqhxxxxxusagebyperiodsHome.clearInstance();
                          fxxxuq1bhxwwqqhxxxxxusagebyperiodsHome.setInstance(usagebyperiods);
                          fxxxuq1bhxwwqqhxxxxxusagebyperiodsHome.superdotupdate();


                }



                 }
                 // loggedin/not logged in but customer exists/just created and user has a pointer for customer record
	         if (trexuq233xwwqqhxxxxxcuquote == null) {
                      // getInstance() will create one 
	              trexuq233xwwqqhxxxxxcuquote=trexuq233xwwqqhxxxxxcuquoteHome.getInstance();
	         }

                 try{
		  trexuq233xwwqqhxxxxxcuquote = (Trexuq233xwwqqhxxxxxcuquote) entityManager
 		 .createQuery(
 		 "select cc from Trexuq233xwwqqhxxxxxcuquote cc where cc.b5xxuxxrbl10xxxxxxxxtype = :t AND cc.z5xxzzfxhhxxxxxxxxxxstatusfl = :s and cc.zzxxu2oxxhxxxxxxxxxxowner2 = :p AND cc.zexxutoxlhxxxxxxxxxxowner=:owner ")
 		 .setParameter("t", type).setParameter("s", mordered).setParameter("p", owner2Code).setParameter("owner", ownerCode)
 		 .getSingleResult();
	            if (trexuq233xwwqqhxxxxxcuquote == null) {
	              trexuq233xwwqqhxxxxxcuquote=trexuq233xwwqqhxxxxxcuquoteHome.getInstance();
	            }else{
                     currentCartedPO=trexuq233xwwqqhxxxxxcuquote.getA0xxuncqbvxxxxxxxxxxpurchsno();
                     currentCartedPOSID=trexuq233xwwqqhxxxxxcuquote.getA0xxuobxbxxxxxxxxxxxsid();
                    } 
                 }catch (Exception ignore){
                 }
                 if(identity.isLoggedIn()){
                  // add logic for  (customIdentity.hasRole("UH") || customIdentity.hasRole("UQ")) ){
                  // jay add logic backoffice will handle POS for other users 
                 }

                Yxxxuh566xwwqqwxxxxxuser user=null;
                try{

                // do query against existing user or just created above  to get customer record and use that record below for customer
                // employee needs to be set up as customer if they want to buy
                // identity can have username from lastlogon, so use customIdentity.getOwner()
			user = (Yxxxuh566xwwqqwxxxxxuser) entityManager
 					.createQuery(
 							"select cc from Yxxxuh566xwwqqwxxxxxuser cc where cc.a0xxukuxbvxxxxxxxxxxid = :username and cc.zzxxu2oxxhxxxxxxxxxxowner2 = :owner2 ")
 					.setParameter("username", customIdentity.getOwner().substring(0,ownerCode.length()-3))
 					.setParameter("owner2", owner2Code)
 					.getSingleResult();
                        if (user == null){
                         FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_ERROR,bundle.getString("user")+" "+bundle.getString("null"),""));

                         return;
                        }
                        if(user.getC2xxuxuaiv38xxxxxxxxalevel() != null && user.getC2xxuxuaiv38xxxxxxxxalevel().equals("P")){
                         FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_ERROR,bundle.getString("not")+" "+bundle.getString("allowed"),""));

                         return;
                        }
                        if(user.getJxxxuq201xwwqqhxxxxxcustomer()==null){
                         FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_ERROR,bundle.getString("user")+ " "+bundle.getString("need")+ " "+ bundle.getString("customer")+ " "+ bundle.getString("record"),""));

                         FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_ERROR,bundle.getString("use")+ " "+bundle.getString("edit")+ " "+ bundle.getString("user"),""));

                         return;
                        }

			 jxxxuq201xwwqqhxxxxxcustomer = (Jxxxuq201xwwqqhxxxxxcustomer) entityManager
 					.createQuery(
 							"select cc from Jxxxuq201xwwqqhxxxxxcustomer cc where cc.a0xxuobxbxxxxxxxxxxxsid = :customerId and cc.zzxxu2oxxhxxxxxxxxxxowner2 = :owner2 ")
 					.setParameter("customerId", user.getJxxxuq201xwwqqhxxxxxcustomer().getA0xxuobxbxxxxxxxxxxxsid())
 					.setParameter("owner2", owner2Code)
 					.getSingleResult();
                        if(jxxxuq201xwwqqhxxxxxcustomer !=null && jxxxuq201xwwqqhxxxxxcustomer.getQ4xxhxxxbv24xxxxxxxximailaddr()!=null){
                         this.setImailaddr(jxxxuq201xwwqqhxxxxxcustomer.getQ4xxhxxxbv24xxxxxxxximailaddr());
                        }

                } catch ( Exception e){
                  FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                   FacesMessage.SEVERITY_ERROR,bundle.getString("user")+ " "+bundle.getString("or")+" "+bundle.getString("customer")+" "+bundle.getString("error")+ " "+ bundle.getString("record")+ e.getMessage(),""));

                  return;
                }

               if (identity.isLoggedIn()){
                // shipping address will come from paypal/payment service, just make sure email address exists or entered
                // if not paypal ship address may not be there, then print ship/pick up label and 
                // hold it for pick up or manually find it
                //if( !product.getC3fbuxscbvxxxxxxxxxxshipcode().substring(0,1).equals("P") && !product.getC3fbuxscbvxxxxxxxxxxshipcode().substring(0,1).equals("X") ){
                 //if(customIdentity.getImailaddr() !=null && customIdentity.getImailaddr().isEmpty()){  
                  //FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                  //                   FacesMessage.SEVERITY_ERROR,bundle.getString("enter")+ " "+bundle.getString("email")+" "+bundle.getString("address"),""));

                 //} customIdentity.imail is for visitor only
               }else{
                //not logged in, allow pickup items, otherwise get shipping address from paypal
                // if shipping item but not via paypal, then print label, reduce qty and hold it and get ship address manually
                //!if(product.getC3fbuxscbvxxxxxxxxxxshipcode().substring(0,1).equals("P") && !product.getC3fbuxscbvxxxxxxxxxxshipcode().substring(0,1).equals("X") ){
                 if(customIdentity.getImailaddr() !=null && customIdentity.getImailaddr().isEmpty()){  
                  FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                   FacesMessage.SEVERITY_ERROR,bundle.getString("enter")+ " "+bundle.getString("email")+" "+bundle.getString("address"),""));

                  return;
                 }
               }    


    try{
      if (product.getC6xxusxrbv16xxxxxxxxtype().equals("CI-L1")){
       // we do not need the original item, it was like a category, for FI-D we may need the original ? 
       fpxxfq1a5xwwqqhxxxxxitemHome.clearInstance();
       fpxxfq1a5xwwqqhxxxxxitem=fpxxfq1a5xwwqqhxxxxxitemHome.getInstance();
       String header=this.getNotesToPass().trim();
       header=header.length()>60?header.substring(0,60):header;
       if(identity.isLoggedIn() && (customIdentity.hasRole("UH") || customIdentity.hasRole("UQ")) ){
        //use item decription entered by backoffice
        String d120=bundle.getString("item")+": "+customIdentity.getHoldValue()+" "+bundle.getString("customer")+": "+customIdentity.getHoldValue2()+" " +bundle.getString("assigned")+": "+customIdentity.getHoldValue3()+", "+header;
        if(d120.length()>120){
         d120=d120.substring(0,120);
        }
        fpxxfq1a5xwwqqhxxxxxitem.setB1xxuszsbvxxxxxxxxxxdescript(d120);
       }else{
        //item is the case detail, if VH or PH use temp customer info
        fpxxfq1a5xwwqqhxxxxxitem.setB1xxuszsbvxxxxxxxxxxdescript(jxxxuq201xwwqqhxxxxxcustomer.getC1xxuslnbvixxxxxxxxxlastname()+jxxxuq201xwwqqhxxxxxcustomer.getA0xxukxxbvxxxxxxxxxxcustomer()+header);
       }
       timeStamp = new SimpleDateFormat("yyyy.MM.dd.HH.mm.ss").format(new Date());
       fpxxfq1a5xwwqqhxxxxxitem.setW7xxuznxbvxxxxxxxxxxnotes(timeStamp+":"+this.getNotesToPass());
       fpxxfq1a5xwwqqhxxxxxitem.setC6xxusxrbv16xxxxxxxxtype("CI-D");
       calendar.setTime(Calendar.getInstance().getTime());
       calendar.add(Calendar.MONTH, 3);
       fpxxfq1a5xwwqqhxxxxxitem.setZ2xxcxxrlxxxxxxxxxxxdateexpiry(calendar.getTime());
       if(identity.isLoggedIn() && (customIdentity.hasRole("UH") || customIdentity.hasRole("UQ")) ){
        fpxxfq1a5xwwqqhxxxxxitem.setY2xxuxxrbvxxxxxxxxxxmisccode1(customIdentity.getHoldValue2());// holdvalue2
        //try getting customer info using holdvalue2 and use it 
        if(jxxxuq201xwwqqhxxxxxcustomerList.getSuggestList("keyWord").size() > 1){
          //FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
            //FacesMessage.SEVERITY_INFO,bundle.getString("name")+ " "+bundle.getString("entered")+ " "+bundle.getString("returning")+ " "+bundle.getString("multiple")+" "+bundle.getString("records")+ ", "+bundle.getString("continuing")+" "+bundle.getString("for")+" "+bundle.getString("now")+", "+bundle.getString("may")+" "+bundle.getString("edit")+" "+bundle.getString("later"),""));
        }else{
          //if not null , use it jay to be done       
        }
        //
        fpxxfq1a5xwwqqhxxxxxitemHome.persist();
       }else{
        fpxxfq1a5xwwqqhxxxxxitemHome.persist();
       }
       this.setNotesToPass("");//avoid reusing the same content
       trexuq233xwwqqhxxxxxcuquote.setFpxxfq1a5xwwqqhxxxxxitem(fpxxfq1a5xwwqqhxxxxxitem);
      }else{
        //update item tempqty with qty ordrrd
        product.setTempQuantity(quantity);
       trexuq233xwwqqhxxxxxcuquote.setFpxxfq1a5xwwqqhxxxxxitem(product);
      }
      trexuq233xwwqqhxxxxxcuquote.setJxxxuq201xwwqqhxxxxxcustomer(jxxxuq201xwwqqhxxxxxcustomer);
      // make type basket if prepaid and/or for approval
      if(type.equals("basket")){
       trexuq233xwwqqhxxxxxcuquote.setB5xxuxxrbl10xxxxxxxxtype("basket");
      }else{
       trexuq233xwwqqhxxxxxcuquote.setB5xxuxxrbl10xxxxxxxxtype("cart");
       product.setTempQuantity(quantity);
       // replace selprice with new if change enddate is not in future ie not temp change.
       couponValue=BigDecimal.ZERO;//deduction
       saleValue=BigDecimal.ZERO;//deduction not saleprice
       String stepNamekey=product.getA0xxuobxbxxxxxxxxxxxsid()+"";// use sidS not matcode
       if(stepNamekey.length()>25){
        stepNamekey=stepNamekey.substring(0,25);
       }
       couponValue=yxxxuq591xwwqqhxxxxxrate1fList.getCouponCodeValue(stepNamekey);  
       valueType=yxxxuq591xwwqqhxxxxxrate1fList.getCouponCodeValueType(stepNamekey);
       //if(couponValue.compareTo(new BigDecimal("-999.09")) == 0){
        //return; //error msg given by rate1flist, jay check if any db change then need to raise exception to roll back
       //} may not care about coupon
       if(product.getC1xxzxxxbhxxsxxxxxxxspricnew().compareTo(BigDecimal.ZERO) > 0 
          && product.getH1xxcxxrbxxxxxxxxxxxeffdate().compareTo(Calendar.getInstance().getTime()) >0 ){//sale in effect
        saleValue=product.getB8fbzpxxbvxxxxxxxxxxselprice().subtract(product.getC1xxzxxxbhxxsxxxxxxxspricnew());
        if(valueType.equals("DC%")){
         couponValue=product.getB8fbzpxxbvxxxxxxxxxxselprice().multiply(couponValue).divide(new BigDecimal("100.00"));
        }else{
        }
        if((couponValue.compareTo(BigDecimal.ZERO) == 0) || (couponValue.compareTo(BigDecimal.ZERO) != 0 && saleValue.subtract(couponValue).compareTo(BigDecimal.ZERO)>0)){//sale is better than regular-coupon
         if(couponValue.compareTo(BigDecimal.ZERO) != 0){
          FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
           FacesMessage.SEVERITY_INFO,bundle.getString("Coupon")+ " "+bundle.getString("apply")+ " "+bundle.getString("to")+ " "+bundle.getString("regular")+ " "+bundle.getString("price")+ " "+bundle.getString("only"),""));
          FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
           FacesMessage.SEVERITY_INFO,bundle.getString("Sale")+ " "+bundle.getString("price")+ " "+bundle.getString("saving")+ " "+saleValue+" "+bundle.getString("applied")+ ", "+bundle.getString("which")+ " "+bundle.getString("is")+ " "+bundle.getString("lower")+ " "+bundle.getString("than")+ " "+bundle.getString("coupon")+ " "+bundle.getString("saving")+" "+couponValue,""));
         }else{
          FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
           FacesMessage.SEVERITY_INFO,bundle.getString("Sale")+ " "+bundle.getString("price")+ " "+bundle.getString("saving")+ " "+saleValue+" "+bundle.getString("applied"),""));
         }
         if(product.getC2fbcxxrehxxsxxxxxxxspriceffdt().compareTo(Calendar.getInstance().getTime()) <= 0 && product.getH1xxcxxrbxxxxxxxxxxxeffdate().compareTo(Calendar.getInstance().getTime()) >=0 ){
          discountValue=saleValue;//item selprice does not change, but order ordprice will be selprice-discountValue
         }
        }else{//coupon has value and regular price minus coupon better than sale price
         discountValue=couponValue;//item selprice does not change, but order ordprice will be selprice-discountValue 
         FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
          FacesMessage.SEVERITY_INFO,bundle.getString("Coupon")+ " "+bundle.getString("apply")+ " "+bundle.getString("to")+ " "+bundle.getString("regular")+ " "+bundle.getString("price")+ " "+bundle.getString("only"),""));
         FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
          FacesMessage.SEVERITY_INFO,bundle.getString("Coupon")+ " "+bundle.getString("value")+ " "+bundle.getString("of")+ " "+couponValue+" "+bundle.getString("applied"),""));
        }
       }else{//no sale
        if(valueType.equals("DC%")){
         couponValue=product.getB8fbzpxxbvxxxxxxxxxxselprice().multiply(couponValue).divide(new BigDecimal("100.00"));
        }else{
        }
        if(couponValue.compareTo(BigDecimal.ZERO) != 0){//no sale only coupon
         discountValue=couponValue;//item selprice does not change, but order ordprice will be selprice-discountValue 
         FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
          FacesMessage.SEVERITY_INFO,bundle.getString("Coupon")+ " "+bundle.getString("value")+ " "+bundle.getString("of")+ " "+couponValue+" "+bundle.getString("applied"),""));
        }else{//no sale or coupon , no change to price
        }  
       }
      }
      customIdentity.setDiscountValue(discountValue);//save as session variable, value can be absolute or in %
      customIdentity.setDiscountType(valueType);  //DC or DC% 
      // discount value/type is calculted in itemHome but actual usage is in cuquote and passed via session variable
      trexuq233xwwqqhxxxxxcuquote.setYaxxuxxrblxxxxxxxxxxattach(customIdentity.getImailaddr());
      // establish customer key from customer name key word and put item ordered involved  in misccode1 of new case item
      // user to act as misccode1 in new case item , user (UH) as agent in new case order 
      if(identity.isLoggedIn() && (customIdentity.hasRole("UH") || customIdentity.hasRole("UQ")) ){
        // case order agent field will have assigned to employee entity 
        trexuq233xwwqqhxxxxxcuquote.setJxxxbh400xwwqqhxxxxxemployee(jxxxbh400xwwqqhxxxxxemployeeList.getKeyToEntity(customIdentity.getHoldValue3()));
      }
      trexuq233xwwqqhxxxxxcuquote.setZexxutoxlhxxxxxxxxxxowner(customIdentity.getOwner());
      trexuq233xwwqqhxxxxxcuquote.setZzxxu2oxxhxxxxxxxxxxowner2(owner2Code);
      // empty cart deletetes orderdetails but keeps the cuorder for reuse , cuorder should be close status (deleted via batch ) after shipment and payment
      // below will create/update cuorder and also create new orderdetails under createcdetails method 
      // where it copies item/customer info from cuorder instance
      // and calculate order details line cost and total order cost under persistrunt method 
      // parameter o tells that it came from shopping cart
      trexuq233xwwqqhxxxxxcuquoteHome.setInstance(trexuq233xwwqqhxxxxxcuquote);
      currentCartedPOSID=trexuq233xwwqqhxxxxxcuquote.getA0xxuobxbxxxxxxxxxxxsid();
      // cartpersist persists cuorder first and then cuodetails logic is complicated. createcdetails create details
      // debug and find a place to add default ship option and then also apply customer chosen ship option cost
      Integer currentDetailLine=0;
      if (fpxxfq1a5xwwqqhxxxxxitemList.getCartedList(type) != null){
       currentDetailLine = fpxxfq1a5xwwqqhxxxxxitemList.getCartedList(type).size();
      }
      // call updatedetailsall 
      if(currentDetailLine > 0){
          trexuq233xwwqqhxxxxxcuquoteHome.setInstance(trexuq233xwwqqhxxxxxcuquote);
          //trexuq233xwwqqhxxxxxcuquoteHome.moreToCart();
          // more clears details but does not put new item may need to put this in txns logic
          xoxxuq2c4xwwqqhxxxxxcuqdetailsHome.getInstance().setFpxxfq1a5xwwqqhxxxxxitem(product);
          trexuq233xwwqqhxxxxxcuquoteHome.updateDetailsAll();               
      }else{
       trexuq233xwwqqhxxxxxcuquoteHome.cartpersist(currentCartedPOSID,"o",currentDetailLine,quantity);
      }
       // error msg if any already produced in called method
       trexuq233xwwqqhxxxxxcuquoteHome.clearInstance();
       // after persist cartCnt should have a value but not sure why query is not doing flush
       //call keyvalue to force feching each time item added
       if (fpxxfq1a5xwwqqhxxxxxitemList.getCartedList(type) != null && fpxxfq1a5xwwqqhxxxxxitemList.getCartedList(type).size()>0){
        //trexuq233xwwqqhxxxxxcuquoteList.getKeyValue(fpxxfq1a5xwwqqhxxxxxitemList.getCartedList(type).get(0).getTrexuq233xwwqqhxxxxxcuquote().getA0xxuobxbxxxxxxxxxxxsid());
       } 
       if (fpxxfq1a5xwwqqhxxxxxitemList.getCartedList(type) != null){
        int cartCnt=fpxxfq1a5xwwqqhxxxxxitemList.getCartedList(type).size();
        if (cartCnt < 1){ 
         FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
          FacesMessage.SEVERITY_INFO,bundle.getString("item")+ " "+fpxxfq1a5xwwqqhxxxxxitem.getA0xxukixbxxxxxxxxxxxmatcode()+" "+bundle.getString("added")+" "+bundle.getString("to")+" "+bundle.getString("cart"),""));
         if(type.equals("basket")){
          FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("click")+ " "+bundle.getString("on")+ " "+bundle.getString("folder")+ " "+bundle.getString("to")+ " "+bundle.getString("continue")+ " / "+bundle.getString("submit"),""));
          customIdentity.setHoldValue("");
          customIdentity.setHoldValue2("");
          customIdentity.setHoldValue3("");

         }else{
               FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                FacesMessage.SEVERITY_INFO,bundle.getString("click")+ " "+bundle.getString("on")+ " "+bundle.getString("cart")+ " / "+bundle.getString("checkout")+ " "+bundle.getString("to")+ " "+bundle.getString("place")+ " "+bundle.getString("order")+ " "+bundle.getString("or")+ " "+bundle.getString("select")+ " "+bundle.getString("Next")+ " "+bundle.getString("Item"),""));
                customIdentity.setDiscountValue(BigDecimal.ZERO);
                customIdentity.setDiscountType("");//clear so that next cart/backoffice order does not use previous value

         } 
        }else{
         FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
          FacesMessage.SEVERITY_INFO,bundle.getString("item")+ " "+fpxxfq1a5xwwqqhxxxxxitem.getA0xxukixbxxxxxxxxxxxmatcode()+ " "+bundle.getString("added"),""));

         if(type.equals("basket")){
          FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
           FacesMessage.SEVERITY_INFO,bundle.getString("click")+ " "+bundle.getString("on")+ " "+bundle.getString("folder")+ " "+bundle.getString("to")+ " "+bundle.getString("continue")+ " / "+bundle.getString("submit"),""));

         }else{
          FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
           FacesMessage.SEVERITY_INFO,bundle.getString("click")+ " "+bundle.getString("on")+ " "+bundle.getString("cart")+ " "+bundle.getString("for")+ " "+bundle.getString("checkout")+ " "+bundle.getString("and")+ " "+bundle.getString("options")+ " "+bundle.getString("or")+ " "+bundle.getString("continue")+ " "+bundle.getString("shopping"),""));

         } 
        }
       }else{
         if(type.equals("basket")){
          FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
           FacesMessage.SEVERITY_INFO,bundle.getString("click")+ " "+bundle.getString("on")+ " "+bundle.getString("folder")+ " "+bundle.getString("to")+ " "+bundle.getString("continue")+ " / "+bundle.getString("submit"),""));

         }else{
           FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
            FacesMessage.SEVERITY_INFO,bundle.getString("click")+ " "+bundle.getString("on")+ " "+bundle.getString("cart")+ " "+bundle.getString("to")+ " "+bundle.getString("place")+ " "+bundle.getString("order")+ " "+bundle.getString("or")+ " "+bundle.getString("select")+ " "+bundle.getString("Next")+ " "+bundle.getString("Item"),""));

         } 
       } 
    } catch ( Exception e){
      if(type.equals("basket")){
       FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
        FacesMessage.SEVERITY_ERROR,bundle.getString("basket")+ " "+bundle.getString("submit")+ " "+bundle.getString("error")+ " "+e.getMessage(),""));
      }else{

       FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
        FacesMessage.SEVERITY_ERROR,bundle.getString("shopping")+ " "+bundle.getString("cart")+ " "+bundle.getString("error")+ " "+e.getMessage(),""));
                customIdentity.setDiscountValue(BigDecimal.ZERO);
                customIdentity.setDiscountType("");//clear so that next cart/backoffice order does not use previous value

      }
   }
  }


//---------------------------

    @Transactional
    public String addProductToPayment(Fpxxfq1a5xwwqqhxxxxxitem product, BigDecimal quantity,String type) {
/**
    * called by invoicecart to allow customer to pay by card for invoiced order
    * @param args -3
    * product ie item, this method is called by ItemDetailsBrowse/ItemDetailsFees/ for each shopping/case/fee item in cart/basket
    * quantity is always 1 if not SI-D (shopping)
    * if ci-L1 , quantity passed is 0
    * type cart or basket or cartInvoice
    * method called customerHome.persist(),userHomePersist(),cuordersHome.cartpersist()(which in turn calls cuorderHome.persist())
    * added type invoice
    * see xxx to allow invoiced carted items to take payment at POS terminal or via portable pos device for toPay and Delivery
*/
          if (!identity.isLoggedIn()){
                     //removed required and validation to allow email entries either at top or at bottom
                     // if imailAddr has value take it, otherwise take Alt and if none return
                     if(customIdentity.getImailaddr() !=null && !customIdentity.getImailaddr().isEmpty()){
                      //take it
                     }else{
                       FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_ERROR,bundle.getString("enter")+ " "+bundle.getString("email")+ " "+bundle.getString("address"),""));

                       return "";
                     }  
                     // save this as attach in cuorder for later use in shopping cart 
                       Pattern pattern = Pattern.compile("^.+@.+\\..+$");
                       Matcher matcher = pattern.matcher(customIdentity.getImailaddr());
                       if(!matcher.matches()){
                        FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_ERROR,bundle.getString("email")+ " "+bundle.getString("invalid"),""));

                        return "";
                       }

          }
          // both logged in or temp user, clear prev error msg
          FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
           FacesMessage.SEVERITY_INFO,bundle.getString(""),""));
          Integer sid=0;
	  Map<String,String> params = 
                FacesContext.getCurrentInstance().getExternalContext().getRequestParameterMap();
      /*
          if (params.get("categoryJay") != null &&  !params.get("categoryJay").isEmpty()){ 
	   sid = Integer.parseInt(params.get("categoryJay"));
           // clear existing instance to force changing it, sometimes we want to get existing instance
           clearInstance();
           setFpxxfq1a5xwwqqhxxxxxitemA0xxuobxbxxxxxxxxxxxsid(sid);
           // jay are we not changing the product passed as parameter, debug and check
	   product=getDefinedInstance();

          }
       */
          if(type.equals("invoicecart")){
           //check whether invoice exists and email matches a0xxuncibvxxxxxxxxxxinvoice
           // parse invoice number to 00...nn (7digits right justified)
             if (product != null ){
              prefix=product.getB3xxuxxrbvxxxxxxxxxxsource1();
             }

                   String msonorde=""+prefix;
                   int mponolen=7;
                   String padding = new String();
                   int padlen=-1;
                   int len = Math.abs(mponolen) - msonorde.length();
                   if (len < 1) {
                     msonorde=msonorde.toString();
                   }else{
                    for (int ii = 0 ; ii < len ; ++ii){
                     padding = padding + '0';
                    }
                     msonorde= (padlen < 0 ? padding + msonorde : msonorde + padding); 
                   }
            prefix=msonorde;     

            List<Trexuq266xwwqqhxxxxxcuinvoice> results=
             trexuq266xwwqqhxxxxxcuinvoiceList.getPaymentDueByCustomerList(prefix,true);
            //should be only one, if found update the record with type invoicecart
            if(results.size()==0){
             FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                 FacesMessage.SEVERITY_ERROR,bundle.getString("invoice")+ " "+prefix+ " "+ bundle.getString("not")+ " "+ bundle.getString("found"),""));
             return "";
            }else{
             if(results.get(0).getY7xxuxxrbv10xxxxxxxxtype() != null && results.get(0).getY7xxuxxrbv10xxxxxxxxtype().equals("invoicecart")){
              FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                 FacesMessage.SEVERITY_ERROR,bundle.getString("cart")+" "+bundle.getString("with")+" "+ bundle.getString("payment")+" "+ bundle.getString("already")+" "+ bundle.getString("exists")+", "+ bundle.getString("use")+" "+ bundle.getString("Pay")+" "+ bundle.getString("button")+" "+ bundle.getString("now"),""));
              return "";
             }
             BigDecimal invAmount=results.get(0).getZ1xxztprlxxxxxxxxxxxamounttotal().setScale(2, RoundingMode.HALF_UP);
             if(invAmount.compareTo(quantity.setScale(2, RoundingMode.HALF_UP)) !=0){
              FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                 FacesMessage.SEVERITY_ERROR,bundle.getString("entered")+" "+bundle.getString("amount")+" "+quantity.setScale(2, RoundingMode.HALF_UP)+", "+ bundle.getString("not")+" "+ bundle.getString("matching")+" "+ bundle.getString("any")+" "+ bundle.getString("invoice")+" "+ bundle.getString("total"),""));
              return "";
             }
            }
         
            //now update type to invoicecart
            results.get(0).setY7xxuxxrbv10xxxxxxxxtype("invoicecart");
            trexuq266xwwqqhxxxxxcuinvoiceHome.setInstance(results.get(0));
            trexuq266xwwqqhxxxxxcuinvoiceHome.superUpdate();
               FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                FacesMessage.SEVERITY_INFO,bundle.getString("invoice")+ " "+product.getB3xxuxxrbvxxxxxxxxxxsource1()+" "+bundle.getString("added")+" "+bundle.getString("to")+" "+bundle.getString("payment")+" "+bundle.getString("cart"),""));
               FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                FacesMessage.SEVERITY_INFO,bundle.getString("click")+ " "+bundle.getString("on")+" "+bundle.getString("Pay")+" "+bundle.getString("cart")+ " "+bundle.getString("to")+ " "+bundle.getString("make")+ " "+bundle.getString("payment")+ " "+bundle.getString("or")+ " "+bundle.getString("press")+ " "+bundle.getString("button")+ " "+bundle.getString("more")+ " "+bundle.getString("for")+ " "+bundle.getString("next")+ " "+bundle.getString("item"),""));


            return "";
          }
          return "";
       }

    @Transactional
    public String renderPaymentout(String invoice) {
/**
    * @param args 1
    * product ie item, this method is called by ItemDetailsBrowse/ItemDetailsFees/ for each shopping/case/fee item in cart/basket
    * quantity is always 1 if not SI-D (shopping)
    * if ci-L1 , quantity passed is 0
    * type cart or basket or cartInvoice
    * method called customerHome.persist(),userHomePersist(),cuordersHome.cartpersist()(which in turn calls cuorderHome.persist())
    * added type invoice
*/
          if (!identity.isLoggedIn()){
                     //removed required and validation to allow email entries either at top or at bottom
                     // if imailAddr has value take it, otherwise take Alt and if none return
                     if(customIdentity.getImailaddr() !=null && !customIdentity.getImailaddr().isEmpty()){
                      //take it
                     }else{
                       FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_ERROR,bundle.getString("enter")+ " "+bundle.getString("email")+ " "+bundle.getString("address"),""));

                       return "";
                     }  
                     // save this as attach in cuorder for later use in shopping cart 
                       Pattern pattern = Pattern.compile("^.+@.+\\..+$");
                       Matcher matcher = pattern.matcher(customIdentity.getImailaddr());
                       if(!matcher.matches()){
                        FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_ERROR,bundle.getString("email")+ " "+bundle.getString("invalid"),""));

                        return "";
                       }

          }
          // both logged in or temp user, clear prev error msg
          FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString(""),""));
          Integer sid=0;
	  Map<String,String> params = 
                FacesContext.getCurrentInstance().getExternalContext().getRequestParameterMap();

          if (params.get("categoryJay") != null &&  !params.get("categoryJay").isEmpty()){ 
           /* why this logic, invoice comes via method
	   sid = Integer.parseInt(params.get("categoryJay"));
           // clear existing instance to force changing it, sometimes we want to get existing instance
           clearInstance();
           setFpxxfq1a5xwwqqhxxxxxitemA0xxuobxbxxxxxxxxxxxsid(sid);
           */
          }
                 try{  
                   String msonorde=""+invoice;
                   int mponolen=7;
                   String padding = new String();
                   int padlen=-1;
                   int len = Math.abs(mponolen) - msonorde.length();
                   if (len < 1) {
                     msonorde=msonorde.toString();
                   }else{
                    for (int ii = 0 ; ii < len ; ++ii){
                     padding = padding + '0';
                    }
                     msonorde= (padlen < 0 ? padding + msonorde : msonorde + padding); 
                   }
                   prefix=msonorde;     
                  } catch (Exception e) {
                    FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_ERROR,bundle.getString("ivalid")+" "+ bundle.getString("invoice")+" "+bundle.getString("record")+" "+e.getMessage(),""));
                    return "";
                  }
            List<Trexuq266xwwqqhxxxxxcuinvoice> results=
             trexuq266xwwqqhxxxxxcuinvoiceList.getPaymentDueByCustomerList(prefix,true);
            //should be only one, if found update the record with type invoicecart
            if(results.size()==0){
             FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                 FacesMessage.SEVERITY_ERROR,bundle.getString("invoice")+ " "+prefix+ " "+ bundle.getString("not")+ " "+ bundle.getString("found"),""));
             return "";
            }else{
             if(results.get(0).getY7xxuxxrbv10xxxxxxxxtype() !=null && results.get(0).getY7xxuxxrbv10xxxxxxxxtype().equals("invoicecart")){

              return "/paymentout.xhtml?faces-redirect=true&includeViewParams=true";
             }
            }
             return "";
         
       }



       private List<Trexuq244xwwqqhxxxxxcuorders> itemOrders;

    public String rejectProductsToOrder(Xoxxuq2b4xwwqqhxxxxxcuodetails row) {
             // if already approved/rejected by higher up ie status 64/256 then return
             if(row.getZhxxzzfxhhxxxxxxxxxxstatusfl() == minvoiced || row.getZhxxzzfxhhxxxxxxxxxxstatusfl() == mdel){
              FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
               FacesMessage.SEVERITY_INFO,bundle.getString("cannot")+ " "+bundle.getString("change")+ " "+bundle.getString("now"),""));

                return " ";
             }

             //entity already exists, so either do a query or getDefinedInstance to get it
             // for new entity use clearInstance/setInstance pattern
             xoxxuq2b4xwwqqhxxxxxcuodetailsHome.setXoxxuq2b4xwwqqhxxxxxcuodetailsA0xxuobxbxxxxxxxxxxxsid(row.getA0xxuobxbxxxxxxxxxxxsid());
             xoxxuq2b4xwwqqhxxxxxcuodetailsHome.setInstance(xoxxuq2b4xwwqqhxxxxxcuodetailsHome.getDefinedInstance());
             xoxxuq2b4xwwqqhxxxxxcuodetailsHome.getInstance().setZhxxzzfxhhxxxxxxxxxxstatusfl(mreturn);
             xoxxuq2b4xwwqqhxxxxxcuodetailsHome.allowUpdate();
             //update Order if ok
             Integer coSid=row.getTrexuq244xwwqqhxxxxxcuorders().getA0xxuobxbxxxxxxxxxxxsid();  
             Integer tempCount=0;
        
            if (trexuq244xwwqqhxxxxxcuordersList.entityDetailedList(coSid) != null){
             for (Xoxxuq2b4xwwqqhxxxxxcuodetails itemOrderDetail : trexuq244xwwqqhxxxxxcuordersList.entityDetailedList(coSid)) {
              if(itemOrderDetail.getZhxxzzfxhhxxxxxxxxxxstatusfl() !=mreturn){
               tempCount=tempCount+1;
              }   
             }
             if(tempCount == 0){
              trexuq244xwwqqhxxxxxcuordersHome.clearInstance();
              trexuq244xwwqqhxxxxxcuordersHome.setInstance(row.getTrexuq244xwwqqhxxxxxcuorders());
              trexuq244xwwqqhxxxxxcuordersHome.getInstance().setZcxxzzfxhhxxxxxxxxxxstatusfl(mreturn);//4 reject
              trexuq244xwwqqhxxxxxcuordersHome.allowUpdate();
              FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
               FacesMessage.SEVERITY_INFO,"Item"+" "+trexuq244xwwqqhxxxxxcuordersHome.getInstance().getA0xxuncobvxxxxxxxxxxpurchsno()+"  "+bundle.getString("rejected")+ " "+bundle.getString("status")+ " "+bundle.getString("now"),""));
             }

            }

             return "";
    }
    public String rejectProductsToOrderByVendor(Xoxxuq2b4xwwqqhxxxxxcuodetails row) {
             // check when not to process ??

             //entity already exists, so either do a query or getDefinedInstance to get it
             // for new entity use clearInstance/setInstance pattern
             xoxxuq2b4xwwqqhxxxxxcuodetailsHome.setXoxxuq2b4xwwqqhxxxxxcuodetailsA0xxuobxbxxxxxxxxxxxsid(row.getA0xxuobxbxxxxxxxxxxxsid());
             xoxxuq2b4xwwqqhxxxxxcuodetailsHome.setInstance(xoxxuq2b4xwwqqhxxxxxcuodetailsHome.getDefinedInstance());
             xoxxuq2b4xwwqqhxxxxxcuodetailsHome.getInstance().setZhxxzzfxhhxxxxxxxxxxstatusfl(mdel);
             xoxxuq2b4xwwqqhxxxxxcuodetailsHome.allowUpdate();
             //update Order if ok
             Integer coSid=row.getTrexuq244xwwqqhxxxxxcuorders().getA0xxuobxbxxxxxxxxxxxsid();  
             Integer tempCount=0;
        
            if (trexuq244xwwqqhxxxxxcuordersList.entityDetailedList(coSid) != null){
             for (Xoxxuq2b4xwwqqhxxxxxcuodetails itemOrderDetail : trexuq244xwwqqhxxxxxcuordersList.entityDetailedList(coSid)) {
              if(itemOrderDetail.getZhxxzzfxhhxxxxxxxxxxstatusfl() !=mdel){
               tempCount=tempCount+1;
              }   
             }
             if(tempCount == 0){
              trexuq244xwwqqhxxxxxcuordersHome.clearInstance();
              trexuq244xwwqqhxxxxxcuordersHome.setInstance(row.getTrexuq244xwwqqhxxxxxcuorders());
              trexuq244xwwqqhxxxxxcuordersHome.getInstance().setZcxxzzfxhhxxxxxxxxxxstatusfl(mdel);//8 final reject 
              trexuq244xwwqqhxxxxxcuordersHome.allowUpdate();
              FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
               FacesMessage.SEVERITY_INFO," "+"Item"+" "+trexuq244xwwqqhxxxxxcuordersHome.getInstance().getA0xxuncobvxxxxxxxxxxpurchsno()+"  "+bundle.getString("reject")+ " "+bundle.getString("status")+ " "+bundle.getString("now"),""));
             }

            }

             return "";
    }

    public String approveProductsToOrder(Xoxxuq2b4xwwqqhxxxxxcuodetails row) {
                 //input mpaid/for approval is 16 output details employee/manager mreturn/rejected=4 or mshipped/approved=32 or stays 16
                 // mclosed = 8 manager/vendor final approved minvoiced 64 manager/vendor final rejection mdel 256
                 // customer closed 128 ? or 2

             //entity already exists, so either do a query or getDefinedInstance to get it
             // for new entity use clearInstance/setInstance pattern
             if(row.getZhxxzzfxhhxxxxxxxxxxstatusfl() == minvoiced || row.getZhxxzzfxhhxxxxxxxxxxstatusfl() == mdel){
              FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
               FacesMessage.SEVERITY_INFO,bundle.getString("cannot")+ " "+bundle.getString("change")+ " "+bundle.getString("now"),""));

                return " ";
             }
             trexuq244xwwqqhxxxxxcuorders=row.getTrexuq244xwwqqhxxxxxcuorders();
             xoxxuq2b4xwwqqhxxxxxcuodetailsHome.setXoxxuq2b4xwwqqhxxxxxcuodetailsA0xxuobxbxxxxxxxxxxxsid(row.getA0xxuobxbxxxxxxxxxxxsid());
             xoxxuq2b4xwwqqhxxxxxcuodetailsHome.setInstance(xoxxuq2b4xwwqqhxxxxxcuodetailsHome.getDefinedInstance());
             xoxxuq2b4xwwqqhxxxxxcuodetailsHome.getInstance().setZhxxzzfxhhxxxxxxxxxxstatusfl(mshipped);
             xoxxuq2b4xwwqqhxxxxxcuodetailsHome.allowUpdate();
             // reduce item qty because qty 1 not available any more for fees

                 fpxxfq1a5xwwqqhxxxxxitemHome.clearInstance();
                 fpxxfq1a5xwwqqhxxxxxitemHome.setInstance(row.getFpxxfq1a5xwwqqhxxxxxitem());
                 fpxxfq1a5xwwqqhxxxxxitem=row.getFpxxfq1a5xwwqqhxxxxxitem();
                 String jay=fpxxfq1a5xwwqqhxxxxxitem.getC6xxusxrbv16xxxxxxxxtype();
                 if(!jay.equals("CI-D")) {
                  fpxxfq1a5xwwqqhxxxxxitemHome.getInstance().setB0xxziqxlvxxsaxxxxxxquantity(fpxxfq1a5xwwqqhxxxxxitemHome.getInstance().getB0xxziqxlvxxsaxxxxxxquantity().subtract(row.getZ3xxeqxxbvnxxxxxxxxxqtyordrd()));
                  fpxxfq1a5xwwqqhxxxxxitemHome.allowUpdate();  
                 }
              //updateProductsToApprove('approveL1/approveL1CI');  put logic here and remove updateProductsToApprove
               Integer coSid=row.getTrexuq244xwwqqhxxxxxcuorders().getA0xxuobxbxxxxxxxxxxxsid();  
               Integer tempCount=0;
               if (trexuq244xwwqqhxxxxxcuordersList.entityDetailedList(coSid) != null){
                for (Xoxxuq2b4xwwqqhxxxxxcuodetails itemOrderDetail : trexuq244xwwqqhxxxxxcuordersList.entityDetailedList(coSid)) {
                 if(itemOrderDetail.getZhxxzzfxhhxxxxxxxxxxstatusfl() !=mshipped){
                  tempCount=tempCount+1;
                 }   
                }
                if(tempCount == 0){
              trexuq244xwwqqhxxxxxcuordersHome.clearInstance();
              trexuq244xwwqqhxxxxxcuordersHome.setInstance(row.getTrexuq244xwwqqhxxxxxcuorders());
              trexuq244xwwqqhxxxxxcuordersHome.getInstance().setZcxxzzfxhhxxxxxxxxxxstatusfl(mshipped);//32 final approve
              trexuq244xwwqqhxxxxxcuordersHome.allowUpdate();
              FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO," "+"Item"+" "+trexuq244xwwqqhxxxxxcuordersHome.getInstance().getA0xxuncobvxxxxxxxxxxpurchsno()+"  "+bundle.getString("approved")+ " "+bundle.getString("status")+ " "+bundle.getString("now"),""));
             }

               }
       //add notes and attachments
       fpxxfq1a5xwwqqhxxxxxitemHome.clearInstance();
       fpxxfq1a5xwwqqhxxxxxitem=fpxxfq1a5xwwqqhxxxxxitemHome.getInstance();
       fpxxfq1a5xwwqqhxxxxxitem.setB1xxuszsbvxxxxxxxxxxdescript(trexuq244xwwqqhxxxxxcuorders.getA0xxuncobvxxxxxxxxxxpurchsno()+"/"+trexuq244xwwqqhxxxxxcuorders.getJxxxuq201xwwqqhxxxxxcustomer().getC1xxuslnbvixxxxxxxxxlastname()+":"+this.getNotesToPass());
       timeStamp = new SimpleDateFormat("yyyy.MM.dd.HH.mm.ss").format(new Date());
       fpxxfq1a5xwwqqhxxxxxitem.setW7xxuznxbvxxxxxxxxxxnotes(timeStamp+":"+this.getNotesToPass());
       fpxxfq1a5xwwqqhxxxxxitem.setC6xxusxrbv16xxxxxxxxtype("CI-D");
       calendar.setTime(Calendar.getInstance().getTime());
       calendar.add(Calendar.MONTH, 3);
       fpxxfq1a5xwwqqhxxxxxitem.setZ2xxcxxrlxxxxxxxxxxxdateexpiry(calendar.getTime());
       //make child of order item
       fpxxfq1a5xwwqqhxxxxxitem.setFpxxfq1a5xwwqqhxxxxxitem(trexuq244xwwqqhxxxxxcuorders.getFpxxfq1a5xwwqqhxxxxxitem());
       fpxxfq1a5xwwqqhxxxxxitemHome.persist();
       this.setNotesToPass("");//avoid reusing the same content

             return "";
    }

    public String closeProductsToOrder(Xoxxuq2b4xwwqqhxxxxxcuodetails row) {
             // used by employee  in future use diff mclosed/8
             //details entity already exists, so do getDefinedInstance to get it, parent instance is null so set it usind pointer in details
             // for new entity use clearInstance/setInstance pattern
             xoxxuq2b4xwwqqhxxxxxcuodetailsHome.setXoxxuq2b4xwwqqhxxxxxcuodetailsA0xxuobxbxxxxxxxxxxxsid(row.getA0xxuobxbxxxxxxxxxxxsid());
             xoxxuq2b4xwwqqhxxxxxcuodetailsHome.setInstance(xoxxuq2b4xwwqqhxxxxxcuodetailsHome.getDefinedInstance());
             xoxxuq2b4xwwqqhxxxxxcuodetailsHome.getInstance().setZhxxzzfxhhxxxxxxxxxxstatusfl(mclosed);//why was it mshipped
             xoxxuq2b4xwwqqhxxxxxcuodetailsHome.allowUpdate();
             // reduce item qty because qty 1 not available any more
                 fpxxfq1a5xwwqqhxxxxxitemHome.clearInstance();
                 fpxxfq1a5xwwqqhxxxxxitemHome.setInstance(row.getFpxxfq1a5xwwqqhxxxxxitem());
                 fpxxfq1a5xwwqqhxxxxxitem=row.getFpxxfq1a5xwwqqhxxxxxitem();
                 fpxxfq1a5xwwqqhxxxxxitemHome.getInstance().setB0xxziqxlvxxsaxxxxxxquantity(fpxxfq1a5xwwqqhxxxxxitemHome.getInstance().getB0xxziqxlvxxsaxxxxxxquantity().subtract(row.getZ3xxeqxxbvnxxxxxxxxxqtyordrd()));
                 fpxxfq1a5xwwqqhxxxxxitemHome.allowUpdate();  
              // update order status here if no other detail
              // detail status can be approved or reject or waiting approval
              // order can be waiting approval (all details waiting) or incomplete (at least one waiting)  or complete (no waiting)             
             Integer coSid=row.getTrexuq244xwwqqhxxxxxcuorders().getA0xxuobxbxxxxxxxxxxxsid();  
             Integer tempCount=0;
        
            if (trexuq244xwwqqhxxxxxcuordersList.entityDetailedList(coSid) != null){
             for (Xoxxuq2b4xwwqqhxxxxxcuodetails itemOrderDetail : trexuq244xwwqqhxxxxxcuordersList.entityDetailedList(coSid)) {
              if(itemOrderDetail.getZhxxzzfxhhxxxxxxxxxxstatusfl() !=mclosed){
               tempCount=tempCount+1;
              }   
             }
             // all details under this order closed, then close the order
             if(tempCount == 0){
              trexuq244xwwqqhxxxxxcuordersHome.clearInstance();
              trexuq244xwwqqhxxxxxcuordersHome.setInstance(row.getTrexuq244xwwqqhxxxxxcuorders());
              trexuq244xwwqqhxxxxxcuordersHome.getInstance().setZcxxzzfxhhxxxxxxxxxxstatusfl(mclosed);
              trexuq244xwwqqhxxxxxcuordersHome.allowUpdate();
              FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
               FacesMessage.SEVERITY_INFO," "+"Item"+" "+trexuq244xwwqqhxxxxxcuordersHome.getInstance().getA0xxuncobvxxxxxxxxxxpurchsno()+"  "+bundle.getString("closed")+ " "+bundle.getString("status")+ " "+bundle.getString("now"),""));
             }
            }


             return "";
    }

    public String approveProductsToOrderByVendor(Xoxxuq2b4xwwqqhxxxxxcuodetails row) {
             //entity already exists, so either do a query or getDefinedInstance to get it
             // for new entity use clearInstance/setInstance pattern
             if(row.getZhxxzzfxhhxxxxxxxxxxstatusfl() == mclosed ){
              FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_WARN,bundle.getString("was") +" "+bundle.getString("closed")+" "+bundle.getString("status"),""));

             }
             trexuq244xwwqqhxxxxxcuorders=row.getTrexuq244xwwqqhxxxxxcuorders();
             xoxxuq2b4xwwqqhxxxxxcuodetailsHome.setXoxxuq2b4xwwqqhxxxxxcuodetailsA0xxuobxbxxxxxxxxxxxsid(row.getA0xxuobxbxxxxxxxxxxxsid());
             xoxxuq2b4xwwqqhxxxxxcuodetailsHome.setInstance(xoxxuq2b4xwwqqhxxxxxcuodetailsHome.getDefinedInstance());
             xoxxuq2b4xwwqqhxxxxxcuodetailsHome.getInstance().setZhxxzzfxhhxxxxxxxxxxstatusfl(minvoiced);
             xoxxuq2b4xwwqqhxxxxxcuodetailsHome.allowUpdate();
              //updateProductsToApprove('approveFinal/approveFinalCI');  put logic here and remove updateProductsToApprove
               Integer coSid=row.getTrexuq244xwwqqhxxxxxcuorders().getA0xxuobxbxxxxxxxxxxxsid();  
               Integer tempCount=0;
               if (trexuq244xwwqqhxxxxxcuordersList.entityDetailedList(coSid) != null){
                for (Xoxxuq2b4xwwqqhxxxxxcuodetails itemOrderDetail : trexuq244xwwqqhxxxxxcuordersList.entityDetailedList(coSid)) {
                 if(itemOrderDetail.getZhxxzzfxhhxxxxxxxxxxstatusfl() !=minvoiced){
                  tempCount=tempCount+1;
                 }   
                }
                if(tempCount == 0){
                 trexuq244xwwqqhxxxxxcuordersHome.clearInstance();
                 trexuq244xwwqqhxxxxxcuordersHome.setInstance(row.getTrexuq244xwwqqhxxxxxcuorders());
                 trexuq244xwwqqhxxxxxcuordersHome.getInstance().setZcxxzzfxhhxxxxxxxxxxstatusfl(minvoiced);//64 approved 
                 trexuq244xwwqqhxxxxxcuordersHome.allowUpdate();
                 FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                 FacesMessage.SEVERITY_INFO," "+"Item"+" "+trexuq244xwwqqhxxxxxcuordersHome.getInstance().getA0xxuncobvxxxxxxxxxxpurchsno()+"  "+bundle.getString("approved")+ " "+bundle.getString("status")+ " "+bundle.getString("now"),""));
                }

               }
       //add notes and attachments
       fpxxfq1a5xwwqqhxxxxxitemHome.clearInstance();
       fpxxfq1a5xwwqqhxxxxxitem=fpxxfq1a5xwwqqhxxxxxitemHome.getInstance();
       fpxxfq1a5xwwqqhxxxxxitem.setB1xxuszsbvxxxxxxxxxxdescript(trexuq244xwwqqhxxxxxcuorders.getA0xxuncobvxxxxxxxxxxpurchsno()+"/"+trexuq244xwwqqhxxxxxcuorders.getJxxxuq201xwwqqhxxxxxcustomer().getC1xxuslnbvixxxxxxxxxlastname()+":"+this.getNotesToPass());
       timeStamp = new SimpleDateFormat("yyyy.MM.dd.HH.mm.ss").format(new Date());
       fpxxfq1a5xwwqqhxxxxxitem.setW7xxuznxbvxxxxxxxxxxnotes(timeStamp+":"+this.getNotesToPass());
       fpxxfq1a5xwwqqhxxxxxitem.setC6xxusxrbv16xxxxxxxxtype("CI-D");
       calendar.setTime(Calendar.getInstance().getTime());
       calendar.add(Calendar.MONTH, 3);
       fpxxfq1a5xwwqqhxxxxxitem.setZ2xxcxxrlxxxxxxxxxxxdateexpiry(calendar.getTime());
       //make child of order item
       fpxxfq1a5xwwqqhxxxxxitem.setFpxxfq1a5xwwqqhxxxxxitem(trexuq244xwwqqhxxxxxcuorders.getFpxxfq1a5xwwqqhxxxxxitem());
       fpxxfq1a5xwwqqhxxxxxitemHome.persist();
       this.setNotesToPass("");//avoid reusing the same content

             return "";
    }

    public String closeProductsToOrderByVendor(Xoxxuq2b4xwwqqhxxxxxcuodetails row) {
             // called by mbasketin or vbasketin because both are final close
             //entity already exists, so either do a query or getDefinedInstance to get it
             // for new entity use clearInstance/setInstance pattern
             xoxxuq2b4xwwqqhxxxxxcuodetailsHome.setXoxxuq2b4xwwqqhxxxxxcuodetailsA0xxuobxbxxxxxxxxxxxsid(row.getA0xxuobxbxxxxxxxxxxxsid());
             xoxxuq2b4xwwqqhxxxxxcuodetailsHome.setInstance(xoxxuq2b4xwwqqhxxxxxcuodetailsHome.getDefinedInstance());
             xoxxuq2b4xwwqqhxxxxxcuodetailsHome.getInstance().setZhxxzzfxhhxxxxxxxxxxstatusfl(mclosed);
             xoxxuq2b4xwwqqhxxxxxcuodetailsHome.allowUpdate();
              // update order status here if no other detail
              // detail status can be approved or reject or waiting approval
              // order can be waiting approval (all details waiting) or incomplete (at least one waiting)  or complete (no waiting)             
             Integer coSid=row.getTrexuq244xwwqqhxxxxxcuorders().getA0xxuobxbxxxxxxxxxxxsid();  
             Integer tempCount=0;
        
            if (trexuq244xwwqqhxxxxxcuordersList.entityDetailedList(coSid) != null){
             for (Xoxxuq2b4xwwqqhxxxxxcuodetails itemOrderDetail : trexuq244xwwqqhxxxxxcuordersList.entityDetailedList(coSid)) {
              if(itemOrderDetail.getZhxxzzfxhhxxxxxxxxxxstatusfl() !=mclosed){
               tempCount=tempCount+1;
              }   
             }
             if(tempCount == 0){
              trexuq244xwwqqhxxxxxcuordersHome.clearInstance();
              trexuq244xwwqqhxxxxxcuordersHome.setInstance(row.getTrexuq244xwwqqhxxxxxcuorders());
              trexuq244xwwqqhxxxxxcuordersHome.getInstance().setZcxxzzfxhhxxxxxxxxxxstatusfl(mclosed);
              trexuq244xwwqqhxxxxxcuordersHome.allowUpdate();
              FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
               FacesMessage.SEVERITY_INFO," "+"Item"+" "+trexuq244xwwqqhxxxxxcuordersHome.getInstance().getA0xxuncobvxxxxxxxxxxpurchsno()+"  "+bundle.getString("closed")+ " "+bundle.getString("status")+ " "+bundle.getString("now"),""));
             }
            }


             return "";
    }

    public String requestUpdateProductsToOrderByCustomer(Xoxxuq2b4xwwqqhxxxxxcuodetails row) {
             // used by basketoutcase (ci-d) and basketout (fi-d)
             //entity already exists, so either do a query or getDefinedInstance to get it
             // for new entity use clearInstance/setInstance pattern
             if(row.getZhxxzzfxhhxxxxxxxxxxstatusfl() >= minvoiced){
              FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
               FacesMessage.SEVERITY_ERROR,bundle.getString("not")+ " "+bundle.getString("allowed")+ " "+bundle.getString("now"),""));

              return "";
             }
             trexuq244xwwqqhxxxxxcuorders=row.getTrexuq244xwwqqhxxxxxcuorders();
             xoxxuq2b4xwwqqhxxxxxcuodetailsHome.setXoxxuq2b4xwwqqhxxxxxcuodetailsA0xxuobxbxxxxxxxxxxxsid(row.getA0xxuobxbxxxxxxxxxxxsid());
             xoxxuq2b4xwwqqhxxxxxcuodetailsHome.setInstance(xoxxuq2b4xwwqqhxxxxxcuodetailsHome.getDefinedInstance());
             xoxxuq2b4xwwqqhxxxxxcuodetailsHome.getInstance().setZhxxzzfxhhxxxxxxxxxxstatusfl(mpaid);
             xoxxuq2b4xwwqqhxxxxxcuodetailsHome.allowUpdate();
              // update order status here if only one order
              // detail status can be approved or reject or waiting approval
              // order can be waiting approval (all details waiting) or incomplete (at least one waiting)  or complete (no waiting)             
             Integer coSid=row.getTrexuq244xwwqqhxxxxxcuorders().getA0xxuobxbxxxxxxxxxxxsid();  
             Integer tempCount=0;
        
            if (trexuq244xwwqqhxxxxxcuordersList.entityDetailedList(coSid) != null){
             for (Xoxxuq2b4xwwqqhxxxxxcuodetails itemOrderDetail : trexuq244xwwqqhxxxxxcuordersList.entityDetailedList(coSid)) {
              if(itemOrderDetail.getZhxxzzfxhhxxxxxxxxxxstatusfl() !=mpaid){
               tempCount=tempCount+1;
              }   
             }
             if(tempCount == 0){
              trexuq244xwwqqhxxxxxcuordersHome.clearInstance();
              trexuq244xwwqqhxxxxxcuordersHome.setInstance(row.getTrexuq244xwwqqhxxxxxcuorders());
              trexuq244xwwqqhxxxxxcuordersHome.getInstance().setZcxxzzfxhhxxxxxxxxxxstatusfl(mpaid); //16 submitted
              trexuq244xwwqqhxxxxxcuordersHome.allowUpdate();
              FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                FacesMessage.SEVERITY_INFO," "+"Item"+" "+trexuq244xwwqqhxxxxxcuordersHome.getInstance().getA0xxuncobvxxxxxxxxxxpurchsno()+"  "+bundle.getString("submitted")+ " "+bundle.getString("status")+ " "+bundle.getString("now"),""));
              if (!identity.isLoggedIn()){
               FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                FacesMessage.SEVERITY_INFO,bundle.getString("you")+ " "+bundle.getString("will")+ " "+bundle.getString("get")+ " "+bundle.getString("email")+ " "+bundle.getString("for")+ " "+bundle.getString("status")+ " "+bundle.getString("change"),""));
              }else{
               FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                FacesMessage.SEVERITY_INFO,bundle.getString("you")+ " "+bundle.getString("can")+ " "+bundle.getString("use")+ " "+bundle.getString("check")+ " "+bundle.getString("status")+ " "+bundle.getString("button")+ " "+bundle.getString("for")+ " "+bundle.getString("status")+ " "+bundle.getString("change"),""));
              }
             }
            }
/*
       //add notes and attachments  commented out no need anymore, add notes button does this
       fpxxfq1a5xwwqqhxxxxxitemHome.clearInstance();
       fpxxfq1a5xwwqqhxxxxxitem=fpxxfq1a5xwwqqhxxxxxitemHome.getInstance();
       fpxxfq1a5xwwqqhxxxxxitem.setB1xxuszsbvxxxxxxxxxxdescript(trexuq244xwwqqhxxxxxcuorders.getA0xxuncobvxxxxxxxxxxpurchsno()+"/"+trexuq244xwwqqhxxxxxcuorders.getJxxxuq201xwwqqhxxxxxcustomer().getC1xxuslnbvixxxxxxxxxlastname()+":"+this.getNotesToPass());
       timeStamp = new SimpleDateFormat("yyyy.MM.dd.HH.mm.ss").format(new Date());
       fpxxfq1a5xwwqqhxxxxxitem.setW7xxuznxbvxxxxxxxxxxnotes(timeStamp+":"+this.getNotesToPass());
       if(trexuq244xwwqqhxxxxxcuorders.getFpxxfq1a5xwwqqhxxxxxitem().getC6xxusxrbv16xxxxxxxxtype().equals("CI-D")){
        fpxxfq1a5xwwqqhxxxxxitem.setC6xxusxrbv16xxxxxxxxtype("CI-D");
       }else{
        fpxxfq1a5xwwqqhxxxxxitem.setC6xxusxrbv16xxxxxxxxtype("FI-D");
       }  
       calendar.setTime(Calendar.getInstance().getTime());
       calendar.add(Calendar.MONTH, 3);
       fpxxfq1a5xwwqqhxxxxxitem.setZ2xxcxxrlxxxxxxxxxxxdateexpiry(calendar.getTime());
       //make child of order item
       fpxxfq1a5xwwqqhxxxxxitem.setFpxxfq1a5xwwqqhxxxxxitem(trexuq244xwwqqhxxxxxcuorders.getFpxxfq1a5xwwqqhxxxxxitem());
       fpxxfq1a5xwwqqhxxxxxitemHome.persist();
       this.setNotesToPass("");//avoid reusing the same content
*/


             return "";
    }

    public String closeProductsToOrderByCustomer(Xoxxuq2b4xwwqqhxxxxxcuodetails row) {
             //entity already exists, so either do a query or getDefinedInstance to get it
             // for new entity use clearInstance/setInstance pattern
             if(row.getZhxxzzfxhhxxxxxxxxxxstatusfl() >= 16){
              FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_ERROR,bundle.getString("not")+ " "+bundle.getString("allowed")+ " "+bundle.getString("while")+" "+bundle.getString("submission")+ " "+bundle.getString("in")+ " "+bundle.getString("process")+ ", "+bundle.getString("press")+ " "+bundle.getString("return")+ " "+bundle.getString("to")+ " "+bundle.getString("leave"),""));
              FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_ERROR,bundle.getString("you")+ " "+bundle.getString("may")+ " "+bundle.getString("add")+ " "+bundle.getString("notes")+ " "+bundle.getString("to")+ " "+bundle.getString("request")+ " "+bundle.getString("close"),""));
              return "";
             }

             xoxxuq2b4xwwqqhxxxxxcuodetailsHome.setXoxxuq2b4xwwqqhxxxxxcuodetailsA0xxuobxbxxxxxxxxxxxsid(row.getA0xxuobxbxxxxxxxxxxxsid());
             xoxxuq2b4xwwqqhxxxxxcuodetailsHome.setInstance(xoxxuq2b4xwwqqhxxxxxcuodetailsHome.getDefinedInstance());
             xoxxuq2b4xwwqqhxxxxxcuodetailsHome.getInstance().setZhxxzzfxhhxxxxxxxxxxstatusfl(mclosed);
             xoxxuq2b4xwwqqhxxxxxcuodetailsHome.allowUpdate();
              // update order status here if only one order
              // detail status can be approved or reject or waiting approval
              // order can be waiting approval (all details waiting) or incomplete (at least one waiting)  or complete (no waiting)             
             Integer coSid=row.getTrexuq244xwwqqhxxxxxcuorders().getA0xxuobxbxxxxxxxxxxxsid();  
             Integer tempCount=0;
        
            if (trexuq244xwwqqhxxxxxcuordersList.entityDetailedList(coSid) != null){
             for (Xoxxuq2b4xwwqqhxxxxxcuodetails itemOrderDetail : trexuq244xwwqqhxxxxxcuordersList.entityDetailedList(coSid)) {
              if(itemOrderDetail.getZhxxzzfxhhxxxxxxxxxxstatusfl() !=mactive && itemOrderDetail.getZhxxzzfxhhxxxxxxxxxxstatusfl() !=mclosed  ){
               tempCount=tempCount+1;
              }   
             }
             if(tempCount == 0){
              trexuq244xwwqqhxxxxxcuordersHome.clearInstance();
              trexuq244xwwqqhxxxxxcuordersHome.setInstance(row.getTrexuq244xwwqqhxxxxxcuorders());
              trexuq244xwwqqhxxxxxcuordersHome.getInstance().setZcxxzzfxhhxxxxxxxxxxstatusfl(mclosed);
              trexuq244xwwqqhxxxxxcuordersHome.allowUpdate();
              FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
               FacesMessage.SEVERITY_INFO," "+"Item"+" "+trexuq244xwwqqhxxxxxcuordersHome.getInstance().getA0xxuncobvxxxxxxxxxxpurchsno()+"  "+bundle.getString("closed")+ " "+bundle.getString("status")+ " "+bundle.getString("now"),""));

             }
            }


             return "";
    }
    public String addNotesToPass(Xoxxuq2b4xwwqqhxxxxxcuodetails row) {
             // used by ebasketin,mbasketin or basketoutcase (ci-d) and basketout (fi-d)
             //entity already exists, so either do a query or getDefinedInstance to get it
             // for new entity use clearInstance/setInstance pattern
             if(row.getZhxxzzfxhhxxxxxxxxxxstatusfl() >= minvoiced){
              FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
               FacesMessage.SEVERITY_ERROR,bundle.getString("not")+ " "+bundle.getString("allowed")+ " "+bundle.getString("now"),""));

              return "";
             }
             trexuq244xwwqqhxxxxxcuorders=row.getTrexuq244xwwqqhxxxxxcuorders();
             if(this.getNotesToPass().trim().length() < 1){
              FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
               FacesMessage.SEVERITY_INFO,bundle.getString("notes")+ " "+bundle.getString("empty")+ ", "+bundle.getString("click")+ " "+bundle.getString("enter")+ " "+bundle.getString("notes")+ " "+bundle.getString("/")+ " "+bundle.getString("attachment")+ " "+bundle.getString("panel")+ " "+bundle.getString("first"),""));

              return "";
             }
       //add notes and attachments
       trexuq244xwwqqhxxxxxcuorders=row.getTrexuq244xwwqqhxxxxxcuorders();
       fpxxfq1a5xwwqqhxxxxxitemHome.clearInstance();
       fpxxfq1a5xwwqqhxxxxxitem=fpxxfq1a5xwwqqhxxxxxitemHome.getInstance();
       fpxxfq1a5xwwqqhxxxxxitem.setB1xxuszsbvxxxxxxxxxxdescript(trexuq244xwwqqhxxxxxcuorders.getA0xxuncobvxxxxxxxxxxpurchsno()+"/"+trexuq244xwwqqhxxxxxcuorders.getJxxxuq201xwwqqhxxxxxcustomer().getC1xxuslnbvixxxxxxxxxlastname()+":"+this.getNotesToPass());
       timeStamp = new SimpleDateFormat("yyyy.MM.dd.HH.mm.ss").format(new Date());
       fpxxfq1a5xwwqqhxxxxxitem.setW7xxuznxbvxxxxxxxxxxnotes(timeStamp+":"+this.getNotesToPass());
       if(trexuq244xwwqqhxxxxxcuorders.getFpxxfq1a5xwwqqhxxxxxitem().getC6xxusxrbv16xxxxxxxxtype().equals("CI-D")){
        fpxxfq1a5xwwqqhxxxxxitem.setC6xxusxrbv16xxxxxxxxtype("CI-D");
       }else{
        fpxxfq1a5xwwqqhxxxxxitem.setC6xxusxrbv16xxxxxxxxtype("FI-D");
       }  
       calendar.setTime(Calendar.getInstance().getTime());
       calendar.add(Calendar.MONTH, 3);
       fpxxfq1a5xwwqqhxxxxxitem.setZ2xxcxxrlxxxxxxxxxxxdateexpiry(calendar.getTime());
       //make child of order item
       fpxxfq1a5xwwqqhxxxxxitem.setFpxxfq1a5xwwqqhxxxxxitem(trexuq244xwwqqhxxxxxcuorders.getFpxxfq1a5xwwqqhxxxxxitem());
       fpxxfq1a5xwwqqhxxxxxitemHome.persist();//if any image uploaded it should get persisted
       this.setNotesToPass("");//empty so that the same notes doesnt get added again

             return "";
    }


    public String updateProductsToOrder(Xoxxuq2b4xwwqqhxxxxxcuodetails row) {
     // partly used to pass cuorder sid to updatedetailsall for the main logic
     // used by shopping checkout only 
     // make a list items to be removed from the original carted list
     // when order is confirmed/completed the item and customer entities need update as well. there is already logic in save
     // flow is as follows
     // loops through order details ie lineitems, if checked for remove then subtract qty from item and remove from order details 
     // no logic for order itself ???
     // since no detail dont call updatecdetails
     // call cartpersist which will
     //  since no current detail wont call updatecdetails
     //  (1) showrunt
     //  (2) persistrunt
     //  (3) remove() detail 
     //  (4) update order  
     // if not ckecked, then call ordersHome cartpersist with currentCartedPO detail sid,change option and tempCount (1 means first call)
     // cartPersist will get the detail order and call
     //  (1) updatecdetails which updates the order detail qty based on itemTempQty (itemDetailsBrowse view has this)
     //  (2) showrunt which recalculates both details and order itself based on quantity or say tax value( a cart can be idle for days)
     //  (3) persistrunt which resets all the values for the order itself (detail values done in showrunt) using values calculated in showrunt
     //     each showrunt for a detail will recalculate both its own value and its master but persistrunt simply copies the variable values into properties
     //  (4) update() detail
     //  (5) update order      
     //@see 

     Integer tempCount=1;
     Integer tempRemoveCount=0;
     try{
         FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
          FacesMessage.SEVERITY_INFO,bundle.getString(""),""));
        trexuq244xwwqqhxxxxxcuorders=null;
        List<Xoxxuq2b4xwwqqhxxxxxcuodetails> checkedItemOrders = new ArrayList<Xoxxuq2b4xwwqqhxxxxxcuodetails>();
            // above checkedItemOrders list does not seem to be used, remove ??tyName}List.getCartedList("cart")) {
            if (checked.get(row.getA0xxuobxbxxxxxxxxxxxsid())) {
             //remove fron cuodetails, but leave cuorder values alone since cuorder values gets recalculated using the remaining details 
             // wrong what if only one detail and removed ???
             xoxxuq2b4xwwqqhxxxxxcuodetailsHome.clearInstance();
             if (checked.get(row.getA0xxuobxbxxxxxxxxxxxsid())) {
                xoxxuq2b4xwwqqhxxxxxcuodetailsHome.setInstance(row);
                xoxxuq2b4xwwqqhxxxxxcuodetails = xoxxuq2b4xwwqqhxxxxxcuodetailsHome.getInstance();
                // add logic to adj cuorder dont forget misc,deliv tax etc
                // also item and customer order total need to be adjusted
                 trexuq244xwwqqhxxxxxcuorders=row.getTrexuq244xwwqqhxxxxxcuorders();
                 trexuq244xwwqqhxxxxxcuordersHome.setInstance(trexuq244xwwqqhxxxxxcuorders);
                 currentCartedPOSID=row.getA0xxuobxbxxxxxxxxxxxsid();
                 fpxxfq1a5xwwqqhxxxxxitemHome.clearInstance();
                 fpxxfq1a5xwwqqhxxxxxitemHome.setInstance(row.getFpxxfq1a5xwwqqhxxxxxitem());
                 fpxxfq1a5xwwqqhxxxxxitem=row.getFpxxfq1a5xwwqqhxxxxxitem();
                 fpxxfq1a5xwwqqhxxxxxitemHome.getInstance().setZ7xxzxxxlvxxxxxxxxxxcuordqty(fpxxfq1a5xwwqqhxxxxxitemHome.getInstance().getZ7xxzxxxlvxxxxxxxxxxcuordqty().subtract(row.getZ3xxeqxxbvnxxxxxxxxxqtyordrd()));
                 fpxxfq1a5xwwqqhxxxxxitemHome.allowUpdate();               
                  //xoxxuq2b4xwwqqhxxxxxcuodetailsHome.remove(); remove after qty etc used in showrunt
                 // option u means detail removed but no need to update the order unless we are here last ????
                 // quantity passing is redundant because unlike addprodtoorder here details qty gets updated
                 // causing lazy error, move updating customer into cartpersist like C
                 //jxxxuq201xwwqqhxxxxxcustomer=trexuq244xwwqqhxxxxxcuorders.getJxxxuq201xwwqqhxxxxxcustomer();   
                 trexuq244xwwqqhxxxxxcuordersHome.cartpersist(currentCartedPOSID,"u",tempCount,row.getZ3xxeqxxbvnxxxxxxxxxqtyordrd());
                 tempRemoveCount=tempRemoveCount+1;
             }
            }else{
                 // row not being removed
                 // qty change gets persisted by hibernate but amount,tax etc needs to be manually done for details
                 // and order before persist
                 trexuq244xwwqqhxxxxxcuorders=row.getTrexuq244xwwqqhxxxxxcuorders();
                 trexuq244xwwqqhxxxxxcuordersHome.setInstance(trexuq244xwwqqhxxxxxcuorders);
                 currentCartedPOSID=row.getA0xxuobxbxxxxxxxxxxxsid();
                 fpxxfq1a5xwwqqhxxxxxitemHome.clearInstance();
                 fpxxfq1a5xwwqqhxxxxxitemHome.setInstance(row.getFpxxfq1a5xwwqqhxxxxxitem());
                 fpxxfq1a5xwwqqhxxxxxitem=row.getFpxxfq1a5xwwqqhxxxxxitem();
                  // put detail sid not order sid because we need detail item and can also get order
                 // option c means change the order based on any qty change on the detail
                 trexuq244xwwqqhxxxxxcuordersHome.setNextShow(true);// needed to update totals in showrunt
                 trexuq244xwwqqhxxxxxcuordersHome.cartpersist(currentCartedPOSID,"c",tempCount,row.getZ3xxeqxxbvnxxxxxxxxxqtyordrd());
            }
/* line should not be overwritten anymore, updateparent can do this plus line value -1 is used for remove
                 tempCount=tempCount+1; // applicable to both "c" and "u" 
        // added logic to check whether any detail removed and if so just re lineNumber them because multiple can be removed
        // cartedList gets cuodetails for cart order  sid
        if (fpxxfq1a5xwwqqhxxxxxitemList.getCartedList("cart") != null && tempRemoveCount > 0){
         tempCount=0;
         for (Xoxxuq2b4xwwqqhxxxxxcuodetails itemOrderDetail : fpxxfq1a5xwwqqhxxxxxitemList.getCartedList("cart")) {
          tempCount=tempCount+1;
          itemOrderDetail.setB1xxzo11bvlxxxxxxxxxline(tempCount);
          xoxxuq2b4xwwqqhxxxxxcuodetailsHome.update();
         }
        }
        // since qtyordprev logic has flaw, calculate master qty here as well
        if (trexuq244xwwqqhxxxxxcuordersList.entityLessStatusDetailedList(trexuq244xwwqqhxxxxxcuorders.getA0xxuobxbxxxxxxxxxxxsid(),-1) != null ){
         qtyTotal=BigDecimal.ZERO;
         tempCount=0;
         for (Xoxxuq2b4xwwqqhxxxxxcuodetails rowD : trexuq244xwwqqhxxxxxcuordersList.entityLessStatusDetailedList(trexuq244xwwqqhxxxxxcuorders.getA0xxuobxbxxxxxxxxxxxsid(),-1)) {
          tempCount=tempCount+1;
          rowD.setB1xxzo11bvlxxxxxxxxxline(tempCount);
          if (tempRemoveCount > 0){
	   xoxxuq2b4xwwqqhxxxxxcuodetailsHome.update();
          }
          qtyTotal=qtyTotal.add(rowD.getZ3xxeqxxbvnxxxxxxxxxqtyordrd()); 
         }
         //now a call a method in cuordersHome to update instance w recalculated quantity. update order from here did not work
         trexuq244xwwqqhxxxxxcuordersHome.resetOrderQty(trexuq244xwwqqhxxxxxcuorders.getA0xxuobxbxxxxxxxxxxxsid(),qtyTotal);   
        }
*/

        if(tempRemoveCount == 0){
         FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                FacesMessage.SEVERITY_ERROR,bundle.getString("No")+ " "+bundle.getString("row")+ " "+bundle.getString("selected"),""));
        }
        //put recalculate logic here
        checked.clear(); // If necessary.
        

       } catch ( Exception e){
         FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_ERROR,bundle.getString("update")+ " "+bundle.getString("products")+ " "+bundle.getString("error")+ " "+e.getMessage(),""));

       }
       return "";
    }

    public void updateProductsToApprove(String guid) {
    // not used any more except for email, change labels at calling web page

/**
    * sends order details for approval
    * @param args -1
    * param 1 guid can be  
    * @return none void type
    * @exception None.
    * @see 
    * in the table called options, column called value will have filter value which will dictate whether it will be hidden,visible or 
    * to use the specified value rather than value in column called options
    * to hide a value in column called options for say activity entity put h=1a. to hide for both item and activity put value= h=1a,18
    * to show a value in column called options for say activity entity put s=1a. to show for both item and activity put value= s=1a,18
    * to show based on locale put in pupose ca=manual-cheque us=manual-check  in value put ca=m us=m
    * to use value rather than whats in options colimn, use v=xxx where xxx is the value.
    */
     // guid can be email (cbasketin) ,reqapprove,reqapproveCI(basketOut,basketOutCase) or approveL1,approveL1CI(basketin,ebasketIn) or employeefinalApproveCI,managerfinalApprove(mbasketin,vbasketin)  
     // customer request makes it pending 16, manager approves to manager approved/recommended 32 or rejects to 4
     // vendor will only see 32 and up and can approve to 64 or reject to 256
     // based on updateProductsToShip(guid) used by shoppingcartbean when customer confirms and guid came from paypal
     // approveProductsToOrder method updates the cuorder detail as approved and reduces the offer count by one
     // the order itself was not updated
     // this method can send an Email with order approved status
     // or  
     // assume customer (cbasketin) does not deal with vendor directly
     // ivoked by customer (cbasketin) with guid as cemail to get status and an email will be sent to manager as a reminder 
     // invoked by vendor (vbasketin) guid being 'email' when vendor send status to Manager
     // invoked by manager (basketin) guid being 'jay' 
     // invoked by *customer or manager (itemdetailsPaidSelect -> basketout.xhtml) guid being 'jay' when vendor approval is           // requested by client manager for a customer. *Customer or not can be set via client table 
     // and email sent to vendor
     // if not email request
     // until customer requests approval order and detail status is 0 or 1 ie inactive or active but no request for approval yet
     // customer can add or update 
     // go through details and order itself to change status assume all items and order itself is for approval (16) pending and         approved(32) or rejected (4)
     // if prod service prepay then put usage counter in user allow3 as string value
     if(guid.equals("email")){
      // assume will be used by customer ie one basket
      if(fpxxfq1a5xwwqqhxxxxxitemList.getCurrentCartOrder("basket") == null){
       FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("empty")+ " "+bundle.getString("list"),""));

       return;
      }else{
       Trexuq244xwwqqhxxxxxcuorders currentBasket=fpxxfq1a5xwwqqhxxxxxitemList.getCurrentCartOrder("basket").get(0);    
       trexuq244xwwqqhxxxxxcuordersList.eSend("EMAIL",currentBasket.getA0xxuncobvxxxxxxxxxxpurchsno(),currentBasket.getA0xxuncobvxxxxxxxxxxpurchsno(),false,currentBasket.getJxxxuq201xwwqqhxxxxxcustomer().getQ4xxhxxxbv24xxxxxxxximailaddr());
       FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("email")+ " "+bundle.getString("sent")+" "+bundle.getString("to")+ " "+currentBasket.getJxxxuq201xwwqqhxxxxxcustomer().getQ4xxhxxxbv24xxxxxxxximailaddr()+" "+bundle.getString("for")+" "+bundle.getString("submission")+" "+currentBasket.getA0xxuncobvxxxxxxxxxxpurchsno(),""));

       return;
      }
     }
     // reqApprove/reqApproveCI
     Integer tempCount=0;
     Integer waiting=0;
     Integer approved=0;
     Integer elementsN=0;
     String  prevOrder="";
     List<Xoxxuq2b4xwwqqhxxxxxcuodetails> dList=null;
     // order can be waiting approval (all details waiting) or incomplete (at least one waiting) or complete (no waiting)             
     try{
       // BasketedList returns status less than 64 ie not vendor aprroved/rejected and not closed
       if(guid.equals("reqApprove") || guid.equals("reqApproveCI")){
       if(guid.equals("reqApprove")){
        if(fpxxfq1a5xwwqqhxxxxxitemList.getBasketedList("basket") == null){
         FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("empty")+ " "+bundle.getString("list"),""));

                return;
        }
        dList=fpxxfq1a5xwwqqhxxxxxitemList.getBasketedList("basket");
       }else{
        if(fpxxfq1a5xwwqqhxxxxxitemList.getBasketedList("basketCI") == null){
         FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("empty")+ " "+bundle.getString("list"),""));
                return;
        }
        dList=fpxxfq1a5xwwqqhxxxxxitemList.getBasketedList("basketCI");
       }
        tempCount=0;
        waiting=0;
        approved=0;
        elementsN=0;
        yxxxuh566xwwqqwxxxxxuserHome.getInstance();
        yxxxuh566xwwqqwxxxxxuser=yxxxuh566xwwqqwxxxxxuserHome.getInstance();

        for (Xoxxuq2b4xwwqqhxxxxxcuodetails itemOrderDetail : dList) {
                 tempCount=tempCount+1;
                 //input active/1 or inactive/0 output  mpaid/for approval/16 for all details and corresponding orders 
                 // will come here if customer requests approval 
                 if (itemOrderDetail.getZhxxzzfxhhxxxxxxxxxxstatusfl() < 16){
                  itemOrderDetail.setZhxxzzfxhhxxxxxxxxxxstatusfl(mpaid);
	          xoxxuq2b4xwwqqhxxxxxcuodetailsHome.setInstance(itemOrderDetail);
	          xoxxuq2b4xwwqqhxxxxxcuodetailsHome.update();
                 }
                 trexuq244xwwqqhxxxxxcuorders=itemOrderDetail.getTrexuq244xwwqqhxxxxxcuorders();
                 if (isBitSet(itemOrderDetail.getZhxxzzfxhhxxxxxxxxxxstatusfl(),_mpaid)) {
                  waiting=waiting+1;
                 }
        }
        // for a customer there will be one cart/basket order
                 // now prepare order itself for update and check for customer allowed search quota
                 // jay update order B5xxztqrlxxxxxxxxxxxqtytotal??
                 // reduce user allow3 field if order status is less than 16, temporarily convert to bigDecimal and put back as string
                 // using userprofl footer (decimal) instead of user allow3 
                 if(yxxxuh566xwwqqwxxxxxuser.getY6xxuxxxivxxxxxxxxxxallow3() !=null 
                     && trexuq244xwwqqhxxxxxcuorders.getZcxxzzfxhhxxxxxxxxxxstatusfl() <16){
	          yxxxuh566xwwqqwxxxxxuser = (Yxxxuh566xwwqqwxxxxxuser) entityManager
 					.createQuery(
 							"select cc from Yxxxuh566xwwqqwxxxxxuser cc where cc.a0xxukuxbvxxxxxxxxxxid = :username and cc.zzxxu2oxxhxxxxxxxxxxowner2 = :owner2 ")
 					.setParameter("username", customIdentity.getOwner().substring(0,ownerCode.length()-3))
 					.setParameter("owner2", owner2Code)
 					.getSingleResult();
                  reducedQty=new BigDecimal("0.0");
                  yxxxch575xwwqqhxxxxxuserprofl=yxxxuh566xwwqqwxxxxxuserList.getUserProfiles();
                  if(yxxxch575xwwqqhxxxxxuserprofl.getE4xxzxxxlvxxxxxxxxxxfooter()!=null){
                   reducedQty= yxxxch575xwwqqhxxxxxuserprofl.getE4xxzxxxlvxxxxxxxxxxfooter();
                  }
                  reducedQty=reducedQty.subtract(trexuq244xwwqqhxxxxxcuorders.getB5xxztqrlxxxxxxxxxxxqtytotal());
                  yxxxch575xwwqqhxxxxxuserprofl.setE4xxzxxxlvxxxxxxxxxxfooter(reducedQty);
                  yxxxch575xwwqqhxxxxxuserproflHome.setInstance(yxxxch575xwwqqhxxxxxuserprofl);
                  yxxxch575xwwqqhxxxxxuserproflHome.update();
                 }
        // now update order itself to customer approved
                 trexuq244xwwqqhxxxxxcuorders.setZcxxzzfxhhxxxxxxxxxxstatusfl(mpaid);
                 String longerNotes=notesToPass+trexuq244xwwqqhxxxxxcuorders.getYexxuznybvxxxxxxxxxxnotes();
                 if(longerNotes !=null){
                  if(longerNotes.length() >60){
                   longerNotes=longerNotes.substring(0,60);
                  }
                  trexuq244xwwqqhxxxxxcuorders.setYexxuznybvxxxxxxxxxxnotes(longerNotes);
                 }
                 //note will be saved in a child item further down
                 trexuq244xwwqqhxxxxxcuordersHome.clearInstance();
                 trexuq244xwwqqhxxxxxcuordersHome.setInstance(trexuq244xwwqqhxxxxxcuorders);
                 trexuq244xwwqqhxxxxxcuordersHome.superUpdate();
         //now create child item to save chronology of case handling
                 Fpxxfq1a5xwwqqhxxxxxitem product=trexuq244xwwqqhxxxxxcuorders.getFpxxfq1a5xwwqqhxxxxxitem();
                 if (product.getC6xxusxrbv16xxxxxxxxtype().equals("CI-D")){
                  fpxxfq1a5xwwqqhxxxxxitemHome.clearInstance();
                  fpxxfq1a5xwwqqhxxxxxitem=fpxxfq1a5xwwqqhxxxxxitemHome.getInstance();
                  fpxxfq1a5xwwqqhxxxxxitem.setB1xxuszsbvxxxxxxxxxxdescript(trexuq244xwwqqhxxxxxcuorders.getJxxxuq201xwwqqhxxxxxcustomer().getC1xxuslnbvixxxxxxxxxlastname()+trexuq244xwwqqhxxxxxcuorders.getJxxxuq201xwwqqhxxxxxcustomer().getA0xxukxxbvxxxxxxxxxxcustomer()+this.getNotesToPass());
                  timeStamp = new SimpleDateFormat("yyyy.MM.dd.HH.mm.ss").format(new Date());
                  fpxxfq1a5xwwqqhxxxxxitem.setW7xxuznxbvxxxxxxxxxxnotes(timeStamp+":"+this.getNotesToPass());
                  fpxxfq1a5xwwqqhxxxxxitem.setC6xxusxrbv16xxxxxxxxtype("CI-D");
                  //make it a child item 
                  fpxxfq1a5xwwqqhxxxxxitem.setFpxxfq1a5xwwqqhxxxxxitem(product);
                  calendar.setTime(Calendar.getInstance().getTime());
                  calendar.add(Calendar.MONTH, 3);
                  fpxxfq1a5xwwqqhxxxxxitem.setZ2xxcxxrlxxxxxxxxxxxdateexpiry(calendar.getTime());
                  fpxxfq1a5xwwqqhxxxxxitemHome.persist();
                 }
        this.setNotesToPass("");//avoid reusing the same content

         //now save the selected attachments 
         //checkMapI[1],2 etc was set via checkBoxes
         if (checkMapI[1]){ 
          setMailingImage1(yxxxuq1n1xwwqqqxxxxxblobdataHome.getBlobdata("blobdata","B3R-ATTACHMENT-1-C","PIC",1) );
          setMailingImage1TypeMime(yxxxuq1n1xwwqqqxxxxxblobdataHome.getBlobdataTypeMime("blobdata","B3R-ATTACHMENT-1-C","PIC",1) );
         }  
         if (checkMapI[2]){ 
          setMailingImage2(yxxxuq1n1xwwqqqxxxxxblobdataHome.getBlobdata("blobdata","B3R-ATTACHMENT-1-C","PIC",2) );
          setMailingImage2TypeMime(yxxxuq1n1xwwqqqxxxxxblobdataHome.getBlobdataTypeMime("blobdata","B3R-ATTACHMENT-1-C","PIC",2) );
         }  
         if (checkMapI[3]){ 
          setMailingImage3(yxxxuq1n1xwwqqqxxxxxblobdataHome.getBlobdata("blobdata","B3R-ATTACHMENT-1-C","PIC",3) );
          setMailingImage3TypeMime(yxxxuq1n1xwwqqqxxxxxblobdataHome.getBlobdataTypeMime("blobdata","B3R-ATTACHMENT-1-C","PIC",3) );
         }  
         if (checkMapI[4]){ 
          setMailingImage4(yxxxuq1n1xwwqqqxxxxxblobdataHome.getBlobdata("blobdata","B3R-ATTACHMENT-1-C","PIC",4) );
          setMailingImage4TypeMime(yxxxuq1n1xwwqqqxxxxxblobdataHome.getBlobdataTypeMime("blobdata","B3R-ATTACHMENT-1-C","PIC",4) );
         }  
         if (checkMapI[5]){ 
          setMailingImage5(yxxxuq1n1xwwqqqxxxxxblobdataHome.getBlobdata("blobdata","B3R-ATTACHMENT-1-C","PIC",5) );
          setMailingImage5TypeMime(yxxxuq1n1xwwqqqxxxxxblobdataHome.getBlobdataTypeMime("blobdata","B3R-ATTACHMENT-1-C","PIC",5) );
         }  
         // mailingtext1,2 etc are saved as string but mailcontent converts to byte
         setMailingText(yxxxuq1m1xwwqqqxxxxxclobdataHome.getClobdata("clobdata","A3R-ATTACHMENT-1-C","TXT",0,1200) );

         if (checkMapT[1]){ 
          setMailingText1(yxxxuq1m1xwwqqqxxxxxclobdataHome.getClobdata("clobdata","A3R-ATTACHMENT-1-C","TXT",1,1200) );
         }  
         if (checkMapT[2]){ 
          setMailingText2(yxxxuq1m1xwwqqqxxxxxclobdataHome.getClobdata("clobdata","A3R-ATTACHMENT-1-C","TXT",2,1200) );
         }  
         if (checkMapT[3]){ 
          setMailingText3(yxxxuq1m1xwwqqqxxxxxclobdataHome.getClobdata("clobdata","A3R-ATTACHMENT-1-C","TXT",3,1200) );
         }  
         if (checkMapT[4]){ 
          setMailingText4(yxxxuq1m1xwwqqqxxxxxclobdataHome.getClobdata("clobdata","A3R-ATTACHMENT-1-C","TXT",4,1200) );
         }  

         if (checkMapT[5]){ 
          setMailingText5(yxxxuq1m1xwwqqqxxxxxclobdataHome.getClobdata("clobdata","A3R-ATTACHMENT-1-C","TXT",5,1200) );
         }  
         //



       }              
       if(guid.equals("approveL1") || guid.equals("approveL1CI")){
       if(guid.equals("approveL1")){
        if(fpxxfq1a5xwwqqhxxxxxitemList.getCustomerRequestedAndUpCartedListCI("basket") == null){
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("empty")+ " "+bundle.getString("list"),""));

                return;
        }
        dList=fpxxfq1a5xwwqqhxxxxxitemList.getCustomerRequestedAndUpCartedListCI("basket");
        elementsN=fpxxfq1a5xwwqqhxxxxxitemList.getCustomerRequestedAndUpCartedListCI("basket").size();
        prevOrder= fpxxfq1a5xwwqqhxxxxxitemList.getCustomerRequestedAndUpCartedListCI("basket").get(0).getTrexuq244xwwqqhxxxxxcuorders().getA0xxuncobvxxxxxxxxxxpurchsno();
       }else{
        if(fpxxfq1a5xwwqqhxxxxxitemList.getCustomerRequestedAndUpCartedListCI("basket") == null){
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("empty")+ " "+bundle.getString("list"),""));
                return;
        }
         dList=fpxxfq1a5xwwqqhxxxxxitemList.getCustomerRequestedAndUpCartedListCI("basket");
         elementsN=fpxxfq1a5xwwqqhxxxxxitemList.getCustomerRequestedAndUpCartedListCI("basket").size();
         prevOrder= fpxxfq1a5xwwqqhxxxxxitemList.getCustomerRequestedAndUpCartedListCI("basket").get(0).getTrexuq244xwwqqhxxxxxcuorders().getA0xxuncobvxxxxxxxxxxpurchsno();
       }
        tempCount=0;
        waiting=0;
        approved=0;
        for (Xoxxuq2b4xwwqqhxxxxxcuodetails itemOrderDetail : dList) {
            tempCount=tempCount+1;
            
                 //input mpaid/for approval is 16 output details mreturn/rejected=4 or mshipped/approved=32 or stays 16
                 // order status will depend on details
                 // will come here if manager presses process approvals and will show mixed status but only >16
                
                 if (itemOrderDetail.getZhxxzzfxhhxxxxxxxxxxstatusfl() < 16){
                  //ignore since customer not given ok yet
                 }else{
                  // ignore since approve/reject for details was done via approve/reject button, only order status needs setting
                 }
                 trexuq244xwwqqhxxxxxcuorders=itemOrderDetail.getTrexuq244xwwqqhxxxxxcuorders();
                 if (isBitSet(itemOrderDetail.getZhxxzzfxhhxxxxxxxxxxstatusfl(),_mpaid)) {
                  waiting=waiting+1;
                 }
                 if (isBitSet(itemOrderDetail.getZhxxzzfxhhxxxxxxxxxxstatusfl(),_mshipped)) {
                  approved=approved+1;
                 }
                 if(!itemOrderDetail.getTrexuq244xwwqqhxxxxxcuorders().getA0xxuncobvxxxxxxxxxxpurchsno().equals(prevOrder)
                     || elementsN == tempCount  ){
                  // manager can see many baskets now update the last basket order in the loop  
                  trexuq244xwwqqhxxxxxcuordersHome.setInstance(trexuq244xwwqqhxxxxxcuorders);
                  // customer initiated 
                  if(waiting == tempCount){
                   // may already be set
                   trexuq244xwwqqhxxxxxcuordersHome.getInstance().setZcxxzzfxhhxxxxxxxxxxstatusfl(mpaid);
                  }else{
                   if (waiting == 0){
                    // means all set to either reject/approved by manager
                    if(approved == tempCount){ 
                     // all approved
                     trexuq244xwwqqhxxxxxcuordersHome.getInstance().setZcxxzzfxhhxxxxxxxxxxstatusfl(mshipped);
                    }else{
                     // some rejected by manager and wont go to vendor approval
                     trexuq244xwwqqhxxxxxcuordersHome.getInstance().setZcxxzzfxhhxxxxxxxxxxstatusfl(mreturn);
                    }
                   }else{
                    //skip since customer has not given ok to all 
                   }
                  }
                  trexuq244xwwqqhxxxxxcuordersHome.superUpdate();
                  tempCount=0;
                  waiting=0;
                  approved=0;
                  prevOrder=itemOrderDetail.getTrexuq244xwwqqhxxxxxcuorders().getA0xxuncobvxxxxxxxxxxpurchsno();
                 }
        }

       }              
       if(guid.equals("approveFinal")||guid.equals("approveFinalCI")){
       if(guid.equals("approveFinal")){
        if(fpxxfq1a5xwwqqhxxxxxitemList.getManagerApprovedRejectedCartedList("basket") == null){
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("empty")+ " "+bundle.getString("list"),""));
                return;
        }
         elementsN=fpxxfq1a5xwwqqhxxxxxitemList.getManagerApprovedRejectedCartedList("basket").size();
         prevOrder= fpxxfq1a5xwwqqhxxxxxitemList.getManagerApprovedRejectedCartedList("basket").get(0).getTrexuq244xwwqqhxxxxxcuorders().getA0xxuncobvxxxxxxxxxxpurchsno();
         dList=fpxxfq1a5xwwqqhxxxxxitemList.getManagerApprovedRejectedCartedList("basket");
       }else{
        if(fpxxfq1a5xwwqqhxxxxxitemList.getEmployeeApprovedRejectedCartedListCI("basket") == null){
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("empty")+ " "+bundle.getString("list"),""));
                return;
        }
         elementsN=fpxxfq1a5xwwqqhxxxxxitemList.getEmployeeApprovedRejectedCartedListCI("basket").size();
         prevOrder= fpxxfq1a5xwwqqhxxxxxitemList.getEmployeeApprovedRejectedCartedListCI("basket").get(0).getTrexuq244xwwqqhxxxxxcuorders().getA0xxuncobvxxxxxxxxxxpurchsno();
         dList=fpxxfq1a5xwwqqhxxxxxitemList.getEmployeeApprovedRejectedCartedListCI("basket");
       }
        tempCount=0;
        waiting=0;
        approved=0;
        for (Xoxxuq2b4xwwqqhxxxxxcuodetails itemOrderDetail : dList) {
            tempCount=tempCount+1;
                 //input mshipped/approved=32 output either invoiced/Final approved(64) or deleted/Final rejected (256)
                 // or stays 32
                 // order status will depend on details
                 // will come here if vendor process approvals and will show only > 16 ie 32 (manager approved)
                 // manager rejectd ones will not be shown to next level ie vendor
                 // ignore detail status since approve/reject for details was done via approve/reject button,
                 // only order status needs setting
                 trexuq244xwwqqhxxxxxcuorders=itemOrderDetail.getTrexuq244xwwqqhxxxxxcuorders();
                 if (itemOrderDetail.getZhxxzzfxhhxxxxxxxxxxstatusfl() < 64) {
                  waiting=waiting+1;
                 }
                 if (isBitSet(itemOrderDetail.getZhxxzzfxhhxxxxxxxxxxstatusfl(),_minvoiced)) {
                  // vendor/final approved
                  approved=approved+1;
                 }
                 if(!itemOrderDetail.getTrexuq244xwwqqhxxxxxcuorders().getA0xxuncobvxxxxxxxxxxpurchsno().equals(prevOrder)
                    || elementsN == tempCount){
                  // vendor can see many baskets now update the last basket order in the loop  
                   // all set to either reject/approved by vendor
                   if(approved == tempCount){ 
                    // all approved
                    trexuq244xwwqqhxxxxxcuordersHome.getInstance().setZcxxzzfxhhxxxxxxxxxxstatusfl(minvoiced);
                   }else{
                    // some rejected by vendor 
                    trexuq244xwwqqhxxxxxcuordersHome.getInstance().setZcxxzzfxhhxxxxxxxxxxstatusfl(mdel);
                   }
                  trexuq244xwwqqhxxxxxcuordersHome.setInstance(trexuq244xwwqqhxxxxxcuorders);
                  trexuq244xwwqqhxxxxxcuordersHome.superUpdate();
                  tempCount=0;
                  waiting=0;
                  approved=0;
                  prevOrder=itemOrderDetail.getTrexuq244xwwqqhxxxxxcuorders().getA0xxuncobvxxxxxxxxxxpurchsno();
                 }
        }
       } 
                
     } catch ( Exception e){
		//log.severe( e.getMessage());
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("error")+ " "+bundle.getString("condition")+ ", "+bundle.getString("try")+ " "+bundle.getString("later"),""));

     }
    }



    public String updateInvoicesToPay(String key,String guid,String authId,Boolean authCapture) {
     // invoked by shoppingCartBean when paypal invoice payment is confirmed by customer , guid ref comes from paypal or cod if paypal not involved (pos cash payment?)
     //calls cartExtended_persist to create invoice
     // go through details and order it self to change status assume all items and order itself is paid and ready for shipment/pickup
     // if guid has @ symbol then save it temp customer record as email addr
     // if prod service prepay then put usage counter in user allow3 as string value
     Integer tempCount=0;
     String jayMat="";
     try{
        for (Xoxxuq2a4xwwqqhxxxxxcuidetails itemOrderDetail : fpxxfq1a5xwwqqhxxxxxitemList.getInvoicedCartedListFor(key)) {
                 //itemOrderDetail.setZhxxzzfxhhxxxxxxxxxxstatusfl(mpaid); cuide no status use invoice itself
                 jayMat=itemOrderDetail.getFpxxfq1a5xwwqqhxxxxxitem().getA0xxukixbxxxxxxxxxxxmatcode();
	         xoxxuq2a4xwwqqhxxxxxcuidetailsHome.setInstance(itemOrderDetail);
	         xoxxuq2a4xwwqqhxxxxxcuidetailsHome.update();
                 trexuq266xwwqqhxxxxxcuinvoiceHome.clearInstance();
                 trexuq266xwwqqhxxxxxcuinvoiceHome.setTrexuq266xwwqqhxxxxxcuinvoiceA0xxuobxbxxxxxxxxxxxsid(itemOrderDetail.getTrexuq266xwwqqhxxxxxcuinvoice().getA0xxuobxbxxxxxxxxxxxsid());
	         trexuq266xwwqqhxxxxxcuinvoice=trexuq266xwwqqhxxxxxcuinvoiceHome.getDefinedInstance();
        }
                 // now update invoice itself 
                 /// added accounting posting,convert the order to an invoice first, if not cod then convert invoice to payment
                 /// once cod payment received manually convert to payment 

                 if(guid.length() > 20){
                  trexuq266xwwqqhxxxxxcuinvoice.setYcxxuxxrbvxxxxxxxxxxattach(guid.substring(0,20));
                 }else{
                  trexuq266xwwqqhxxxxxcuinvoice.setYcxxuxxrbvxxxxxxxxxxattach(guid);
                 }
                 if(authId.length() > 60){
                  trexuq266xwwqqhxxxxxcuinvoice.setYdxxuznybvxxxxxxxxxxnotes(authId.substring(0,60));
                 }else{
                  trexuq266xwwqqhxxxxxcuinvoice.setYdxxuznybvxxxxxxxxxxnotes(authId);
                 }

                  trexuq266xwwqqhxxxxxcuinvoice.setZ5xxzzfxhhxxxxxxxxxxstatusfl(mpaid);
                  trexuq266xwwqqhxxxxxcuinvoice.setZ2xxzyprlxxxxxxxxxxxamountostndt(new BigDecimal("0.0"));
                
                 // change default 0 to 1 meaning paypal paid and shipment outstanding field removed
                 // delay persist of order to include new invoice
                 //trexuq244xwwqqhxxxxxcuordersHome.setInstance(trexuq244xwwqqhxxxxxcuorders);
                 //trexuq244xwwqqhxxxxxcuordersHome.superUpdate();
                 //account posting is done by xxxPosting in persist(), called by extened_persist logic which in turn is called by 
                 // below xxx.cartExtended_persist method, notice order instance with totals,deliv, tax cost etc are passed 
                 if (guid.equals("cod")){
                   //trexuq266xwwqqhxxxxxcuinvoice=trexuq266xwwqqhxxxxxcuinvoiceHome.cartExtended_persist(trexuq244xwwqqhxxxxxcuorders);
                   //trexuq244xwwqqhxxxxxcuorders.setB4xxuxxrlxxxcxxxxxxxcinvoice(trexuq266xwwqqhxxxxxcuinvoice.getA0xxuobxbxxxxxxxxxxxsid());
                   //trexuq244xwwqqhxxxxxcuordersHome.setInstance(trexuq244xwwqqhxxxxxcuorders);
                   //trexuq244xwwqqhxxxxxcuordersHome.superUpdate();
                   return null;
                 }else{
                   // check client re default authorize or capture, bypass posting in payment extemndeed if authorize
                   //trexuq266xwwqqhxxxxxcuinvoice=trexuq266xwwqqhxxxxxcuinvoiceHome.cartExtended_persist(trexuq244xwwqqhxxxxxcuorders);
                   trexuq266xwwqqhxxxxxcuinvoiceHome.superUpdate();
                   //dont call payment if only authorize
                   if (!authCapture){
                    trexuq277xwwqqhxxxxxcpayment=trexuq277xwwqqhxxxxxcpaymentHome.cartExtended_persist(trexuq266xwwqqhxxxxxcuinvoice);
                   }
                 }
                 //now update customer if non paypal payment, GUID will hold email
                 // email was already captured and saved in customer during addProductToOrder, use it for double check
                 // for paypal we can use paypal info as double check
                  //load customer manually to avoid lazyloading exception
               /*  may be we use payout for pos then may use following
                 try{
                  jxxxuq201xwwqqhxxxxxcustomer = (Jxxxuq201xwwqqhxxxxxcustomer) entityManager
 	.createQuery(
 	"select cc from Jxxxuq201xwwqqhxxxxxcustomer cc where cc.a0xxukxxbvxxxxxxxxxxcustomer = :customername and cc.zzxxu2oxxhxxxxxxxxxxowner2 = :owner2 ")
 	.setParameter("customername", trexuq266xwwqqhxxxxxcuinvoice.getJxxxuq201xwwqqhxxxxxcustomer().getA0xxukxxbvxxxxxxxxxxcustomer())
 	.setParameter("owner2", owner2Code)
 	.getSingleResult();
                 } catch ( Exception e){
	  //log.severe( e.getMessage());
                   FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                   FacesMessage.SEVERITY_ERROR,bundle.getString("error")+ " "+bundle.getString("getting")+ " "+bundle.getString("customer")+ " "+bundle.getString("record")+" "+e.getMessage(),""));
                   return null;
                  }
                  //jxxxuq201xwwqqhxxxxxcustomer.setC1xxuslnbvixxxxxxxxxlastname(yxxxuh566xwwqqwxxxxxuserHome.getClientName());
                  //jxxxuq201xwwqqhxxxxxcustomer.setC2xxu2fnbvixxxxxxxxxfirstname(yxxxuh566xwwqqwxxxxxuserHome.getA0xxukuxbvxxxxxxxxxxid2());

                  if (guid.contains("@") && guid.contains(".")){
                   if(!jxxxuq201xwwqqhxxxxxcustomer.getQ4xxhxxxbv24xxxxxxxximailaddr().equals(guid)){
                    FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_ERROR,bundle.getString("email")+ " "+jxxxuq201xwwqqhxxxxxcustomer.getQ4xxhxxxbv24xxxxxxxximailaddr()+" "+bundle.getString("not")+ ", "+bundle.getString("equal")+ " "+ guid,""));

                    return null;
                   } 
                  }
                  jxxxuq201xwwqqhxxxxxcustomerHome.setInstance(jxxxuq201xwwqqhxxxxxcustomer);
                  jxxxuq201xwwqqhxxxxxcustomerHome.allowUpdate();   
                */
                 // update user allow3 field if needed ie if item type is SI-F 
                 // trexuq244xwwqqhxxxxxcuorders has the last item and in case of fees all items should be same type ie SI-F 
                try{ 
                 if (trexuq266xwwqqhxxxxxcuinvoice.getFpxxfq1a5xwwqqhxxxxxitem().getC6xxusxrbv16xxxxxxxxtype().equals("SI-F")){
    			                yxxxuh566xwwqqwxxxxxuser = (Yxxxuh566xwwqqwxxxxxuser) entityManager
 					.createQuery(
 							"select cc from Yxxxuh566xwwqqwxxxxxuser cc where cc.a0xxukuxbvxxxxxxxxxxid = :username and cc.zzxxu2oxxhxxxxxxxxxxowner2 = :owner2 ")
 					.setParameter("username", customIdentity.getOwner().substring(0,ownerCode.length()-3))
 					.setParameter("owner2", owner2Code)
 					.getSingleResult();
        
                  yxxxch575xwwqqhxxxxxuserprofl=yxxxuh566xwwqqwxxxxxuserList.getUserProfiles();
                  if(yxxxch575xwwqqhxxxxxuserprofl.getE4xxzxxxlvxxxxxxxxxxfooter()!=null){
                   reducedQty= yxxxch575xwwqqhxxxxxuserprofl.getE4xxzxxxlvxxxxxxxxxxfooter();
                  }
                  reducedQty=reducedQty.subtract(trexuq266xwwqqhxxxxxcuinvoice.getZ3xxztqrlxxxxxxxxxxxqtytotal());
                  yxxxch575xwwqqhxxxxxuserprofl.setE4xxzxxxlvxxxxxxxxxxfooter(trexuq266xwwqqhxxxxxcuinvoice.getZ3xxztqrlxxxxxxxxxxxqtytotal().multiply(new BigDecimal("3.0")));
                  yxxxch575xwwqqhxxxxxuserproflHome.setInstance(yxxxch575xwwqqhxxxxxuserprofl);
                  yxxxch575xwwqqhxxxxxuserproflHome.update();

                        //yxxxuh566xwwqqwxxxxxuser.setY6xxuxxxivxxxxxxxxxxallow3(trexuq244xwwqqhxxxxxcuorders.getB5xxztqrlxxxxxxxxxxxqtytotal().multiply(new BigDecimal("3.0")).toString()); 
                        //yxxxuh566xwwqqwxxxxxuserHome.setInstance(yxxxuh566xwwqqwxxxxxuser);

                 }
                } catch ( Exception e){
		  //log.severe( e.getMessage());
                   FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                    FacesMessage.SEVERITY_ERROR,bundle.getString("error")+ " "+bundle.getString("getting")+ " "+bundle.getString("user")+ " "+bundle.getString("record")+" "+e.getMessage(),""));
                   return null;
                }


                //put recalculate logic here
                //checked.clear(); // If necessary.
                return "updated";

     } catch ( Exception e){
		//log.severe( e.getMessage());
                FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_ERROR,bundle.getString("error")+ " "+bundle.getString("condition")+ " "+e.getMessage()+" "+bundle.getString("try")+ " "+bundle.getString("later"),""));

                return null;
     }
    }

    public String updateProductsToShip(String guid,String authId,Boolean authCapture) {
     // invoked by shoppingCartBean when paypal payment is confirmed by customer , guid ref comes from paypal
     // or cod if paypal not involved. called by confirmPDPayment (non paypal pickup payment)
     // or confirmPayment (Paypal but can be be COD ie delivery with paypal authorization?? but no paypal payment ) 
     //calls cartExtended_persist to create invoice
     // go through details and order it self to change status assume all items and order itself is paid and ready for shipment/pickup
     // if guid has @ symbol then save it temp customer record as email addr
     // if prod service prepay then put usage counter in user allow3 as string value
     Integer tempCount=0;
     String jayMat="";
     try{
        for (Xoxxuq2b4xwwqqhxxxxxcuodetails itemOrderDetail : fpxxfq1a5xwwqqhxxxxxitemList.getCartedList("cart")) {
            if (checked !=null && !checked.isEmpty() && checked.get(itemOrderDetail.getA0xxuobxbxxxxxxxxxxxsid())) {
             //should not be any checked now
             FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
              FacesMessage.SEVERITY_INFO,bundle.getString("detail")+" "+bundle.getString("item")+" "+bundle.getString("not")+" "+bundle.getString("found"),""));
            }else{
                 itemOrderDetail.setZhxxzzfxhhxxxxxxxxxxstatusfl(mpaid);
                 jayMat=itemOrderDetail.getFpxxfq1a5xwwqqhxxxxxitem().getA0xxukixbxxxxxxxxxxxmatcode();
                 xoxxuq2b4xwwqqhxxxxxcuodetailsHome.setInstance(itemOrderDetail);
                 xoxxuq2b4xwwqqhxxxxxcuodetailsHome.update();
            }
        }
                //not sure why checking for client here,may be as safegurad in case invoked out of raaspi context
                //client record key 01 holds api keys
                if(!authId.isEmpty() && yxxxch522xhhxxhxxxxxclientList.getKeyToEntity("01").getDaxxuzxdssxxxxxxxxxxapiclientid() ==null){
                  // 
                  FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                   FacesMessage.SEVERITY_ERROR,bundle.getString("system")+ " "+bundle.getString("error")+ ", "+bundle.getString("site")+ " "+bundle.getString("record")+ " "+bundle.getString("access"),""));
                   return null;
                }
                 // now update order status and then get customrt/address etc and update
                 /// added accounting posting,convert the order to an invoice first, if not cod then convert invoice to payment
                 /// once cod payment received manually convert to payment 
                 trexuq244xwwqqhxxxxxcuorders=fpxxfq1a5xwwqqhxxxxxitemList.getCurrentCartOrder("cart").get(0);
                 if(guid.equals("cod")){
                  trexuq244xwwqqhxxxxxcuorders.setZcxxzzfxhhxxxxxxxxxxstatusfl(minvoiced);
                 }else{
                  ///enhance by checking authorization to fund capture and delay invoice to payment as part of capture
                  trexuq244xwwqqhxxxxxcuordersHome.getInstance().setZcxxzzfxhhxxxxxxxxxxstatusfl(minvoiced);
                  trexuq244xwwqqhxxxxxcuorders.setZcxxzzfxhhxxxxxxxxxxstatusfl(minvoiced);
                 }
                 if(guid.length() > 90){
                  trexuq244xwwqqhxxxxxcuorders.setYbxxuxxrblxxxxxxxxxxattach(guid.substring(0,90));
                 }else{
                  trexuq244xwwqqhxxxxxcuorders.setYbxxuxxrblxxxxxxxxxxattach(guid);
                 }
                 if(authId.length() > 60){
                  trexuq244xwwqqhxxxxxcuorders.setYexxuznybvxxxxxxxxxxnotes(authId.substring(0,60));
                 }else{
                  trexuq244xwwqqhxxxxxcuorders.setYexxuznybvxxxxxxxxxxnotes(authId);
                 }
                 
                 // change default 0 to 1 meaning paypal paid and shipment outstanding field removed
                 // delay persist of order to include new invoice and frompaymentprocessor address
                 //account posting is done by xxxPosting in persist(), called by extened_persist logic which in turn is called by 
                 // below xxx.cartExtended_persist method, notice order instance with totals,deliv, tax cost etc are passed 
                 // we need to persist the address which comes from payment processor and save in order
                 // this address may differ from customer address. customer address is null if temp, dummy or valid 
                 // if signedup or set by backoffice
                if (fxxxuq111xwwqqhxxxxxaddress == null) {
                   fxxxuq111xwwqqhxxxxxaddressHome.clearInstance();//
                   fxxxuq111xwwqqhxxxxxaddress=fxxxuq111xwwqqhxxxxxaddressHome.getInstance();// at this point it is null
                 }
                fxxxuq111xwwqqhxxxxxaddress.setB1pxusa1bvxxxxxxxxxxaddrl1(r3Cart.getLine1());
                fxxxuq111xwwqqhxxxxxaddress.setB2xxub2xbvxxxxxxxxxxaddrl2(r3Cart.getLine2());
                fxxxuq111xwwqqhxxxxxaddress.setB3xxh2acbv11xxxxxxxxcity(r3Cart.getCity());
                fxxxuq111xwwqqhxxxxxaddress.setB4xxhbpxbv12xxxxxxxxprovnstate(r3Cart.getState());
                fxxxuq111xwwqqhxxxxxaddress.setB6xxh3azbv14xxxxxxxxpzcode(r3Cart.getPostalCode());
                 //most of the time it need to be saved as new address and customer record updated and cuorder updated,
                 //unless the customer has the same address
                 //now update customer if non paypal payment like pickup, GUID will hold email and userHome has entered last name etc
                 // email was already captured and saved in customer during addProductToOrder, use it for double check
                 // for paypal we can use paypal info as double check
                  // delay to address change,jxxxuq201xwwqqhxxxxxcustomerHome.setInstance(jxxxuq201xwwqqhxxxxxcustomer);
                  //jxxxuq201xwwqqhxxxxxcustomerHome.allowUpdate();   
                 // update user allow3 field if needed ie if item type is SI-F 
                 // trexuq244xwwqqhxxxxxcuorders has the last item and in case of fees all items should be same type ie SI-F 

                  //load customer manually to avoid lazyloading exception  dupl key check how but also use sid to make unique
                 // where's check for non paypal, the logic below was wiping out customer info
                 try{
                    jxxxuq201xwwqqhxxxxxcustomer = (Jxxxuq201xwwqqhxxxxxcustomer) entityManager
 	.createQuery(
 	 "select cc from Jxxxuq201xwwqqhxxxxxcustomer cc where cc.a0xxukxxbvxxxxxxxxxxcustomer = :customername and a0xxuobxbxxxxxxxxxxxsid = :sid and cc.zzxxu2oxxhxxxxxxxxxxowner2 = :owner2 ")
 	.setParameter("customername", trexuq244xwwqqhxxxxxcuorders.getJxxxuq201xwwqqhxxxxxcustomer().getA0xxukxxbvxxxxxxxxxxcustomer())
 	.setParameter("owner2", owner2Code).setParameter("sid", trexuq244xwwqqhxxxxxcuorders.getJxxxuq201xwwqqhxxxxxcustomer().getA0xxuobxbxxxxxxxxxxxsid())
 	.getSingleResult();
                 } catch ( Exception e){
	  //log.severe( e.getMessage());
                   FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                    FacesMessage.SEVERITY_ERROR,bundle.getString("error")+ " "+bundle.getString("getting")+ " "+bundle.getString("customer")+ " "+trexuq244xwwqqhxxxxxcuorders.getJxxxuq201xwwqqhxxxxxcustomer().getA0xxukxxbvxxxxxxxxxxcustomer()+" "+bundle.getString("record")+" "+e.getMessage(),""));
                   return null;
                  }
                  //if nonpaypal payment then only guid has email
                  if (guid.contains("@") && guid.contains(".")){
                   if(!jxxxuq201xwwqqhxxxxxcustomer.getQ4xxhxxxbv24xxxxxxxximailaddr().equals(guid)){
                    FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                     FacesMessage.SEVERITY_ERROR,bundle.getString("email")+ " "+jxxxuq201xwwqqhxxxxxcustomer.getQ4xxhxxxbv24xxxxxxxximailaddr()+" "+bundle.getString("not")+ ", "+bundle.getString("equal")+ " "+ guid,""));
                    return null;
                   } 
                  }
                  // create or fetch existing shipment address,this address will be stored in order
                  //  and add to temp customer record. also for perm customer, add a flag in shopping cart
                  // if address differs use payment processor address but will get a chance to cancel and change
                  Fxxxuq111xwwqqhxxxxxaddress fxxxuq111xwwqqhxxxxxaddressC=null;
                  fxxxuq111xwwqqhxxxxxaddressC=fxxxuq111xwwqqhxxxxxaddressHome.getInstance(); 
                  //
                  if(jxxxuq201xwwqqhxxxxxcustomer.getFxxxuq111xwwqqhxxxxxaddressByShiptocode()!=null){
                   fxxxuq111xwwqqhxxxxxaddressC=fxxxuq111xwwqqhxxxxxaddressList.getSidToEntity(jxxxuq201xwwqqhxxxxxcustomer.getFxxxuq111xwwqqhxxxxxaddressByShiptocode().getA0xxuobxbxxxxxxxxxxxsid());
                  }else{
                        if(jxxxuq201xwwqqhxxxxxcustomer.getFxxxuq111xwwqqhxxxxxaddressByMailtocode()!=null){
                         fxxxuq111xwwqqhxxxxxaddressC=fxxxuq111xwwqqhxxxxxaddressList.getSidToEntity(jxxxuq201xwwqqhxxxxxcustomer.getFxxxuq111xwwqqhxxxxxaddressByMailtocode().getA0xxuobxbxxxxxxxxxxxsid());
                       }
                  }


                  // at this point address may be valid if existing customer or empty if temp user
                  // if temp user create address/update customer. 
                  if(fxxxuq111xwwqqhxxxxxaddressC == null){
                   fxxxuq111xwwqqhxxxxxaddressHome.clearInstance();
                   fxxxuq111xwwqqhxxxxxaddressHome.setInstance(fxxxuq111xwwqqhxxxxxaddress);//from paymentProcessor
                   fxxxuq111xwwqqhxxxxxaddressHome.persist();
                   trexuq244xwwqqhxxxxxcuorders.setFxxxuq111xwwqqhxxxxxaddressByShipcodefrompay(fxxxuq111xwwqqhxxxxxaddress);
                   //cuorders get updated further down
                   jxxxuq201xwwqqhxxxxxcustomer.setFxxxuq111xwwqqhxxxxxaddressByShiptocode(fxxxuq111xwwqqhxxxxxaddress);
                   jxxxuq201xwwqqhxxxxxcustomerHome.setInstance(jxxxuq201xwwqqhxxxxxcustomer);
                   jxxxuq201xwwqqhxxxxxcustomerHome.superUpdate();

                 } 
                 //if not temp ie existing customer there may be two shipment address, existing and paypal one
                 if(fxxxuq111xwwqqhxxxxxaddressC.getA0xxukbxbxxxxxxxxxxxaddrescode() != null 
                        && (fxxxuq111xwwqqhxxxxxaddressC.getB1pxusa1bvxxxxxxxxxxaddrl1() ==null 
                             || (fxxxuq111xwwqqhxxxxxaddressC.getB1pxusa1bvxxxxxxxxxxaddrl1() !=null 
                              && fxxxuq111xwwqqhxxxxxaddressC.getB1pxusa1bvxxxxxxxxxxaddrl1().contains(" address"))
                             )
                             && fxxxuq111xwwqqhxxxxxaddressC.getB3xxh2acbv11xxxxxxxxcity() == null){
                   //dummy customer address ,create PO address and update PO and update customer address to PO one
                   fxxxuq111xwwqqhxxxxxaddressHome.clearInstance();
                   fxxxuq111xwwqqhxxxxxaddressHome.setInstance(fxxxuq111xwwqqhxxxxxaddress);//from paymentProcessor
                   fxxxuq111xwwqqhxxxxxaddressHome.persist();
                   jxxxuq201xwwqqhxxxxxcustomer.setFxxxuq111xwwqqhxxxxxaddressByShiptocode(fxxxuq111xwwqqhxxxxxaddress);
                   if(jxxxuq201xwwqqhxxxxxcustomer.getQ4xxhxxxbv24xxxxxxxximailaddr() == null || jxxxuq201xwwqqhxxxxxcustomer.getQ4xxhxxxbv24xxxxxxxximailaddr().isEmpty()){
                    jxxxuq201xwwqqhxxxxxcustomer.setQ4xxhxxxbv24xxxxxxxximailaddr(r3Cart.getPayerEmail());//do not override existing
                   }
                   trexuq244xwwqqhxxxxxcuorders.setFxxxuq111xwwqqhxxxxxaddressByShipcodefrompay(fxxxuq111xwwqqhxxxxxaddress);
                   jxxxuq201xwwqqhxxxxxcustomerHome.setInstance(jxxxuq201xwwqqhxxxxxcustomer);
                   jxxxuq201xwwqqhxxxxxcustomerHome.superUpdate();

                 }else{
                  if(fxxxuq111xwwqqhxxxxxaddressC.getA0xxukbxbxxxxxxxxxxxaddrescode() != null 
                   && ( (fxxxuq111xwwqqhxxxxxaddressC.getB1pxusa1bvxxxxxxxxxxaddrl1() != null 
                     && fxxxuq111xwwqqhxxxxxaddressC.getB1pxusa1bvxxxxxxxxxxaddrl1().contains(fxxxuq111xwwqqhxxxxxaddress.getB1pxusa1bvxxxxxxxxxxaddrl1().trim()))
                      && (fxxxuq111xwwqqhxxxxxaddressC.getB3xxh2acbv11xxxxxxxxcity() != null
                      &&  fxxxuq111xwwqqhxxxxxaddressC.getB3xxh2acbv11xxxxxxxxcity().contains(fxxxuq111xwwqqhxxxxxaddress.getB3xxh2acbv11xxxxxxxxcity().trim()))
                      )){
                   //same address,skip creating new address and skip changing customer address but save customer Addr in PO
                    trexuq244xwwqqhxxxxxcuorders.setFxxxuq111xwwqqhxxxxxaddressByShipcodefrompay(fxxxuq111xwwqqhxxxxxaddressC);
                    //PO update further down
                  }else{
                   //not same address,create new address but skip changing customer address but save new address in PO
                   fxxxuq111xwwqqhxxxxxaddressHome.clearInstance();
                   fxxxuq111xwwqqhxxxxxaddressHome.setInstance(fxxxuq111xwwqqhxxxxxaddress);//from paymentProcessor
                   fxxxuq111xwwqqhxxxxxaddressHome.persist();
                   trexuq244xwwqqhxxxxxcuorders.setFxxxuq111xwwqqhxxxxxaddressByShipcodefrompay(fxxxuq111xwwqqhxxxxxaddress);
                   
                  }
                 } 
                 if (guid.equals("cod")){
                   trexuq266xwwqqhxxxxxcuinvoice=trexuq266xwwqqhxxxxxcuinvoiceHome.cartExtended_persist(trexuq244xwwqqhxxxxxcuorders);
                   if(trexuq266xwwqqhxxxxxcuinvoice==null){
                    FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                    FacesMessage.SEVERITY_ERROR,bundle.getString("error")+ " "+bundle.getString("creating")+ " "+bundle.getString("invoice")+ " "+bundle.getString("record"),""));
                    return null;
                   }
                   trexuq244xwwqqhxxxxxcuorders.setB4xxuxxrlxxxcxxxxxxxcinvoice(trexuq266xwwqqhxxxxxcuinvoice.getA0xxuobxbxxxxxxxxxxxsid());
                   trexuq244xwwqqhxxxxxcuordersHome.setInstance(trexuq244xwwqqhxxxxxcuorders);
                   trexuq244xwwqqhxxxxxcuordersHome.superUpdate();
                   return null;
                 }else{
                   // check client re default authorize or capture, bypass posting in payment extemndeed if authorize
                   trexuq266xwwqqhxxxxxcuinvoice=trexuq266xwwqqhxxxxxcuinvoiceHome.cartExtended_persist(trexuq244xwwqqhxxxxxcuorders);
                   if(trexuq266xwwqqhxxxxxcuinvoice==null){
                    FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                    FacesMessage.SEVERITY_ERROR,bundle.getString("error")+ " "+bundle.getString("creating")+ " "+bundle.getString("invoice")+ " "+bundle.getString("record"),""));
                    return null;
                   }
                   trexuq244xwwqqhxxxxxcuorders.setB4xxuxxrlxxxcxxxxxxxcinvoice(trexuq266xwwqqhxxxxxcuinvoice.getA0xxuobxbxxxxxxxxxxxsid());
                   trexuq244xwwqqhxxxxxcuordersHome.setInstance(trexuq244xwwqqhxxxxxcuorders);
                   trexuq244xwwqqhxxxxxcuordersHome.superUpdate();
                   //dont call payment if only authorize
                   if (!authCapture){
                    trexuq277xwwqqhxxxxxcpayment=trexuq277xwwqqhxxxxxcpaymentHome.cartExtended_persist(trexuq266xwwqqhxxxxxcuinvoice);
                   }
                 }
                try{ 
                 if (trexuq244xwwqqhxxxxxcuorders.getFpxxfq1a5xwwqqhxxxxxitem().getC6xxusxrbv16xxxxxxxxtype().equals("SI-F")){
    			                yxxxuh566xwwqqwxxxxxuser = (Yxxxuh566xwwqqwxxxxxuser) entityManager
 					.createQuery(
 							"select cc from Yxxxuh566xwwqqwxxxxxuser cc where cc.a0xxukuxbvxxxxxxxxxxid = :username and cc.zzxxu2oxxhxxxxxxxxxxowner2 = :owner2 ")
 					.setParameter("username", customIdentity.getOwner().substring(0,ownerCode.length()-3))
 					.setParameter("owner2", owner2Code)
 					.getSingleResult();
        
                  yxxxch575xwwqqhxxxxxuserprofl=yxxxuh566xwwqqwxxxxxuserList.getUserProfiles();
                  if(yxxxch575xwwqqhxxxxxuserprofl.getE4xxzxxxlvxxxxxxxxxxfooter()!=null){
                   reducedQty= yxxxch575xwwqqhxxxxxuserprofl.getE4xxzxxxlvxxxxxxxxxxfooter();
                  }
                  reducedQty=reducedQty.subtract(trexuq244xwwqqhxxxxxcuorders.getB5xxztqrlxxxxxxxxxxxqtytotal());
                  yxxxch575xwwqqhxxxxxuserprofl.setE4xxzxxxlvxxxxxxxxxxfooter(trexuq244xwwqqhxxxxxcuorders.getB5xxztqrlxxxxxxxxxxxqtytotal().multiply(new BigDecimal("3.0")));
                  yxxxch575xwwqqhxxxxxuserproflHome.setInstance(yxxxch575xwwqqhxxxxxuserprofl);
                  yxxxch575xwwqqhxxxxxuserproflHome.update();

                        //yxxxuh566xwwqqwxxxxxuser.setY6xxuxxxivxxxxxxxxxxallow3(trexuq244xwwqqhxxxxxcuorders.getB5xxztqrlxxxxxxxxxxxqtytotal().multiply(new BigDecimal("3.0")).toString()); 
                        //yxxxuh566xwwqqwxxxxxuserHome.setInstance(yxxxuh566xwwqqwxxxxxuser);

                 }
                } catch ( Exception e){
		  //log.severe( e.getMessage());
                   FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                    FacesMessage.SEVERITY_ERROR,bundle.getString("error")+ " "+bundle.getString("getting")+ " "+bundle.getString("user")+ " "+bundle.getString("record")+" "+e.getMessage(),""));
                   return null;
                }



                //put recalculate logic here
                checked.clear(); // If necessary.
                return "updated";

     } catch ( Exception e){
		//log.severe( e.getMessage());
                FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_ERROR,bundle.getString("error")+ " "+bundle.getString("condition")+ " "+e.getMessage()+" "+bundle.getString("try")+ " "+bundle.getString("later"),""));

                return null;
     }
    }

    public void emptyProductsToOrder(String type) {
     //comes from basketOut (fees/sponsor) or checkout or checkoutpos
     // jay need to add reversing update customer and updateitemecustomer
     // check for closed  check for type/terms to avoid false duplicate
     // terms are pp > PrePay and Pickup, pd > PrePay and Delivery, np > ToPay and Pickup, cd > ToPay and Delivery
     Trexuq244xwwqqhxxxxxcuorders trexuq244xwwqqhxxxxxcuorders=null;
     
     try{
          FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
           FacesMessage.SEVERITY_INFO,"",""));
          if (type.equals("cart")){
		 trexuq244xwwqqhxxxxxcuorders= (Trexuq244xwwqqhxxxxxcuorders) entityManager
		 .createQuery(
		  "select cc from Trexuq244xwwqqhxxxxxcuorders cc where (cc.zzxxu2oxxhxxxxxxxxxxowner2=:owner2 AND cc.zexxutoxlhxxxxxxxxxxowner=:owner AND cc.zcxxzzfxhhxxxxxxxxxxstatusfl < :s AND cc.zcxxzzfxhhxxxxxxxxxxstatusfl <> :cl and (c2xxcxxxbv09xxxxxxxxterms is  null or c2xxcxxxbv09xxxxxxxxterms = '' or  c2xxcxxxbv09xxxxxxxxterms like 'PrePay and%' or c2xxcxxxbv09xxxxxxxxterms like 'ToPay and%' and c2xxcxxxbv09xxxxxxxxterms !='POS'  AND cc.y9xxcxxxbv10xxxxxxxxtype=:type)) order by cc.a0xxuobxbxxxxxxxxxxxsid")
		  .setParameter("owner", ownerCode).setParameter("s", mpaid).setParameter("cl", mclosed).setParameter("owner2", owner2Code).setParameter("type", "cart").getSingleResult();
         }else{
          if (type.equals("pos")){
                type="cart";
		 trexuq244xwwqqhxxxxxcuorders= (Trexuq244xwwqqhxxxxxcuorders) entityManager
		 .createQuery(
		  "select cc from Trexuq244xwwqqhxxxxxcuorders cc where (cc.zzxxu2oxxhxxxxxxxxxxowner2=:owner2 AND cc.zexxutoxlhxxxxxxxxxxowner=:owner AND cc.zcxxzzfxhhxxxxxxxxxxstatusfl < :s AND cc.zcxxzzfxhhxxxxxxxxxxstatusfl <> :cl  and (c2xxcxxxbv09xxxxxxxxterms is not  null and c2xxcxxxbv09xxxxxxxxterms != '' and c2xxcxxxbv09xxxxxxxxterms ='POS') AND cc.y9xxcxxxbv10xxxxxxxxtype=:type) order by cc.a0xxuobxbxxxxxxxxxxxsid")
		  .setParameter("owner", ownerCode).setParameter("s", mpaid).setParameter("cl", mclosed).setParameter("owner2", owner2Code).setParameter("type", "cart").getSingleResult();
          }else{

            if (type.equals("basket")){
		 trexuq244xwwqqhxxxxxcuorders= (Trexuq244xwwqqhxxxxxcuorders) entityManager
		 .createQuery(
		  "select cc from Trexuq244xwwqqhxxxxxcuorders cc where (cc.zzxxu2oxxhxxxxxxxxxxowner2=:owner2 AND  cc.zexxutoxlhxxxxxxxxxxowner=:owner AND cc.zcxxzzfxhhxxxxxxxxxxstatusfl != :s  AND cc.y9xxcxxxbv10xxxxxxxxtype=:type AND cc.fpxxfq1a5xwwqqhxxxxxitem.c6xxusxrbv16xxxxxxxxtype=:mtype) order by cc.a0xxuobxbxxxxxxxxxxxsid")
		   .setParameter("owner", ownerCode).setParameter("owner2", owner2Code).setParameter("type", type).setParameter("mtype", "FI-D").setParameter("s", mclosed).getResultList();
            }else{
                // basketCI
		 trexuq244xwwqqhxxxxxcuorders= (Trexuq244xwwqqhxxxxxcuorders) entityManager
		 .createQuery(
		  "select cc from Trexuq244xwwqqhxxxxxcuorders cc where (cc.zzxxu2oxxhxxxxxxxxxxowner2=:owner2 AND  cc.zexxutoxlhxxxxxxxxxxowner=:owner AND cc.zcxxzzfxhhxxxxxxxxxxstatusfl != :s  AND cc.y9xxcxxxbv10xxxxxxxxtype=:type AND cc.fpxxfq1a5xwwqqhxxxxxitem.c6xxusxrbv16xxxxxxxxtype=:mtype ) order by cc.a0xxuobxbxxxxxxxxxxxsid")
		   .setParameter("owner", ownerCode).setParameter("owner2", owner2Code).setParameter("type", "basket").setParameter("mtype", "CI-D").setParameter("s", mclosed).getResultList();
            }
           }
          }
          //if single found, continue below

       } catch (NoResultException nre) {
         FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
          FacesMessage.SEVERITY_INFO,bundle.getString("no")+ " "+bundle.getString("order")+ " "+bundle.getString("found"),""));

           return;
       } catch ( Exception e){
         FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
          FacesMessage.SEVERITY_INFO,bundle.getString("cannot")+ " "+bundle.getString("empty")+ " "+bundle.getString("order")+ ", "+bundle.getString("error")+" "+e.getMessage(),""));
         FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
          FacesMessage.SEVERITY_INFO,bundle.getString("possible")+ " "+bundle.getString("multiple")+ " "+bundle.getString("active")+ " "+bundle.getString("order")+"(s)"+ " "+bundle.getString("found")+ ", "+bundle.getString("should")+ " "+bundle.getString("be")+" "+bundle.getString("one"),""));
           return;
       }
       

     try{
         int deletedCount =  entityManager.createQuery("DELETE FROM Xoxxuq2b4xwwqqhxxxxxcuodetails a WHERE  a.trexuq244xwwqqhxxxxxcuorders.a0xxuobxbxxxxxxxxxxxsid=:sid and a.zzxxu2oxxhxxxxxxxxxxowner2 = :p" ).
           setParameter("sid", trexuq244xwwqqhxxxxxcuorders.getA0xxuobxbxxxxxxxxxxxsid()).setParameter("p", owner2Code).executeUpdate();

       } catch ( Exception e){
         FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
          FacesMessage.SEVERITY_INFO,bundle.getString("cannot")+ " "+bundle.getString("delete")+ " "+bundle.getString("order")+ " "+bundle.getString("details")+ ", "+bundle.getString("error")+" "+e.getMessage(),""));

       }

     try{
           int deletedCount =  entityManager.createQuery("DELETE FROM Trexuq244xwwqqhxxxxxcuorders a WHERE  a.a0xxuobxbxxxxxxxxxxxsid=:sid and a.zzxxu2oxxhxxxxxxxxxxowner2 = :p" ).
           setParameter("sid", trexuq244xwwqqhxxxxxcuorders.getA0xxuobxbxxxxxxxxxxxsid()).setParameter("p", owner2Code).executeUpdate();
       } catch ( Exception e){
         FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
          FacesMessage.SEVERITY_INFO,bundle.getString("cannot")+ " "+bundle.getString("delete")+ " "+bundle.getString("order")+ ", "+bundle.getString("error")+" "+e.getMessage()+ " "+bundle.getString("remove")+ " "+bundle.getString("item"),""));

       }

   
    }
    public String newEntry(String type, String from) {
            Fpxxfq1a5xwwqqhxxxxxitem current = null;
            try{
              this.clearInstance();
	         current=this.getInstance(); 
              current.setW8xxuzdrbvxxxxxxxxxxdocmnt(null);
              current.setC6xxusxrbv16xxxxxxxxtype(type);
              current.setZ6xxcztxlxxxxxxxxxxxstatusfldt(Calendar.getInstance().getTime());
              current.setZexxutoxlhxxxxxxxxxxowner(ownerCode);
              current.setZzxxu2oxxhxxxxxxxxxxowner2(owner2Code);
              this.persist();
              //setFpxxfq1a5xwwqqhxxxxxitemFrom("homeMockUp");
              return "/itemEdit.xhtml";
            }
            catch ( Exception e){
             FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("create")+ " "+bundle.getString("new")+ " "+bundle.getString("error")+" "+e.getMessage(),""));

             return "";
            }  

    }











/**
*  cartpersist can be used where detail items are iterated over as in shopping cart or back office order processing for one or more items
*  this method is called for one item at a time
*  it has 3 flavours- o if a new item is added, u if existing item is removed , c if some change like qty for any of the items
*  o a new item is added
*    Po null means say a new order as well
*    Po not null means a new item for say an existing order
*  u existing item removed from say order
*  c change existing item from say order or invoice ...
*   call update
*    updatecdetailsetValues
*    showrunt recalcultes and updates variables
*    persistrunt copies the variable values into instance property values
*    superdotupdate to persist
*see R3RestClient SyncDataOrders 
*
*/
    Integer currentDetailLine=0;

    public String cartpersist(Integer cpoId,String cposts,Integer currentCount, BigDecimal quantity) {
       return "persisted";
    }








    public EntityManager getEntityManager()
    {
        //return emf.createEntityManager();
        return entityManager;
    }


    public String createValueExpression(String st){
     return st;
    }
    
    public void setId(Integer id){
      this.id=id;
    }
    public Integer getId(){
     //if(id==null){
      //id=0;// avoid null exception in edit viewparam, null is needed if new entity
     //}
     return id;
    }
    public Fpxxfq1a5xwwqqhxxxxxitem getInstance(){
        if (instance == null) {
            if (id == null) {
                return createInstance();
            }
            else {
                instance=entityManager.find(Fpxxfq1a5xwwqqhxxxxxitem.class,id);
                return instance;
            }
        }
        else {
            return instance;
        }
   }

   /**
    * Set/change the entity being managed.
    */
   public void setInstance(Fpxxfq1a5xwwqqhxxxxxitem instance)
   {
      ///setDirty(this.instance, instance);
      this.instance = instance;
   }
   /**
    * Clear the managed entity (and id), allowing the {@link EntityHome} to be
    * reused.
    */
   public void clearInstance()
   {
      setInstance(null);
      setId(null);
   }
   /**
    * Load the instance if the id is defined otherwise create a new instance
    * <br />
    * Utility method called by {@link #getInstance()} to load the instance from 
    * the Persistence Context if the id is defined. Otherwise a new instance is 
    * created.
    * 
    * @see "#find()"
    * @see "#createInstance() at top of this source"
    */
   protected void initInstance()
   {
      if ( isIdDefined() )
      {
         if ( !isTransactionMarkedRollback() )
         {
            //we cache the instance so that it does not "disappear"
            //after remove() is called on the instance
            //is this really a Good Idea??
            //setInstance( find() );
            setInstance(null);
         }
      }
      else
      {
         setInstance( createInstance() );
      }
   }
   public boolean isTransactionMarkedRollback(){
    return false;
   }
   /**
    * Flush any changes made to the managed entity instance to the underlying
    * database. 
    * <br />
    * If the update is successful, a log message is printed, a 
    * {@link javax.faces.application.FacesMessage} is added and a transaction 
    * success event raised.
    * 
    * @see "Home#updatedMessage()"
    * @see "Home#raiseAfterTransactionSuccessEvent()"
    * 
    * @return "updated" if the update is successful
    */
   @Transactional
   public String superdotupdate()
   {
      ///joinTransaction();
      ///getEntityManager().flush();
      ///updatedMessage();
      ///raiseAfterTransactionSuccessEvent();
           // if SH or EH then log changes (except editlog changes) to Xxxxch82bxhhhhhxxxxxeditlog  
           if(customIdentity.hasRole("SH") ||customIdentity.hasRole("EH")){
            xxxxch82bxhhhhhxxxxxeditlogHome.clearInstance();
            xxxxch82bxhhhhhxxxxxeditlog=xxxxch82bxhhhhhxxxxxeditlogHome.getInstance();
            xxxxch82bxhhhhhxxxxxeditlog.setA0xxukxxbvxxxxxxxxxxdatabasenm("Item");
            xxxxch82bxhhhhhxxxxxeditlog.setZ1xxzxxrbvxxxxxxxxxxrecordno(this.instance.getA0xxuobxbxxxxxxxxxxxsid());
            xxxxch82bxhhhhhxxxxxeditlog.setZexxcxxrlxxxxxxxxxxxnewdate(Calendar.getInstance().getTime());
            xxxxch82bxhhhhhxxxxxeditlogHome.superdotupdate();
            FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
             FacesMessage.SEVERITY_WARN,bundle.getString("Item")+" "+bundle.getString("updated")+" "+bundle.getString("and")+", "+bundle.getString("logged")+" "+bundle.getString("in")+" "+bundle.getString("editlog"),""));
            FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
             FacesMessage.SEVERITY_WARN,bundle.getString("Remember")+", "+bundle.getString("journal")+" "+bundle.getString("entries")+" "+bundle.getString("created")+", "+bundle.getString("need")+" "+bundle.getString("to")+" "+bundle.getString("be")+" "+bundle.getString("deleted"),""));
           }
      this.instance=entityManager.merge(this.instance);
      ///id=this.instance.getA0xxuobxbxxxxxxxxxxxsid();
      /// why ? jpa merge should be ok entityManager.persist(this.instance);
      return "updated";
   }

   /**
    * Persist unmanaged entity instance to the underlying database. 
    * If the persist is successful, a log message is printed, a 
    * {@link javax.faces.application.FacesMessage } is added and a transaction 
    * success event raised.
    * 
    * @see "Home#createdMessage()"
    * @see "Home#raiseAfterTransactionSuccessEvent()"
    * 
    * @return "persisted" if the persist is successful
    */
   @Transactional
   public String superdotpersist()
   {
      ///getEntityManager().persist( getInstance() );
      ///getEntityManager().flush();
      ///assignId( PersistenceProvider.instance().getId( getInstance(), getEntityManager() ) );
      ///createdMessage();
      ///raiseAfterTransactionSuccessEvent();
      //added sanitize if clob data
      //duplicatexxxExists should be called, as needed, before calling this method to avoid duplicate keys     
      entityManager.persist(this.instance);
      id=this.instance.getA0xxuobxbxxxxxxxxxxxsid();
      return "persisted";
   }
   
   /**
    * Remove managed entity instance from the Persistence Context and the 
    * underlying database.
    * If the remove is successful, a log message is printed, a 
    * {@link javax.faces.application.FacesMessage} is added and a transaction 
    * success event raised.
    * 
    * @see "Home#deletedMessage()"
    * @see "Home#raiseAfterTransactionSuccessEvent()"
    * 
    * @return "removed" if the remove is successful
    */
   @Transactional
   public String superdotremove()
   {
      ///getEntityManager().remove( getInstance() );
      ///getEntityManager().flush();
      ///deletedMessage();
      ///raiseAfterTransactionSuccessEvent();
     try{
      this.instance=entityManager.merge(this.instance);
      id=this.instance.getA0xxuobxbxxxxxxxxxxxsid();
      entityManager.remove(this.instance);
      // to catch runtime integrity violation exception, flush does immediate remove
      entityManager.flush();
      id=null;
     } catch ( Exception e){
          FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("delete")+" "+ bundle.getString("error")+" "+e.getMessage(),""));
           bcontinue=false;
           return null;
     }

      return "removed";
   }
   /**
    * Returns true if the entity instance is managed
    */
   @Transactional
   public boolean isManaged()
   {
     /// return getInstance()!=null && 
     ///       getEntityManager().contains( getInstance() );
     return id != null;
   }

   /**
    * Invokes this action method via f:viewaction entry on a page, replaces seam pages.xml action 
    * called by web pages like login.xhtml, checkout, unsc etc, which in turns are invoked via activation link entries
    * in emails .
    * there is a takeAction method in r3cart bean(shopping cart ) to take care of checkout.xhtml viewAction
    * viewId is checked to pick the submethod and request parameters are  used to call appropriate action method. 
    * no method parameter but url parameters are used 
    * no exception caught here .
    * 
    * @return "null" 
    */
   public String takeAction(){
    // all pages invoke this method and there can be error pages when rq can be null
    if(req==null){
     return null;
    }

    String viewId = facesContext.getViewRoot().getViewId();
/*
    if (viewId.contains("shoauthverify.")){
     if (req.getParameter("hmac") != null ){
      r3RestClient.shoauthverify(req.getParameter("code"),req.getParameter("hmac"),req.getParameter("shop"),req.getParameter("state"),req.getParameter("timestamp"));
     }
    }
    if (viewId.contains("shwebhook.")){
     if (req.getParameter("hmac") != null ){
      r3RestClient.shoauthverify(req.getParameter("code"),req.getParameter("hmac"),req.getParameter("shop"),req.getParameter("state"),req.getParameter("timestamp"));
     }
*/
     return null;
    }



   
    /**
    * The following method puts restrictions on bean access on top of menu render protection or url entered outside menue
    * @param none
    * @return none or error page
    * @exception none
    * @see 
    *  added logic to allow public schedule as calendar
    */ 
   public String restrict(){

    if (!identity.isLoggedIn()) {
     return "error.xhtml?faces-redirect=true";
    }
    String r2=customIdentity.getRestrict2();//forces to refresh hibernate query cache, usefl for debug
    String a1=customIdentity.getAllow1();
    String viewId = facesContext.getViewRoot().getViewId();
    // jay add logic to make sure these are not null and saved as lower case in useredit
    if (!customIdentity.getRestrict2().isEmpty() && customIdentity.getRestrict2().equals("all")){
     if ((!customIdentity.getAllow1().isEmpty() && viewId.contains(customIdentity.getAllow1())) 
          || (!customIdentity.getAllow2().isEmpty() && viewId.contains(customIdentity.getAllow2())) || 
          (!customIdentity.getAllow3().isEmpty() && viewId.contains(customIdentity.getAllow3())) ){
          return null;
         }else{
          return "error.xhtml?faces-redirect=true";
         }
    }
    if ((!customIdentity.getRestrict2().isEmpty() && viewId.contains(customIdentity.getRestrict2()))
          || (!customIdentity.getRestrict3().isEmpty() && viewId.contains(customIdentity.getRestrict3())) ){
          return "error.xhtml?faces-redirect=true";
    }
    // admin
    if ((viewId.contains("userList") || viewId.contains("userEdit")) && customIdentity.hasRole("IH")){
     return null;
    } 
    if (viewId.contains("SqlAdmin")){
     if (customIdentity.hasRole("UH")){
      if ( (viewId.contains("SqlAdmin.") && customIdentity.isMasterSite()) || viewId.contains("SqlAdmin-") ){
      /* if ((viewId.contains("SqlAdmin.") && ((req.getServerName().contains("raaspi.com") && !req.getServerName().contains(".raaspi.com") && !req.getServerName().contains(".lraaspi.com"))
                  || req.getServerName().contains(masterSiteCode)
                  ||  (req.getServerName().contains("www.raaspi.com") ||  req.getServerName().contains("raaspi.lraaspi.com")))) || viewId.contains("SqlAdmin-")){
      */   
    return null;
      }else{
       return "error.xhtml?faces-redirect=true";
      }
     }else{
      return "error.xhtml?faces-redirect=true";
     }
    }
    //quikfix later change clobdataentity name to use f instead of u
    if (viewId.contains("clobdataEdit") || viewId.contains("homeThemePreview")){
     if ((req.getServerName().startsWith("myflow") || req.getServerName().contains(masterSiteCode)) && (customIdentity.hasRole("PH") 
         || customIdentity.hasRole("UH") || customIdentity.hasRole("UQ"))) {
         return null;
     }else{
      if ((customIdentity.getProduct().equals("f") && customIdentity.getSubProduct().equals("s")) && (customIdentity.hasRole("PH") 
        || customIdentity.hasRole("VH") || customIdentity.hasRole("UH") || customIdentity.hasRole("UQ"))) {
         return null;
      }else{
        if ( customIdentity.hasRole("UH") || customIdentity.hasRole("UQ") ) {
         return null;
        }
      }
     }
     return "error.xhtml?faces-redirect=true";
    }
    // check for xxxedit. to avoid checking for editEasy
    // allow PH to delete/edit but own records, existing logic checks for own records unless UH
    if (viewId.contains("blobdataEdit.") ){
      if ((customIdentity.getProduct().equals("f") && customIdentity.getSubProduct().equals("s")) && (customIdentity.hasRole("PH") 
         || customIdentity.hasRole("VH") || customIdentity.hasRole("UH") || customIdentity.hasRole("UQ"))) {
         return null;
      }else{
        if ( customIdentity.hasRole("UH") || customIdentity.hasRole("UQ") || customIdentity.hasRole("PH")) {
         return null;
        }
      }
     return "error.xhtml?faces-redirect=true";
    }


    if (viewId.contains("blobdataEditEasy") ){
     //test for raaspi site, EditEasy does not allow edit/delete only in above edit 
     // check if master site, a subdomain serverName can also include master site name 
     if( customIdentity.isMasterSite() 
           && (customIdentity.hasRole("PH") || customIdentity.hasRole("UH") || customIdentity.hasRole("UQ")) ) {
         return null;
     }
     return "error.xhtml?faces-redirect=true";
    }
    // this overides menue Role/level only if url is directly typed in, since menue will not show if role/level wrong

    if ((!customIdentity.getAllow1().isEmpty() && viewId.contains(customIdentity.getAllow1())) 
          || (!customIdentity.getAllow2().isEmpty() && viewId.contains(customIdentity.getAllow2())) || 
          (!customIdentity.getAllow3().isEmpty() && viewId.contains(customIdentity.getAllow3())) ){
          return null;
    }
    // this overides menue Role/level only if url is directly typed in, since menue will not show if role/level wrong

    if ((!customIdentity.getAllow1().isEmpty() && viewId.contains(customIdentity.getAllow1())) 
          || (!customIdentity.getAllow2().isEmpty() && viewId.contains(customIdentity.getAllow2())) || 
          (!customIdentity.getAllow3().isEmpty() && viewId.contains(customIdentity.getAllow3())) ){
          return null;
    }

    //this checks menue rules to render or not
                             if(!((customIdentity.hasRole("UH")||customIdentity.hasRole("IH")||customIdentity.hasRole("UQ")
                               ||customIdentity.hasRole("VH")||customIdentity.hasRole("PH")||customIdentity.hasRole("VQ")
                               ) )){
                              return "error.xhtml?faces-redirect=true";
                             }else{
                              return null;
                             }
   }

/*
 childpojo for onetoManyCollection ie Forign Table's Entity: com.rcomputer.genapp.model.Dxxxuq92bxwwqqhefxxxitemjob
*/

    public List<Dxxxuq92bxwwqqhefxxxitemjob> getDxxxuq92bxwwqqhefxxxitemjobs() {
        return getInstance() == null ? 
            null : new ArrayList<Dxxxuq92bxwwqqhefxxxitemjob>( getInstance().getDxxxuq92bxwwqqhefxxxitemjobs() );
    }
/*
 childpojo for onetoManyCollection ie Forign Table's Entity: com.rcomputer.genapp.model.Fpxxfq1a5xwwqqhxxxxxitem
*/

    public List<Fpxxfq1a5xwwqqhxxxxxitem> getFpxxfq1a5xwwqqhxxxxxitems() {
        return getInstance() == null ? 
            null : new ArrayList<Fpxxfq1a5xwwqqhxxxxxitem>( getInstance().getFpxxfq1a5xwwqqhxxxxxitems() );
    }
/*
 childpojo for onetoManyCollection ie Forign Table's Entity: com.rcomputer.genapp.model.Fpxxfq1t8xwwqqhxxxxxitemprofl
*/

    public List<Fpxxfq1t8xwwqqhxxxxxitemprofl> getFpxxfq1t8xwwqqhxxxxxitemprofls() {
        return getInstance() == null ? 
            null : new ArrayList<Fpxxfq1t8xwwqqhxxxxxitemprofl>( getInstance().getFpxxfq1t8xwwqqhxxxxxitemprofls() );
    }
/*
 childpojo for onetoManyCollection ie Forign Table's Entity: com.rcomputer.genapp.model.Fxxxuq1bhxwwqqhxxxxxusagebyperiods
*/

    public List<Fxxxuq1bhxwwqqhxxxxxusagebyperiods> getFxxxuq1bhxwwqqhxxxxxusagebyperiodses() {
        return getInstance() == null ? 
            null : new ArrayList<Fxxxuq1bhxwwqqhxxxxxusagebyperiods>( getInstance().getFxxxuq1bhxwwqqhxxxxxusagebyperiodses() );
    }
/*
 childpojo for onetoManyCollection ie Forign Table's Entity: com.rcomputer.genapp.model.Fxxxuq1hhxwwqqhefxxxitembomdetails
*/

    public List<Fxxxuq1hhxwwqqhefxxxitembomdetails> getFxxxuq1hhxwwqqhefxxxitembomdetailses() {
        return getInstance() == null ? 
            null : new ArrayList<Fxxxuq1hhxwwqqhefxxxitembomdetails>( getInstance().getFxxxuq1hhxwwqqhefxxxitembomdetailses() );
    }
/*
 childpojo for onetoManyCollection ie Forign Table's Entity: com.rcomputer.genapp.model.Jxxxuq54exwwqqhxxxxxgroupmembers
*/

    public List<Jxxxuq54exwwqqhxxxxxgroupmembers> getJxxxuq54exwwqqhxxxxxgroupmemberses() {
        return getInstance() == null ? 
            null : new ArrayList<Jxxxuq54exwwqqhxxxxxgroupmembers>( getInstance().getJxxxuq54exwwqqhxxxxxgroupmemberses() );
    }
/*
 childpojo for onetoManyCollection ie Forign Table's Entity: com.rcomputer.genapp.model.Trexuq233xwwqqhxxxxxcuquote
*/

    public List<Trexuq233xwwqqhxxxxxcuquote> getTrexuq233xwwqqhxxxxxcuquotes() {
        return getInstance() == null ? 
            null : new ArrayList<Trexuq233xwwqqhxxxxxcuquote>( getInstance().getTrexuq233xwwqqhxxxxxcuquotes() );
    }
/*
 childpojo for onetoManyCollection ie Forign Table's Entity: com.rcomputer.genapp.model.Trexuq244xwwqqhxxxxxcuorders
*/

    public List<Trexuq244xwwqqhxxxxxcuorders> getTrexuq244xwwqqhxxxxxcuorderses() {
        return getInstance() == null ? 
            null : new ArrayList<Trexuq244xwwqqhxxxxxcuorders>( getInstance().getTrexuq244xwwqqhxxxxxcuorderses() );
    }
/*
 childpojo for onetoManyCollection ie Forign Table's Entity: com.rcomputer.genapp.model.Trexuq255xwwqqhxxxxxshipment
*/

    public List<Trexuq255xwwqqhxxxxxshipment> getTrexuq255xwwqqhxxxxxshipments() {
        return getInstance() == null ? 
            null : new ArrayList<Trexuq255xwwqqhxxxxxshipment>( getInstance().getTrexuq255xwwqqhxxxxxshipments() );
    }
/*
 childpojo for onetoManyCollection ie Forign Table's Entity: com.rcomputer.genapp.model.Trexuq266xwwqqhxxxxxcuinvoice
*/

    public List<Trexuq266xwwqqhxxxxxcuinvoice> getTrexuq266xwwqqhxxxxxcuinvoices() {
        return getInstance() == null ? 
            null : new ArrayList<Trexuq266xwwqqhxxxxxcuinvoice>( getInstance().getTrexuq266xwwqqhxxxxxcuinvoices() );
    }
/*
 childpojo for onetoManyCollection ie Forign Table's Entity: com.rcomputer.genapp.model.Trexuq333xwwqqhxxxxxvenquote
*/

    public List<Trexuq333xwwqqhxxxxxvenquote> getTrexuq333xwwqqhxxxxxvenquotes() {
        return getInstance() == null ? 
            null : new ArrayList<Trexuq333xwwqqhxxxxxvenquote>( getInstance().getTrexuq333xwwqqhxxxxxvenquotes() );
    }
/*
 childpojo for onetoManyCollection ie Forign Table's Entity: com.rcomputer.genapp.model.Trexuq344xwwqqhxxxxxvendorders
*/

    public List<Trexuq344xwwqqhxxxxxvendorders> getTrexuq344xwwqqhxxxxxvendorderses() {
        return getInstance() == null ? 
            null : new ArrayList<Trexuq344xwwqqhxxxxxvendorders>( getInstance().getTrexuq344xwwqqhxxxxxvendorderses() );
    }
/*
 childpojo for onetoManyCollection ie Forign Table's Entity: com.rcomputer.genapp.model.Trexuq377xwwqqhxxxxxvshipmen
*/

    public List<Trexuq377xwwqqhxxxxxvshipmen> getTrexuq377xwwqqhxxxxxvshipmens() {
        return getInstance() == null ? 
            null : new ArrayList<Trexuq377xwwqqhxxxxxvshipmen>( getInstance().getTrexuq377xwwqqhxxxxxvshipmens() );
    }
/*
 childpojo for onetoManyCollection ie Forign Table's Entity: com.rcomputer.genapp.model.Trexuq3a6xwwqqhxxxxxvinvoice
*/

    public List<Trexuq3a6xwwqqhxxxxxvinvoice> getTrexuq3a6xwwqqhxxxxxvinvoices() {
        return getInstance() == null ? 
            null : new ArrayList<Trexuq3a6xwwqqhxxxxxvinvoice>( getInstance().getTrexuq3a6xwwqqhxxxxxvinvoices() );
    }
/*
 childpojo for onetoManyCollection ie Forign Table's Entity: com.rcomputer.genapp.model.Trexuq444xwwqqhxxxxxemplorders
*/

    public List<Trexuq444xwwqqhxxxxxemplorders> getTrexuq444xwwqqhxxxxxemplorderses() {
        return getInstance() == null ? 
            null : new ArrayList<Trexuq444xwwqqhxxxxxemplorders>( getInstance().getTrexuq444xwwqqhxxxxxemplorderses() );
    }
/*
 childpojo for onetoManyCollection ie Forign Table's Entity: com.rcomputer.genapp.model.Trxxuq9aaxwwqqhefxxxjobassignment
*/

    public List<Trxxuq9aaxwwqqhefxxxjobassignment> getTrxxuq9aaxwwqqhefxxxjobassignments() {
        return getInstance() == null ? 
            null : new ArrayList<Trxxuq9aaxwwqqhefxxxjobassignment>( getInstance().getTrxxuq9aaxwwqqhefxxxjobassignments() );
    }
/*
 childpojo for onetoManyCollection ie Forign Table's Entity: com.rcomputer.genapp.model.Xoxxuq295xwwqqhxxxxxshipmentdetails
*/

    public List<Xoxxuq295xwwqqhxxxxxshipmentdetails> getXoxxuq295xwwqqhxxxxxshipmentdetailses() {
        return getInstance() == null ? 
            null : new ArrayList<Xoxxuq295xwwqqhxxxxxshipmentdetails>( getInstance().getXoxxuq295xwwqqhxxxxxshipmentdetailses() );
    }
/*
 childpojo for onetoManyCollection ie Forign Table's Entity: com.rcomputer.genapp.model.Xoxxuq2a4xwwqqhxxxxxcuidetails
*/

    public List<Xoxxuq2a4xwwqqhxxxxxcuidetails> getXoxxuq2a4xwwqqhxxxxxcuidetailses() {
        return getInstance() == null ? 
            null : new ArrayList<Xoxxuq2a4xwwqqhxxxxxcuidetails>( getInstance().getXoxxuq2a4xwwqqhxxxxxcuidetailses() );
    }
/*
 childpojo for onetoManyCollection ie Forign Table's Entity: com.rcomputer.genapp.model.Xoxxuq2b4xwwqqhxxxxxcuodetails
*/

    public List<Xoxxuq2b4xwwqqhxxxxxcuodetails> getXoxxuq2b4xwwqqhxxxxxcuodetailses() {
        return getInstance() == null ? 
            null : new ArrayList<Xoxxuq2b4xwwqqhxxxxxcuodetails>( getInstance().getXoxxuq2b4xwwqqhxxxxxcuodetailses() );
    }
/*
 childpojo for onetoManyCollection ie Forign Table's Entity: com.rcomputer.genapp.model.Xoxxuq2c4xwwqqhxxxxxcuqdetails
*/

    public List<Xoxxuq2c4xwwqqhxxxxxcuqdetails> getXoxxuq2c4xwwqqhxxxxxcuqdetailses() {
        return getInstance() == null ? 
            null : new ArrayList<Xoxxuq2c4xwwqqhxxxxxcuqdetails>( getInstance().getXoxxuq2c4xwwqqhxxxxxcuqdetailses() );
    }
/*
 childpojo for onetoManyCollection ie Forign Table's Entity: com.rcomputer.genapp.model.Xoxxuq399xvwwqqhxxxxvshipmendetails
*/

    public List<Xoxxuq399xvwwqqhxxxxvshipmendetails> getXoxxuq399xvwwqqhxxxxvshipmendetailses() {
        return getInstance() == null ? 
            null : new ArrayList<Xoxxuq399xvwwqqhxxxxvshipmendetails>( getInstance().getXoxxuq399xvwwqqhxxxxvshipmendetailses() );
    }
/*
 childpojo for onetoManyCollection ie Forign Table's Entity: com.rcomputer.genapp.model.Xoxxuq3c4xwwqqhxxxxxvendidetails
*/

    public List<Xoxxuq3c4xwwqqhxxxxxvendidetails> getXoxxuq3c4xwwqqhxxxxxvendidetailses() {
        return getInstance() == null ? 
            null : new ArrayList<Xoxxuq3c4xwwqqhxxxxxvendidetails>( getInstance().getXoxxuq3c4xwwqqhxxxxxvendidetailses() );
    }
/*
 childpojo for onetoManyCollection ie Forign Table's Entity: com.rcomputer.genapp.model.Xoxxuq3d4xwwqqhxxxxxvendodetails
*/

    public List<Xoxxuq3d4xwwqqhxxxxxvendodetails> getXoxxuq3d4xwwqqhxxxxxvendodetailses() {
        return getInstance() == null ? 
            null : new ArrayList<Xoxxuq3d4xwwqqhxxxxxvendodetails>( getInstance().getXoxxuq3d4xwwqqhxxxxxvendodetailses() );
    }
/*
 childpojo for onetoManyCollection ie Forign Table's Entity: com.rcomputer.genapp.model.Xoxxuq3e4xwwqqhxxxxxvendqdetails
*/

    public List<Xoxxuq3e4xwwqqhxxxxxvendqdetails> getXoxxuq3e4xwwqqhxxxxxvendqdetailses() {
        return getInstance() == null ? 
            null : new ArrayList<Xoxxuq3e4xwwqqhxxxxxvendqdetails>( getInstance().getXoxxuq3e4xwwqqhxxxxxvendqdetailses() );
    }
/*
 childpojo for onetoManyCollection ie Forign Table's Entity: com.rcomputer.genapp.model.Xoxxuq454xwwqqhxxxxxemplodetails
*/

    public List<Xoxxuq454xwwqqhxxxxxemplodetails> getXoxxuq454xwwqqhxxxxxemplodetailses() {
        return getInstance() == null ? 
            null : new ArrayList<Xoxxuq454xwwqqhxxxxxemplodetails>( getInstance().getXoxxuq454xwwqqhxxxxxemplodetailses() );
    }
/*
 childpojo for onetoManyCollection ie Forign Table's Entity: com.rcomputer.genapp.model.Xoxxuq9bfxwwqqhexxxxjobassignmentdetails
*/

    public List<Xoxxuq9bfxwwqqhexxxxjobassignmentdetails> getXoxxuq9bfxwwqqhexxxxjobassignmentdetailses() {
        return getInstance() == null ? 
            null : new ArrayList<Xoxxuq9bfxwwqqhexxxxjobassignmentdetails>( getInstance().getXoxxuq9bfxwwqqhexxxxjobassignmentdetailses() );
    }
/*
 childpojo for onetoManyCollection ie Forign Table's Entity: com.rcomputer.genapp.model.Xxxxuq9ccxwwqqhxxxxxprocessdetails
*/

    public List<Xxxxuq9ccxwwqqhxxxxxprocessdetails> getXxxxuq9ccxwwqqhxxxxxprocessdetailses() {
        return getInstance() == null ? 
            null : new ArrayList<Xxxxuq9ccxwwqqhxxxxxprocessdetails>( getInstance().getXxxxuq9ccxwwqqhxxxxxprocessdetailses() );
    }

}




