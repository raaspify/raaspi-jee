


/** Generated By EntityHome.java.ftl on 27-Jun-2023 8:44:45 PM
*Entity Home
*parameters passed: action.package and model.package
*/

package com.rcomputer.genapp.action;
import com.rcomputer.genapp.model.*;
import org.apache.deltaspike.data.api.AbstractEntityRepository;
import org.apache.deltaspike.data.api.Repository;
import org.picketlink.Identity;
import org.picketlink.credential.DefaultLoginCredentials;
import org.picketlink.idm.IdentityManagementException;
import org.picketlink.authentication.AuthenticationException;
import org.picketlink.common.exceptions.PicketLinkException;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.Date;
import java.util.Calendar;
import java.util.Locale;
import java.util.Currency;
import java.util.Collection;
import java.lang.String;
import java.lang.StringBuilder;
import java.text.SimpleDateFormat;
import java.text.NumberFormat;
import javax.faces.application.FacesMessage;
import javax.faces.event.ValueChangeEvent;
import javax.faces.model.SelectItem;
import javax.faces.model.SelectItemGroup;
import javax.annotation.PostConstruct;
import javax.faces.view.ViewScoped;
import javax.inject.Inject;
import javax.transaction.Transactional;
import javax.faces.event.ActionEvent;
import javax.inject.Named;
import javax.enterprise.inject.Instance;
import java.util.Iterator;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import javax.persistence.*;
import javax.faces.context.ExternalContext;
import javax.faces.context.FacesContext;
import javax.faces.component.UIComponent;
import javax.faces.validator.ValidatorException;
import java.io.IOException;
import java.io.OutputStream;
 import java.io.StringReader;
 import java.io.InputStreamReader;

import java.io.FileWriter;
import java.io.BufferedWriter;
import java.io.Serializable;
import java.io.Writer;

import java.nio.charset.StandardCharsets;
import java.nio.file.Paths;
import java.nio.file.Files;
import java.nio.file.Path;


import java.util.logging.Logger;
import java.util.ResourceBundle;



//move these under genCandidate
//import java.io.File; model already has File class, use qualified java.io.File instead of import
import java.io.StringWriter;
import org.apache.tools.ant.Project;
import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.text.StringEscapeUtils;
import org.apache.tools.ant.ProjectHelper;
import javax.servlet.Servlet;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.util.HashMap;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.servlet.http.Part;





 import java.awt.image.BufferedImage;
 import java.awt.Graphics2D;
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
 import javax.imageio.ImageIO;
 import net.coobird.thumbnailator.*;
 import org.jsoup.Jsoup;
 //put conditional import
 import org.jsoup.nodes.Document;
 import org.jsoup.nodes.Element;
 import org.jsoup.select.Elements;
 import org.jsoup.safety.Whitelist;
 import org.jsoup.nodes.TextNode;
 import org.jsoup.nodes.Attributes; 
 import org.jsoup.nodes.Attribute; 
 import java.net.URL;
 import java.io.InputStream;
 import java.io.OutputStream;



//assign is used to be able to add import dynamically
import com.rcomputer.genapp.model.*;


/* The following may not be needed, use generic fiedname from above like deliveryField
*/
//jay0 z3xxeqxxbvnxxxxxxxxxqtyordrd


  //jay2 zqxxbvnxxxxxxxxxqtyordrd
/*
 pojo ie entity has component properties for all composite key fields and entity proprties for all other fields.
 If an entity property is a foreign key then the property name will show the foreign entity not the actual field name.
 Use a filter like c2h.isManyToOne(property) and  column = property.columnIterator.next() to get the actual column name.
 or use parentPojo.identifierProperty.name to get the key field property name or use
 jay5 if !c2h.isCollection(property) && !isToOne(property)
  if c2j.isComponent(property)
   foreach componentProperty in property.value.propertyIterator in list.java.ftl
 
 If a persistence class has a foreign key more than once then the property name has the foreign entity plus Byxxxx to qualify
 The component properties have the identifierProperty iterator holding each key. 
 In case the key is non composite ie a single field then it will not be part of any component and will be part of properties
 Component properties seem to be tied to xxxId.java whereas non component properties are tied to xxx.java
 composite key fields declared via  Primary Key columns will appear only in component/xxId/java. If key field is a foreign 
 field then it is also declared via Foreign Key and will appear in entity properties/xxx.java. However in xxx.java
 the column name will not be shown, instead foreign Pojo class will be shown. Column iterator can be used to get
 the column name. If there are more than one fields pointing to same pojo then it will show as xxxByzz
 For those key fields which are foreign fields we need to generate validateandselect method. Currently generation 
 is hard coded by checking function of the pojo, it can be automated by xchecking component property columnname against entity ptoperty column name
 and if match the entity property name will be the pojo which needs to be validated and selected.
 The same logic can be used in editproperty.ftl to automate puting validateandSelect method call  
*/
/* 
in case of composite keys
*/ 
  /*
  In case of composite keys and key auto generated

  */

/**
* This is Action Home class 
* @author 3r Computer Systems  
* @version 2.0
*/

@Named("xoxxuq3c4xwwqqhxxxxxvendidetailsHome")
@ViewScoped
@Transactional
public  class Xoxxuq3c4xwwqqhxxxxxvendidetailsHome implements Serializable
{
   @Inject File file;
   @Inject R3RestClient r3RestClient;

   @Inject SqlAdminSupport sqlAdminSupport;
   @Inject SkinBean skinBean;
    @Inject CustomIdentity customIdentity; 
        @Inject
        private Identity identity;
	@Inject
	Xxxxch82bxhhhhhxxxxxeditlogHome xxxxch82bxhhhhhxxxxxeditlogHome;
	private Xxxxch82bxhhhhhxxxxxeditlog xxxxch82bxhhhhhxxxxxeditlog;


   


   @Inject 
   DefaultLoginCredentials credentials;
   //@Inject Authenticator authenticator; not sure what problem injecting may be due to @picketlink
   private boolean nextShow = false;
   boolean mailRelayOff=true; 
   Boolean smtpError=false;
    private FacesContext facesContext=null;
    private ServletContext context=null;
    private HttpServletRequest req=null;
    private HttpServletResponse resp=null;
    private String userAgentStrO=null;
    private String userAgentStr=null;
    private String userIP=null;
    private String urlName=null;
    private int urlPort=0;
    private ExternalContext externalContext=null;
    private HttpSession session=null;
    private String skinCode=null;
    private String replyToMatCode = null;
    private String replyToMatSidS = null;
    private String descriptionValue =null;
    private String startValue = null;
    private ResourceBundle bundle=null;
    int count = 0;
    int countD=0;
    int countB=0;
    private int excpCount=0;
    Boolean currConv=false;
    int importdone=0;
    String linesA[]=null;
	private final int limit_max_size = 10240000;
	private final String limit_type_file = "gif|jpg|png|jpeg|txt|csv|jpeg";
	private String path_to = "resources" + java.io.File.separator + "uploads";

    private int uploadsAvailable = 3;
    private int uploadsDoneCount = 0;
    private boolean autoUpload = false;
    private boolean useFlash = false;
    private Boolean show;
    private Part fileU;





    @PostConstruct
    public void initialize() {
    try{
      facesContext = FacesContext.getCurrentInstance(); 
      // bypass if came from servlet
     if(facesContext !=null){
      bundle = facesContext.getApplication().getResourceBundle(facesContext, "messages");
      ///SEVERITY_INFO, "any string in quotes"+e.getMessage+bundle.getString("id_password_not_matching")
      externalContext = facesContext.getExternalContext(); 

      context = (ServletContext)FacesContext.getCurrentInstance().getExternalContext().getContext(); 
      req = (HttpServletRequest) externalContext.getRequest(); 
      session = req.getSession();
      urlName=((javax.servlet.http.HttpServletRequest) externalContext.getRequest()).getServerName();
      urlPort=((javax.servlet.http.HttpServletRequest) externalContext.getRequest()).getServerPort();
      resp = (HttpServletResponse) externalContext.getResponse(); 
      userAgentStrO = req.getHeader("user-agent");  
      userAgentStr = userAgentStrO;  
      userIP = req.getHeader("X-FORWARDED-FOR");  //get from req header
      if (userIP == null) {  
       userIP = req.getRemoteAddr();  //get from socket connection
      }
          urlIndex=urlName.lastIndexOf(".");
          if (urlIndex == -1){
            urlIndex=urlName.length();
          }       
          if (urlName.contains("www.")){
           owner2Code=urlName.substring(4,urlIndex);
          }else{
           owner2Code=urlName.substring(0,urlIndex);
          }
          //extract subdomain if used. if subdomain, masterSiteCode will have a value
         if(!customIdentity.getMasterSiteCode().isEmpty()){
          owner2Code=owner2Code.replace("."+customIdentity.getMasterSiteCode(),"");
         }
      if (userIP == null) {  
       userIP = req.getRemoteAddr();  
       if (userIP == null) {  
        userIP = "noIP";  
       }      
      }
      masterSiteCode=customIdentity.getMasterSiteCode();
      masterSiteUrl=customIdentity.getMasterSiteUrl();

      Arrays.fill(checkMapI, Boolean.FALSE);
      Arrays.fill(checkMapT, Boolean.FALSE);
     
     }
      ownerCode=customIdentity.getOwner();
      ownerCddCode=ownerCode.substring(ownerCode.length()-3,ownerCode.length() );
      productCode=customIdentity.getProduct();
      subProductCode=customIdentity.getSubProduct();

      if (customIdentity.getMobileView().length() > 0){
       userAgentStr=customIdentity.getMobileView();
      }
     }catch(Exception e){
      //log error
      excpCount=excpCount+1;
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
       FacesMessage.SEVERITY_ERROR,e.getMessage(),""));
    }


    }
   private Logger log = Logger.getLogger(Xoxxuq3c4xwwqqhxxxxxvendidetails.class.getCanonicalName());
   //facesMessages being injected so  //FacesMessages.add can be used instead of  //FacesMessages.instance().add
   // using seam facesmessages allow using el expressions , java facesmessage does not allow EL expression
   @PersistenceContext(unitName = "genappcdi")
   private EntityManager entityManager;
   private Integer id=null;
   private String cartPoStatus="x";
   String timeStamp="";
   private boolean changeDone=false;
   private boolean skipValidation=false;
     private Boolean[] checkMapI=new Boolean[6];
     private Boolean[] checkMapT=new Boolean[6];
      private byte[] mailingBytes1 = null;
      private byte[] mailingBytes2 = null;
      private byte[] mailingBytes3 = null;
      private byte[] mailingBytes4 = null;
      private byte[] mailingBytes5 = null;
      private byte[] mailingBytes = null;
      private String mailingText = null;
      private String mailingText1 = null;
      private String mailingText2 = null;
      private String mailingText3 = null;
      private String mailingText4 = null;
      private String mailingText5 = null;
      private String mailingBytes1TypeMime = null;
      private String mailingBytes2TypeMime = null;
      private String mailingBytes3TypeMime = null;
      private String mailingBytes4TypeMime = null;
      private String mailingBytes5TypeMime = null;
      private String ownerCode="sss";
      private String subProductCode="";
      private String ownerCddCode="";
      private String productCode="";
      FacesMessage msg =new FacesMessage("");





   // cartpostatus =e comes from method extended_persist ie copynsave
   // cartPostatus also comes from cposts in method cartpersist
     // cartPostatus=cposts is o if add and currentCount holds last line #, u if remove, c if change for existing and for both c & u 
     // currentCount holds first time call or not to decide on initializing order totals to zeroes if first time
     // currentDetailline will be used to hold the value to pass to showrun()

	@Inject
	Xoxxuq3c4xwwqqhxxxxxvendidetailsList xoxxuq3c4xwwqqhxxxxxvendidetailsList;
        private Xoxxuq3c4xwwqqhxxxxxvendidetails xoxxuq3c4xwwqqhxxxxxvendidetailsli;
	@Inject
	Yxxxuq591xwwqqhxxxxxrate1fHome yxxxuq591xwwqqhxxxxxrate1fHome;
	private Yxxxuq591xwwqqhxxxxxrate1f yxxxuq591xwwqqhxxxxxrate1f;
	@Inject
	Yxxxch575xwwqqhxxxxxuserproflHome yxxxch575xwwqqhxxxxxuserproflHome;
	private Yxxxch575xwwqqhxxxxxuserprofl yxxxch575xwwqqhxxxxxuserprofl;











      //CustomIdentity customIdentity = (CustomIdentity)Component.getInstance(CustomIdentity.class); 
      //SkinBean skinBean = (SkinBean)Component.getInstance(SkinBean.class); 
      //ShoppingCartBean r3Cart = (ShoppingCartBean)Component.getInstance(ShoppingCartBean.class); 
      private boolean doRollUp=true;
      private String owner2Code="";
      private String masterSiteCode="";
      private String masterSiteUrl="";
      private String owner2CodeS="";
      private int urlIndex=0;
      int duplDropped=0;
      int importAdded=0;

     private BigDecimal keyedQuantity = new BigDecimal("1.0");
     private BigDecimal detailbaseamt = new BigDecimal("0.0");
     private BigDecimal detailbaseamtO = new BigDecimal("0.0");
     private BigDecimal totalbaseamt = new BigDecimal("0.0");
     private BigDecimal totaloutstanding = new BigDecimal("0.0");
     private BigDecimal totalamountin = new BigDecimal("0.0");
     private BigDecimal postingAmount = new BigDecimal("0.0");
     private BigDecimal chqAmount = new BigDecimal("0.0");
     private BigDecimal amountIn = new BigDecimal("0.0");
     private String chqVerbose="";
     private String tax1Cert="";
     private String tax2Cert="";
     private String tax3Cert="";
                BigDecimal cdisc=BigDecimal.ZERO;
                BigDecimal cselp=BigDecimal.ZERO;
                BigDecimal newOrdPrice=BigDecimal.ZERO;
        private BigDecimal change=BigDecimal.ZERO;//nov29 2919
	private BigDecimal totalmis = BigDecimal.ZERO;
	private BigDecimal totaldel = BigDecimal.ZERO;
	private BigDecimal totalqty = BigDecimal.ZERO;//totalxxxx,amountTotal means parent and includes all details
	private BigDecimal totaltax1 = BigDecimal.ZERO;
	private BigDecimal totaltax2 = BigDecimal.ZERO;
	private BigDecimal totaltax3 = BigDecimal.ZERO;
	private BigDecimal qtyOrdPrev = BigDecimal.ZERO;//
	private BigDecimal amountTotal = BigDecimal.ZERO;//amountTotal is sum of detaillt 
	private BigDecimal qtyTotal = BigDecimal.ZERO;//same as qtytotal or detailqty  then get rid of it
	private BigDecimal qtyTotalNew = BigDecimal.ZERO;
        private BigDecimal tax1RateValue=new BigDecimal("0.0");
        private BigDecimal tax2RateValue=new BigDecimal("0.0");
        private BigDecimal tax3RateValue=new BigDecimal("0.0");
        private BigDecimal tax1RateValueS=new BigDecimal("0.0");
        private BigDecimal tax2RateValueS=new BigDecimal("0.0");
        private BigDecimal tax3RateValueS=new BigDecimal("0.0");
        private BigDecimal tax1RateValueH=new BigDecimal("0.0");
        private BigDecimal tax2RateValueH=new BigDecimal("0.0");
        private BigDecimal tax3RateValueH=new BigDecimal("0.0");
        private BigDecimal detailLt = new BigDecimal("0.0");//is it same as amountTotal
        private BigDecimal detailLtO = new BigDecimal("0.0");
	private BigDecimal detailMis = BigDecimal.ZERO;
	private BigDecimal detailDel = BigDecimal.ZERO;
	private BigDecimal detailQty = BigDecimal.ZERO;
	private BigDecimal detailTax1 = BigDecimal.ZERO;
	private BigDecimal detailTax2 = BigDecimal.ZERO;
	private BigDecimal detailTax3 = BigDecimal.ZERO;
	private BigDecimal detailMisO = BigDecimal.ZERO;
	private BigDecimal detailDelO = BigDecimal.ZERO;
	private BigDecimal detailTax1O = BigDecimal.ZERO;
	private BigDecimal detailTax2O = BigDecimal.ZERO;
	private BigDecimal detailTax3O = BigDecimal.ZERO;
        BigDecimal qtyOrdO=BigDecimal.ZERO;
        String iShipCode="";//size of item
        String tShipCode="";//shipment mode for item


     	private boolean applyTax1 = false;
	private boolean applyTax2 = false;
	private boolean applyTax3 = false;

      String integrationAccountSet="";
      private BigDecimal temp = new BigDecimal("0.0");
      private String key="";
      private String subKey="";
      private String subKeyFirst="";
      private String slobkeyhash="";
      private String keysv="";
      // make it session variable later
      private int currentPeriod=1;
      private String divcode="";
      private String depcode="";
      private String accountn="";
      private String companycode="";
      private Calendar calendar = Calendar.getInstance();
      private Calendar calendare = Calendar.getInstance();
      private Calendar calendarly = Calendar.getInstance();
      private Date currbusdate = calendar.getTime();
      private Date dobSave = calendar.getTime();
      private int mnsorder=0;
      private int arSeqn=0;
      private int apSeqn=0;
      private int icSeqn=0;
      private int paSeqn=0;
      private int joSeqn=0;
      private int glSeqn=0;
     private int subarSeqn = 0;
      private int subapSeqn=0;
      private int subicSeqn=0;
      private int subpaSeqn=0;
      private int subjoSeqn=0;
      private int subglSeqn=0;

      private int mprinted=512;
      private int mdel=256;
      private int mmark=128;
      private int munmark=1023;
      private int mconsign=64;
      private int minvoiced=64;
      private int mnoMail=64;
      //  can be used for other status, use it for 1st entry in group,account or to mark a row as editable etc 
      //               where line field is not there 
      // mconsign should apply to item type not status ?? also means order invoiced
      private int mpartial=32;
      private int mshipped=32;
      private int mreceived=32;
      private int mpaid=16;
      // in case of venartha vpayment goes 16(paid)->8(closed by chq) but venartha itself becomes 16(paid by chq)
      private int mclosed=8;
      private int mreturn=4;//return,investigation,dispute,  
      private int mcopy=2;//copied or Picked from PicklList not customer picked
      private int mtoPay=2;//online order toPay status but items can be added at backOffice
      // copy means record was copied from another 
      //open becomes active ie some activity happened against the open record , mutually exclusive

      private int mactive=1;
      private int mordered=1;
      private int mopen=0;
      private int mquoted=0;
      // open means record created
      // use setXx(getXx()| mcopy)) to set copy flag leaving other bits as is 
      // use setXx(getXx()& _mcopy)) to clear copy flag leaving other bits as is 
      // the following shows which bit counting 0 as the right most bit 
      // used as if bitset(status,_matcive)
      // or as iif(bitset(status,_mmark),.t.,.f.)
      //_mactive=0  && 0th bit from right starting at 0 bit, value 1
      /***
      *transaction flow and status (in brackets) changes
      *Ecommerce:sales checkout by customer 
      *customer: checkout to order active(1)to and paypal payment/authorize toinvoice(64) and system changes order invoiced(64)
      *system:created order and invoice, got order shipment information from paypal and puts a hold payment or takes payment and creates payment record
      *agent:  convert invoice to shipping notclosed(8) invoiceto to shipment active(1) to Add B/O and and inform invoice dept and wait or set as shipped(32)
      *agent: if needed, process invoicing:invoice (64) and shipment B/O? investigate. Add B/O to invoice, inform shipment, wait. 
      *agent: convert invoice to payment:invoice (64) and its ordertoshipment ahipped(32) invoicetopayment(16?). Capture or capture with credit.
      *system: paymenttoorder,shipment,invoice,payment itself closed(8)  
      * 
      *Ecommerce:invoice payment by customer
      * order,invoices created by agent on phone order etc
      * option of payment online given to customer
      *customer: enters email,invoice amount and invoice number. If matches   
      *system: process the payment and creates payment record or puts a hold payment but no payment record?
      *agent: rest ie shipping, payment same as manual or Ecommerce sales check out
      *
      *Ecommerce:POS checkout by agent for customer (item entries can be by customer)
      *
      *Manual: Done by agent request over phone/email/case request folder
      *sales:  create quote active(1)
      *sales:  create order(1) from quote or manually create order active(1) 
      *shipping: notclosed(8) orderto to shipment active(1) to Add B/O and inform order and wait or shipped(32)
      *invoicing: invoice (64) and shipment B/O? investigate. Add B/O to invoice, inform shipment, wait. 
      *Payment:invoice (64) and its order to shipment shipped(32) invoice to payment(16?).Take payment and with credit.
      *payment: make order,shipment,invoice,payment itself closed(8)   

      *Ecommerce invoice payment
      *invoice can be from ecommerce or manually done 
      *customer: invoice (64) and invoice number and amount matches, then system creates payment(16?)
      *payment: make order,shipment,invoice,payment itself closed(8) ???  
      */


      private int _mopen=0;
      //0th bit ,numeric value 0
      private int _mactive=0;
      // && 0th bit ,numeric value 1
      private int _mcopy=1;
      //   && 1th bit ,numeric value 2
      private int _mreturn=2;
      // && 2nd bit                4 
      private int _mclosed=3;
      // && 3rd                    8 
      private int _mpaid=4;
      //   && 4th                   16
      private int _mpartial=5;
      private int _mshipped=5;
      // && 5th                   32 
      private int _mconsign=6;
      private int _minvoiced=6;
      private int _mnoMail=6;
      // && 6th                   64
      private int _mmark=7;
      //    && 7th                   128
      private int _mdel=8;
      //     && 8th                    256 
      private int _mprinted=9;
      // && 9th                   512 
     private boolean fromJsf =true;

     private boolean buttonPressed =false;
     private String buttonPressedLabel ="+ Upload";
     private String upLoadPurpose ="ad";
     private String discountType ="pe";
     private int useSeq=-1;

     private boolean hideChosen =false;
     private String lobDataType=" ";
     private String temps=" ";
     private Integer sidValue=0;
     private boolean entityUpdated =false;
     private boolean entityDeleted =false;
     private String eMailingAddress="";
     private String targetVendor="";
     private boolean mergedPayment=false;
     private String position="";
     private String overRideValue="";
     private String overRideValueS="";
     private String notesToPass="";
     private BigDecimal priceOverRide = new BigDecimal("0.0");
     private String xoxxuq3c4xwwqqhxxxxxvendidetailsFrom="";
     private String prefix=" ";
     private Integer tempCount=0;
     SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
     private boolean importChosen =false;
     private Xoxxuq3c4xwwqqhxxxxxvendidetails instance=null;
     private String hostingAt = "lo";//op for openshift, aw for amazon aws, hero for heroku, lo for Local 
     //web.xml context param to define hosting env and use getServletContext().getInitParameter(hostingAt) 
     //
     

/*
 If same field from a foreign table is used more than once, it can cause duplicate entries for @Inject
 By is used to supress the duplicate
*/
     @Inject
    Fpxxfq1a5xwwqqhxxxxxitemHome fpxxfq1a5xwwqqhxxxxxitemHome;
    private Fpxxfq1a5xwwqqhxxxxxitem fpxxfq1a5xwwqqhxxxxxitem;
     @Inject
    Jxxxuq201xwwqqhxxxxxcustomerHome jxxxuq201xwwqqhxxxxxcustomerHome;
    private Jxxxuq201xwwqqhxxxxxcustomer jxxxuq201xwwqqhxxxxxcustomer;
     @Inject
    Trexuq3a6xwwqqhxxxxxvinvoiceHome trexuq3a6xwwqqhxxxxxvinvoiceHome;
    private Trexuq3a6xwwqqhxxxxxvinvoice trexuq3a6xwwqqhxxxxxvinvoice;
//page parameters start here from not used, existing xxxxFrom used, delete below later -->
        private String from="";
	public void setFrom(String from) {
		this.from = from;
	}

	public String getFrom() {
           
		return from;
	}

//rest goes here
    public void setXoxxuq3c4xwwqqhxxxxxvendidetailsA0xxuobxbxxxxxxxxxxxsid(Integer id)
    {
      // setId will fetch the record and Instance will point to it
      setId(id);
      if(getInstance() !=null && !getInstance().getZzxxu2oxxhxxxxxxxxxxowner2().equals("SYSTEM") && !getInstance().getZzxxu2oxxhxxxxxxxxxxowner2().equals(owner2Code)){
       try{
        //different owner other than SYSTEM, dont let it go through, to do why exception not caught
        setId(0);
       } catch (Exception e) {
        log.severe("Error passing bad sid "+ e.getMessage());
        FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
          FacesMessage.SEVERITY_ERROR,bundle.getString("cannot")+" "+ bundle.getString("get")+" "+bundle.getString("record")+" "+e.getMessage(),""));


       }
      }
    }

    public Integer getXoxxuq3c4xwwqqhxxxxxvendidetailsA0xxuobxbxxxxxxxxxxxsid()
    {

        return (Integer) getId();
    }

   /**
    * Returns true if the id of the object managed is known.
    */
   public boolean isIdDefined()
   {
      return getId()!=null && !"".equals( getId() );
   }
     public boolean isFromJsf() {
         return fromJsf;//default true
     }

     public void setFromJsf(boolean fromJsf){
      this.fromJsf=fromJsf;
     }


    public boolean isChangeDone(){
     return changeDone;
    } 

    public void setChangeDone(boolean changeDone){
      this.changeDone=changeDone;
    } 


  protected Xoxxuq3c4xwwqqhxxxxxvendidetails createInstance()

  {
      // jay add logic to check client flag for debug mode and bypass below if debug
      //setCreatedMessage(createValueExpression(""));
      //setDeletedMessage(createValueExpression(""));
      //setUpdatedMessage(createValueExpression(""));

       //Xoxxuq3c4xwwqqhxxxxxvendidetails xoxxuq3c4xwwqqhxxxxxvendidetails = new Xoxxuq3c4xwwqqhxxxxxvendidetails();
       //scope for this method only
       Xoxxuq3c4xwwqqhxxxxxvendidetails xoxxuq3c4xwwqqhxxxxxvendidetails=null;
       if (instance == null) {
            try {
                instance = new Xoxxuq3c4xwwqqhxxxxxvendidetails();
                xoxxuq3c4xwwqqhxxxxxvendidetails=instance;

            }
            catch (Exception e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
                return null;
            }
       }else{
       //came to createInstance, but it may exists for some existing error conditions, so ignore and continue
            try {
                instance = new Xoxxuq3c4xwwqqhxxxxxvendidetails();
                xoxxuq3c4xwwqqhxxxxxvendidetails=instance;

            }
            catch (Exception e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
                return null;
            }
       

       }


   /*
   This is the place to preinitialize the entity variables to display in jsf pages
   */



  

  




		xoxxuq3c4xwwqqhxxxxxvendidetails.setZ3xxeqxxbvnxxxxxxxxxqtyordrd(new BigDecimal("1.0"));
  

  

		xoxxuq3c4xwwqqhxxxxxvendidetails.setZ5xxzpxravxxxxxxxxxxordprice(new BigDecimal("0.0"));
  

  
		xoxxuq3c4xwwqqhxxxxxvendidetails.setZ6xxcxxxbxxxxxxxxxxxiodatet(calendar.getTime());

		xoxxuq3c4xwwqqhxxxxxvendidetails.setZ9xxzxxxavxxxxxxxxxxqtyostnd(new BigDecimal("0.0"));
  

		xoxxuq3c4xwwqqhxxxxxvendidetails.setZaxxzlxxavxxxxxxxxxxdelivchrg(new BigDecimal("0.0"));
  

		xoxxuq3c4xwwqqhxxxxxvendidetails.setZbxxzbxxavxxxxxxxxxxbaseamount(new BigDecimal("0.0"));
  

		xoxxuq3c4xwwqqhxxxxxvendidetails.setZbxxzmxxavxxxxxxxxxxmiscchrg(new BigDecimal("0.0"));
  

		xoxxuq3c4xwwqqhxxxxxvendidetails.setZcxxzxz1avxxxxxxxxxxtax1amt(new BigDecimal("0.0"));
  

		xoxxuq3c4xwwqqhxxxxxvendidetails.setZdxxzxz2avxxxxxxxxxxtax2amt(new BigDecimal("0.0"));
  

		xoxxuq3c4xwwqqhxxxxxvendidetails.setZexxzxz3avxxxxxxxxxxtax3amt(new BigDecimal("0.0"));
  

		xoxxuq3c4xwwqqhxxxxxvendidetails.setZfxxzlpxxvxxxxxxxxxxlinetotl(new BigDecimal("0.0"));
  

  
		xoxxuq3c4xwwqqhxxxxxvendidetails.setZzxxu2oxxhxxxxxxxxxxowner2(owner2Code);
   return xoxxuq3c4xwwqqhxxxxxvendidetails;
  }

/**
* method pre-initializes entities and gets invoked via jsf f:viewAction  
*/    
    public void wire()
    {
// ManyToOne will capture the Foreign Key Fields and the foreign Entity Name
// 
   // if keyfield then populate lastxxxentity so that dropdown will show it if coming from list for update 
   //Fpxxfq1a5xwwqqhxxxxxitem fpxxfq1a5xwwqqhxxxxxitem=fpxxfq1a5xwwqqhxxxxxitemHome.getDefinedInstance(); use private variable

   // logic changed to get parent instance not instance itself if entity is item because parent and entity is same
     fpxxfq1a5xwwqqhxxxxxitem=fpxxfq1a5xwwqqhxxxxxitemHome.getDefinedInstance();
     if ( fpxxfq1a5xwwqqhxxxxxitem!=null ){
      getInstance().setFpxxfq1a5xwwqqhxxxxxitem(fpxxfq1a5xwwqqhxxxxxitem);
     }
   // if keyfield then populate lastxxxentity so that dropdown will show it if coming from list for update 
   //Jxxxuq201xwwqqhxxxxxcustomer jxxxuq201xwwqqhxxxxxcustomer=jxxxuq201xwwqqhxxxxxcustomerHome.getDefinedInstance(); use private variable

   // logic changed to get parent instance not instance itself if entity is item because parent and entity is same
     jxxxuq201xwwqqhxxxxxcustomer=jxxxuq201xwwqqhxxxxxcustomerHome.getDefinedInstance();
     if ( jxxxuq201xwwqqhxxxxxcustomer!=null ){
      getInstance().setJxxxuq201xwwqqhxxxxxcustomer(jxxxuq201xwwqqhxxxxxcustomer);
     }
   // if keyfield then populate lastxxxentity so that dropdown will show it if coming from list for update 
   //Trexuq3a6xwwqqhxxxxxvinvoice trexuq3a6xwwqqhxxxxxvinvoice=trexuq3a6xwwqqhxxxxxvinvoiceHome.getDefinedInstance(); use private variable

   // logic changed to get parent instance not instance itself if entity is item because parent and entity is same
     trexuq3a6xwwqqhxxxxxvinvoice=trexuq3a6xwwqqhxxxxxvinvoiceHome.getDefinedInstance();
     if ( trexuq3a6xwwqqhxxxxxvinvoice!=null ){
      getInstance().setTrexuq3a6xwwqqhxxxxxvinvoice(trexuq3a6xwwqqhxxxxxvinvoice);
     }


    }
    
    public boolean isWired()
    {
     /*
     There is CheckEntityxx() in persist to replace this
     Otherwise Save will never be eanbled for pre initialized key fields
     if ( getInstance().getTrexuq3a6xwwqqhxxxxxvinvoice()==null ) return false;
     */
     return true;
}

    
    public Xoxxuq3c4xwwqqhxxxxxvendidetails getDefinedInstance()
    {
        if(isIdDefined()){
         if(getInstance() == null || getInstance().getA0xxuobxbxxxxxxxxxxxsid()==null){
          return null;///need to check when this happens, it seems can happen if the entity already exists and again calls getdefine
         }
         if(getInstance().getA0xxuobxbxxxxxxxxxxxsid().equals(getId())){
          return getInstance();
         }else{
          return xoxxuq3c4xwwqqhxxxxxvendidetailsList.getSidToEntity(getId());
         }
        }else{
         return null;
        }
    }

       private Map<Integer, Boolean> checked = new HashMap<Integer, Boolean>();

public Map<Integer, Boolean> getChecked() {  
return checked;  
}  

/**
* method is used to check the numeric status field value and return a descriptive value
* @param status
* int value
* @return a String value 
*/    

    public String describeStatus(int status){
    if (status==0){
     return "open";
    }
    
    if (status==1){
     return "active";
    }
    if (status==32){
     return "shipped";
    }
    if (status==64){
     return "invoiced";
    }
    if (status==8){
     return "closed";
    }
    if (status==16){
     return "paid";
    }



    return ""+status; 
   }

    public String markCompleted() {
     return "completed";
    }
    public String markCompletedAll() {
     return "completedAll";
    }


	public String getEMailingAddress() {
              if (eMailingAddress ==null || eMailingAddress.isEmpty()){  
                //prefill if empty
              }
		return eMailingAddress;
	}
     
	public void setEMailingAddress(String eMailingAddress) {
		this.eMailingAddress = eMailingAddress;
	}

	public String getShowPosition() {
	  return position;
	}
     
	public void setShowPosition(String position) {
		this.position = position;
	}


	public String getValueOverRide() {
	  return overRideValue;
	}
     
	public void setValueOverRide(String overRideValue) {
		this.overRideValue = overRideValue;
	}


	public String getValueOverRideS() {
	  return overRideValueS;
	}
     
	public void setValueOverRideS(String overRideValueS) {
		this.overRideValueS = overRideValueS;
	}


	public BigDecimal getPriceOverRide() {
	  return priceOverRide;
	}
	public void setPriceOverRide(BigDecimal priceOverRide) {
		this.priceOverRide = priceOverRide;
	}

     

	public String getNotesToPass() {
		return notesToPass;
	}
     
	public void setNotesToPass(String notesToPass) {
		this.notesToPass = notesToPass;
	}



	public String getXoxxuq3c4xwwqqhxxxxxvendidetailsFrom() {
		return xoxxuq3c4xwwqqhxxxxxvendidetailsFrom;
	}
     
	public void setXoxxuq3c4xwwqqhxxxxxvendidetailsFrom(String entityFrom) {
		this.xoxxuq3c4xwwqqhxxxxxvendidetailsFrom = entityFrom;
	}



     public String getPrefix() {
      return prefix;
    }

   public void setPrefix(String prefix) {
     this.prefix=prefix;
   }
   public Boolean[] getCheckMapI() {
    return this.checkMapI;
   }
   public void setCheckMapI(Boolean[] checkMapI){
                this.checkMapI=checkMapI;
   }
   public Boolean[] getCheckMapT() {
    return this.checkMapT;
   }
        public void setCheckMapT(Boolean[] checkMapT){
                this.checkMapT=checkMapT;
        }
	public void setMailingImage1(byte[] mailingBytes) {
		this.mailingBytes1 = mailingBytes;
	}

	public byte[] getMailingImage2() {
           
		return mailingBytes2;
	}

	public void setMailingImage2(byte[] mailingBytes) {
		this.mailingBytes2 = mailingBytes;
	}
	public byte[] getMailingImage3() {
           
		return mailingBytes3;
	}

	public void setMailingImage3(byte[] mailingBytes) {
		this.mailingBytes3 = mailingBytes;
	}
	public byte[] getMailingImage4() {
           
		return mailingBytes4;
	}

	public void setMailingImage4(byte[] mailingBytes) {
		this.mailingBytes4 = mailingBytes;
	}

	public byte[] getMailingImage5() {
           
		return mailingBytes5;
	}

	public void setMailingImage5(byte[] mailingBytes) {
		this.mailingBytes5 = mailingBytes;
	}

	public void setMailingText(String mailingText) {
		this.mailingText = mailingText;
	}

	public String getMailingText1() {
           
		return mailingText1;
	}

	public void setMailingText1(String mailingText) {
		this.mailingText1 = mailingText;
	}

	public String getMailingText2() {
           
		return mailingText2;
	}

	public void setMailingText2(String mailingText) {
		this.mailingText2 = mailingText;
	}
	public String getMailingText3() {
           
		return mailingText3;
	}

	public void setMailingText3(String mailingText) {
		this.mailingText3 = mailingText;
	}
	public String getMailingText4() {
           
		return mailingText4;
	}
	public void setMailingText4(String mailingText) {
		this.mailingText4 = mailingText;
	}



	public String getMailingText5() {
           
		return mailingText5;
	}
	public void setMailingText5(String mailingText) {
		this.mailingText5 = mailingText;
	}

	public String getMailingImage1TypeMime() {
           
		return mailingBytes1TypeMime;
	}

	public void setMailingImage1TypeMime(String mailingTypeMime ) {
		this.mailingBytes1TypeMime = mailingTypeMime;
	}

	public String getMailingImage2TypeMime() {
           
		return mailingBytes2TypeMime;
	}

	public void setMailingImage2TypeMime(String mailingTypeMime ) {
		this.mailingBytes2TypeMime = mailingTypeMime;
	}
	public String getMailingImage3TypeMime() {
           
		return mailingBytes3TypeMime;
	}

	public void setMailingImage3TypeMime(String mailingTypeMime ) {
		this.mailingBytes3TypeMime = mailingTypeMime;
	}

	public String getMailingImage4TypeMime() {
           
		return mailingBytes4TypeMime;
	}

	public void setMailingImage4TypeMime(String mailingTypeMime ) {
		this.mailingBytes4TypeMime = mailingTypeMime;
	}

	public String getMailingImage5TypeMime() {
           
		return mailingBytes5TypeMime;
	}

	public void setMailingImage5TypeMime(String mailingTypeMime ) {
		this.mailingBytes5TypeMime = mailingTypeMime;
	}


    /**
    * The following method is proxy for file.fileUpload to allow using 
    * requestScoped for raaspi file class
    * @see "file class"
    * 
    */

    public String callFileUpload(String purpose){
     file.fileUpload(purpose);
     return "";
    }



    /**
    * The following method used r3restclient.xhtml to ???
    * @param args none bur flag restentity is set to true
    * @return String set by persist
    * @exception None 
    * @see "persist()"
    * 
    */

    public String persistRest() {
     restEntity=true;
     return persist();
    }



    public String persist(String owner2Code) {
     // override owner2Code temporarily and will get reset in next invocation of the bean
     owner2CodeS = this.owner2Code;
     this.owner2Code=owner2Code;
     // no need to rollup because all values are zero also avoids owner2Code issue for SYSTEM records
     doRollUp=false;
     return persist();
    }

/***
* creates key unless already exists as in from rest like shopify, or order created via cart or skip key validation
* key could be created from subkeys or auto generated based on reveng.xml
* based on entity needs fill up with entered values. Item will have type, taxable or not. 
* if txn then call showrunt > createcdetails and showrunt (updates parent instance values)
* persistrunt (puts values to totals for persist) , updatecustomer or vendor,
* common part begins
* set clob/blob pointer to the instance
* if child item then superupdate parent
* persist any new clob/blob, update existing clob/blob
* persist current instance and then details 
* seq starts from 0 and xxList.getNextSeqAvailable is used for next one. 
* seq -1 used  for storing removed image to allow undo
* or in case 3R-TOP-BKGR -1 means use color instead of any image
* qualifier 1 if shopping items. Non shopping or not related to items can have qualifier PIC etc.
*@param none, values passed through variables
*@see "extended_persist"
*/
    public String persist() {


      


       // we need to check whether validation has set bcontinue has false, if so clear it and return
       if (!bcontinue){
             bcontinue=true;
             return null;
       }



       if(!owner2Code.equals("SYSTEM") && !owner2Code.equals(masterSiteCode) && !getInstance().getZzxxu2oxxhxxxxxxxxxxowner2().equals(owner2Code)){
        FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
         FacesMessage.SEVERITY_ERROR,bundle.getString("If")+" "+bundle.getString("non")+" "+bundle.getString("owned")+" "+bundle.getString("record")+", "+bundle.getString("edit")+" "+ bundle.getString("not")+" "+bundle.getString("allowed"),""));
         log.severe("persist_error_owner "+owner2Code +" / "+ getInstance().getZzxxu2oxxhxxxxxxxxxxowner2());
         bcontinue=false;
         return null;
       }
       //instance already exists with site owner2, so change it now
       if(owner2Code.equals("SYSTEM")){
        this.instance.setZzxxu2oxxhxxxxxxxxxxowner2("SYSTEM");
       }

      slobkeyhash=" ";

          // commponentName -> xoxxuq3c4xwwqqhxxxxxvendidetails
          // columnnamekey -> xoxxuq3c4xwwqqhxxxxxvendidetailsMatcodeOne
           //   +" jay 1"
          // commponentName -> xoxxuq3c4xwwqqhxxxxxvendidetails
          // columnnamekey -> xoxxuq3c4xwwqqhxxxxxvendidetailsCustomerOne
           //   +" jay 1"
          // commponentName -> xoxxuq3c4xwwqqhxxxxxvendidetails
          // columnnamekey -> xoxxuq3c4xwwqqhxxxxxvendidetailsVendinoOne
           //   +" jay 1"



       if (!bcontinue){
             return null;
       }
// if calling method has try then calling method try will catch the exception
       try {
        // a0xxuobxbxxxxxxxxxxxsid
        // last in the loop centityName ->   centityKeyFieldName ->  entityKeyFieldName -> 
        if (!restEntity && !cartPoPicked){
             // subkey so far is companyName (!empty)+lastName||ss+firstname||ss+ss(companyName empty)+phone #s ||ss etc ss means 
             // time stamp seconds
             // first 16 characters need to be broken into parts if name involved otherwise long last name makes it hard to distinguish key values
             // because ss is used same lastname and firstname will still produce different 16 characters if any phone #s etc are missing 
             // entityKeyFieldName -> 
             // key set but return if the natural key already exists except for clob and blob where duplicates ok because
             // of non key seq is used to differentiate. So check if same seq
             // also apply initCap inside keyExists since we have access to the instance there
             //jay subkey  kfrcl N kk  
              // Set keyed in value(s) to uppercase
               
          } 

               //nonKeyed entity
                // superdotpersist() for current/master entity , clob/blob etc further down
                  superdotpersist();
               /* suppress too much info 
               // give persist message w key and time
                if(customIdentity.isDebug() && key != null && !key.trim().isEmpty()){
                 timeStamp = new SimpleDateFormat("yyyy.MM.dd.HH.mm.ss z").format(new Date());
                 FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                   FacesMessage.SEVERITY_INFO,bundle.getString("saved")+" "+"Vendidetails"+" "+bundle.getString("as")+" "+key+" "+"at"+" "+timeStamp,""));
                }
               */
            // if manual entry was done instead of using options then capture it in userprofile
 	    Yxxxuh566xwwqqwxxxxxuser user = null;




             setChangeDone(true);
             importAdded=importAdded+1;
             return "persisted";
       } catch ( Exception e){
         String context="key="+key+",subKey="+subKey;
         FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
           FacesMessage.SEVERITY_ERROR," "+"Vendidetails"+" "+context+" "+ bundle.getString("error")+" "+bundle.getString("cause")+"- "+e.getMessage(),""));
               bcontinue=false;
               return null;
       }

    }

    public String superUpdate() {
        //this is used to update statusfldate before calling superdotupdate which is the jpa merge
        //flow is (allowupdate() if needed)-update()-(sperupdate() if statusdt needs change-superdotupdate())
        // or -superdotupdate()
        //setUpdatedMessage(createValueExpression(""));
      // allow raaspi to delete SYSTEM records
      if((getInstance().getZzxxu2oxxhxxxxxxxxxxowner2().equals("SYSTEM") && !owner2Code.equals(masterSiteCode)) || (!getInstance().getZzxxu2oxxhxxxxxxxxxxowner2().equals("SYSTEM") && !getInstance().getZzxxu2oxxhxxxxxxxxxxowner2().equals(owner2Code))){
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
         FacesMessage.SEVERITY_ERROR,bundle.getString("If")+" "+bundle.getString("non")+" "+bundle.getString("owned")+", "+bundle.getString("update")+" "+ bundle.getString("not")+" "+bundle.getString("allowed"),""));

                 bcontinue=false;
                 return null;
      }


       if (!bcontinue){
        FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
         FacesMessage.SEVERITY_ERROR,bundle.getString("error")+", "+ bundle.getString("not")+" "+bundle.getString("continue"),""));



             return null;
       }
           superdotupdate(); 
           setChangeDone(true);
           timeStamp = new SimpleDateFormat("yyyy.MM.dd.HH.mm.ss z").format(new Date());
          /* too much info
           FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
            FacesMessage.SEVERITY_INFO,bundle.getString("updated")+" "+bundle.getString("selected")+" "+"Vendidetails"+" "+"at"+" "+timeStamp,""));
           */

           return "superUpdated"; 

    }

    public String updateRest(String descript) {
           superdotupdate();//superdotupdate does not change any date field
           setChangeDone(true);
           timeStamp = new SimpleDateFormat("yyyy.MM.dd.HH.mm.ss z").format(new Date());
           FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
            FacesMessage.SEVERITY_INFO,bundle.getString("updated")+" "+"Vendidetails"+" "+descript+" "+bundle.getString("record")+" "+bundle.getString("at")+" "+timeStamp,""));
            return "updated"; 
       }


    public String allowUpdate() {
       ////setUpdatedMessage(createValueExpression(""));
     // allowupdate is used by method calls only and not directly by jsf 
     // there are cases like item stat or customer order we need to allow non owned records to be updated
     // for this to work, make sure entityHome is cleared,use instance itself or setinstance is done with the variable holding instance values and then this is called
            superdotupdate();
            setChangeDone(true);
        /* use customIdentity.getClientMsgLev 
           timeStamp = new SimpleDateFormat("yyyy.MM.dd.HH.mm.ss z").format(new Date());
           FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
            FacesMessage.SEVERITY_INFO,bundle.getString("updated")+" "+bundle.getString("selected")+" "+"Vendidetails"+" "+"at"+" "+timeStamp,""));
        */
            return "updated"; 
       }




    /**
    * used by xxEdit.xhtml for updating multiple items for master entities which have details, example order,invoice,glentries
    * mimics ItemHome updateProductsToOrder method (used for shopping cart) logic to handle multiItems
    *@see "addWithDetails used by xxEdit to add new, or update or add detail"
    *@see "updateProductsToOrder used by shopping cart add"
    *add logic to adjust invoice, payment details and paypal etc payment due ie either credit or adjust hold
    */
    public String updateDetailsAll() {
     // before this method is called, very 1st item (common use case) was already saved as detail via addWithDetails method 
     // and flag more was set
     // flow for more items via this method, is as follows
     // first update the current detail ie 2nd or later item and persist it, initialise lastitemline back to 0 and
     // set more to false. The details now has multiple items and user may have flagged one or more to be removed
     // or qty may have changed, so rechecks by looping through details ie lineitems,
     // if checked for remove then subtract qty from item and remove from order details. 
     // call cartpersist with param u for undo or remove which
     //  since no detail value for this will stay, dont call updatecdetails but call
     //  (1) showrunt 
     //  (2) persistrunt
     //  (3) remove() detail and make it null to avoid keet as dirty 
     //  (4) update order itself 
     // if not ckecked , then call ordersHome cartpersist with currentCartedPO detail sid,c as change option 
     // and tempCount (1 means first call)
     // cartPersist for c will get the detail  and call
     //  (1) update() parent which in turn updates details 
     //  (1.1) updatecdetails which updates the order detail qty based on itemTempQty (itemDetailsBrowse view has this)
     //  (1.2) showrunt which recalculates both details and order itself based on quantity or say tax value( a cart can be idle for days)
     //  (1.3) persistrunt which resets all the values for the order itself (detail values done in showrunt) using values calculated in showrunt
     //     each showrunt for a detail will recalculate both its own value and its master but persistrunt simply copies the variable values into properties
     //  (1.4) update() detail instance  
     //  (1.5) update order
     //  (1.6) extra logic added to avoid totals getting wrong
     //   updateParentFromDetails() which loops through all details and recalculates totals and updates parent instance
     //   not sure why the detail was superupdated again     
     // coming back from cartperist
     //  (6) adjust posting if invoice/payment by calling posting with net changes for baseamount etc
     // increment tempcount and go to top of loop
     //tempCount=this.getLastItemLine()-1; 
     Integer tempRemoveCount=0;
     String  currentCartedPO="";
     Integer currentCartedPOSID;

       return "update";
    }










   
    /***
    * update is used by ui like xxxEdit and xxxEditEasy and has logic to prevent cross user updates 
    * update normally updates the entity for which the update was issued, but sometimes related updates are done like
    * 1. for transactions the details,item,customer/vendor are updated before calling entity updated
    *  like order,shipment etc are updated.
    *  If different owner then allowupdate() is used
    * 2. for usagebyperiods, rollupgroup is also updated but same owner  
    * 3. for entities like item,customer which has docmnt fileld for clob/blob data
    *  clob/blob has docmnt field but holds actual data wheres other entities like Item,Customer has 
    *  their hashed key field value in docmnt field. The sid key value not available until item gets created.
    *  There is logic to allow VW (visitor)or DH (Demo User) to change only own user records.
    *  verify posting not needed here because invoice/payment updates are done via updatedetailsall
    *  do not allow user to delete own user record or update own role/level/restrict/allow settings to prevent no one
    *  be left with enough rights , prevent via jsf rendered do not show if owner same as logon id
    * 
    * @param none but values come via variables
    * @return String null or some string value 
    * @exception various

    * Add logic to handle key value change > new hash code > update item as well as clob/blob fromKey
    * Change logic for clob/blob all over to not use seq 0, reserve it store removed value. Seq starts from 1
    * if more than 1 img why both add and replace not shown. If add put the new one with ++seq
    */
    public String update() {
     if(customIdentity.hasRole("VH") || customIdentity.hasRole("PH")) {
     } 


      boolean dataReplaced=false;
      byte[] bytes = null;
      //setUpdatedMessage(createValueExpression(""));
      // allow raaspi to delete SYSTEM records
      if((getInstance().getZzxxu2oxxhxxxxxxxxxxowner2().equals("SYSTEM") && !customIdentity.isMasterSite()) || (!getInstance().getZzxxu2oxxhxxxxxxxxxxowner2().equals("SYSTEM") && !getInstance().getZzxxu2oxxhxxxxxxxxxxowner2().equals(owner2Code))){
       FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
        FacesMessage.SEVERITY_INFO,bundle.getString("Gallery")+"/ "+bundle.getString("non")+" "+bundle.getString("owned")+" "+bundle.getString("records")+" "+bundle.getString("update")+" "+ bundle.getString("not")+" "+bundle.getString("allowed"),""));
        //bcontinue=false;
        return null;
      }
        entityUpdated =false;
        String fromTable="";
        String qualifier="";
       if (!bcontinue){
        FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
         FacesMessage.SEVERITY_ERROR,bundle.getString("error")+", "+ bundle.getString("not")+" "+bundle.getString("continue"),""));
         return null;
       }
             //Below is common to all type of keys coming from above   
            //jay add logic to delete existing docs, below will add new ones -done

           /* not all entities have document ie clob/blob */
           //end of documentField != "" ie item/customer and non clob/blob 

            // in update key value is always changed to reflect any change in description etc but also uses
            // current time, so key will always change. Do not use key value instead use sid no as int or as string
            // if subkeys have changed then key value needs to be reestablished unless rest or import (how?)
            subKey="";
             // key set but return if the natural key already exists except for clob and blob where duplicates ok
             // in keyExists method, initCap will be applied and existing key always gets replaced

             if(owner2Code.equals(masterSiteCode)){
               allowUpdate();     
             }else{
               superdotupdate();
             }    

           entityUpdated =true;
           setChangeDone(true);
           // better to return and show msg not sure why the redirect was there 
           // changedone did not work either because it got reinitilized and no change msg was being shown
           //or look into using jsf flush msg
           return "updated"; 
           //String viewId = FacesContext.getCurrentInstance().getViewRoot().getViewId();
           //return viewId + "?faces-redirect=true";// refresh

    }



    public String remove() {
     //jay added logic to delete related entities ie if a demo user is deleted then created employee should be deleted and/or
     // add logic to use employee resultlist rather than singleresult
     // useful for debugging validation failure and also to remove child entities first automatically(logic to be added)
     // some reversing logic needed for transactions aw well
     // allow raaspi user UH to delete SYSTEM records , needed for bad resource and blob etc
       //setDeletedMessage(createValueExpression(""));
        entityDeleted =false;
      // whats about other details like itemjobdetails etc?? 
      // add logic to adjust posting if invoice/payment
      // allow raaspi to delete SYSTEM records
      if((getInstance().getZzxxu2oxxhxxxxxxxxxxowner2().equals("SYSTEM") && !owner2Code.equals("myflowp") && !owner2Code.equals(masterSiteCode)) || (!getInstance().getZzxxu2oxxhxxxxxxxxxxowner2().equals("SYSTEM") && !getInstance().getZzxxu2oxxhxxxxxxxxxxowner2().equals(owner2Code))){
        FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
         FacesMessage.SEVERITY_ERROR,bundle.getString("delete")+" "+ bundle.getString("not")+" "+bundle.getString("allowed"),""));

                 bcontinue=false;
                 return null;
      }

        // entities without details ,function 
        try {
         superdotremove();
        } catch ( Exception e){
          FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
           FacesMessage.SEVERITY_INFO,bundle.getString("delete")+" "+ bundle.getString("error")+" "+e.getMessage(),""));

           return null;
        }

           entityDeleted =true;
           setChangeDone(true);
           timeStamp = new SimpleDateFormat("yyyy.MM.dd.HH.mm.ss").format(new Date());
           FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
          FacesMessage.SEVERITY_INFO,bundle.getString("deleted")+" "+bundle.getString("selected")+" "+"Vendidetails"+" "+"at"+" "+timeStamp,""));
           return "removed"; 



    }


    /**
    * save in clobdata key being accounts,import,csv,1 note when calling clobdata needes extra character before import
    * The following methods supports import of csv data into entities.
    * A file containing csv data is uploaded in clob db under clob key kkkqqqseq where ttt is dollar{entityName}
    * kkk is "dollar{entityName} like accounts" and qqq is "csv" seq is 1
    * The csv data must have the first row containing name of target table columns corresponding to csv data
    * if there is data but no target column name then ,,
    * a template containing the matching column names can be downloaded using import wizard 
    * importCsvData method copies 
    * @param args -option one is to pass clob key  
    * @return none void type
    * @exception None.
    * @see " "
    * in the table called options, column called value will have filter value which will dictate whether it will be hidden,visible or 
    * to use the specified value rather than value in column called options
    * to hide a value in column called options for say activity entity put h=1a. to hide for both item and activity put value= h=1a,18
    * to show a value in column called options for say activity entity put s=1a. to show for both item and activity put value= s=1a,18
    * to show based on locale put in pupose ca=manual-cheque us=manual-check  in value put ca=m us=m
    * to use value rather than whats in options colimn, use v=xxx where xxx is the value.
    */


    /**
    * persist true means came from copynsave ie convert order to invoice etc , false comes from show outstanding and resets totals but no copy
    * called by xxEdit convertToxx button to copy existing entity say order date into new invoice along with the details
    * Similar function as AddWithDetails or AddProductsToOrder but they are interactive, this one loops through existing data
    * Flow:loops through each copy from item like quote,order or invoice
    *       persist -> showTempRunt -> createcDetails ->setParent sets parent totals (loops through as parent details created)
    *          -> PersistRunT prepares Totals for persist -> actual persist of parent and then detail instance
    *      loop back for each item to be copied
    *
    *@see "R3RestClient SyncData where series of order data comes as json values    "
    */




public boolean isBitSet(Integer a, Integer n){ 
 if (a == null){
  a=0;
 }
 return (a & (1 << n)) != 0; 
}





// set initCap via client, make it true now
        public boolean initCap() {
         //jay add logic to check client table if initCap is on or not
            return true;
        }



      /* parentProperty org.hibernate.mapping.Property(fpxxfq1a5xwwqqhxxxxxitem) parentParentPojo Entity: com.rcomputer.genapp.model.Fpxxfq1a5xwwqqhxxxxxitem */
      /* parentProperty org.hibernate.mapping.Property(fxxxcq144xwwqqhxxxxxlocation) parentParentPojo Entity: com.rcomputer.genapp.model.Fxxxcq144xwwqqhxxxxxlocation */
    // compositekeylist is 
      //generated for non composite foreign fields
         public void validateAndSelectXxxxxxxxmatcode(FacesContext context,UIComponent toValidate,Object value) {
            if (skipValidation){
             //extended persist closes the copied from entity so validation will fail and we dont need validation at this point
             return;
            }
            // set bcontinue to true if set false by showrunt() at start of txn, because of property being null
            // jay not all showrunt() validate, vendor txn does not why??
            if(fpxxfq1a5xwwqqhxxxxxitem == null && bcontinue == false){
             bcontinue=true;
            }
            fpxxfq1a5xwwqqhxxxxxitem  = null;
            String enteredValue = (String) value;
            String jay = toValidate.getAttributes().get("required").toString();
            if (!jay.contains("true")  && (enteredValue ==null || enteredValue.trim().isEmpty())){ 
             return;
            }
            if (jay.contains("true")  && (enteredValue ==null || enteredValue.trim().isEmpty())){  
             FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
              FacesMessage.SEVERITY_WARN,bundle.getString("matcode")+" "+ bundle.getString("no")+" "+ bundle.getString("value"),""));
             bcontinue=false;
             return;
            }
            urlIndex=urlName.indexOf(">>");
            if (urlIndex != -1){
             enteredValue=enteredValue.substring(0,urlIndex);
            }
            Fpxxfq1a5xwwqqhxxxxxitem cc = fpxxfq1a5xwwqqhxxxxxitemHome.getInstance();
	      try {
			 List<Fpxxfq1a5xwwqqhxxxxxitem> results =  entityManager.createQuery("select cc from Fpxxfq1a5xwwqqhxxxxxitem cc where cc.a0xxukixbxxxxxxxxxxxmatcode = :keyOfEntity AND cc.zzxxu2oxxhxxxxxxxxxxowner2=:owner2 order by cc.a0xxuobxbxxxxxxxxxxxsid asc")
				.setParameter("keyOfEntity", enteredValue).setParameter("owner2", owner2Code).getResultList();                      
                        if(!results.isEmpty()){
                            fpxxfq1a5xwwqqhxxxxxitem = results.get(0);
                            if (results.size()>1){
                             FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_WARN,bundle.getString("matcode")+" "+ bundle.getString("multiple")+" "+ bundle.getString("results")+", "+ bundle.getString("one")+" "+ bundle.getString("selected"),""));
                        
                            }           
                        }
                        else{
                         FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_WARN,bundle.getString("matcode")+" "+ enteredValue+" "+bundle.getString("not")+" "+ bundle.getString("found")+", "+ bundle.getString("create")+" "+ bundle.getString("first"),""));
                                     return;                           
                        } 
                        if (fpxxfq1a5xwwqqhxxxxxitem != null ) {
                             // that's fine - It should exist.
                             // check if selfreferencing foreign field
                           if(this.instance == null){
                            getInstance();
                            if(this.instance == null){//
                             FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                              FacesMessage.SEVERITY_WARN,bundle.getString("Vendidetails")+" "+bundle.getString("instance")+" "+ bundle.getString("empty")+", "+ bundle.getString("exit")+" "+ bundle.getString("and")+" "+ bundle.getString("try")+" "+ bundle.getString("again"),""));
                             return;
                            }
                           }
                           //fpxxfq1a5xwwqqhxxxxxitem = fpxxfq1a5xwwqqhxxxxxitemHome.getDefinedInstance();
                          this.instance.setFpxxfq1a5xwwqqhxxxxxitem(fpxxfq1a5xwwqqhxxxxxitem);
                         /// check if atleast 1 detail persisted then assume a new item is being considered       
                         /// put a new flag to avoid query
                         ///if(trexuq233xwwqqhxxxxxcuquoteList.entityLessStatusDetailedList(trexuq233xwwqqhxxxxxcuquoteHome.instance.a0xxuobxbxxxxxxxxxxxsid,-1).size() ge 1 )
                         ///}                        
                           //if some other validation already failed, do not reset it 
                           if(bcontinue){
                            bcontinue=true;
                           }
                         }//end of shiptobill check
	      } catch (NoResultException nre) {
                 FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                   FacesMessage.SEVERITY_WARN,bundle.getString("Matcode"),""));
                 throw new ValidatorException(msg);
              }
         }
         // check again if selfreferencing foreign field fpxxfq1a5xwwqqhxxxxxitem xoxxuq3c4xwwqqhxxxxxvendidetails jay may not be needed check edit.ftl
      /* parentProperty org.hibernate.mapping.Property(dxxxch1d3xwwqqhxxlxxcompany) parentParentPojo Entity: com.rcomputer.genapp.model.Dxxxch1d3xwwqqhxxlxxcompany */
      /* parentProperty org.hibernate.mapping.Property(fxxxcq144xwwqqhxxxxxlocation) parentParentPojo Entity: com.rcomputer.genapp.model.Fxxxcq144xwwqqhxxxxxlocation */
      /* parentProperty org.hibernate.mapping.Property(fxxxuq111xwwqqhxxxxxaddressByMailtocode) parentParentPojo Entity: com.rcomputer.genapp.model.Fxxxuq111xwwqqhxxxxxaddress */
      /* parentProperty org.hibernate.mapping.Property(fxxxuq111xwwqqhxxxxxaddressByShiptocode) parentParentPojo Entity: com.rcomputer.genapp.model.Fxxxuq111xwwqqhxxxxxaddress */
      /* parentProperty org.hibernate.mapping.Property(yxxxch601xwwqqhxxxxxaccount) parentParentPojo Entity: com.rcomputer.genapp.model.Yxxxch601xwwqqhxxxxxaccount */
    // compositekeylist is 
      //generated for non composite foreign fields
         public void validateAndSelectXxxxxxxxcustomer(FacesContext context,UIComponent toValidate,Object value) {
            if (skipValidation){
             //extended persist closes the copied from entity so validation will fail and we dont need validation at this point
             return;
            }
            // set bcontinue to true if set false by showrunt() at start of txn, because of property being null
            // jay not all showrunt() validate, vendor txn does not why??
            if(jxxxuq201xwwqqhxxxxxcustomer == null && bcontinue == false){
             bcontinue=true;
            }
            jxxxuq201xwwqqhxxxxxcustomer  = null;
            String enteredValue = (String) value;
            String jay = toValidate.getAttributes().get("required").toString();
            if (!jay.contains("true")  && (enteredValue ==null || enteredValue.trim().isEmpty())){ 
             return;
            }
            if (jay.contains("true")  && (enteredValue ==null || enteredValue.trim().isEmpty())){  
             FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
              FacesMessage.SEVERITY_WARN,bundle.getString("customer")+" "+ bundle.getString("no")+" "+ bundle.getString("value"),""));
             bcontinue=false;
             return;
            }
            urlIndex=urlName.indexOf(">>");
            if (urlIndex != -1){
             enteredValue=enteredValue.substring(0,urlIndex);
            }
            Jxxxuq201xwwqqhxxxxxcustomer cc = jxxxuq201xwwqqhxxxxxcustomerHome.getInstance();
	      try {
			 List<Jxxxuq201xwwqqhxxxxxcustomer> results =  entityManager.createQuery("select cc from Jxxxuq201xwwqqhxxxxxcustomer cc where cc.a0xxukxxbvxxxxxxxxxxcustomer = :keyOfEntity AND cc.zzxxu2oxxhxxxxxxxxxxowner2=:owner2 order by cc.a0xxuobxbxxxxxxxxxxxsid asc")
				.setParameter("keyOfEntity", enteredValue).setParameter("owner2", owner2Code).getResultList();                      
                        if(!results.isEmpty()){
                            jxxxuq201xwwqqhxxxxxcustomer = results.get(0);
                            if (results.size()>1){
                             FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_WARN,bundle.getString("customer")+" "+ bundle.getString("multiple")+" "+ bundle.getString("results")+", "+ bundle.getString("one")+" "+ bundle.getString("selected"),""));
                        
                            }           
                        }
                        else{
                         FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_WARN,bundle.getString("customer")+" "+ enteredValue+" "+bundle.getString("not")+" "+ bundle.getString("found")+", "+ bundle.getString("create")+" "+ bundle.getString("first"),""));
                                     return;                           
                        } 
                        if (jxxxuq201xwwqqhxxxxxcustomer != null ) {
                             // that's fine - It should exist.
                             // check if selfreferencing foreign field
                           if(this.instance == null){
                            getInstance();
                            if(this.instance == null){//
                             FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                              FacesMessage.SEVERITY_WARN,bundle.getString("Vendidetails")+" "+bundle.getString("instance")+" "+ bundle.getString("empty")+", "+ bundle.getString("exit")+" "+ bundle.getString("and")+" "+ bundle.getString("try")+" "+ bundle.getString("again"),""));
                             return;
                            }
                           }
                           //jxxxuq201xwwqqhxxxxxcustomer = jxxxuq201xwwqqhxxxxxcustomerHome.getDefinedInstance();
                          this.instance.setJxxxuq201xwwqqhxxxxxcustomer(jxxxuq201xwwqqhxxxxxcustomer);
                         /// check if atleast 1 detail persisted then assume a new item is being considered       
                         /// put a new flag to avoid query
                         ///if(trexuq233xwwqqhxxxxxcuquoteList.entityLessStatusDetailedList(trexuq233xwwqqhxxxxxcuquoteHome.instance.a0xxuobxbxxxxxxxxxxxsid,-1).size() ge 1 )
                         ///}                        
                           //if some other validation already failed, do not reset it 
                           if(bcontinue){
                            bcontinue=true;
                           }
                         }//end of shiptobill check
	      } catch (NoResultException nre) {
                 FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                   FacesMessage.SEVERITY_WARN,bundle.getString("Customer"),""));
                 throw new ValidatorException(msg);
              }
         }
         // check again if selfreferencing foreign field jxxxuq201xwwqqhxxxxxcustomer xoxxuq3c4xwwqqhxxxxxvendidetails jay may not be needed check edit.ftl
      /* parentProperty org.hibernate.mapping.Property(fpxxfq1a5xwwqqhxxxxxitem) parentParentPojo Entity: com.rcomputer.genapp.model.Fpxxfq1a5xwwqqhxxxxxitem */
      /* parentProperty org.hibernate.mapping.Property(jxxxbh400xwwqqhxxxxxemployee) parentParentPojo Entity: com.rcomputer.genapp.model.Jxxxbh400xwwqqhxxxxxemployee */
      /* parentProperty org.hibernate.mapping.Property(jxxxuq300xwwqqhxxxxxvendor) parentParentPojo Entity: com.rcomputer.genapp.model.Jxxxuq300xwwqqhxxxxxvendor */
      /* parentProperty org.hibernate.mapping.Property(trexuq344xwwqqhxxxxxvendorders) parentParentPojo Entity: com.rcomputer.genapp.model.Trexuq344xwwqqhxxxxxvendorders */
      /* parentProperty org.hibernate.mapping.Property(trexuq377xwwqqhxxxxxvshipmen) parentParentPojo Entity: com.rcomputer.genapp.model.Trexuq377xwwqqhxxxxxvshipmen */
    // compositekeylist is 
      //generated for non composite foreign fields
         public void validateAndSelectXxxxxxxxinvoice(FacesContext context,UIComponent toValidate,Object value) {
            if (skipValidation){
             //extended persist closes the copied from entity so validation will fail and we dont need validation at this point
             return;
            }
            // set bcontinue to true if set false by showrunt() at start of txn, because of property being null
            // jay not all showrunt() validate, vendor txn does not why??
            if(trexuq3a6xwwqqhxxxxxvinvoice == null && bcontinue == false){
             bcontinue=true;
            }
            trexuq3a6xwwqqhxxxxxvinvoice  = null;
            String enteredValue = (String) value;
            String jay = toValidate.getAttributes().get("required").toString();
            if (!jay.contains("true")  && (enteredValue ==null || enteredValue.trim().isEmpty())){ 
             return;
            }
            if (jay.contains("true")  && (enteredValue ==null || enteredValue.trim().isEmpty())){  
             FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
              FacesMessage.SEVERITY_WARN,bundle.getString("invoice")+" "+ bundle.getString("no")+" "+ bundle.getString("value"),""));
             bcontinue=false;
             return;
            }
            urlIndex=urlName.indexOf(">>");
            if (urlIndex != -1){
             enteredValue=enteredValue.substring(0,urlIndex);
            }
            Trexuq3a6xwwqqhxxxxxvinvoice cc = trexuq3a6xwwqqhxxxxxvinvoiceHome.getInstance();
	      try {
			 List<Trexuq3a6xwwqqhxxxxxvinvoice> results =  entityManager.createQuery("select cc from Trexuq3a6xwwqqhxxxxxvinvoice cc where cc.a0xxunvibvxxxxxxxxxxinvoice = :keyOfEntity AND cc.zzxxu2oxxhxxxxxxxxxxowner2=:owner2 order by cc.a0xxuobxbxxxxxxxxxxxsid asc")
				.setParameter("keyOfEntity", enteredValue).setParameter("owner2", owner2Code).getResultList();                      
                        if(!results.isEmpty()){
                            trexuq3a6xwwqqhxxxxxvinvoice = results.get(0);
                            if (results.size()>1){
                             FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_WARN,bundle.getString("invoice")+" "+ bundle.getString("multiple")+" "+ bundle.getString("results")+", "+ bundle.getString("one")+" "+ bundle.getString("selected"),""));
                        
                            }           
                        }
                        else{
                         FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_WARN,bundle.getString("invoice")+" "+ enteredValue+" "+bundle.getString("not")+" "+ bundle.getString("found")+", "+ bundle.getString("create")+" "+ bundle.getString("first"),""));
                                     return;                           
                        } 
                        if (trexuq3a6xwwqqhxxxxxvinvoice != null ) {
                             // that's fine - It should exist.
                             // check if selfreferencing foreign field
                           if(this.instance == null){
                            getInstance();
                            if(this.instance == null){//
                             FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                              FacesMessage.SEVERITY_WARN,bundle.getString("Vendidetails")+" "+bundle.getString("instance")+" "+ bundle.getString("empty")+", "+ bundle.getString("exit")+" "+ bundle.getString("and")+" "+ bundle.getString("try")+" "+ bundle.getString("again"),""));
                             return;
                            }
                           }
                           //trexuq3a6xwwqqhxxxxxvinvoice = trexuq3a6xwwqqhxxxxxvinvoiceHome.getDefinedInstance();
                          this.instance.setTrexuq3a6xwwqqhxxxxxvinvoice(trexuq3a6xwwqqhxxxxxvinvoice);
                         /// check if atleast 1 detail persisted then assume a new item is being considered       
                         /// put a new flag to avoid query
                         ///if(trexuq233xwwqqhxxxxxcuquoteList.entityLessStatusDetailedList(trexuq233xwwqqhxxxxxcuquoteHome.instance.a0xxuobxbxxxxxxxxxxxsid,-1).size() ge 1 )
                         ///}                        
                           //if some other validation already failed, do not reset it 
                           if(bcontinue){
                            bcontinue=true;
                           }
                         }//end of shiptobill check
	      } catch (NoResultException nre) {
                 FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                   FacesMessage.SEVERITY_WARN,bundle.getString("Invoice"),""));
                 throw new ValidatorException(msg);
              }
         }
         // check again if selfreferencing foreign field trexuq3a6xwwqqhxxxxxvinvoice xoxxuq3c4xwwqqhxxxxxvendidetails jay may not be needed check edit.ftl












    public String more() {
    
  // 3C now a new item may be selected, so clear the old item values

     totaldel=new BigDecimal("0.0");
     totalmis=new BigDecimal("0.0");
     // make a new method describeStatus(int status)
     totalbaseamt=new BigDecimal("0.0");
     moreActive=true;
     nextShow=true;
     if(!restEntity && !cartPoStatus.equals("e")){
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
       FacesMessage.SEVERITY_INFO,bundle.getString("Manual")+ " "+bundle.getString("adjustment")+ " "+bundle.getString("fields")+" "+bundle.getString("like")+ " "+bundle.getString("MiscCharges")+ " "+bundle.getString("under")+" "+bundle.getString("More")+" "+bundle.getString("Fields")+ " "+bundle.getString("can")+ " "+bundle.getString("be")+", "+bundle.getString("used")+" "+bundle.getString("now")+", "+bundle.getString("if")+ " "+bundle.getString("needed")+" "+bundle.getString("before"),""));
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
       FacesMessage.SEVERITY_INFO,bundle.getString("using")+ " "+bundle.getString("save")+ " "+bundle.getString("next")+" "+bundle.getString("line")+ " "+bundle.getString("button")+" "+bundle.getString("to")+" "+bundle.getString("add")+" "+bundle.getString("this")+" "+bundle.getString("item"),""));
     }
     return null;
    }




    





/*
currentClientClass 
*/


/*
currentUserClass 
*/
/*
acperiodClass Y
*/
        private Yxxxch621xwwqqhxxxxxacperiod acperiod;
	public String getAcperiodFieldValue(String p) {
            String result="";
            //dont use owner2Code until genApp finished  needs try catch
            try{
             acperiod =(Yxxxch621xwwqqhxxxxxacperiod) entityManager
		.createQuery(
		 "select cc from Yxxxch621xwwqqhxxxxxacperiod cc where cc.a0xxukwpbv47xxxxxxxxrowid = :nKeyName  AND cc.zzxxu2oxxhxxxxxxxxxxowner2=:owner2 order by cc.a0xxuobxbxxxxxxxxxxxsid asc")
		.setParameter("nKeyName","01").setParameter("owner2", owner2Code)
		.getSingleResult();
            }catch(Exception exc){
             FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
               FacesMessage.SEVERITY_INFO,bundle.getString("account")+ " "+bundle.getString("period")+ " "+bundle.getString("01")+ " "+bundle.getString("read")+ " "+bundle.getString("failed")+", "+exc.getMessage(),""));
             acperiod=null;
            }

	    if (acperiod != null) {
                  if (p.equals("cp")){
                    if(acperiod.getA1xxuxwpbv47xxxxxxxxcurrperiod() != null){
                     return acperiod.getA1xxuxwpbv47xxxxxxxxcurrperiod();
                    }else{
                     return "12";//assume period 12
                    }
                  }
                  else {
                    if(acperiod.getB2xxdwerbvxxxxxxxxxxcurrbusdate() !=null){
                     return acperiod.getB2xxdwerbvxxxxxxxxxxcurrbusdate().toString();
                    }else{
                      SimpleDateFormat ss = new SimpleDateFormat("yyyy-MM-dd");

                     return ss.format(calendar.getTime()).toString();// assume toDay
                    }
                  }
            }
	    else{
                 FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                  FacesMessage.SEVERITY_INFO,bundle.getString("account")+ " "+bundle.getString("period")+ " "+bundle.getString("table")+ " "+bundle.getString("not")+ " "+bundle.getString("accessible"),""));

                  bcontinue=false;
			return null;
			
           }
      }
	public Date getAcperiodDateFieldValue(String p) {
            String result="";
             Yxxxch621xwwqqhxxxxxacperiod acperiod =(Yxxxch621xwwqqhxxxxxacperiod) entityManager
					.createQuery(
							"select cc from Yxxxch621xwwqqhxxxxxacperiod cc where cc.a0xxukwpbv47xxxxxxxxrowid = :nKeyName  AND cc.zzxxu2oxxhxxxxxxxxxxowner2=:owner2 order by cc.a0xxuobxbxxxxxxxxxxxsid asc")
					.setParameter("nKeyName","01").setParameter("owner2", owner2Code)
					.getSingleResult();

		if (acperiod != null) {
                  if (p.equals("cbd")){
                    return acperiod.getB2xxdwerbvxxxxxxxxxxcurrbusdate();
                  }
                  else{
			   return null;
                  }
           }
		else{
                  FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("accounting")+ " "+bundle.getString("period")+ " "+bundle.getString("table")+ " "+bundle.getString("not")+" "+bundle.getString("accessible"),""));

                  bcontinue=false;
			return null;
			
		}
      }


	public void setShowKeyFields() {
	}
        //cartPoPicked is a flag to allow/suppress key generation and is set to true in cartpersist if po already exists  
        private boolean cartPoPicked=false;
        private boolean restEntity =false;
     // vendor invoice uses key from supplier , add more logic to handle it
	private boolean picked = false;
	private boolean multipicked = false;

     //jay document purpose of using last and show. last may be to reuse what was used recently
     // and show may be for dynamic rendering look at useraux as well 
     // note the lastItemEntity is used in forum to hold replyTo , others are not used
	private boolean bcontinue = true;
	private boolean moreActive = false;
	private boolean includeNext = false;
/*The following needs to be defined only if we need an instance of an entity which is not already generated via default seam gen. example if the entity is not a foreign key like Journal entity.
For the Foreign key instance, use the variables used in wire() where a getInstance is issued.For others use the variable defined below and issue a getInstance later.
*/
	@Inject
	Yxxxch621xwwqqhxxxxxacperiodHome yxxxch621xwwqqhxxxxxacperiodHome;




      private Integer lastItemLine=new Integer(0);
      //@Begin(join=true)

	public BigDecimal getKeyedQuantity() {
		return keyedQuantity;
	}

	public void setKeyedQuantity(BigDecimal keyedQuantity) {
		this.keyedQuantity = keyedQuantity;
      }

	public BigDecimal getTotalbaseamt() {
		return totalbaseamt;
	}

	public void setTotalbaseamt(BigDecimal totalbaseamt) {
		this.totalbaseamt = totalbaseamt;
	}
        //
	public BigDecimal getChange() {
		return change;
	}

	public void setChange(BigDecimal change) {
		this.change = change;
	}

	public BigDecimal getTotalmis() {
		return totalmis;
	}

	public void setTotalmis(BigDecimal totalmis) {
		this.totalmis = totalmis;
	}

	public void setDetailMis(BigDecimal detailMis) {
		this.detailMis = detailMis;
	}

	public void setDetailDel(BigDecimal detailDel) {
		this.detailDel = detailDel;
	}

	public void setDetailTax1(BigDecimal detailTax1) {
		this.detailTax1 = detailTax1;
	}


	public void setTotaltax1(BigDecimal totaltax1) {
		this.totaltax1 = totaltax1;
	}

	public BigDecimal getTotaltax1() {
		return totaltax1;
	}

	public void setTotalamountTotal(BigDecimal amountTotal) {
		this.amountTotal = amountTotal;
	}

	public BigDecimal getTotalamountTotal() {
		return amountTotal;
	}

	public void setTotalqtyTotal(BigDecimal qtyTotal) {
		this.qtyTotal = qtyTotal;
	}

	public BigDecimal getTotalqtyTotal() {
		return qtyTotal;
	}
	public void setTotaltax2(BigDecimal totaltax2) {
		this.totaltax2 = totaltax2;
	}

	public BigDecimal getTotaltax2() {
		return totaltax2;
	}

	public void setTotaltax3(BigDecimal totaltax3) {
		this.totaltax3 = totaltax3;
	}

	public BigDecimal getTotaltax3() {
		return totaltax3;
	}

	public BigDecimal getTotaldel() {
		return totaldel;
	}

	public void setTotaldel(BigDecimal totaldel) {
		this.totaldel = totaldel;
	}

	public BigDecimal getTotalqty() {
		return totalqty;
	}
	public void setTotalqty(BigDecimal totalqty) {
		this.totalqty = totalqty;
	}

      public Integer getLastItemLine() {
       return lastItemLine;
      }

	public void setLastItemLine(Integer lastItemLine) {

		this.lastItemLine = lastItemLine;
	}

//jay look into automating the below logic using related property values
// getShow does not seem to be used?? may be future security
// The below is useed to handle foreign fields which are dropdown and the value cannot point to instance.foreign entity
// since the entity does not exist yet if create, list works
// enhance remembering last value by using userprofile table the way row and option value is used














	public boolean isPicked() {
		return picked;
	}
	public void setPicked(boolean picked) {
		this.picked= picked;
	}
	public boolean isMultipicked() {
		return multipicked;
	}


	public boolean isMoreActive() {
		return moreActive;
	}
	public boolean isEntityUpdated() {
		return entityUpdated;
	}


	public boolean isEntityDeleted() {
		return entityDeleted;
	}
     public Date getCurrentTime() {
        return new Date();
     }



































            public boolean addAnyAttachment(){
            return true;
            }
            public boolean updateShipmentOrPickUp(){
            return true;
            }










// same as checking for "1B"



	

 public String sanitizeApply(String unsafe) throws IOException{
         String safe = Jsoup.clean(unsafe, Whitelist.relaxed().addTags("iframe").addAttributes("p", "style"));
         return unsafe;

 }

    /**
    * The following method sanitizes ie drops unwanted html tags to reduce xss attack 
    * called by xxxlist.send (email)  and clobdataEdit and theme pages etc
    * @param args unsafe data entered by untrusted user 
    * @return safe string
    * @exception IOException
    * @see 
    *  use sanitize wherever clbdata is used or in future used 
    *  default is is ignore sanitize but added a new method sanitizeApply
    */  

 public String sanitize(String unsafe) throws IOException{
         //String safe = Jsoup.clean(unsafe, Whitelist.relaxed().addTags("iframe").addAttributes("p", "style"));
         return unsafe;

 }

/*      addTags for tag, addAttributes for attribute within a specific tag only
	.addTags("meta", "title", "script", "iframe")
	.addAttributes("meta", "charset")
	.addAttributes("iframe", "src")
	.addProtocols("iframe", "src", "http", "https");
*/


     // generate 
















/**
*  cartpersist can be used where detail items are iterated over as in shopping cart or back office order processing for one or more items
*  this method is called for one item at a time
*  it has 3 flavours- o if a new item is added, u if existing item is removed , c if some change like qty for any of the items
*  o a new item is added
*    Po null means say a new order as well
*    Po not null means a new item for say an existing order
*  u existing item removed from say order
*  c change existing item from say order or invoice ...
*   call update
*    updatecdetailsetValues
*    showrunt recalcultes and updates variables
*    persistrunt copies the variable values into instance property values
*    superdotupdate to persist
*see R3RestClient SyncDataOrders 
*
*/
    Integer currentDetailLine=0;

    public String cartpersist(Integer cpoId,String cposts,Integer currentCount, BigDecimal quantity) {
       return "persisted";
    }








    public EntityManager getEntityManager()
    {
        //return emf.createEntityManager();
        return entityManager;
    }


    public String createValueExpression(String st){
     return st;
    }
    
    public void setId(Integer id){
      this.id=id;
    }
    public Integer getId(){
     //if(id==null){
      //id=0;// avoid null exception in edit viewparam, null is needed if new entity
     //}
     return id;
    }
    public Xoxxuq3c4xwwqqhxxxxxvendidetails getInstance(){
        if (instance == null) {
            if (id == null) {
                return createInstance();
            }
            else {
                instance=entityManager.find(Xoxxuq3c4xwwqqhxxxxxvendidetails.class,id);
                return instance;
            }
        }
        else {
            return instance;
        }
   }

   /**
    * Set/change the entity being managed.
    */
   public void setInstance(Xoxxuq3c4xwwqqhxxxxxvendidetails instance)
   {
      ///setDirty(this.instance, instance);
      this.instance = instance;
   }
   /**
    * Clear the managed entity (and id), allowing the {@link EntityHome} to be
    * reused.
    */
   public void clearInstance()
   {
      setInstance(null);
      setId(null);
   }
   /**
    * Load the instance if the id is defined otherwise create a new instance
    * <br />
    * Utility method called by {@link #getInstance()} to load the instance from 
    * the Persistence Context if the id is defined. Otherwise a new instance is 
    * created.
    * 
    * @see "#find()"
    * @see "#createInstance() at top of this source"
    */
   protected void initInstance()
   {
      if ( isIdDefined() )
      {
         if ( !isTransactionMarkedRollback() )
         {
            //we cache the instance so that it does not "disappear"
            //after remove() is called on the instance
            //is this really a Good Idea??
            //setInstance( find() );
            setInstance(null);
         }
      }
      else
      {
         setInstance( createInstance() );
      }
   }
   public boolean isTransactionMarkedRollback(){
    return false;
   }
   /**
    * Flush any changes made to the managed entity instance to the underlying
    * database. 
    * <br />
    * If the update is successful, a log message is printed, a 
    * {@link javax.faces.application.FacesMessage} is added and a transaction 
    * success event raised.
    * 
    * @see "Home#updatedMessage()"
    * @see "Home#raiseAfterTransactionSuccessEvent()"
    * 
    * @return "updated" if the update is successful
    */
   @Transactional
   public String superdotupdate()
   {
      ///joinTransaction();
      ///getEntityManager().flush();
      ///updatedMessage();
      ///raiseAfterTransactionSuccessEvent();
           // if SH or EH then log changes (except editlog changes) to Xxxxch82bxhhhhhxxxxxeditlog  
           if(customIdentity.hasRole("SH") ||customIdentity.hasRole("EH")){
            xxxxch82bxhhhhhxxxxxeditlogHome.clearInstance();
            xxxxch82bxhhhhhxxxxxeditlog=xxxxch82bxhhhhhxxxxxeditlogHome.getInstance();
            xxxxch82bxhhhhhxxxxxeditlog.setA0xxukxxbvxxxxxxxxxxdatabasenm("Vendidetails");
            xxxxch82bxhhhhhxxxxxeditlog.setZ1xxzxxrbvxxxxxxxxxxrecordno(this.instance.getA0xxuobxbxxxxxxxxxxxsid());
            xxxxch82bxhhhhhxxxxxeditlog.setZexxcxxrlxxxxxxxxxxxnewdate(Calendar.getInstance().getTime());
            xxxxch82bxhhhhhxxxxxeditlogHome.superdotupdate();
            FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
             FacesMessage.SEVERITY_WARN,bundle.getString("Vendidetails")+" "+bundle.getString("updated")+" "+bundle.getString("and")+", "+bundle.getString("logged")+" "+bundle.getString("in")+" "+bundle.getString("editlog"),""));
            FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
             FacesMessage.SEVERITY_WARN,bundle.getString("Remember")+", "+bundle.getString("journal")+" "+bundle.getString("entries")+" "+bundle.getString("created")+", "+bundle.getString("need")+" "+bundle.getString("to")+" "+bundle.getString("be")+" "+bundle.getString("deleted"),""));
           }
      this.instance=entityManager.merge(this.instance);
      ///id=this.instance.getA0xxuobxbxxxxxxxxxxxsid();
      /// why ? jpa merge should be ok entityManager.persist(this.instance);
      return "updated";
   }

   /**
    * Persist unmanaged entity instance to the underlying database. 
    * If the persist is successful, a log message is printed, a 
    * {@link javax.faces.application.FacesMessage } is added and a transaction 
    * success event raised.
    * 
    * @see "Home#createdMessage()"
    * @see "Home#raiseAfterTransactionSuccessEvent()"
    * 
    * @return "persisted" if the persist is successful
    */
   @Transactional
   public String superdotpersist()
   {
      ///getEntityManager().persist( getInstance() );
      ///getEntityManager().flush();
      ///assignId( PersistenceProvider.instance().getId( getInstance(), getEntityManager() ) );
      ///createdMessage();
      ///raiseAfterTransactionSuccessEvent();
      //added sanitize if clob data
      //duplicatexxxExists should be called, as needed, before calling this method to avoid duplicate keys     
      entityManager.persist(this.instance);
      id=this.instance.getA0xxuobxbxxxxxxxxxxxsid();
      return "persisted";
   }
   
   /**
    * Remove managed entity instance from the Persistence Context and the 
    * underlying database.
    * If the remove is successful, a log message is printed, a 
    * {@link javax.faces.application.FacesMessage} is added and a transaction 
    * success event raised.
    * 
    * @see "Home#deletedMessage()"
    * @see "Home#raiseAfterTransactionSuccessEvent()"
    * 
    * @return "removed" if the remove is successful
    */
   @Transactional
   public String superdotremove()
   {
      ///getEntityManager().remove( getInstance() );
      ///getEntityManager().flush();
      ///deletedMessage();
      ///raiseAfterTransactionSuccessEvent();
     try{
      this.instance=entityManager.merge(this.instance);
      id=this.instance.getA0xxuobxbxxxxxxxxxxxsid();
      entityManager.remove(this.instance);
      // to catch runtime integrity violation exception, flush does immediate remove
      entityManager.flush();
      id=null;
     } catch ( Exception e){
          FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("delete")+" "+ bundle.getString("error")+" "+e.getMessage(),""));
           bcontinue=false;
           return null;
     }

      return "removed";
   }
   /**
    * Returns true if the entity instance is managed
    */
   @Transactional
   public boolean isManaged()
   {
     /// return getInstance()!=null && 
     ///       getEntityManager().contains( getInstance() );
     return id != null;
   }

   /**
    * Invokes this action method via f:viewaction entry on a page, replaces seam pages.xml action 
    * called by web pages like login.xhtml, checkout, unsc etc, which in turns are invoked via activation link entries
    * in emails .
    * there is a takeAction method in r3cart bean(shopping cart ) to take care of checkout.xhtml viewAction
    * viewId is checked to pick the submethod and request parameters are  used to call appropriate action method. 
    * no method parameter but url parameters are used 
    * no exception caught here .
    * 
    * @return "null" 
    */
   public String takeAction(){
    // all pages invoke this method and there can be error pages when rq can be null
    if(req==null){
     return null;
    }

    String viewId = facesContext.getViewRoot().getViewId();
/*
    if (viewId.contains("shoauthverify.")){
     if (req.getParameter("hmac") != null ){
      r3RestClient.shoauthverify(req.getParameter("code"),req.getParameter("hmac"),req.getParameter("shop"),req.getParameter("state"),req.getParameter("timestamp"));
     }
    }
    if (viewId.contains("shwebhook.")){
     if (req.getParameter("hmac") != null ){
      r3RestClient.shoauthverify(req.getParameter("code"),req.getParameter("hmac"),req.getParameter("shop"),req.getParameter("state"),req.getParameter("timestamp"));
     }
*/
     return null;
    }



   
    /**
    * The following method puts restrictions on bean access on top of menu render protection or url entered outside menue
    * @param none
    * @return none or error page
    * @exception none
    * @see 
    *  added logic to allow public schedule as calendar
    */ 
   public String restrict(){

    if (!identity.isLoggedIn()) {
     return "error.xhtml?faces-redirect=true";
    }
    String r2=customIdentity.getRestrict2();//forces to refresh hibernate query cache, usefl for debug
    String a1=customIdentity.getAllow1();
    String viewId = facesContext.getViewRoot().getViewId();
    // jay add logic to make sure these are not null and saved as lower case in useredit
    if (!customIdentity.getRestrict2().isEmpty() && customIdentity.getRestrict2().equals("all")){
     if ((!customIdentity.getAllow1().isEmpty() && viewId.contains(customIdentity.getAllow1())) 
          || (!customIdentity.getAllow2().isEmpty() && viewId.contains(customIdentity.getAllow2())) || 
          (!customIdentity.getAllow3().isEmpty() && viewId.contains(customIdentity.getAllow3())) ){
          return null;
         }else{
          return "error.xhtml?faces-redirect=true";
         }
    }
    if ((!customIdentity.getRestrict2().isEmpty() && viewId.contains(customIdentity.getRestrict2()))
          || (!customIdentity.getRestrict3().isEmpty() && viewId.contains(customIdentity.getRestrict3())) ){
          return "error.xhtml?faces-redirect=true";
    }
    // admin
    if ((viewId.contains("userList") || viewId.contains("userEdit")) && customIdentity.hasRole("IH")){
     return null;
    } 
    if (viewId.contains("SqlAdmin")){
     if (customIdentity.hasRole("UH")){
      if ( (viewId.contains("SqlAdmin.") && customIdentity.isMasterSite()) || viewId.contains("SqlAdmin-") ){
      /* if ((viewId.contains("SqlAdmin.") && ((req.getServerName().contains("raaspi.com") && !req.getServerName().contains(".raaspi.com") && !req.getServerName().contains(".lraaspi.com"))
                  || req.getServerName().contains(masterSiteCode)
                  ||  (req.getServerName().contains("www.raaspi.com") ||  req.getServerName().contains("raaspi.lraaspi.com")))) || viewId.contains("SqlAdmin-")){
      */   
    return null;
      }else{
       return "error.xhtml?faces-redirect=true";
      }
     }else{
      return "error.xhtml?faces-redirect=true";
     }
    }
    //quikfix later change clobdataentity name to use f instead of u
    if (viewId.contains("clobdataEdit") || viewId.contains("homeThemePreview")){
     if ((req.getServerName().startsWith("myflow") || req.getServerName().contains(masterSiteCode)) && (customIdentity.hasRole("PH") 
         || customIdentity.hasRole("UH") || customIdentity.hasRole("UQ"))) {
         return null;
     }else{
      if ((customIdentity.getProduct().equals("f") && customIdentity.getSubProduct().equals("s")) && (customIdentity.hasRole("PH") 
        || customIdentity.hasRole("VH") || customIdentity.hasRole("UH") || customIdentity.hasRole("UQ"))) {
         return null;
      }else{
        if ( customIdentity.hasRole("UH") || customIdentity.hasRole("UQ") ) {
         return null;
        }
      }
     }
     return "error.xhtml?faces-redirect=true";
    }
    // check for xxxedit. to avoid checking for editEasy
    // allow PH to delete/edit but own records, existing logic checks for own records unless UH
    if (viewId.contains("blobdataEdit.") ){
      if ((customIdentity.getProduct().equals("f") && customIdentity.getSubProduct().equals("s")) && (customIdentity.hasRole("PH") 
         || customIdentity.hasRole("VH") || customIdentity.hasRole("UH") || customIdentity.hasRole("UQ"))) {
         return null;
      }else{
        if ( customIdentity.hasRole("UH") || customIdentity.hasRole("UQ") || customIdentity.hasRole("PH")) {
         return null;
        }
      }
     return "error.xhtml?faces-redirect=true";
    }


    if (viewId.contains("blobdataEditEasy") ){
     //test for raaspi site, EditEasy does not allow edit/delete only in above edit 
     // check if master site, a subdomain serverName can also include master site name 
     if( customIdentity.isMasterSite() 
           && (customIdentity.hasRole("PH") || customIdentity.hasRole("UH") || customIdentity.hasRole("UQ")) ) {
         return null;
     }
     return "error.xhtml?faces-redirect=true";
    }
    // this overides menue Role/level only if url is directly typed in, since menue will not show if role/level wrong

    if ((!customIdentity.getAllow1().isEmpty() && viewId.contains(customIdentity.getAllow1())) 
          || (!customIdentity.getAllow2().isEmpty() && viewId.contains(customIdentity.getAllow2())) || 
          (!customIdentity.getAllow3().isEmpty() && viewId.contains(customIdentity.getAllow3())) ){
          return null;
    }
    // this overides menue Role/level only if url is directly typed in, since menue will not show if role/level wrong

    if ((!customIdentity.getAllow1().isEmpty() && viewId.contains(customIdentity.getAllow1())) 
          || (!customIdentity.getAllow2().isEmpty() && viewId.contains(customIdentity.getAllow2())) || 
          (!customIdentity.getAllow3().isEmpty() && viewId.contains(customIdentity.getAllow3())) ){
          return null;
    }

    //this checks menue rules to render or not
  // plug the hole for entities not shown via menue, ex all xxxxx entities like details, editlog 
  // add logic to mimic menu exceptions logic to allow accounting reports
  if (viewId.contains("Reportjrnl") || viewId.contains("Reporttrial") || viewId.contains("Reportbala")
    || viewId.contains("Reportinco") || viewId.contains("scandate") && (customIdentity.hasRole("UH") || customIdentity.hasRole("EH")) ){
   return null;
  }
  if (viewId.contains("editlog")  && customIdentity.hasRole("UH") ){
   return null;
  }
  if (viewId.contains("journal")  && customIdentity.hasRole("EH") ){
   return null;
  }
  return "error.xhtml?faces-redirect=true";
   }


}




