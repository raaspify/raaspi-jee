<!DOCTYPE composition PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" 
                      "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<ui:composition xmlns="http://www.w3.org/1999/xhtml"
                xmlns:ui="http://java.sun.com/jsf/facelets"
                xmlns:f="http://java.sun.com/jsf/core"
                xmlns:h="http://java.sun.com/jsf/html"
                xmlns:fn="http://java.sun.com/jsp/jstl/functions"
                xmlns:c="http://java.sun.com/jsp/jstl/core"
                xmlns:pt="http://xmlns.jcp.org/jsf/passthrough"
                xmlns:o="http://omnifaces.org/ui"
                xmlns:p="http://primefaces.org/ui"
                xmlns:pe="http://primefaces.org/ui/extensions"
                template="layout/rtemplateSiteEditEasy.xhtml">
<!-- Copied from
Home page


-->
<f:metadata>
    <f:viewParam name="yxxxuq1n1xwwqqqxxxxxblobdataA0xxuobxbxxxxxxxxxxxsid" value="#{yxxxuq1n1xwwqqqxxxxxblobdataHome.yxxxuq1n1xwwqqqxxxxxblobdataA0xxuobxbxxxxxxxxxxxsid}"/>
    <f:viewParam name="yxxxuq1n1xwwqqqxxxxxblobdataFrom" value="#{yxxxuq1n1xwwqqqxxxxxblobdataHome.yxxxuq1n1xwwqqqxxxxxblobdataFrom}"/>
    <f:viewAction action="#{yxxxuq1m1xwwqqqxxxxxclobdataHome.wire()}" />
    <f:viewAction action="#{fpxxfq1a5xwwqqhxxxxxitemHome.restrict()}" />
    <f:viewAction action="#{customIdentity.setHoldValue('')}" />
    <f:viewAction action="#{customIdentity.setHoldValue2('')}" />
    <f:viewAction action="#{customIdentity.setHoldValue3('')}" />
    <f:viewAction action="#{customIdentity.setKeyValue('')}" />
    <f:viewAction action="#{customIdentity.setKeyValue2('')}" />
    <f:viewAction action="#{customIdentity.setKeyValue3('')}" />
    <f:event type="preRenderView" listener="#{authenticator.setClientChosenSkin('/siteEditEasy.xhtml')}" />

</f:metadata>

<META HTTP-EQUIV="CACHE-CONTROL" CONTENT="NO-CACHE"/>
<META HTTP-EQUIV="EXPIRES" CONTENT="Mon, 22 Jul 2002 11:12:01 GMT"/>
<ui:define name="title">Home page for #{customIdentity.owner2} menue for shopping cart, products and login for back office </ui:define>

<ui:define name="body">
    <h:form id="homeForm" enctype="multipart/form-data">
<h:outputStylesheet>

</h:outputStylesheet>

<script>
  // This is called with the results from from FB.getLoginStatus().
  function statusChangeCallback(response) {
    console.log('statusChangeCallback');
    console.log(response);
    // The response object is returned with a status field that lets the
    // app know the current login status of the person.
    // Full docs on the response object can be found in the documentation
    // for FB.getLoginStatus().
    if (response.status === 'connected') {
      // Logged into your app and Facebook.
      testAPI();
    } else if (response.status === 'not_authorized') {
      // The person is logged into Facebook, but not your app.
      document.getElementById('status').innerHTML = 'Please log ' +
        'into this app.';
    } else {
      // The person is not logged into Facebook, so we're not sure if
      // they are logged into this app or not.
      document.getElementById('status').innerHTML = 'Please log ' +
        'into Facebook.';
    }
  }

  // This function is called when someone finishes with the Login
  // Button.  See the onlogin handler attached to it in the sample
  // code below.
  function checkLoginState() {
    FB.getLoginStatus(function(response) {
      statusChangeCallback(response);
    });
  }

  window.fbAsyncInit = function() {
  var aid;
   //alert(window.location.href);
  if (window.location.href.indexOf(".l3r") > -1) {
   aid = "1493497040950348";
  } else {
   aid = "462928240562239";
  }
   //alert(aid);
  FB.init({
    appId      : aid,
    cookie     : true,  // enable cookies to allow the server to access 
                        // the session
    xfbml      : true,  // parse social plugins on this page
    version    : 'v2.4' // use version 2.2
  });

  // Now that we've initialized the JavaScript SDK, we call 
  // FB.getLoginStatus().  This function gets the state of the
  // person visiting this page and can return one of three states to
  // the callback you provide.  They can be:
  //
  // 1. Logged into your app ('connected')
  // 2. Logged into Facebook, but not your app ('not_authorized')
  // 3. Not logged into Facebook and can't tell if they are logged into
  //    your app or not.
  //
  // These three cases are handled in the callback function.

  FB.getLoginStatus(function(response) {
    statusChangeCallback(response);
  });

  };

  // Load the SDK asynchronously
  (function(d, s, id) {
    var js, fjs = d.getElementsByTagName(s)[0];
    if (d.getElementById(id)) return;
    js = d.createElement(s); js.id = id;
    js.src = "//connect.facebook.net/en_US/sdk.js";
    fjs.parentNode.insertBefore(js, fjs);
  }(document, 'script', 'facebook-jssdk'));

  // Here we run a very simple test of the Graph API after login is
  // successful.  See statusChangeCallback() for when this call is made.
  function testAPI() {
    console.log('Welcome!  Fetching your information.... ');
    FB.api('/me', function(response) {
      console.log('Successful login for: ' + response.name);
      onFbLogin(response.id, response.email, response.name, response.first_name, response.last_name, response.gender);
      document.getElementById('status').innerHTML = 'Welcome Facebook User '+response.name ;
      //final response to user will come from server
    });
  }
  function Logout() {
  FB.logout(function () { document.location.reload(); });
   document.getElementById('status').innerHTML = 'Logged out of Facebook' ;
  }
</script>




            <h:outputText value="#{messages['Home']} #{messages['page']} " />

            <h:panelGroup id="gmessagesmidS">
                    <h:messages style="color:red" globalOnly="true"/>
            </h:panelGroup>

              <h:panelGroup id="midOn"><a name="home_mid">drag image or click on image tool and copy/paste url</a>
               <h:panelGrid columns="2">
                <pe:ckEditor id="homemid" secure="false" height="400" width="900"  value="#{yxxxuq1m1xwwqqqxxxxxclobdataHome.homeMidTxt}"
                 customConfig="#{request.contextPath}/js/config.js"
                 toolbar="[['NewPage','Preview','Source','Cut','Copy','Image','Table','HorizontalRule','Iframe','Link','Unlink','Anchor','Paste','PasteText','PasteFromWord','-', 'Scayt'], '/',['Font','FontSize','Bold','Italic','Strike','-','RemoveFormat' ] ,[ 'TextColor','BGColor' ], ['Undo', 'Redo']]">
                </pe:ckEditor>

                  </h:panelGrid>
            <h:outputText value="#{messages['home']} #{messages['page']} " />

                        			  
            <p:commandButton id="loadtmdc" styleClass="buttonMain" 
                          value="#{messages['Load']} #{messages['Published']} #{messages['Content']}" status="buttonStatus" update="midOn,homemid"
                         action="#{yxxxuq1m1xwwqqqxxxxxclobdataHome.takePublishContentAction('MID-TOP','','')}"
                       rendered="#{!customIdentity.hasRole('PH')}"/>
           &nbsp;
            <p:commandButton id="updatem" styleClass="buttonMain" 
                          value="#{messages['Publish']}" status="buttonStatus" update="midOn,homemid"
                         action="#{yxxxuq1m1xwwqqqxxxxxclobdataHome.persistMidC()}"
                       rendered="#{!customIdentity.hasRole('PH')}">
                 <p:tooltip id="previwTipm" attached="true" for="updatem" >
                 <h:outputText value="#{messages.editor} #{messages.preview} #{messages.done}?" />
                 </p:tooltip>
            </p:commandButton>



            &nbsp;<h:button value="#{messages['done']} "  outcome="/home.xhtml" />

             <br></br>
             <h:outputText value="#{messages['Video']} #{messages['URL']}"   style="text-align:center;"  maxlength="30" disabled="true" />
             <h:inputText id="urlV" required="false" value="#{customIdentity.holdValue}" 
               pt:autofocus="true" onclick="this.value='';" onfocus="this.select()" pt:placeholder="#{messages['if']} #{messages['youtube']} #{messages['use']} #{messages['embed']}"
             >
             </h:inputText>

            <p:commandButton id="loadCSU" styleClass="button" 
                          value="#{messages['Load']} #{messages['URL']}/#{messages['Iframe']}" status="buttonStatus" update="midOn,homemid"
                         action="#{yxxxuq1m1xwwqqqxxxxxclobdataHome.loadCreateSaveImage('MID-TOP','',customIdentity.holdValue)}"
                       rendered="#{!customIdentity.hasRole('PH')}">
             <p:tooltip > <span style="white-space: nowrap"> <h:outputText   value="#{messages['Put']} #{messages['youtube']} #{messages['embed']} #{messages['or']} #{messages['vimeo']} #{messages['video']} #{messages['url']} #{messages['first']}"/></span> </p:tooltip> 
            </p:commandButton>
        &nbsp;
        
         <h:panelGroup id="uploadgridRMT" >
          <h:panelGrid columns="1" columnClasses="top,top"  rendered = "#{yxxxuq1n1xwwqqqxxxxxblobdataHome.buttonPressed}" >
                 <o:inputFile id="w8xxuzdrbvxxxxxxxxxxdocmnto" value="#{file.lfiles}" multiple="true" maxsize="#{5 * 1024 * 1024}"
                   accept="image/png,image/jp*,video/*,text/csv,.csv,text/comma-separated-values"/>
                 <p:commandButton value="Upload" action="#{file.fileUpload('clobblob')}" update="@form"/>
         <br />&nbsp;
         <p:commandButton action="#{fpxxfq1a5xwwqqhxxxxxitemHome.clearUploadData}"
           value="#{messages['Clear']} #{messages['Uploaded']} #{messages['Data']}"
         rendered="#{not empty file.data}"  />
         <o:graphicImage value="#{file.data}" dataURI="true" width="100" 
          rendered="#{not empty file.data}" />

          </h:panelGrid>
         </h:panelGroup>
           &nbsp;
            <p:commandButton id="loadCS" styleClass="button" 
                          value="#{messages['Load']} #{messages['image']}" status="buttonStatus" update="midOn,homemid"
                         action="#{yxxxuq1m1xwwqqqxxxxxclobdataHome.loadCreateSaveImage('MID-TOP','',file.files[0].name)}"
                       rendered="#{!customIdentity.hasRole('PH')}">
            </p:commandButton>

            <hr></hr>
            <h:outputText value="#{messages['Current']} #{messages['site']} #{messages['use']}: #{yxxxuh566xwwqqwxxxxxuserHome.getProductLabel(yxxxch522xhhxxhxxxxxclientList.getSuggestList('01')[0].g2xxuxpclvxxxxxxxxxxprodcode)}" />
            &nbsp;<h:outputText value="#{messages['Change']} #{messages['to']}" />
            <h:selectOneMenu required="false" id="NewUse"
                     value="#{yxxxuh566xwwqqwxxxxxuserHome.clientApplicationFunction}" >
                    <f:selectItem itemValue="#{null}" itemLabel="-- select one --" />
                    <f:selectItems value="#{yxxxuh566xwwqqwxxxxxuserHome.availableItems.get(yxxxuh566xwwqqwxxxxxuserHome.getProductGroupIndex(yxxxch522xhhxxhxxxxxclientList.getSuggestList('01')[0].g2xxuxpclvxxxxxxxxxxprodcode)).selectItems}" /> 
            </h:selectOneMenu>
            <h:commandButton id="switch" styleClass="button" 
                          value="#{messages['Save']} #{messages['selection']}" 
                         action="#{yxxxuh566xwwqqwxxxxxuserHome.saveProductNSubProduct(yxxxuh566xwwqqwxxxxxuserHome.clientApplicationFunction)}"
                       rendered="#{!customIdentity.hasRole('PH')}">
            </h:commandButton>
            <hr></hr>

            <h:link id="Cartc" outcome="/ThemesBrowse.xhtml" value="#{messages['View']} #{messages['Gallery']}"   >
              &nbsp;<h:graphicImage value="/img/Photos16.png" styleClass="pic"/>
              <f:param name="themeFrom" value="editEasy"/>

            </h:link>

            <p:commandButton id="updateSysl" styleClass="buttonMain" 
                          value="#{messages['Load']} #{messages['Theme']}" status="buttonStatus" update="midOn,homemid,gmessagesbm" execute="@form"
                         action="#{yxxxuq1m1xwwqqqxxxxxclobdataHome.takeContentAction('MID-TOP','v',skinBean.previewTh)}"
                       disabled="#{!yxxxuq1m1xwwqqqxxxxxclobdataHome.wired}"
                       rendered="true">  
            </p:commandButton> 
            <h5 style="color:red;">#{empty skinBean.previewTh?'None Selected':skinBean.previewTh}</h5>


            <h:panelGroup id="gmessagesbm">
                    <h:messages style="color:red" globalOnly="true"/>
            </h:panelGroup>
              </h:panelGroup>



    <h:messages globalOnly="true" styleClass="message"/>
    <ui:remove>
     Allow upto 3 graphics top seq 0,1 and FTR seq 0(rendered by if text present why? got removed to be added asis)
      100% float left or asis centre (future)
      100%  float centre or asis
      100% float left or asis
    </ui:remove>

</h:form>
</ui:define> 
</ui:composition>

