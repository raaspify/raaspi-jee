package com.rcomputer.genapp.action;
import com.rcomputer.genapp.model.*;
import javax.enterprise.context.SessionScoped;
import javax.inject.Inject;
import javax.inject.Named;
import javax.transaction.UserTransaction;
import javax.faces.application.FacesMessage;
import java.util.logging.Logger;
//import org.jboss.seam.security.Identity;
import javax.persistence.*;
import javax.xml.bind.DatatypeConverter;
import javax.faces.context.ExternalContext;
import javax.faces.context.FacesContext;
import javax.servlet.Servlet;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.util.Date;
import java.util.Calendar;
import java.text.SimpleDateFormat;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.Serializable;
import java.io.IOException;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;
import javax.transaction.Transactional;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.ResourceBundle;
import java.util.Iterator;

import javax.annotation.Resource;
import javax.naming.NamingException;
import java.sql.SQLException;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import javax.sql.DataSource;
import javax.naming.Context;
import javax.naming.InitialContext;

import java.math.BigInteger;

//import static org.jboss.seam.international.StatusMessage.Severity.ERROR;
//import javax.faces.application.FacesMessage.Severity;

import javax.validation.constraints.Size;
import javax.validation.constraints.NotNull;
//import org.jboss.seam.ScopeType;
//import org.jboss.seam.annotations.Name;
//import org.jboss.seam.annotations.Scope;
//import org.jboss.seam.annotations.intercept.BypassInterceptors;
//import org.jboss.seam.international.StatusMessages;
//import org.jboss.seam.security.management.PasswordHash;
import javax.annotation.PostConstruct;

/**
 * Component used to administer databased data
 * sqlAdminSupport.backupTenant,fullBackupTenant,backupTenantToLocal,truncateBackupTenants,fullBackupAll,restoreTenant, etc
 *  another class sqlSupport is used for sqlSupport.backupTenants,sqlSupport.backupTenantC,sqlSupport.restoreTenantC
 *
 * @author j mitra
 * @see sqlSupport
 */
@Named("sqlAdminSupport")
@SessionScoped
@Transactional
public class SqlAdminSupport implements Serializable {
  @Resource UserTransaction utx;
   private Logger log = Logger.getLogger(SqlAdminSupport.class.getCanonicalName());
      @PersistenceContext(unitName = "genappcdi")
      EntityManager entityManager;
     @Inject
     Yxxxch522xhhxxhxxxxxclientHome yxxxch522xhhxxhxxxxxclientHome;
     Yxxxch522xhhxxhxxxxxclient yxxxch522xhhxxhxxxxxclientli;
     @Inject
     Yxxxch522xhhxxhxxxxxclientList yxxxch522xhhxxhxxxxxclientList;
     @Inject
     Yxxxuq591xwwqqhxxxxxrate1fList yxxxuq591xwwqqhxxxxxrate1fList;
     @Inject
     Yxxxuh566xwwqqwxxxxxuserHome yxxxuh566xwwqqwxxxxxuserHome;
     @Inject CustomIdentity customIdentity;
       private String owner2Code="";
       private Calendar calendar = Calendar.getInstance();
       private SimpleDateFormat sdf = new SimpleDateFormat("yy-MM-ddHmm");
       String urlName;

       private int urlIndex=0;
       ResourceBundle bundle =null;
       String schemaName;
       ServletContext context=null;
       private Boolean tomeeYN = false;//to allow myfaces vs mojarra jsf or jndi naming
       private DataSource ds;
       ExternalContext externalContext =null;


    @PostConstruct
    public void initialize() {
     try{
      FacesContext facesContext = FacesContext.getCurrentInstance();
      if (facesContext !=null){
       bundle = facesContext.getApplication().getResourceBundle(facesContext, "messages");
       externalContext = facesContext.getExternalContext();
       context = (ServletContext)FacesContext.getCurrentInstance().getExternalContext().getContext();
       HttpServletRequest req = (HttpServletRequest) externalContext.getRequest();
       HttpSession session = req.getSession();
       urlName=((javax.servlet.http.HttpServletRequest) externalContext.getRequest()).getServerName();

          urlIndex=urlName.lastIndexOf(".");
          if (urlIndex == -1){
            urlIndex=urlName.length();
          }
          if (urlName.contains("www.")){
           owner2Code=urlName.substring(4,urlIndex);
          }else{
           owner2Code=urlName.substring(0,urlIndex);
          }
          //extract subdomain if used. if subdomain, masterSiteCode will have a value
         if(!customIdentity.getMasterSiteCode().isEmpty()){
          owner2Code=owner2Code.replace("."+customIdentity.getMasterSiteCode(),"");
         }
      }
     } catch (Exception e) {
        log.severe("Error at SqlAdminSupport initialize() "+ "externalContext: "+externalContext+" url: "+urlName+" error: "+e.getMessage());
     }
    }
	public byte[] getBlobdata(String table,String keyWPrefix,String keyQualifier,int keySequence,String owner2Code) {
         this.owner2Code=owner2Code;
         return this.getBlobdata(table,keyWPrefix,keyQualifier,keySequence);
        }
    /**
    * The following method gets blobdata from both user and SYSTEM for a specific key
    * @param args String table,keyWPrefix,String keyQualifier,int keySequence
    * @return byte[] image stream
    * @exception No Record Exists
    * @see
    *
    */

	public byte[] getBlobdata(String table,String keyWPrefix,String keyQualifier,int keySequence) {
           String actualTable=table;
           String slobkeyhash;
           if(keyWPrefix.length() > 0){
	     slobkeyhash = keyWPrefix.substring(1);
           }else{
            return null;
           }
		String qualifier = keyQualifier;
		int sequence = keySequence;

		try {
               Yxxxuq1n1xwwqqqxxxxxblobdata blobdata=null;
		    List<Yxxxuq1n1xwwqqqxxxxxblobdata> results = entityManager
					.createQuery(
							"select cc from Yxxxuq1n1xwwqqqxxxxxblobdata cc where cc.a0xxukbdlvxxxxxxxxxxfromtable=:blobdatafromtable and cc.a1xxuxxxbv49xxxxxxxxfromkey=:blobdatafromkey and cc.a2xxuxxxbv50xxxxxxxxqualifier=:blobdataqualifier and cc.a3xxexnsbvxxxxxxxxxxsequence = :blobdatasequence and cc.zzxxu2oxxhxxxxxxxxxxowner2 = :owner2  ")
					           .setParameter("blobdatafromtable", actualTable).setParameter(
							"blobdatafromkey", slobkeyhash).setParameter(
							"blobdataqualifier", qualifier).setParameter(
							"blobdatasequence", sequence).setParameter("owner2", owner2Code).getResultList();
                if(!results.isEmpty()){
                 if ( !results.get(0).getZzxxu2oxxhxxxxxxxxxxowner2().equals("SYSTEM")) {
                  return results.get(0).getB1xxuzbxbvxxxxxxxxxxdata();
                 }else{
                  if (results.size() > 1){
                   return results.get(1).getB1xxuzbxbvxxxxxxxxxxdata();
                  }else{
                   return results.get(0).getB1xxuzbxbvxxxxxxxxxxdata();
                  }
                 }
                }else{
                 // use bkgr color richSkin.headerGradientColor if no image supplied , which is default
                  return null;
                }
        } catch (NoResultException e) {
               return null;
        }
	}

	public String getClobdata(String table,String keyWPrefix,String keyQualifier,int keySequence,int size,String owner2Code) {
         this.owner2Code=owner2Code;
         return this.getClobdata(table,keyWPrefix,keyQualifier,keySequence,size);
        }
	public String getClobdata(String table,String keyWPrefix,String keyQualifier,int keySequence,int size) {
           String actualTable=table;
           String slobkeyhash;

           if(keyWPrefix.length() > 0){
	     	 slobkeyhash = keyWPrefix.substring(1);
           }else{
            return null;
           }
		String qualifier = keyQualifier;
		int sequence = keySequence;


		try {
               Yxxxuq1m1xwwqqqxxxxxclobdata clobdata=null;
		    List<Yxxxuq1m1xwwqqqxxxxxclobdata> results =  entityManager
					.createQuery(
							"select cc from Yxxxuq1m1xwwqqqxxxxxclobdata cc where cc.a0xxukcdlvxxxxxxxxxxfromtable=:clobdatafromtable and cc.a1xxuxxxbv49xxxxxxxxfromkey=:clobdatafromkey and cc.a2xxuxxxbv50xxxxxxxxqualifier=:clobdataqualifier and cc.a3xxexnsbvxxxxxxxxxxsequence = :clobdatasequence and cc.zzxxu2oxxhxxxxxxxxxxowner2 = :owner2  ")
					.setParameter("clobdatafromtable", actualTable).setParameter(
							"clobdatafromkey", slobkeyhash).setParameter(
							"clobdataqualifier", qualifier).setParameter(
							"clobdatasequence", sequence).setParameter("owner2", owner2Code).getResultList();
                if(!results.isEmpty()){
                 if ( !results.get(0).getZzxxu2oxxhxxxxxxxxxxowner2().equals("SYSTEM")) {
                  clobdata= results.get(0);
                 }else{
                  if (results.size() > 1){
                   clobdata= results.get(1);
                  }else{
                   clobdata= results.get(0);
                  }
                 }
                 if(clobdata==null){
                  return null;
                 }
                }
                else{
                 return null;
                }
                if(clobdata.getB1xxuzaxbvxxxxxxxxxxdata()==null){
                 return null;
                }
                else{
                 int dl=clobdata.getB1xxuzaxbvxxxxxxxxxxdata().length();
                 if (dl > size){
			  return clobdata.getB1xxuzaxbvxxxxxxxxxxdata().substring(0,size);
                 }else {
			  return clobdata.getB1xxuzaxbvxxxxxxxxxxdata();
                 }
                }
		} catch (NoResultException nre) {
			return null;
		} catch (Exception e) {
                   FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                     FacesMessage.SEVERITY_INFO,bundle.getString("unexpcted")+ " "+bundle.getString("error")+ " "+e.getMessage(),""));
			return null;
		}
	}



      public String  createSchema() {
      String schemaName=yxxxuh566xwwqqwxxxxxuserHome.getClientName().trim();
      schemaName="genapp";//hard code for now, used in tables, persistence.xml as well as in .jrxml
      String schemaOwner=yxxxuh566xwwqqwxxxxxuserHome.getClientSerialNum();
      if(schemaOwner == null || schemaOwner.isEmpty()){
       schemaOwner="postgres";
      }
      String sqlScript ="";
      //sqlScript="CREATE SCHEMA "+schemaName+" AUTHORIZATION "+schemaOwner;
      sqlScript="CREATE SCHEMA "+schemaName;
      Query q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      //FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
        //FacesMessage.SEVERITY_INFO,"create schema "+schemaName+" done",""));
       log.severe("create schema "+schemaName+" done");

	 return "create schema done";
     }

      public String  createSchema(String dbProductName,String schemaName,String schemaOwner) {
      //default ie no db server like mysql or postgresql assume hsqldb good for demo or quick fatjar usage
      //hsqldb data base gets created as needed. Just connect to the not-yet-existing database using the jdbc:hsqldb:file:«database-path»
      //tomee.xml can have url defined
      //hsqldb mem tables with file ie file:h is used in datasource def. dbname is h but created db is PUBLIC (why???)
      //fatjar with hsqldb needs min 2gb vm, otherwise createSchema causes jvm crash and tomee exit without any obvious error msg
      if(dbProductName == null || dbProductName.isEmpty()){
       dbProductName="hsql";
      }
      if(schemaName == null || schemaName.isEmpty()){
       schemaName="genapp";
      }

      if(schemaOwner == null || schemaOwner.isEmpty()){
       schemaOwner="sa";
      }
      try{    
       String sqlScript ="";
       //sqlScript="CREATE SCHEMA "+schemaName+" AUTHORIZATION "+schemaOwner;
       sqlScript="CREATE SCHEMA "+schemaName;
       if(entityManager == null){
        FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
         FacesMessage.SEVERITY_INFO,"create schema entityManager null",""));
         log.info("create schema entityManager null");
         return null;
       }
       Query q = entityManager.createNativeQuery(sqlScript);
       q.executeUpdate();
       //do not use resource bundle message, tables may not exist
       FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
        FacesMessage.SEVERITY_INFO,"create schema "+schemaName+" done",""));
        log.info("create schema "+schemaName+ " done");
	return "create schema done";
      }catch (Exception e) {
       log.info("create schema exception for "+schemaName+" error "+e.getMessage());
       return null;
      }

     }

    public String  dropSchema() {
      //use DatabaseMetaData, as in authenticator.java, to avoid harcoding here
      schemaName="genapp";//hard code for now

      String sqlScript ="";
      sqlScript="DROP SCHEMA "+schemaName+" cascade";
      Query q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      log.info("drop schema "+schemaName+" done");

	 return "drop schema done";
     }

      public String  dropSchema(String dbProductName,String schemaName,String schemaOwner) {
      //default ie no db server like mysql or postgresql assume hsqldb good for demo or quick fatjar usage
      //hsqldb mem tables with file ie file:h is used in datasource def. dbname is h but created db is PUBLIC (why???)
      if(dbProductName == null || dbProductName.isEmpty()){
       dbProductName="hsql";
      }
      if(schemaName == null || schemaName.isEmpty()){
       schemaName="genapp";
      }

      if(schemaOwner == null || schemaOwner.isEmpty()){
       schemaOwner="sa";
      }
      String sqlScript ="";
      sqlScript="DROP SCHEMA "+schemaName+" cascade";
      Query q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      //do not use resource bundle message, tables may not exist
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
        FacesMessage.SEVERITY_INFO,"create schema "+schemaName+" done",""));
        log.info("drop schema "+schemaName+ " done");

	 return "drop schema done";
     }

     public String  createTables(String dbProductName,String schemaName) {
      //common to hsql and postgres, clob,blob,user differs as they use bytea vs image
      //mysql cannot use common because it uses auto_increment for Identity/Serial
      //String schemaName=yxxxuh566xwwqqwxxxxxuserHome.getClientName().trim();
      if(dbProductName == null || dbProductName.isEmpty()){
       dbProductName="hsql";
      }
      if(schemaName == null || schemaName.isEmpty()){
       schemaName="genapp";
      }
     // warning- sqlscript may have multiple creates under one quote mark. do not put line feeds in the middle to look nicer
     // made separate scripts because hsqldb did not support it.
     if(dbProductName.equals("msql")){
      createTablesMsql(schemaName);// uses auto-create for identify
      return null;
     }
     try{
     String sqlScript ="";
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".ADDRESS  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, ADDRESCODE  varchar(32) not null,  ADDRL1  varchar(159),  ADDRL2  varchar(159),  ADDRL3  varchar(159),  CITY  varchar(20),  PROVNSTATE  varchar(20),  COUNTRY  varchar(20),  PZCODE  varchar(20),  DESCRIPT  varchar(120),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  NOTES  varchar(60),  OWNER  varchar(40),  OWNER2  varchar(40),  PRINTMSTAT  INT,  PRINMTFLDT  TIMESTAMP, PRIMARY  KEY(SID)  ) ";
      Query q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".OPTIONS  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, ROW  varchar(2) not null,  OPTIONS01  varchar(159),  PURPOSE01  varchar(159),  VALUE01  varchar(159),  OPTIONS02  varchar(159),  PURPOSE02  varchar(159),  VALUE02  varchar(159),  OPTIONS03  varchar(159),  PURPOSE03  varchar(159),  VALUE03  varchar(159),  OPTIONS04  varchar(159),  PURPOSE04  varchar(159),  VALUE04  varchar(159),  OPTIONS05  varchar(159),  PURPOSE05  varchar(159),  VALUE05  varchar(159),  OPTIONS06  varchar(159),  PURPOSE06  varchar(159),  VALUE06  varchar(159),  OPTIONS07  varchar(159),  PURPOSE07  varchar(159),  VALUE07  varchar(159),  OPTIONS08  varchar(159),  PURPOSE08  varchar(159),  VALUE08  varchar(159),  OPTIONS09  varchar(159),  PURPOSE09  varchar(159),  VALUE09  varchar(159),  OPTIONS10  varchar(159),  PURPOSE10  varchar(159),  VALUE10  varchar(159),  OPTIONS11  varchar(159),  PURPOSE11  varchar(159),  VALUE11  varchar(159),  OPTIONS12  varchar(159),  PURPOSE12  varchar(159),  VALUE12  varchar(159),  OPTIONS13  varchar(159),  PURPOSE13  varchar(159),  VALUE13  varchar(159),  OPTIONS14  varchar(159),  PURPOSE14  varchar(159),  VALUE14  varchar(159),  OPTIONS15  varchar(159),  PURPOSE15  varchar(159),  VALUE15  varchar(159),  OPTIONS16  varchar(159),  PURPOSE16  varchar(159),  VALUE16  varchar(159),  OPTIONS17  varchar(159),  PURPOSE17  varchar(159),  VALUE17  varchar(159),  OPTIONS18  varchar(159),  PURPOSE18  varchar(159),  VALUE18  varchar(159),  OPTIONS19  varchar(159),  PURPOSE19  varchar(159),  VALUE19  varchar(159),  OPTIONS20  varchar(159),  PURPOSE20  varchar(159),  VALUE20  varchar(159),  OPTIONS21  varchar(159),  PURPOSE21  varchar(159),  VALUE21  varchar(159),  OPTIONS22  varchar(159),  PURPOSE22  varchar(159),  VALUE22  varchar(159),  OPTIONS23  varchar(159),  PURPOSE23  varchar(159),  VALUE23  varchar(159),  OPTIONS24  varchar(159),  PURPOSE24  varchar(159),  VALUE24  varchar(159),  OPTIONS25  varchar(159),  PURPOSE25  varchar(159),  VALUE25  varchar(159),  OPTIONS26  varchar(159),  PURPOSE26  varchar(159),  VALUE26  varchar(159),  OPTIONS27  varchar(159),  PURPOSE27  varchar(159),  VALUE27  varchar(159),  OPTIONS28  varchar(159),  PURPOSE28  varchar(159),  VALUE28  varchar(159),  OPTIONS29  varchar(159),  PURPOSE29  varchar(159),  VALUE29  varchar(159),  OPTIONS30  varchar(159),  PURPOSE30  varchar(159),  VALUE30  varchar(159),  OPTIONS31  varchar(159),  PURPOSE31  varchar(159),  VALUE31  varchar(159),  OPTIONS32  varchar(159),  PURPOSE32  varchar(159),  VALUE32  varchar(159),  OPTIONS33  varchar(159),  PURPOSE33  varchar(159),  VALUE33  varchar(159),  OPTIONS34  varchar(159),  PURPOSE34  varchar(159),  VALUE34  varchar(159),  OPTIONS35  varchar(159),  PURPOSE35  varchar(159),  VALUE35  varchar(159),  OPTIONS36  varchar(159),  PURPOSE36  varchar(159),  VALUE36  varchar(159),  OPTIONS37  varchar(159),  PURPOSE37  varchar(159),  VALUE37  varchar(159),  OPTIONS38  varchar(159),  PURPOSE38  varchar(159),  VALUE38  varchar(159),  OPTIONS39  varchar(159),  PURPOSE39  varchar(159),  VALUE39  varchar(159),  OPTIONS40  varchar(159),  PURPOSE40  varchar(159),  VALUE40  varchar(159),  OPTIONS41  varchar(159),  PURPOSE41  varchar(159),  VALUE41  varchar(159),  OPTIONS42  varchar(159),  PURPOSE42  varchar(159),  VALUE42  varchar(159),  OPTIONS43  varchar(159),  PURPOSE43  varchar(159),  VALUE43  varchar(159),  OPTIONS44  varchar(159),  PURPOSE44  varchar(159),  VALUE44  varchar(159),  OPTIONS45  varchar(159),  PURPOSE45  varchar(159),  VALUE45  varchar(159),  OPTIONS46  varchar(159),  PURPOSE46  varchar(159),  VALUE46  varchar(159),  OPTIONS47  varchar(159),  PURPOSE47  varchar(159),  VALUE47  varchar(159),  OPTIONS48  varchar(159),  PURPOSE48  varchar(159),  VALUE48  varchar(159),  OPTIONS49  varchar(159),  PURPOSE49  varchar(159),  VALUE49  varchar(159),  OPTIONS50  varchar(159),  PURPOSE50  varchar(159),  VALUE50  varchar(159),  OPTIONS51  varchar(159),  PURPOSE51  varchar(159),  VALUE51  varchar(159),  OPTIONS52  varchar(159),  PURPOSE52  varchar(159),  VALUE52  varchar(159),  OPTIONS53  varchar(159),  PURPOSE53  varchar(159),  VALUE53  varchar(159),  OPTIONS54  varchar(159),  PURPOSE54  varchar(159),  VALUE54  varchar(159),  OPTIONS55  varchar(159),  PURPOSE55  varchar(159),  VALUE55  varchar(159),  OPTIONS56  varchar(159),  PURPOSE56  varchar(159),  VALUE56  varchar(159),  OPTIONS57  varchar(159),  PURPOSE57  varchar(159),  VALUE57  varchar(159),  OPTIONS58  varchar(159),  PURPOSE58  varchar(159),  VALUE58  varchar(159),  OPTIONS59  varchar(159),  PURPOSE59  varchar(159),  VALUE59  varchar(159),  OPTIONS60  varchar(159),  PURPOSE60  varchar(159),  VALUE60  varchar(159),  OPTIONS61  varchar(159),  PURPOSE61  varchar(159),  VALUE61  varchar(159),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  NOTES  varchar(60),  OWNER  varchar(40), OWNER2  varchar(40), PRIMARY  KEY(SID), UNIQUE (ROW,OWNER2)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".CLIENT  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, CLIENTVERSION  varchar(5) not null,  SERIALNUM  varchar(15),  ENTERPRISECOMPANYNA  varchar(35),  DESCRIPT  varchar(120),  ADDRL1  varchar(35),  ADDRL2  varchar(35),  ADDRL3  varchar(35),  CITY  varchar(20),  PROVNSTATE  varchar(20),  COUNTRYNAME  varchar(20),  PZCODE  varchar(20),  PHONEO  varchar(30),  PHONEH  varchar(25),  PHONEC  varchar(25),  PHONEX  varchar(30),  LANADDR  varchar(35),  WANADDR  varchar(35),  LMAILADDR  varchar(35),  IMAILADDR  varchar(60),  RMAILADDR  varchar(35),  INTADDR  varchar(60),  INRADDR  varchar(35),  ENTERPRISECOMPCODE  varchar(40),  ENTERPRISECOMPSIZE  varchar(15),  BARCSIZE  varchar(12),  LEVEL  boolean,  POSKIPP  varchar(10),  LOOSEIT  boolean,  JOBSKIP  varchar(10),  CARTONFL  boolean,  PICKLIST  boolean,  PRODDESC  varchar(15),  PRODCODE  varchar(12),  NJOB  varchar(15),  NMATERIA  varchar(15),  NACTIVITY  varchar(15),  NBUTT  varchar(15),  NCUSTOME  varchar(15),  NCONTACT  varchar(15),  NVENDOR  varchar(15),  NEMPLOYEE  varchar(15),  NSCHEDULE  varchar(15),  NREJECT  varchar(15),  NRETURN  varchar(15),  NCODE  varchar(15),  MANUFID  varchar(20),  BARTYPE  varchar(4),  CADTYPE  varchar(4),  CARTYPE  varchar(4),  SHITYPE  varchar(4),  REPTYPE  varchar(4),  LOCTYPE  varchar(4),  BARCOL  boolean,  CARCOL  boolean,  CADCOL  boolean,  SHICOL  boolean,  REPCOL  boolean,  LOCCOL  boolean,  ALTSERIA  boolean,  COUNTRYCODE  varchar(3),  NALTSERI  varchar(12),  SCRCOLOR  varchar(255),  HILCOLOR  varchar(255),  TEXTCOLOR  varchar(255),  BACCOLOR  varchar(255),  DATETYPE  varchar(7), CURRCODE  varchar(3),  PRINBAR  boolean,  BARPRINT  varchar(4),  CARPRINT  varchar(4),  CADPRINT  varchar(4),  LOCPRINT  varchar(4),  SHIPRINT  varchar(4),  REPPRINT  varchar(4),  BARPRTY  varchar(4),  REPPRTY  varchar(4),  CARPRTY  varchar(4),  CADPRTY  varchar(4),  SHIPRTY  varchar(4),  LOCPRTY  varchar(4),  ALTSELEN  INT,  CUSTOLEN  INT,  CARCSIZE  varchar(12),  CADCSIZE  varchar(12),  SHICSIZE  varchar(12),  REPCSIZE  varchar(12),  LOCCSIZE  varchar(12),  CS  varchar(15),  NCONFTYP  varchar(12),  NLOCATIO  varchar(12),  NDIVCODE  varchar(12),  NDEPCODE  varchar(12),  NADDCODE  varchar(12),  NFLOOR  varchar(12),  NROOM  varchar(12),  NRACK  varchar(12),  MENUTYPE  varchar(3),  PADTYPE  varchar(4),  NRATE1TA  varchar(12),  NRATE2TA  varchar(12),  DEFCONFT varchar(8)  ,  BEEPSOU  boolean,  CONFIRM  boolean,  LINEFEED  boolean,  REFBARADJ  INT,  SHIBARADJ  INT,  CUSBARADJ  INT,  LOCBARADJ  INT,  CARBARADJ  INT,  NCORDER  varchar(12),  NSPERSON  varchar(12),  PROMPTI  boolean,  CUSTOMERQUOTENB  varchar(15),  CUSTOMERQUOTEN  INT,  CUSTOMERQUOTENA  varchar(15),  CUSTOMERORDERNB  varchar(15),  CUSTOMERORDERN  INT,  CUSTOMERORDERNA  varchar(15),  VENDORORDERNB  varchar(15),  VENDORORDERN  INT,  VENDORORDERNA  varchar(15),JOBNB  varchar(15),  JOBN  INT,  JOBNA  varchar(15),  CUSTOMERINVOICENB  varchar(15),  CUSTOMERINVOICEN  INT,  CUSTOMERINVOICENA  varchar(15),  VENDORINVOICENB  varchar(15),  VENDORINVOICEN  INT,  VENDORINVOICENA  varchar(15),  CUSTOMERPICKNB  varchar(15),  CUSTOMERPICKN  INT,  CUSTOMERPICKNA  varchar(15),  VENDORQUOTENB  varchar(15),  VENDORQUOTEN  INT,  VENDORQUOTENA  varchar(15),  CUSTOMERPAYMNTNB  varchar(15),  CUSTOMERPAYMNTN  INT,  CUSTOMERPAYMNTNA  varchar(15),  VENDORPAYMNTNB  varchar(15),  VENDORPAYMNTN  INT,  VENDORPAYMNTNA  varchar(15),  VENDORCHQNB  varchar(15),  VENDORCHQN  INT,  VENDORCHQNA  varchar(15),  TASKNB  varchar(15),  TASKN  INT,  TASKNA  varchar(15),  ARSEQB  varchar(15),  ARSEQ  INT,  ARSEQA  varchar(15),  APSEQB  varchar(15),  APSEQ  INT,  APSEQA  varchar(15),  GLSEQB  varchar(15),  GLSEQ  INT,  GLSEQA  varchar(15),  PASEQB  varchar(15),  PASEQ  INT,  PASEQA  varchar(15),  ICSEQB  varchar(15),  ICSEQ  INT,  ICSEQA  varchar(15),  JOSEQB  varchar(15),  JOSEQ  INT,  JOSEQA  varchar(15),  SGLENTRY  varchar(15),  TAX1CODE  varchar(25),  TAX2CODE  varchar(25),  TAX3CODE  varchar(25),  NDECIMAL  INT,  EDIPASSW  varchar(10),  INTPASSW  varchar(15),  INRPASSW  varchar(10),  IMLPASSW  varchar(10),  RMLPASSW  varchar(10),  LMLPASSW  varchar(10),  HOSPASSW  varchar(10),  LANPASSW  varchar(10),  WANPASSW  varchar(10),  ASHOSTID  varchar(35),  HDSTYLE  varchar(30),  MTSTYLE  varchar(30),  STSTYLE  varchar(30),  DTSTYLE  varchar(30),  FTSTYLE  varchar(30),  DEFAULTR  varchar(15),  DEFAULTC  varchar(3),  DBNAME  varchar(35),  ROOTDIR  varchar(60),  KEYORDER  varchar(3),  CURRBUSDAT  TIMESTAMP,  LASTBUSDAT  TIMESTAMP,  CURRCALDAT  TIMESTAMP,  LASTCALDAT  TIMESTAMP,  PREPROCESS  boolean,  MARGIN  INT,  FOOTER  INT,  LASTUSER  varchar(10),  LISTBUILDC  boolean,  LISTBUILDV  boolean,  LISTBUILDE  boolean,  LISTBROWNC  INT,  LISTBROWNV  INT,  LISTBROWNE  INT,  SMTPSERVER  varchar(30),  SMTPUSER  varchar(35),  SMTPPASS  varchar(20),  POP3SERVER  varchar(30),  POP3USER  varchar(35),  POP3PASS  varchar(20),  SMATCODE  varchar(15),  FYREND  TIMESTAMP,  FPERIODS  INT,  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  NOTES  varchar(60),  OWNER  varchar(40), OWNER2  varchar(40),  EMPLOYEEORDERNB  varchar(15),  EMPLOYEEORDERN  INT,  EMPLOYEEORDERNA  varchar(15),  licensetype  varchar(15),licensestart  TIMESTAMP,licenseend  TIMESTAMP, apiclientid  varchar(255),apiclientsecret  varchar(12000),  CURRSYMB  varchar(4),  PRIMARY  KEY(SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".DEPARTMENT  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, DEPCODE  varchar(32) not null,  DESCRIPT  varchar(120),  GLPREFIX varchar(20), STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  NOTES  varchar(60),  OWNER  varchar(40), OWNER2  varchar(40), PRIMARY  KEY(SID)   )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".COMPANY  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, COMPANYCODE  varchar(32) not null,  DESCRIPT  varchar(120),  LEGALNAME  varchar(60),  MAILTOCODE INT , GLPREFIX varchar(20), STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  NOTES  varchar(60),  OWNER  varchar(40), OWNER2  varchar(40),  PRIMARY  KEY(SID),  FOREIGN  KEY  (  MAILTOCODE  )  REFERENCES "+schemaName+".ADDRESS(  SID  )  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".CONTROL  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, CONTROLCODE  varchar(32) not null,  DESCRIPT  varchar(120),  TYPEOFCONTROL  varchar(12),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  NOTES  varchar(60),  OWNER  varchar(40), OWNER2  varchar(40), PRIMARY  KEY(SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".DIVISION  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, DIVCODE  varchar(32) not null, DESCRIPT  varchar(120),  GLPREFIX varchar(20), STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  NOTES  varchar(60),  OWNER  varchar(40), OWNER2  varchar(40), PRIMARY KEY(SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".LOCATION  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, LOCATION  varchar(32) not null,  DESCRIPT  varchar(120),  COMPANYCODE  INT  , ADDRESSCODE   INT  ,  FLOOR  varchar(25),  ROOM  varchar(25),  RACK  varchar(25),  PRINTMSTAT  INT,  PRINMTFLDT  TIMESTAMP,  EXCLUDE  boolean,  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  NOTES  varchar(60),  OWNER  varchar(40),  OWNER2  varchar(40),  PRIMARY  KEY(  SID),  FOREIGN  KEY  (  COMPANYCODE  )  REFERENCES "+schemaName+".COMPANY  (  SID  ),  FOREIGN  KEY  (  ADDRESSCODE  )  REFERENCES "+schemaName+".ADDRESS(  SID  )  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".RESIDENCY  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, RESIDENCY  varchar(32) not null,  DESCRIPT  varchar(120),  MUNICIPALITY  varchar(20),  PROVINCE  varchar(20),  COUNTRYNAME  varchar(20),  EXCLUDE  boolean,  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  NOTES  varchar(60),  OWNER  varchar(40),  OWNER2  varchar(40),  PRIMARY  KEY(  SID  )  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".ACCOUNT  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, ACCOUNT  varchar(20) not null  ,  DESCRIPT  varchar(120),  CATEGORY  varchar(20),  TYPE  varchar(12),  BUDGET  numeric(14,2),  ACTUAL  numeric(14,2),  ACTUALN  numeric(14,2),  PREVBUDG  numeric(14,2),  PREVACT  numeric(14,2),  SEQUENCE  INT,  CHILD  varchar(20),  PARENT  varchar(20),  ROLLUPQ  INT,  COMPANYCODE  INT  ,  DEPCODE  INT  ,  DIVCODE  INT  ,  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  CURRENCY  varchar(3),  NOTES  varchar(255),  OWNER  varchar(40),  OWNER2  varchar(40),  P0  numeric(14,2),  P1  numeric(14,2),  P2  numeric(14,2),  P3  numeric(14,2),  P4  numeric(14,2),  P5  numeric(14,2),  P6  numeric(14,2),  P7  numeric(14,2),  P8  numeric(14,2),  P9  numeric(14,2),  P10  numeric(14,2),  P11  numeric(14,2),  P12  numeric(14,2),  P13  numeric(14,2),  P14  numeric(14,2),  P8T  numeric(14,2),  P9T  numeric(14,2),  P10T  numeric(14,2),  P11T  numeric(14,2),  PRIMARY  KEY  (  SID  ),  FOREIGN  KEY  (  COMPANYCODE  )  REFERENCES "+schemaName+".COMPANY  (  SID  ),  FOREIGN  KEY  (  DEPCODE  )  REFERENCES "+schemaName+".DEPARTMENT  (  SID  ),  FOREIGN  KEY  (  DIVCODE  )  REFERENCES "+schemaName+".DIVISION  (  SID  )  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".CUSTOMER  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, CUSTOMER  varchar(32) not null,  DESCRIPT  varchar(120),  TITLE  varchar(12),  JOBTITLE  varchar(20),  LASTNAME  varchar(25),  FIRSTNAME  varchar(25),  MIDDLENAM  varchar(20),  CUSTOMERASCOMPANYNAME  varchar(25),  CUSTTOTL  numeric(14,2),  CUSTTQTY  numeric(14,2), COMPANYCODE INT,  LOCATION  INT  ,  MAILTOCODE  INT  ,  SHIPTOCODE  INT  ,  TAX1  boolean,  TAX2  boolean,  TAX3  boolean,  CUSTTAX1  varchar(25),  CUSTTAX2  varchar(25),  CUSTTAX3  varchar(25),  PHONEO  varchar(20),  PHONEH  varchar(16),  PHONEC  varchar(16),  PHONEX  varchar(20),  LANADDR  varchar(35),  WANADDR  varchar(35),  LMAILADDR  varchar(35),  IMAILADDR  varchar(60),  RMAILADDR  varchar(35),  INTADDR  varchar(60),  INRADDR  varchar(35),  DOB TIMESTAMP, PLACEOFBIRTH varchar(60), SEX varchar(1), AGE int, CUSRTOTL  numeric(14,2),  CUSRTQTY  numeric(14,2),  CUSMTOTL  numeric(14,2),  CUSDTOTL  numeric(14,2),  LASTORDER  varchar(20),  LASTINVOIC  varchar(20),  LASTPAYMNQ  numeric(14,2),  PRINTMSTAT  INT,  PRINMTFLDT  TIMESTAMP,  SHIPLABEL  boolean,  TYPE  varchar(10),  DEFAULTGLAC  INT,  INTEGRSET  varchar(20),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  TOTLPAID  numeric(14,2),  CONTACTED  TIMESTAMP,  BYWHO  varchar(20),  NXTCONTACT  TIMESTAMP,  VIA  varchar(11),  KEYWORDS  varchar(30),  NOTES  varchar(159),  OWNER  varchar(40),  OWNER2  varchar(40),  DOCMNT  varchar(90),  PRIMARY  KEY  (  SID  ),  FOREIGN  KEY  (  MAILTOCODE)  REFERENCES "+schemaName+".ADDRESS(  SID  ),  FOREIGN  KEY  (  COMPANYCODE)  REFERENCES "+schemaName+".COMPANY(  SID  ),  FOREIGN  KEY  (  LOCATION  )  REFERENCES "+schemaName+".LOCATION  (  SID ),  FOREIGN  KEY  (  DEFAULTGLAC  )  REFERENCES "+schemaName+".ACCOUNT  (  SID ),  FOREIGN  KEY  (  SHIPTOCODE)  REFERENCES "+schemaName+".ADDRESS(  SID  )  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".VENDOR  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, VENDOR  varchar(32) not null,  DESCRIPT  varchar(60),  TITLE  varchar(20),  JOBTITLE  varchar(20),  LASTNAME  varchar(25),  FIRSTNAME  varchar(25),  MIDDLENAM  varchar(20),  VENDORASCOMPANYNAME  varchar(25),  VENDTOTL  numeric(14,2),  VENDTQTY  numeric(14,2), COMPANYCODE INT  ,  LOCATION  INT  ,  MAILTOCODE  INT  ,  PHONEO  varchar(30),  PHONEH  varchar(25),  PHONEC  varchar(25),  PHONEX  varchar(30),  LANADDR  varchar(35),  WANADDR  varchar(35),  LMAILADDR  varchar(35),  IMAILADDR  varchar(60),  RMAILADDR  varchar(35),  INTADDR  varchar(60),  INRADDR  varchar(35),  VENRTOTL  numeric(14,2),  VENRTQTY  numeric(14,2),  VENMTOTL  numeric(14,2),  VENDDTOTL  numeric(14,2),  LASTQUOTE  varchar(20),  LASTORDER  varchar(20),  LASTINVOIC  varchar(20),  LASTPAYMQ  numeric(14,2),  PRINTMSTAT  INT,  PRINMTFLDT  TIMESTAMP,  SHIPLABEL  boolean,  TYPE  varchar(10),  SHIPTOCODE  INT  ,  DEFAULTGLAC  INT,  INTEGRSET  varchar(20),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  TOTLPAID  numeric(14,2),  CONTACTED  TIMESTAMP,  BYWHO  varchar(20),  KEYWORDS  varchar(30),  NOTES  varchar(60),  OWNER  varchar(40),  OWNER2  varchar(40),  DOCMNT  varchar(90),  PRIMARY  KEY  (  SID),  FOREIGN  KEY  (  MAILTOCODE)  REFERENCES "+schemaName+".ADDRESS(  SID  ),  FOREIGN  KEY  (  COMPANYCODE)  REFERENCES "+schemaName+".COMPANY(  SID  ),  FOREIGN  KEY  (  LOCATION  )  REFERENCES "+schemaName+".LOCATION  (  SID ),  FOREIGN  KEY  (  DEFAULTGLAC  )  REFERENCES "+schemaName+".ACCOUNT  (  SID ),  FOREIGN  KEY  (  SHIPTOCODE)  REFERENCES "+schemaName+".ADDRESS(  SID  )  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".EMPLOYEE  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, EMPLOYEE  varchar(32) not null,  DESCRIPT  varchar(120),  TITLE  varchar(20),  JOBTITLE  varchar(20),  LASTNAME  varchar(25),  FIRSTNAME  varchar(25),  MIDDLENAM  varchar(20),  COMPANYCODE  INT  ,  EMPLTOTL  numeric(14,2),  EMPLTQTY  numeric(14,2),  DIVCODE  INT  ,  DEPCODE  INT  ,  LOCATION  INT  ,  RESIDENCY  INT  ,  MAILTOCODE  INT  ,  TAX1  boolean,  TAX2  boolean,  TAX3  boolean,  CUSTTAX1  varchar(25),  CUSTTAX2  varchar(25),  CUSTTAX3  varchar(25),  PHONEO  varchar(30),  PHONEH  varchar(25),  PHONEC  varchar(25),  PHONEX  varchar(30),  LANADDR  varchar(35),  WANADDR  varchar(35),  LMAILADDR  varchar(35),  IMAILADDR  varchar(60),  RMAILADDR  varchar(35),  INTADDR  varchar(60),  INRADDR  varchar(35),  EMPRTOTL  numeric(14,2),  EMPRTQTY  numeric(14,2),  EMPMTOTL  numeric(14,2),  EMPDTOTL  numeric(14,2),  LASTQUOTE  varchar(20),  LASTORDER  varchar(20),  LASTINVOIC  varchar(20),  LASTPAYMQ  numeric(14,2),  PRINTMSTAT  INT,  PRINMTFLDT  TIMESTAMP,  SHIPLABEL  boolean,  SHIPTOCODE  INT  ,  TYPE  varchar(12),  DEFAULTGLAC  INT,  INTEGRSET  varchar(20),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  CONTACTED  TIMESTAMP,  BYWHO  varchar(20),  KEYWORDS  varchar(30),  NOTES  varchar(60),  OWNER  varchar(40),  OWNER2  varchar(40),  DOCMNT  varchar(90),  PRIMARY  KEY  (  SID),  FOREIGN  KEY  (  DEPCODE  )  REFERENCES "+schemaName+".DEPARTMENT  (  SID  ),  FOREIGN  KEY  (  DIVCODE  )  REFERENCES "+schemaName+".DIVISION  (  SID  ),  FOREIGN  KEY  (  COMPANYCODE  )  REFERENCES "+schemaName+".COMPANY  (  SID  ),  FOREIGN  KEY  (  MAILTOCODE  )  REFERENCES "+schemaName+".ADDRESS(  SID  ),  FOREIGN  KEY  (  LOCATION  )  REFERENCES "+schemaName+".LOCATION  (  SID  ),  FOREIGN  KEY  (  DEFAULTGLAC  )  REFERENCES "+schemaName+".ACCOUNT  (  SID ),  FOREIGN  KEY  (  RESIDENCY)  REFERENCES "+schemaName+".RESIDENCY  (  SID  ),  FOREIGN  KEY  (  SHIPTOCODE)  REFERENCES "+schemaName+".ADDRESS(  SID  )  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".VCONTACT  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, CONTACT  varchar(20)  not null ,  VENDOR  INT,  TITLE  varchar(20),  JOBTITLE  varchar(20),  LASTNAME  varchar(25),  FIRSTNAME  varchar(25),  MIDDLENAM  varchar(20),  PHONEO  varchar(25),  PHONEH  varchar(25),  PHONEC  varchar(25),  PHONEX  varchar(20),  LANADDR  varchar(35),  WANADDR  varchar(35),  LMAILADDR  varchar(35),  IMAILADDR  varchar(60),  RMAILADDR  varchar(35),  INTADDR  varchar(60),  INRADDR  varchar(35),  LOCATION  INT,  MAILTOCODE  INT  ,  SHIPTOCODE  INT  ,  PRINTSTA  INT,  SHIPLABEL  boolean,  TYPE  varchar(12),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  KEYWORDS  varchar(30),  NOTES  varchar(60),  OWNER  varchar(40),  OWNER2  varchar(40),  DOCMNT  varchar(90),  PRIMARY  KEY  (  SID),  FOREIGN  KEY  (  MAILTOCODE)  REFERENCES "+schemaName+".ADDRESS(  SID  ),  FOREIGN  KEY  (  SHIPTOCODE)  REFERENCES "+schemaName+".ADDRESS(  SID  ),  FOREIGN  KEY  (  LOCATION)  REFERENCES "+schemaName+".LOCATION(  SID  ),  FOREIGN  KEY  (  VENDOR)  REFERENCES "+schemaName+".VENDOR  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".CCONTACT  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, CONTACT  varchar(32) not null,  CUSTOMER  INT,  TITLE  varchar(20),  JOBTITLE  varchar(20),  LASTNAME  varchar(25),  FIRSTNAME  varchar(25),  MIDDLENAM  varchar(20),  TAX1  boolean,  TAX2  boolean,  TAX3  boolean,  CUSTTAX1  varchar(25),  CUSTTAX2  varchar(25),  CUSTTAX3  varchar(25),  PHONEO  varchar(16),  PHONEH  varchar(16),  PHONEC  varchar(16),  PHONEX  varchar(20),  LANADDR  varchar(35),  WANADDR  varchar(35),  LMAILADDR  varchar(35),  IMAILADDR  varchar(60),  RMAILADDR  varchar(35),  INTADDR  varchar(60),  INRADDR  varchar(35),  LOCATION  INT,  MAILTOCODE  INT  ,  SHIPTOCODE  INT  ,  PRINTMSTAT  INT,  PRINMTFLDT  TIMESTAMP,  SHIPLABEL  boolean,  TYPE  varchar(12),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  KEYWORDS  varchar(30),  NOTES  varchar(60),  OWNER  varchar(40),  OWNER2  varchar(40),  DOCMNT  varchar(90),  PRIMARY  KEY  (  SID),  FOREIGN  KEY  (  MAILTOCODE)  REFERENCES "+schemaName+".ADDRESS(  SID  ),  FOREIGN  KEY  (  SHIPTOCODE)  REFERENCES "+schemaName+".ADDRESS(  SID  )  ,  FOREIGN  KEY  (  LOCATION)  REFERENCES "+schemaName+".LOCATION(  SID  )  ,  FOREIGN  KEY  (  CUSTOMER  )  REFERENCES "+schemaName+".CUSTOMER  (  SID  )  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".PERIODDATES  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, PERIOD  varchar(2) not null,  DESCRIPT  varchar(120),  STARTDATE  TIMESTAMP,  ENDDATE  TIMESTAMP,  STARTOFWEEK INT, STARTOFBWEEK INT, ENDOFBWEEK INT, STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  NOTES  varchar(255),  OWNER  varchar(40),  OWNER2  varchar(40),  PRIMARY  KEY  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".ACPERIOD  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, ROWID varchar(2) not null, CURRPERIOD  varchar(2),  DESCRIPT  varchar(120),  CURRBUSDATE  TIMESTAMP,  CURRCALDATE  TIMESTAMP,  CURRLOCALDATE  TIMESTAMP,  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  NOTES  varchar(255),  OWNER  varchar(40),  OWNER2  varchar(40),  PRIMARY KEY(SID) )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".WAGEEARNER  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, WAGEEARNERID  varchar(32) not null,  EMPLOYEE  INT  ,  SIN  varchar(20),  BIRTHDT  TIMESTAMP,  FEDCLAIM  numeric(14,2),  PROVCLAIM  numeric(14,2),  PAYYRFREQ  INT,  PAYPERIOD  INT,  WCB  boolean,  WCBYTD  numeric(14,2),  EMPLINSUR  boolean,  INSYTD  numeric(14,2),  VACRETAIN  boolean,  VACATONYT  numeric(14,2),  WAGEUNIT  varchar(20),  WAGERATE  numeric(14,2),  OTIMEUNIT  varchar(20),  OTIMERATE  numeric(14,2),  WAGEUNITS  numeric(14,2),  OTIMUNITS  numeric(14,2),  WAGEOUT  numeric(14,2),  OVTIMEOUT  numeric(14,2),  SALARYOUT  numeric(14,2),  COMMISSION  numeric(14,2),  BENEFITS  numeric(14,2),  VACATION  numeric(14,2),  VACPAYOUT  numeric(14,2),  ADVANCE  numeric(14,2),  PENSION  numeric(14,2),  AFTERTAX  boolean,  UNIONDUES  numeric(14,2),  MEDICAL  numeric(14,2),  FINCOMETX  numeric(14,2),  PINCOMETX  numeric(14,2),  THISPAYA  numeric(14,2),  LASTPAYA  numeric(14,2),  PAYYTD  numeric(14,2),  FPENSIYTD  numeric(14,2),  PPENSIYTD  numeric(14,2),  ITAXYTD  numeric(14,2),  PTAXYTD  numeric(14,2),  GRPAYYTD  numeric(14,2),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  NOTES  varchar(255),  OWNER  varchar(40),  OWNER2  varchar(40),  DOCMNT  varchar(90),  PRIMARY  KEY  (  SID),  FOREIGN  KEY  (  EMPLOYEE)  REFERENCES "+schemaName+".EMPLOYEE  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".ARTHATBL  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, USAGE  varchar(32) not null,  WCBPERCNT  numeric(14,2),  INSFACTOR  numeric(14,2),  VACATONRATE  numeric(14,2),  PENSIONMAX  numeric(14,2),  WCBMAX  numeric(14,2),  INSMAX  numeric(14,2),  ITAXLV0RATE  numeric(14,2),  ITAXLV1RATE  numeric(14,2),  ITAXLV2RATE  numeric(14,2),  ITAXLV3RATE  numeric(14,2),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  NOTES  varchar(255),  OWNER  varchar(40),  OWNER2  varchar(40),  PRIMARY  KEY  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".ROLLUPGROUP  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, GROUPID  varchar(32) not null,  DESCRIPT  varchar(120),  TYPE  varchar(10),  CURRPW  varchar(20),  EXPIRY  TIMESTAMP,  CURRENCY  varchar(3),  PERIOD0B  numeric(14,2),  PERIOD0  numeric(14,2),  PERIODTOTALSB  numeric(14,2),  PERIODTOTALS numeric(14,2),  PERIOD1BUDGET  numeric(14,2),  PERIOD1ACTUAL  numeric(14,2),  PERIOD2B  numeric(14,2),  PERIOD2  numeric(14,2),  PERIOD3B  numeric(14,2),  PERIOD3  numeric(14,2),  PERIOD4B  numeric(14,2),  PERIOD4  numeric(14,2),  PERIOD5B  numeric(14,2),  PERIOD5  numeric(14,2),  PERIOD6B  numeric(14,2),  PERIOD6  numeric(14,2),  PERIOD7B  numeric(14,2),  PERIOD7  numeric(14,2),  PERIOD8B  numeric(14,2),  PERIOD8  numeric(14,2),  PERIOD9B  numeric(14,2),  PERIOD9  numeric(14,2),  PERIOD10B  numeric(14,2),  PERIOD10  numeric(14,2),  PERIOD11B  numeric(14,2),  PERIOD11  numeric(14,2),  PERIOD12B  numeric(14,2),  PERIOD12  numeric(14,2),  PERIODNB  numeric(14,2),  PERIODN  numeric(14,2),  NOTES  varchar(60),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  OWNER  varchar(40),  OWNER2  varchar(40),  PRIMARY  KEY  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".MEMBERSGROUP  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, GROUPID  varchar(32) not null,  DESCRIPT  varchar(120),  QUANTITY numeric(14,2),  MODE  boolean,  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  OWNER  varchar(40),  OWNER2  varchar(40), PRIMARY  KEY(SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".ARTHAHIST  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, WAGEEARNER  varchar(32) not null,  SIN  varchar(12),  PERIOD  INT,  MONTH  INT,  CCYY  INT,  VACATION  numeric(14,2),  WAGE  numeric(14,2),  OVERTIME  numeric(14,2),  SALARY  numeric(14,2),  COMMISSION  numeric(14,2),  BENEFIT  numeric(14,2),  FINCOMETX  numeric(14,2),  PINCOMETX  numeric(14,2),  WCBOUT  numeric(14,2),  EMPLINSUR  numeric(14,2),  VACPAYOUT  numeric(14,2),  ADVANCE  numeric(14,2),  FPENSOBTX  numeric(14,2),  FPENSOATX  numeric(14,2),  UNIONDUES  numeric(14,2),  MEDICAL  numeric(14,2),  PAYAMT  numeric(14,2),  NOTES  varchar(60),  NOTES2  varchar(120),  CHQNUMBER  varchar(20),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  OWNER  varchar(40), OWNER2  varchar(40), PRIMARY  KEY(SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".GLENTRIES  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, GLENTRYNO  varchar(32) not null,  DESCRIPT  varchar(120),  REFCODE  varchar(20),  PERIOD  INT,  POSTDATE  TIMESTAMP,  CALENDARDT  TIMESTAMP,  DEPCODE  INT,  DIVCODE  INT,  ACCOUNT  INT,   TDEBITAMT  numeric(14,2),  TCREDITAMT  numeric(14,2),  NOTES  varchar(60),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  OWNER  varchar(40), OWNER2  varchar(40), PRIMARY  KEY(SID)  , FOREIGN  KEY  ( PERIOD)  REFERENCES "+schemaName+".PERIODDATES (  SID),  FOREIGN  KEY  ( ACCOUNT)  REFERENCES "+schemaName+".ACCOUNT  (  SID) )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".GENTRIESDETAILS  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, GLENTRYSIDNO  INT  not null ,  LINE  INT,  DEPCODE  INT,  DIVCODE  INT,  ACCOUNT  INT,  DEBITAMT  numeric(14,2),  CREDITAMT  numeric(14,2),  LINETOTL  numeric(14,2), NOTES  varchar(60),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  OWNER  varchar(40), OWNER2  varchar(40), PRIMARY  KEY(  SID), FOREIGN  KEY  (  GLENTRYSIDNO)  REFERENCES "+schemaName+".GLENTRIES  (  SID) ,  FOREIGN  KEY  ( ACCOUNT)  REFERENCES "+schemaName+".ACCOUNT  (  SID)   )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".HOLIDAY  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, SHOLIDAY  varchar(32) not null,  HOLIDAY  TIMESTAMP,  DESCRIPT  varchar(120),  TYPE  varchar(12),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  EMPLOYEE  INT  ,  RESIDENCY  INT  ,  OWNER  varchar(40),  OWNER2  varchar(40),  PRIMARY  KEY  (  SID),  FOREIGN  KEY  (  RESIDENCY)  REFERENCES "+schemaName+".RESIDENCY  (  SID  ),  FOREIGN  KEY  (  EMPLOYEE)  REFERENCES "+schemaName+".EMPLOYEE  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".JOURNAL  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, SPOSTDATE  VARCHAR(25) not null,  POSTDATE  TIMESTAMP,  CALENDARDT  TIMESTAMP,  JRNLTYPE  varchar(12),  JNLSEQB  varchar(15),  JNLSEQ  INT,  JNLSEQS  varchar(15),  PERIOD  INT,  ACCOUNT  varchar(20),  DEBIT  numeric(14,2),  CREDIT  numeric(14,2),  XREFERENCE  varchar(20),  DESCRIPT  varchar(120),  STATUSFL  INT,  OWNER  varchar(40),  OWNER2  varchar(40),  PRIMARY  KEY  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".CJOURNAL  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, SPOSTDATE  VARCHAR(25) not null,  POSTDATE  TIMESTAMP,  CALENDARDT  TIMESTAMP,  JRNLTYPE  varchar(12),  JNLSEQB  varchar(15),  JNLSEQ  INT,  JNLSEQS  varchar(15),  PERIOD  INT,  CONTROL  varchar(20),  DEBIT  numeric(14,2),  CREDIT  numeric(14,2),  XREFERENCE  varchar(20),  DESCRIPT  varchar(120),  STATUSFL  INT,  OWNER  varchar(40),  OWNER2  varchar(40),  PRIMARY  KEY  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".JJOURNAL  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, SPOSTDATE  VARCHAR(25) not null,  POSTDATE  TIMESTAMP,  CALENDARDT  TIMESTAMP,  JRNLTYPE  varchar(12),  JNLSEQB  varchar(15),  JNLSEQ  INT,  JNLSEQS  varchar(15),  PERIOD  INT,  JOB  varchar(20),  DEBIT  numeric(14,2),  CREDIT  numeric(14,2),  XREFERENCE  varchar(20),  DESCRIPT  varchar(120),  STATUSFL  INT,  OWNER  varchar(40),  OWNER2  varchar(40),  PRIMARY  KEY  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".ITEM  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, MATCODE  varchar(32) not null,  QUANTITY  numeric(14,2),  DESCRIPT  varchar(120),  DATEADDED  TIMESTAMP,   SOURCE1  varchar(35),  SOURCE2  varchar(35),  UPCCODE  varchar(25),  COST  numeric(14,2),  REPLCOST  numeric(14,2),  SELPRICE  numeric(14,2),  SPRICOLD  numeric(14,2),  SPRICNEW  numeric(14,2),  SPRICEFFDT  TIMESTAMP,  SHIPCODE  varchar(25),  PRINTMSTAT  INT,  PRINMTFLDT  TIMESTAMP,  MISCCODE1  varchar(25),  MISCCODE2  varchar(25),  QTYLEVEL1  numeric(14,2),  UNIT  varchar(12),  CASEQTY  numeric(14,2),  TYPE  varchar(12),  TAX1  boolean,  TAX2  boolean,  TAX3  boolean,  ALIASCODE  varchar(25),  PARENTCODE  INT  ,  AVGPRICE  numeric(14,2),  AVGCOST  numeric(14,2),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  SUBCODESN  VARCHAR(35),  SUBCODESN2 VARCHAR(35),  SUBCODESN3 VARCHAR(35),  CUORDQTY  numeric(14,2),  VENORQTY  numeric(14,2),  CUPICQTY  numeric(14,2),  VENPIQTY  numeric(14,2),  CUINVQTY  numeric(14,2),  CUSHIQTY  numeric(14,2),  VENSHQTY  numeric(14,2),  EFFDATE  TIMESTAMP,  INTEGRSET  varchar(20),  NOTES  varchar(4096000),  DOCMNT  varchar(90),  OWNER  varchar(40),  OWNER2  varchar(40),  LOCATION  INT  ,  BARUPC  varchar(30),  DATEEXPIRY  TIMESTAMP,  DATETORENEW  TIMESTAMP,  PRIMARY  KEY  (  SID), FOREIGN  KEY  (  PARENTCODE)  REFERENCES "+schemaName+".ITEM  (  SID)  , FOREIGN  KEY  (  LOCATION  )  REFERENCES "+schemaName+".LOCATION  (  SID ) )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".ACTIVITY  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, ACTIVITYCODE  varchar(32) not null,  QUANTITY  numeric(14,2),  DESCRIPT  varchar(120),  DATE  TIMESTAMP,  SOURCE1  varchar(35),  SOURCE2  varchar(35),  UPCCODE  varchar(25),  COST  numeric(14,2),  REPLCOST  numeric(14,2),  SELPRICE  numeric(14,2),  SPRICOLD  numeric(14,2),  SPRICNEW  numeric(14,2),  SPRICEFFDT  TIMESTAMP,  SHIPCODE  varchar(25),  PRINTMSTAT  INT,  PRINMTFLDT  TIMESTAMP,  MISCCODE1  varchar(25),  MISCCODE2  varchar(25),  QTYLEVEL1  numeric(14,2),  UNIT  varchar(12),  CASEQTY  numeric(14,2),  TYPE  varchar(12),  TAX1  boolean,  TAX2  boolean,  TAX3  boolean,  ALIASCODE  varchar(25),  PARENTCODE  INT  ,  AVGPRICE  numeric(14,2),  AVGCOST  numeric(14,2),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  SUBCODESN  VARCHAR(35),  SUBCODESN2 VARCHAR(35),  SUBCODESN3 VARCHAR(35),  CUORDQTY  numeric(14,2),  VENORQTY  numeric(14,2),  CUPICQTY  numeric(14,2),  VENPIQTY  numeric(14,2),  CUINVQTY  numeric(14,2),  CUSHIQTY  numeric(14,2),  VENSHQTY  numeric(14,2),  EFFDATE  TIMESTAMP,  INTEGRSET  varchar(20),  NOTES  varchar(60),  DOCMNT  varchar(90),  OWNER  varchar(40),  OWNER2  varchar(40),  BARUPC  varchar(30),  PRIMARY  KEY  (  SID), FOREIGN  KEY  (  PARENTCODE)  REFERENCES "+schemaName+".ACTIVITY  (  SID)   )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".SCHEDULE  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, TODO  varchar(35) not null,  DESCRIPT  varchar(120),  EMPLOYEE  INT  ,  SSDATET  varchar(30),  ACTIVITYCODE  INT  ,  LOCATION  INT  ,  SDATET  TIMESTAMP,  DURATIONH  INT,  DURATIONM  INT,  STIMEH  INT,  STIMEM  INT,  STIMEAMPM  boolean,  EDATET  TIMESTAMP,  PRIORITY  boolean,  PERCNTDONE  numeric(14,2),  VENDOR  INT  ,  VONTACT  INT  ,  CUSTOMER  INT  ,  TYPE  varchar(20),  MAILTOCODE  INT  ,  OTHEREMPLO  INT,  REPEATF  varchar(20),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  PRIVATEIND  boolean,  NOTES  varchar(60),  OWNER  varchar(40),  OWNER2  varchar(40),  DOCMNT  varchar(90), MGROUP INT ,  PRIMARY  KEY  (  SID ),  FOREIGN  KEY  (  ACTIVITYCODE)  REFERENCES "+schemaName+".ACTIVITY  (  SID),  FOREIGN  KEY  (  CUSTOMER  )  REFERENCES "+schemaName+".CUSTOMER  (  SID  ),  FOREIGN  KEY  (  MGROUP  )  REFERENCES "+schemaName+".MEMBERSGROUP  (  SID  ),  FOREIGN  KEY  (  EMPLOYEE)  REFERENCES "+schemaName+".EMPLOYEE  (  SID),  FOREIGN  KEY  (  VENDOR)  REFERENCES "+schemaName+".VENDOR  (  SID),  FOREIGN  KEY  (  MAILTOCODE)  REFERENCES "+schemaName+".ADDRESS(  SID  ),  FOREIGN KEY (LOCATION)  REFERENCES "+schemaName+".LOCATION  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".SCHEDULEDETAILS  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, SCHEDULESIDNO  INT  not null ,  LINE  INT,  EMPLOYEE  INT,  VENDOR  INT,  CUSTOMER  INT,   NOTES  varchar(60),  STATUSFL  INT,  OWNER  varchar(40), OWNER2  varchar(40), PRIMARY  KEY(  SID), FOREIGN  KEY  (  SCHEDULESIDNO)  REFERENCES "+schemaName+".SCHEDULE  (  SID) ,  FOREIGN  KEY  ( EMPLOYEE)  REFERENCES "+schemaName+".EMPLOYEE  (  SID)   ,  FOREIGN  KEY  ( VENDOR)  REFERENCES "+schemaName+".VENDOR  (  SID)   ,  FOREIGN  KEY  ( CUSTOMER)  REFERENCES "+schemaName+".CUSTOMER  (  SID)   )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".\"USER\"  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, ID  varchar(60) not null,  CLIENT  INT  ,  EMPLOYEE  INT  ,  VENDOR  INT  ,  CUSTOMER  INT  ,  OTHERID  varchar(60),  ALEVEL  varchar(12),  BLEVEL  varchar(12),  CURRPW  varchar(40) not null,  EXPIRY  TIMESTAMP,  OLDPW  varchar(40),  TEMPORARYPASSWORD  boolean,  PASSWORDHASH  VARBINARY(1000000),  ACTIVATIONKEY varchar(60),  RESTRICT1  varchar(20),  RESTRICT2  varchar(20),  RESTRICT3  varchar(20),  ALLOW1  varchar(20),  ALLOW2  varchar(20),  ALLOW3  varchar(20),  MAXPROFLROW varchar(20), CPROFLROW varchar(20), STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  UCURRCALDA  TIMESTAMP,  PREPROCESS  boolean,  NOTES  varchar(60),  DOCMNT  varchar(90),  OWNER  varchar(40),  OWNER2  varchar(40),SIGNATURE varchar(1200),  PRIMARY  KEY  (  SID),  FOREIGN  KEY  (  CLIENT  )  REFERENCES "+schemaName+".CLIENT  (  SID  ),  FOREIGN  KEY  (  CUSTOMER  )  REFERENCES "+schemaName+".CUSTOMER  (  SID  ),  FOREIGN  KEY  (  EMPLOYEE)  REFERENCES "+schemaName+".EMPLOYEE  (  SID),  FOREIGN  KEY  (  VENDOR)  REFERENCES "+schemaName+".VENDOR  (  SID)  )";
      if(dbProductName.equals("psql")){
       //psql all tables even if defined as uppercase are created as lowercase names, unless in quotes
       sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".\"user\"  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, ID  varchar(60) not null,  CLIENT  INT  ,  EMPLOYEE  INT  ,  VENDOR  INT  ,  CUSTOMER  INT  ,  OTHERID  varchar(60),  ALEVEL  varchar(12),  BLEVEL  varchar(12),  CURRPW  varchar(40) not null,  EXPIRY  TIMESTAMP,  OLDPW  varchar(40),  TEMPORARYPASSWORD  boolean,  PASSWORDHASH  BYTEA,  ACTIVATIONKEY varchar(60),  RESTRICT1  varchar(20),  RESTRICT2  varchar(20),  RESTRICT3  varchar(20),  ALLOW1  varchar(20),  ALLOW2  varchar(20),  ALLOW3  varchar(20),  MAXPROFLROW varchar(20), CPROFLROW varchar(20), STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  UCURRCALDA  TIMESTAMP,  PREPROCESS  boolean,  NOTES  varchar(60),  DOCMNT  varchar(90),  OWNER  varchar(40),  OWNER2  varchar(40),SIGNATURE varchar(1200),  PRIMARY  KEY  (  SID),  FOREIGN  KEY  (  CLIENT  )  REFERENCES "+schemaName+".CLIENT  (  SID  ),  FOREIGN  KEY  (  CUSTOMER  )  REFERENCES "+schemaName+".CUSTOMER  (  SID  ),  FOREIGN  KEY  (  EMPLOYEE)  REFERENCES "+schemaName+".EMPLOYEE  (  SID),  FOREIGN  KEY  (  VENDOR)  REFERENCES "+schemaName+".VENDOR  (  SID)  )";
      }
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".USERPROFL  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, LOGONID  INT, ROW varchar(20), OPTION varchar(255), SELECTVALUE varchar(255),  SCRCOLOR  varchar(30),  HILCOLOR  varchar(30),  TEXTCOLOR  varchar(30),  BACCOLOR  varchar(30),  BEEPSOU  boolean,  CONFIRM  boolean,  PROMPTI  boolean,  P1  varchar(5),  P2  varchar(5),  P3  varchar(5),  P4  varchar(5),  P5  varchar(5),  P6  varchar(5),  MTSTYLE  varchar(30),  STSTYLE  varchar(30),  DTSTYLE  varchar(30),  FTSTYLE  varchar(30),  DEFAULTR  varchar(20),  DEFAULTC  varchar(3),  DBNAME  varchar(20),  ROOTDIR  varchar(35),  KEYORDER  varchar(3),  MARGIN  numeric(14,2),  FOOTER  numeric(14,2),  LISTBUILDC  boolean,  LISTBUILDV  boolean,  LISTBUILDE  boolean,  LISTBROWNC  INT,  LISTBROWNV  INT,  LISTBROWNE  INT,   STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  OWNER  varchar(40),  OWNER2  varchar(40), PRIMARY  KEY(SID), FOREIGN KEY(LOGONID) REFERENCES  "+schemaName+".\"USER\"(SID)  )";
      if(dbProductName.equals("psql")){
       sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".USERPROFL  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, LOGONID  INT, ROW varchar(20), OPTION varchar(255), SELECTVALUE varchar(255),  SCRCOLOR  varchar(30),  HILCOLOR  varchar(30),  TEXTCOLOR  varchar(30),  BACCOLOR  varchar(30),  BEEPSOU  boolean,  CONFIRM  boolean,  PROMPTI  boolean,  P1  varchar(5),  P2  varchar(5),  P3  varchar(5),  P4  varchar(5),  P5  varchar(5),  P6  varchar(5),  MTSTYLE  varchar(30),  STSTYLE  varchar(30),  DTSTYLE  varchar(30),  FTSTYLE  varchar(30),  DEFAULTR  varchar(20),  DEFAULTC  varchar(3),  DBNAME  varchar(20),  ROOTDIR  varchar(35),  KEYORDER  varchar(3),  MARGIN  numeric(14,2),  FOOTER  numeric(14,2),  LISTBUILDC  boolean,  LISTBUILDV  boolean,  LISTBUILDE  boolean,  LISTBROWNC  INT,  LISTBROWNV  INT,  LISTBROWNE  INT,   STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  OWNER  varchar(40),  OWNER2  varchar(40), PRIMARY  KEY(SID), FOREIGN KEY(LOGONID) REFERENCES  "+schemaName+".\"user\"(SID)  )";
      }
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".VENARTHA  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, CHQNUMBER  varchar(32) not null,  RECONCILED  varchar(12),  VENDORC  INT  ,  DATE  TIMESTAMP,  ADDRESCODE  INT,  CHQAMT  numeric(14,2),  AMTVERBOS  varchar(120),  NOTES  varchar(60),  ADVISEL1  varchar(60),  ADVISEL2  varchar(60),  ADVISEL3  varchar(60),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  OWNER  varchar(40), OWNER2  varchar(40),  PRIMARY  KEY (SID ) ,  FOREIGN  KEY  (  VENDORC  )  REFERENCES "+schemaName+".VENDOR  (  SID )  )" ;
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".ACINTEGR  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, MODULEID  varchar(12)  ,  USAGEDESCR  varchar(35),  USAGECODE  varchar(3)  ,  SETSID  varchar(20)  ,  ACCOUNT  INT  ,  EXTRAINTFIELD  varchar(20),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  NOTES  varchar(60),  OWNER  varchar(40),  OWNER2  varchar(40),  PRIMARY  KEY  (  SID),  FOREIGN  KEY  ( ACCOUNT)  REFERENCES "+schemaName+".ACCOUNT  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".ITEMJOB  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, JOBNO  varchar(32) not null,  MATCODE  INT  ,  PRODDATET  TIMESTAMP,  QTYALLOC  numeric(14,2),  PONO  varchar(20),  QTYOSTND  numeric(14,2),  QTYALSTK  numeric(14,2),  QTYISSUD  numeric(14,2),  JOBTOTL  numeric(14,2),  STATUSFL  INT,  CUSTOMEJ  INT  ,  VENDOR  INT,  STATUSFLDT  TIMESTAMP,  PRINTMSTAT  INT,  PRINMTFLDT  TIMESTAMP,  PRINTMSTATJ  INT,  PRINMTFLDTJ  TIMESTAMP,  TYPE  varchar(12),  MATCODEOUT  varchar(32),  QTYOUT  numeric(14,2),  NOTES  varchar(60),  OWNER  varchar(40),  OWNER2  varchar(40),  DOCMNT  varchar(90),  PRIMARY  KEY  (  SID),  FOREIGN  KEY  (  MATCODE)  REFERENCES "+schemaName+".ITEM  (  SID),  FOREIGN  KEY  (  CUSTOMEJ  )  REFERENCES "+schemaName+".CUSTOMER  (  SID  )  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".ACTIVITYJOB  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, JOBNO  varchar(32) not null,  ACTIVITYCODE  INT  ,  PRODDATET  TIMESTAMP,  QTYALLOC  numeric(14,2),  PONO  INT,  QTYOSTND  numeric(14,2),  QTYALSTK  numeric(14,2),  QTYISSUD  numeric(14,2),  JOBTOTL  numeric(14,2),  STATUSFL  INT,  CUSTOMEJ  INT  ,  VENDOR  INT,  STATUSFLDT  TIMESTAMP,  PRINTMSTAT  INT,  PRINMTFLDT  TIMESTAMP,  PRINTMSTATJ  INT,  PRINMTFLDTJ  TIMESTAMP,  TYPE  varchar(12),  MATCODEOUT  varchar(32),  QTYOUT  numeric(14,2),  NOTES  varchar(60),  OWNER  varchar(40),  OWNER2  varchar(40),  DOCMNT  varchar(90),  PRIMARY  KEY  (  SID),  FOREIGN  KEY  (  ACTIVITYCODE)  REFERENCES "+schemaName+".ACTIVITY  (  SID),  FOREIGN  KEY  (  CUSTOMEJ  )  REFERENCES "+schemaName+".CUSTOMER  (  SID  )  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".VENQUOTE  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, PURCHSNO  varchar(32) not null,  DELVDATET  TIMESTAMP,  VENDOR  INT  ,  MATCODE  INT  ,  REPLICATE  INT  ,  AMOUNTTOTAL  numeric(14,2),  AMOUNTOSTNDT  numeric(14,2),  QTYTOTAL  numeric(14,2),  QTYOSTNDT  numeric(14,2),  STATUSFL  INT,  CINVOICE  varchar(20),  JOBNO  varchar(20),  VPONO  varchar(20),  RFPORD  varchar(20),  STATUSFLDT  TIMESTAMP,  RCPONO  varchar(20),  ODATET  TIMESTAMP,  TERMS  varchar(20),  PRIORITY  boolean,  PRINTMSTAT  INT,  PRINMTFLDT  TIMESTAMP,  TYPE  varchar(25),  VINVOICE  varchar(20),  ATTACH  varchar(20),  SHIPCODE  varchar(20),  AGENT  INT  ,BASEAMOUNTT  numeric(14,2),  DELIVCHRGT  numeric(14,2),  MISCCHRGT  numeric(14,2),  TAX1AMTT  numeric(14,2),  TAX2AMTT  numeric(14,2),  TAX3AMTT  numeric(14,2),  STARTDATET  TIMESTAMP,  NOTES  varchar(60),  OWNER  varchar(40),  OWNER2  varchar(40),  DOCMNT  varchar(90),  PRIMARY  KEY  (  SID  ),  FOREIGN  KEY  (  VENDOR)  REFERENCES "+schemaName+".VENDOR  (  SID),  FOREIGN  KEY  (  MATCODE)  REFERENCES "+schemaName+".ITEM  (  SID),  FOREIGN  KEY  (  REPLICATE)  REFERENCES "+schemaName+".VENQUOTE  (  SID),  FOREIGN  KEY  (  AGENT)  REFERENCES "+schemaName+".EMPLOYEE  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".VENDORDERS  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, PURCHSNO  varchar(32) not null,  DELVDATET  TIMESTAMP,  VENDOR  INT  ,  MATCODE  INT  ,  AMOUNTTOTAL  numeric(14,2),  AMOUNTOSTNDT  numeric(14,2),  QTYTOTAL  numeric(14,2),  QTYOSTNDT  numeric(14,2),  STATUSFL  INT,  JOBNO  varchar(20),  VENDQNO  INT  ,  RFPORD  varchar(20),  STATUSFLDT  TIMESTAMP,  RCPONO  varchar(20),  ODATET  TIMESTAMP,  TERMS  varchar(20),  PRIORITY  boolean,  PRINTMSTAT  INT,  PRINMTFLDT  TIMESTAMP,  TYPE  varchar(25),  VINVOICE  varchar(20),  ATTACH  varchar(20),  SHIPCODE  varchar(20),  AGENT  INT  ,BASEAMOUNTT  numeric(14,2),  DELIVCHRGT  numeric(14,2),  MISCCHRGT  numeric(14,2),  TAX1AMTT  numeric(14,2),  TAX2AMTT  numeric(14,2),  TAX3AMTT  numeric(14,2),  STARTDATET  TIMESTAMP,  NOTES  varchar(60),  OWNER  varchar(40),  OWNER2  varchar(40),  DOCMNT  varchar(90),  PRIMARY  KEY(  SID),  FOREIGN  KEY  (  VENDOR)  REFERENCES "+schemaName+".VENDOR  (  SID),  FOREIGN  KEY  (  MATCODE)  REFERENCES "+schemaName+".ITEM  (  SID),  FOREIGN KEY ( VENDQNO ) REFERENCES "+schemaName+". VENQUOTE (  SID ), FOREIGN  KEY  (  AGENT)  REFERENCES "+schemaName+".EMPLOYEE  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".VSHIPMEN  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, SHIPCODE  varchar(32) not null,  MATCODE  INT  ,  SHIPPER  INT,  PONO  INT  ,  CPONO  INT,  INVOICE  INT,  AMOUNTTOTAL  numeric(14,2),  AMOUNTOSTNDT  numeric(14,2),  QTYTOTAL  numeric(14,2),  QTYOSTNDT  numeric(14,2),  CARRIER  varchar(20),  TYPE  varchar(12),  SHIPDATET  TIMESTAMP,  SHIPDATETA  TIMESTAMP,  TARENO  varchar(20),  PACKNO  varchar(20),  VENDOR  INT  ,  CUSTOMER  INT  ,  BILLTOCODE  INT  ,  BILLTOSAMEASSHIPTO boolean, SHIPTOCODE  INT  ,  NOTES  varchar(60),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  SERIALNO  varchar(25),  PRINTMSTAT  INT,  PRINMTFLDT  TIMESTAMP,  OWNER  varchar(40),  OWNER2  varchar(40),  PRIMARY  KEY(  SID),  FOREIGN  KEY  (  SHIPTOCODE  )  REFERENCES "+schemaName+".ADDRESS(  SID  ),  FOREIGN  KEY  (  BILLTOCODE)  REFERENCES "+schemaName+".ADDRESS(  SID  ),  FOREIGN  KEY  (  MATCODE)  REFERENCES "+schemaName+".ITEM  (  SID)  ,  FOREIGN  KEY  (  VENDOR  )  REFERENCES "+schemaName+".VENDOR  (  SID  ), FOREIGN  KEY  (  PONO  )  REFERENCES "+schemaName+".VENDORDERS  (  SID  ),  FOREIGN  KEY  (  CUSTOMER  )  REFERENCES "+schemaName+".CUSTOMER  (  SID  )  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".CUQUOTE  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, PURCHSNO  varchar(32) not null,  DELVDATET  TIMESTAMP,  VENDOR  INT,  AMOUNTTOTAL  numeric(14,2),  AMOUNTOSTNDT  numeric(14,2),  QTYTOTAL  numeric(14,2),  QTYOSTNDT  numeric(14,2),  STATUSFL  INT,  CUSTOMER  INT  ,  MATCODE  INT  ,  REPLICATE  INT  ,  CINVOICE  varchar(20),  ORDPRICE  numeric(14,2),  JOBNO  varchar(20),  VPONO  varchar(20),  QUOORDT  varchar(20),  STATUSFLDT  TIMESTAMP,  PRINTMSTAT  INT,  PRINMTFLDT  TIMESTAMP,  TYPE  varchar(12),  TERMS  varchar(25),  PRIORITY  boolean,  ODATET  TIMESTAMP,  SHIPCODE  INT,  ACTIVITYCODE  varchar(20),  AGENT  INT  ,BASEAMOUNTT  numeric(14,2),  DELIVCHRGT  numeric(14,2),  MISCCHRGT  numeric(14,2),  TAX1AMTT  numeric(14,2),  TAX2AMTT  numeric(14,2),  TAX3AMTT  numeric(14,2),  ATTACH  varchar(20),  NOTES  varchar(60),  OWNER  varchar(40),  OWNER2  varchar(40),  DOCMNT  varchar(90),  PRIMARY  KEY(  SID),  FOREIGN  KEY  (  CUSTOMER  )  REFERENCES "+schemaName+".CUSTOMER  (  SID  ),  FOREIGN  KEY  (  MATCODE)  REFERENCES "+schemaName+".ITEM  (  SID),  FOREIGN  KEY  (  REPLICATE)  REFERENCES "+schemaName+".CUQUOTE  (  SID),  FOREIGN  KEY  (  AGENT)  REFERENCES "+schemaName+".EMPLOYEE  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".CUORDERS  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, PURCHSNO  varchar(32) not null,  DELVDATET  TIMESTAMP,  CUSTOMER  INT  ,  MATCODE  INT  ,  CUQUOTE INT  , CINVOICE  INT,  JOBNO  INT,  AMOUNTTOTAL  numeric(14,2),  AMOUNTOSTNDT  numeric(14,2),  QTYTOTAL  numeric(14,2),  QTYOSTNDT  numeric(14,2),  VPONO  INT,  RFPORD  INT,  RCPONO  INT,  ODATET  TIMESTAMP,  TERMS  varchar(20),  PRIORITY  boolean,  PRINTMSTAT  INT,  PRINMTFLDT  TIMESTAMP,  TYPE  varchar(25),  VINVOICE  INT,  ATTACH  varchar(90),  AGENT  INT  ,BASEAMOUNTT  numeric(14,2),  DELIVCHRGT  numeric(14,2),  MISCCHRGT  numeric(14,2),  TAX1AMTT  numeric(14,2),  TAX2AMTT  numeric(14,2),  TAX3AMTT  numeric(14,2),  STARTDATET  TIMESTAMP,  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  NOTES  varchar(60),  OWNER  varchar(40),  OWNER2  varchar(40),  DOCMNT  varchar(90),  SHIPCODEFROMPAY  INT,  SHIPCODE  INT, BARPO  varchar(30),  PRIMARY  KEY  (  SID  ),  FOREIGN  KEY  (  CUSTOMER  )  REFERENCES "+schemaName+".CUSTOMER  (  SID  ),  FOREIGN  KEY  (  MATCODE)  REFERENCES "+schemaName+".ITEM  (  SID),  FOREIGN  KEY  (  CUQUOTE  )  REFERENCES "+schemaName+".CUQUOTE  (  SID  ),  FOREIGN  KEY  (  AGENT)  REFERENCES "+schemaName+".EMPLOYEE  (  SID) ,  FOREIGN  KEY  (  SHIPCODEFROMPAY)  REFERENCES "+schemaName+".ADDRESS  (  SID) , FOREIGN  KEY  (  SHIPCODE)  REFERENCES "+schemaName+".ADDRESS  (  SID) )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".CUINVOICE  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, INVOICE  varchar(32) not null,  CUSTOMER  INT  ,  MATCODE  INT  ,  INVODATE  TIMESTAMP,  AMOUNTTOTAL  numeric(14,2),  AMOUNTOSTNDT  numeric(14,2),  QTYTOTAL  numeric(14,2),  QTYOSTNDT  numeric(14,2),  PONO  INT  ,  REF1TYP  varchar(20),  REF1CODE  varchar(35),  SHIPDATET  TIMESTAMP,  SHIPTYPE  varchar(12),  SHIPCODE  varchar(20),  TERMS  varchar(20),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  TERMSDAT  TIMESTAMP,  DISCOUNP  numeric(14,2),  DISCOUDT  TIMESTAMP,  DISCOUDS  numeric(14,2),  NETDDAT  TIMESTAMP,  NETDDYS  numeric(14,2),  FOB  varchar(20),  TYPE  varchar(12),  INTEGRSET  varchar(20),  ATTACH  varchar(20),  BASEAMOUNTT  numeric(14,2),  DELIVCHRGT  numeric(14,2),  MISCCHRGT  numeric(14,2),  TAX1AMTT  numeric(14,2),  TAX2AMTT  numeric(14,2),  TAX3AMTT  numeric(14,2),  AGENT  INT  ,  NOTES  varchar(60),  PRINTMSTAT  INT,  PRINMTFLDT  TIMESTAMP,  OWNER  varchar(40),  OWNER2  varchar(40),  DOCMNT  varchar(90),  BARINVOICE  varchar(30),  PRIMARY  KEY(  SID),  FOREIGN  KEY  (  CUSTOMER  )  REFERENCES "+schemaName+".CUSTOMER  (  SID  ),  FOREIGN  KEY  (  MATCODE)  REFERENCES "+schemaName+".ITEM  (  SID),  FOREIGN  KEY  (  PONO  )  REFERENCES "+schemaName+".CUORDERS  (  SID  ),  FOREIGN  KEY  (  AGENT)  REFERENCES "+schemaName+".EMPLOYEE  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".SHIPMENT  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, SHIPCODE  varchar(32) not null,  MATCODE  INT  ,  SHIPPER  INT  ,  PONO  INT,  CPONO  INT  ,  INVOICE  INT  ,  AMOUNTTOTAL  numeric(14,2),  AMOUNTOSTNDT  numeric(14,2),  QTYTOTAL  numeric(14,2),  QTYOSTNDT  numeric(14,2),  CARRIER  INT,  TYPE  varchar(12),  SHIPDATET  TIMESTAMP,  SHIPDATETA  TIMESTAMP,  TARENO  varchar(20),  PACKNO  varchar(20),  CUSTOMER  INT  ,  BILLTOCODE  INT  ,  BILLTOSAMEASSHIPTO boolean, SHIPTOCODE  INT  ,  NOTES  varchar(60),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  SERIALNO  varchar(25),  PRINTMSTAT  INT,  PRINMTFLDT  TIMESTAMP,  OWNER  varchar(40),  OWNER2  varchar(40),  BARSHIPCOD  varchar(30),  PRIMARY  KEY(  SID  ),  FOREIGN  KEY  (  SHIPPER)  REFERENCES "+schemaName+".VENDOR  (  SID), FOREIGN  KEY  (  CARRIER)  REFERENCES "+schemaName+".VENDOR  (  SID),  FOREIGN  KEY  (  BILLTOCODE)  REFERENCES "+schemaName+".ADDRESS(  SID  ),  FOREIGN  KEY  (  SHIPTOCODE)  REFERENCES "+schemaName+".ADDRESS(  SID  )  ,  FOREIGN  KEY  (  MATCODE)  REFERENCES "+schemaName+".ITEM  (  SID),  FOREIGN  KEY  (  CUSTOMER  )  REFERENCES "+schemaName+".CUSTOMER  (  SID  ),  FOREIGN  KEY  (  INVOICE  )  REFERENCES "+schemaName+".CUINVOICE  (  SID  ),  FOREIGN  KEY  (  CPONO  )  REFERENCES "+schemaName+".CUORDERS  (  SID  )  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".EMPLORDERS  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, PURCHSNO  varchar(32) not null,  DELVDATET  TIMESTAMP,  EMPLOYEE  INT  ,  MATCODE  INT  ,  AMOUNTTOTAL  numeric(14,2),  AMOUNTOSTNDT  numeric(14,2),  QTYTOTAL  numeric(14,2),  QTYOSTNDT  numeric(14,2),  STATUSFL  INT,  JOBNO  INT,  VPONO  INT,  RFPORD  INT,  STATUSFLDT  TIMESTAMP,  RCPONO  INT,  ODATET  TIMESTAMP,  TERMS  varchar(20),  PRIORITY  boolean,  PRINTMSTAT  INT,  PRINMTFLDT  TIMESTAMP,  TYPE  varchar(25),  VINVOICE  INT,  ATTACH  varchar(20),  SHIPCODE  INT  ,  AGENT  INT  ,BASEAMOUNTT  numeric(14,2),  DELIVCHRGT  numeric(14,2),  MISCCHRGT  numeric(14,2),  TAX1AMTT  numeric(14,2),  TAX2AMTT  numeric(14,2),  TAX3AMTT  numeric(14,2),  STARTDATET  TIMESTAMP,  NOTES  varchar(60),  OWNER  varchar(40),  OWNER2  varchar(40),  DOCMNT  varchar(90),  PRIMARY  KEY(  SID),  FOREIGN  KEY  (  EMPLOYEE)  REFERENCES "+schemaName+".EMPLOYEE  (  SID),  FOREIGN  KEY  (  MATCODE)  REFERENCES "+schemaName+".ITEM  (  SID),  FOREIGN  KEY  (  SHIPCODE)  REFERENCES "+schemaName+".VSHIPMEN  (  SID),  FOREIGN  KEY  (  AGENT)  REFERENCES "+schemaName+".EMPLOYEE  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".EDITLOG  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, DATABASENM  varchar(20) not null  ,  RECORDNO  INT,  FIELD  varchar(20),  DATET  TIMESTAMP,  USERNAME  varchar(20),  DELETED  boolean,  PREVCHAR  varchar(30),  PREVNUM  INT,  PREVLOG  boolean,  PREVDATE  TIMESTAMP,  NEWCHAR  varchar(30),  NEWNUM  INT,  NEWLOG  boolean,  NEWDATE  TIMESTAMP,  OWNER  varchar(40), OWNER2  varchar(40), PRIMARY  KEY(SID) )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".HLOGFILE  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, SERIALNO  varchar(25)  not null ,  MATCODE  varchar(32),  QUANRECD  INT,  VENDOR  varchar(20),  LOCATION  varchar(20),  RECVRPT  varchar(25),  INFLG  boolean,  PHY  boolean,  DATETIN  TIMESTAMP,  DATETOUT  TIMESTAMP,  JOBNO  varchar(20),  PRINTMSTAT  INT,  PRINMTFLDT  TIMESTAMP,  PONO  varchar(20),  SCANDATET  TIMESTAMP,  QUANISSD  INT,  BUTT  varchar(25),  STATUSFL  INT,  QUANREJD  numeric(14,2),  CUSTOMER  varchar(25),  CPONO  varchar(20),  CUSTOMEJ  varchar(25),  ORGCOST  numeric(14,2),  ORGPONO  varchar(20),  ORGJOBNO  varchar(20),  ALTSERNO  varchar(25),  SELPRICE  numeric(14,2),  PHYSQTY  numeric(14,2),  SPERSON  varchar(25),  CARTONID  varchar(25),  CARTONPR  boolean,  PACKCODE  varchar(20),  TARECODE  varchar(20),  SHIPCODE  varchar(20),  TYPE  varchar(12),  STATUSFLDT  TIMESTAMP,  OWNER  varchar(40), OWNER2  varchar(40), PRIMARY  KEY(SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".CPAYMENT  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, PAYMENT  varchar(32) not null,  CUSTOMER  INT  ,  CINVOICE  INT  ,  CHEQDATE TIMESTAMP, PAYMENTDUEDATE timestamp, POSTINGPERIOD INT, MATCODE  INT,  INTEGRSET  varchar(20),  ACCOUNT  INT,  AMOUNTTOTAL  numeric(14,2),  AMOUNTOSTNDT  numeric(14,2), AMOUNTIN numeric(14,2),  QTYTOTAL  numeric(14,2),  QTYOSTNDT  numeric(14,2),  DISCOUNT  numeric(14,2),  BASEAMOUNTT  numeric(14,2),  DELIVCHRGT  numeric(14,2),  MISCCHRGT  numeric(14,2),  TAX1AMTT  numeric(14,2),  TAX2AMTT  numeric(14,2),  TAX3AMTT  numeric(14,2),  PAYTYPE  varchar(4),  PAYBYID  varchar(20),  PAYBYDATE  TIMESTAMP,  CURRENCY  varchar(12),  CONVRATE  numeric(14,2),  LOCAMOUNTT  numeric(14,2),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  NOTES  varchar(60),  OWNER  varchar(40),  OWNER2  varchar(40),  PRIMARY  KEY  (  SID),  FOREIGN  KEY  (  CINVOICE)  REFERENCES "+schemaName+".CUINVOICE  (  SID),  FOREIGN  KEY  (  CUSTOMER  )  REFERENCES "+schemaName+".CUSTOMER  (  SID  ),  FOREIGN  KEY  ( ACCOUNT)  REFERENCES "+schemaName+".ACCOUNT  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".SERIALNUMBERS  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, SERIALNO  varchar(25) not null  ,  MATCODE  varchar(32),  QUANRECD  numeric(14,2),  VENDOR  varchar(20),  LOCATION  varchar(20),  RECVRPT  varchar(20),  INFL  boolean,  PHY  boolean,  DATETIN  TIMESTAMP,  DATETOUT  TIMESTAMP,  JOBNO  varchar(20),  PRINTMSTAT  INT,  PRINMTFLDT  TIMESTAMP,  PONO  varchar(20),  SCANDATET  TIMESTAMP,  QUANISSD  numeric(14,2),  BUTT  varchar(20),  STATUSFL  INT,  QUANREJD  numeric(14,2),  CUSTOMER  varchar(20),  CPONO  varchar(20),  CUSTOMEJ  varchar(20),  ORGCOST  numeric(14,2),  ORGPONO  varchar(20),  ORGJOBNO  varchar(20),  ALTSERNO  varchar(25),  SELPRICE  numeric(14,2),  PHYSQTY  numeric(14,2),  SPERSON  varchar(20),  CARTONID  varchar(20),  CARTONPR  boolean,  PACKCODE  varchar(20),  TARECODE  varchar(20),  SHIPCODE  varchar(20),  TYPE  varchar(12),  OWNER  varchar(40),  OWNER2  varchar(40),  BARSERIAL  varchar(30), PRIMARY  KEY(SID))";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".MACHINE  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, MACHINECODE  varchar(32) not null,  QUANTITY  numeric(14,2),  DESCRIPT  varchar(120),  DATEADDED  TIMESTAMP,  SOURCE1  varchar(35),  SOURCE2  varchar(35),  UPCCODE  varchar(25),  COST  numeric(14,2),  REPLCOST  numeric(14,2),  SELPRICE  numeric(14,2),  SPRICOLD  numeric(14,2),  SPRICNEW  numeric(14,2),  SPRICEFFDT  TIMESTAMP,  SHIPCODE  varchar(25),  PRINTMSTAT  INT,  PRINMTFLDT  TIMESTAMP,  MISCCODE1  varchar(25),  MISCCODE2  varchar(25),  QTYLEVEL1  numeric(14,2),  UNIT  varchar(12),  CASEQTY  numeric(14,2),  TYPE  varchar(12),  TAX1  boolean,  TAX2  boolean,  TAX3  boolean,  ALIASCODE  varchar(25),  PARENTCODE  INT  ,  AVGPRICE  numeric(14,2),  AVGCOST  numeric(14,2),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  SUBCODESN  VARCHAR(35),  SUBCODESN2 VARCHAR(35),  SUBCODESN3 VARCHAR(35),  CUORDQTY  numeric(14,2),  VENORQTY  numeric(14,2),  CUPICQTY  numeric(14,2),  VENPIQTY  numeric(14,2),  CUINVQTY  numeric(14,2),  CUSHIQTY  numeric(14,2),  VENSHQTY  numeric(14,2),  EFFDATE  TIMESTAMP,  INTEGRSET  varchar(20),  NOTES  varchar(60),  DOCMNT  varchar(90),  OWNER  varchar(40),  OWNER2  varchar(40),  BARUPC  varchar(30),  PRIMARY  KEY  (  SID), FOREIGN  KEY  (  PARENTCODE)  REFERENCES "+schemaName+".MACHINE  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".GROUPMEMBERS  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, GROUPID  INT not null,  MEMBERID  varchar(32) not null,  DESCRIPT  varchar(120), SOURCETYPE varchar(10),  MEMBEREM  INT  ,  MEMBERCU  INT  ,  MEMBERVE  INT  ,  MEMBERIT  INT  ,  MEMBERAC  INT  ,  MEMBERMA  INT  ,  TYPE  varchar(10),  CURRPW  varchar(32) ,  EXPIRY  TIMESTAMP,  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  OWNER  varchar(40),  OWNER2  varchar(40),  PRIMARY  KEY  (  SID),  FOREIGN  KEY  (  GROUPID)  REFERENCES "+schemaName+".MEMBERSGROUP (  SID),  FOREIGN  KEY  (  MEMBEREM)  REFERENCES "+schemaName+".EMPLOYEE  (  SID),  FOREIGN  KEY  (  MEMBERCU)  REFERENCES "+schemaName+".CUSTOMER  (  SID),  FOREIGN  KEY  (  MEMBERIT)  REFERENCES "+schemaName+".ITEM  (  SID),  FOREIGN  KEY  (  MEMBERAC)  REFERENCES "+schemaName+".ACTIVITY  (  SID),  FOREIGN  KEY  (  MEMBERMA)  REFERENCES "+schemaName+".MACHINE  (  SID),  FOREIGN  KEY  (  MEMBERVE)  REFERENCES "+schemaName+".VENDOR  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".JOBASSIGNMENT  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, JOBASSIGN varchar(32) not null, MACHINE  INT ,  SEQUENCE  varchar(12) ,  LOCATION  INT  ,  SDATET  TIMESTAMP,  DURATIONH  INT,  DURATIONM  INT,  STIMEH  INT,  STIMEM  INT,  STIMEAMPM  boolean,  EDATET  TIMESTAMP,  PRIORITY  boolean,  PERCNTDONE  numeric(14,2),REPEATF  varchar(20),  JOBNO  INT  ,  MATCODE  INT  , QTYTOTAL  numeric(14,2),  QTYOSTNDT  numeric(14,2),  PONO  INT,  VENDOR  INT  ,  CPONO  INT,  CUSTOMER  INT  ,  STATUSFL  INT, STATUSFLDT  TIMESTAMP,  OWNER  varchar(40),  OWNER2  varchar(40),  NOTES  varchar(60),  PRIMARY  KEY(  SID),  FOREIGN  KEY  (  CUSTOMER  )  REFERENCES "+schemaName+".CUSTOMER  (  SID  ),  FOREIGN  KEY  (  VENDOR)  REFERENCES "+schemaName+".VENDOR  (  SID),  FOREIGN  KEY  (  MATCODE)  REFERENCES "+schemaName+".ITEM  (  SID),  FOREIGN  KEY  (  MACHINE)  REFERENCES "+schemaName+".MACHINE  (  SID),      FOREIGN  KEY  (  JOBNO)  REFERENCES "+schemaName+".ITEMJOB  (  SID),FOREIGN KEY (LOCATION)  REFERENCES "+schemaName+".LOCATION  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".NEXTSERIALNO  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, NXTSERNO  varchar(4)  not null ,  CURSERNO  varchar(4),  PREVSERN  varchar(4),  IS9999  boolean,  REFNO varchar(14)  , OWNER  varchar(40),  OWNER2  varchar(40), PRIMARY  KEY(SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".RATE1F  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, USERTYPE  varchar(12)  not null ,  PRODTYPE  varchar(12) not null,  STEPNAME  varchar(25) not null,  STEP  INT,  VALUE  numeric(14,2),  EFFDATE  TIMESTAMP,  ENDDATE  TIMESTAMP,  INCENTIVE  varchar(25),  IEFFDATE  TIMESTAMP,  IENDDATE  TIMESTAMP, OWNER  varchar(40),  OWNER2  varchar(40), STATUSFL INT, STATUSFLDT  TIMESTAMP, PRIMARY  KEY(SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".ITEMBOM  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, BOMCODE  varchar(32) not null,  DESCRIPT  varchar(120),  QUANTITY numeric(14,2),  MODE  boolean,  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  OWNER  varchar(40), OWNER2  varchar(40), PRIMARY  KEY(SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".ITEMBOMDETAILS  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, BOMCODE  INT not null,  MATCODE  INT  not null ,  MODE  boolean,  SUBQTY  numeric(14,2), DESCRIPT  varchar(1200), SEQ  varchar(4),  NOTES  varchar(60), STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  OWNER  varchar(40),  OWNER2  varchar(40),  PRIMARY  KEY(  SID  ),  FOREIGN  KEY  (  BOMCODE)  REFERENCES "+schemaName+".ITEMBOM  (  SID),  FOREIGN  KEY  (  MATCODE)  REFERENCES "+schemaName+".ITEM  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".TASK  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, TASKID varchar(32) not null,  DESCRIPT  varchar(120),  ACTIVITYCODE  INT  ,  PROJECTTEAM  INT  ,  RESOURCE INT  , MODE  boolean,  ESTSTART TIMESTAMP, CALCSTART  TIMESTAMP,  ACTLSTART  TIMESTAMP,  ESTEND  TIMESTAMP,  CALCEND  TIMESTAMP,  ACTLEND  TIMESTAMP,  SUBQTY  numeric(14,2),  BOMCODE  INT,  LOCATION  INT,  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  OWNER  varchar(40), OWNER2  varchar(40),  PRIMARY  KEY(SID) ,  FOREIGN  KEY  (  PROJECTTEAM)  REFERENCES "+schemaName+".MEMBERSGROUP (  SID),  FOREIGN  KEY  (RESOURCE)  REFERENCES "+schemaName+".GROUPMEMBERS  (  SID),  FOREIGN  KEY  (  ACTIVITYCODE  )  REFERENCES "+schemaName+".ACTIVITY  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".JOBASSIGNMENTDETAILS  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, JOBASSIGN INT not null, LINE  INT, MACHINE  INT ,  SEQUENCE  varchar(12) ,  LOCATION  INT  ,  SDATET  TIMESTAMP,  DURATIONH  INT,  DURATIONM  INT,  STIMEH  INT,  STIMEM  INT,  STIMEAMPM  boolean,  EDATET  TIMESTAMP,  PRIORITY  boolean,  PERCNTDONE  numeric(14,2),REPEATF  varchar(20),  JOBNO  INT  ,  MATCODE  INT  , QTYTOTAL  numeric(14,2),  QTYOSTNDT  numeric(14,2),  PONO  INT,  VENDOR  INT  ,  CPONO  INT,  CUSTOMER  INT  ,  STATUSFL  INT,  LINETOTL  numeric(14,2), OWNER  varchar(40),  OWNER2  varchar(40), JAFIELD1 varchar(60),JAFIELD2 varchar(60), JAFIELD3 varchar(60), JAFIELD4 varchar(60), NOTES varchar(60), PRIMARY  KEY(  SID),  FOREIGN  KEY  (  CUSTOMER  )  REFERENCES "+schemaName+".CUSTOMER  (  SID  ),  FOREIGN  KEY  (  VENDOR)  REFERENCES "+schemaName+".VENDOR  (  SID),  FOREIGN  KEY  (  MATCODE)  REFERENCES "+schemaName+".ITEM  (  SID),  FOREIGN  KEY  (  MACHINE)  REFERENCES "+schemaName+".MACHINE  (  SID),      FOREIGN  KEY  (  JOBNO)  REFERENCES "+schemaName+".ITEMJOB  (  SID),FOREIGN KEY (LOCATION)  REFERENCES "+schemaName+".LOCATION  (  SID), FOREIGN  KEY  (  JOBASSIGN)  REFERENCES "+schemaName+".JOBASSIGNMENT  (  SID  ) )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".PROCESSDETAILS  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, PROCESS varchar(32) not null, CPONO INT , MATCODE  INT , CUSTOMER INT,  SDATET  TIMESTAMP,  DURATIONH  INT,  DURATIONM  INT,  STIMEH  INT,  STIMEM  INT,  STIMEAMPM  boolean,  EDATET  TIMESTAMP,  PRIORITY  boolean, PERCNTDONE  numeric(14,2), STATUSFL  INT, STATUSFLDT  TIMESTAMP,  NOTES varchar(60), OWNER  varchar(40),  OWNER2  varchar(40),  PRIMARY  KEY(  SID),  FOREIGN  KEY  (  CUSTOMER  )  REFERENCES "+schemaName+".CUSTOMER  (  SID  ), FOREIGN  KEY  (  MATCODE)  REFERENCES "+schemaName+".ITEM  (  SID), FOREIGN  KEY  (  CPONO)  REFERENCES "+schemaName+".CUORDERS  (  SID) )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".PROCESSATTRIBUTES  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, PDETAILS INT not null, NAME  varchar(32) , VALUE varchar(32),  TYPE  varchar(32),  RANGE  varchar(32),  STEP  INT,   STATUSFL  INT, STATUSFLDT  TIMESTAMP,  NOTES varchar(60), OWNER  varchar(40),  OWNER2  varchar(40),  PRIMARY  KEY(  SID),  FOREIGN  KEY  (  PDETAILS  )  REFERENCES "+schemaName+".PROCESSDETAILS  (  SID  ))";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".PROJECT (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, PROJ  varchar(32) not null,  PARENTCODE  INT  ,  DESCRIPT  varchar(120),  COMPANYCODE INT  , DIVCODE  INT  ,  DEPCODE  INT  ,  LOCATION  INT  ,  SDATET  TIMESTAMP,  EDATET  TIMESTAMP,  OWNER  varchar(40), OWNER2  varchar(40),  PRIMARY  KEY(SID),  FOREIGN  KEY  (  PARENTCODE  )  REFERENCES "+schemaName+".PROJECT  (  SID), FOREIGN  KEY  (  COMPANYCODE  )  REFERENCES "+schemaName+".COMPANY  (  SID  ),  FOREIGN  KEY  (  DEPCODE )  REFERENCES "+schemaName+".DEPARTMENT  (  SID  ),  FOREIGN  KEY  (  DIVCODE  )  REFERENCES "+schemaName+".DIVISION  (  SID  ))";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".OUTLINE  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, PROJ  INT not null,  PARENTCODE  INT  ,  USEROW  numeric(14,2),  USECOL  numeric(14,2),  OWNER  varchar(40), OWNER2  varchar(40),  PRIMARY  KEY(SID),  FOREIGN  KEY  (  PARENTCODE  )  REFERENCES "+schemaName+".OUTLINE  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".SCANDATE  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, SDSATETIMEOFSCAN  varchar(25) not null  ,  DATETIMEOFSCAN  TIMESTAMP,  LASTDATE  TIMESTAMP,  BKUPDATE  TIMESTAMP, OWNER  varchar(40), OWNER2  varchar(40), PRIMARY  KEY(SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".VINVOICE  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, INVOICE  varchar(32) not null,  VENDOR  INT  ,  MATCODE  INT  ,  INTEGRSET  varchar(20),  INVODATE  TIMESTAMP,  AMOUNTTOTAL  numeric(14,2),  AMOUNTOSTNDT  numeric(14,2),  QTYTOTAL  numeric(14,2),  QTYOSTNDT  numeric(14,2),  PONO  INT  ,  REF1TYP  varchar(20),  REF1CODE  varchar(35),  SHIPDATET  TIMESTAMP,  SHIPTYPE  varchar(12),  SHIPCODE  INT  ,  TERMS  varchar(20),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  TERMSDAT  TIMESTAMP,  DISCOUNP  numeric(14,2),  DISCOUDT  TIMESTAMP,  DISCOUDS  numeric(14,2),  NETDDAT  TIMESTAMP,  NETDDYS  INT,  FOB  varchar(20),  TYPE  varchar(12),  ATTACH  varchar(20),BASEAMOUNTT  numeric(14,2),  DELIVCHRGT  numeric(14,2),  MISCCHRGT  numeric(14,2),  TAX1AMTT  numeric(14,2),  TAX2AMTT  numeric(14,2),  TAX3AMTT  numeric(14,2),  AGENT  INT  ,  NOTES  varchar(60),  PRINTMSTAT  INT,  PRINMTFLDT  TIMESTAMP,  OWNER  varchar(40),  OWNER2  varchar(40),  DOCMNT  varchar(90),  PRIMARY  KEY(  SID),  FOREIGN  KEY  (  VENDOR)  REFERENCES "+schemaName+".VENDOR  (  SID),  FOREIGN  KEY  (  MATCODE)  REFERENCES "+schemaName+".ITEM  (  SID),  FOREIGN  KEY  (  SHIPCODE)  REFERENCES "+schemaName+".VSHIPMEN  (  SID),  FOREIGN  KEY  (  PONO  )  REFERENCES "+schemaName+".VENDORDERS  (  SID  ),  FOREIGN  KEY  (  AGENT)  REFERENCES "+schemaName+".EMPLOYEE  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".VPAYMENT  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, PAYMENT  varchar(32) not null,  VENDOR  INT  ,  VINVOICE  INT  ,  CHEQDATE TIMESTAMP, PAYMENTDUEDATE timestamp, POSTINGPERIOD INT, MATCODE  INT,  INTEGRSET  varchar(20),  ACCOUNT  INT,  AMOUNTTOTAL  numeric(14,2),  AMOUNTOSTNDT  numeric(14,2),  AMOUNTIN numeric(14,2),  QTYTOTAL  numeric(14,2),  QTYOSTNDT  numeric(14,2),  BASEAMOUNTT  numeric(14,2),  DELIVCHRGT  numeric(14,2),  MISCCHRGT  numeric(14,2),  TAX1AMTT  numeric(14,2),  TAX2AMTT  numeric(14,2),  TAX3AMTT  numeric(14,2),  DISCOUNT  numeric(14,2),  PAYTYPE  varchar(4),  PAYBYID  varchar(20),  PAYBYDATE  TIMESTAMP,  CURRENCY  varchar(12),  CONVRATE  numeric(14,2),  LOCAMOUNT  numeric(14,2),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  NOTES  varchar(60),  OWNER  varchar(40),  OWNER2  varchar(40),  PRIMARY  KEY  (  SID),  FOREIGN  KEY  (  VINVOICE)  REFERENCES "+schemaName+".VINVOICE  (  SID),  FOREIGN  KEY  (  VENDOR  )  REFERENCES "+schemaName+".VENDOR  (  SID)  , FOREIGN  KEY  ( ACCOUNT)  REFERENCES "+schemaName+".ACCOUNT  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".CUQDETAILS  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, CUQNO  INT   not null,  LINE  INT,  MATCODE  INT  ,  QTYORDRD  numeric(14,2),  ORDUNIT  varchar(12),  ORDPRICE  numeric(14,2),  IODATE  TIMESTAMP,  IDELVDATE  TIMESTAMP, SHIPOPTION varchar(20) ,  VENDOR  INT  ,  QTYOSTND  numeric(14,2),BASEAMOUNT  numeric(14,2),  DELIVCHRG  numeric(14,2),  MISCCHRG  numeric(14,2),  TAX1AMT  numeric(14,2),  TAX2AMT  numeric(14,2),  TAX3AMT  numeric(14,2),  LINETOTL  numeric(14,2),  OWNER2  varchar(40),  PRIMARY  KEY(  SID),  FOREIGN  KEY  (  MATCODE)  REFERENCES "+schemaName+".ITEM  (  SID),  FOREIGN  KEY  (  VENDOR)  REFERENCES "+schemaName+".VENDOR  (  SID),  FOREIGN  KEY  (  CUQNO)  REFERENCES "+schemaName+".CUQUOTE  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".CUODETAILS  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, CUONO  INT  not null ,  LINE  INT,  MATCODE  INT  ,  QTYORDRD  numeric(14,2),  ORDUNIT  varchar(12),  ORDPRICE  numeric(14,2),  IODATE  TIMESTAMP,  IDELVDATE  TIMESTAMP,  VENDOR  INT  ,SHIPOPTION varchar(20) ,  QTYOSTND  numeric(14,2),BASEAMOUNT  numeric(14,2),  DELIVCHRG  numeric(14,2),  MISCCHRG  numeric(14,2),  TAX1AMT  numeric(14,2),  TAX2AMT  numeric(14,2),  TAX3AMT  numeric(14,2),  LINETOTL  numeric(14,2), OWNER2  varchar(40),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,BARPO varchar(30),  PRIMARY  KEY(  SID),  FOREIGN  KEY  (  MATCODE)  REFERENCES "+schemaName+".ITEM  (  SID),  FOREIGN  KEY  (  VENDOR)  REFERENCES "+schemaName+".VENDOR  (  SID),  FOREIGN  KEY  (  CUONO)  REFERENCES "+schemaName+".CUORDERS  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".CUIDETAILS  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, CUINO  INT   not null,  LINE  INT,  MATCODE  INT  ,  QTYORDRD  numeric(14,2),  ORDUNIT  varchar(12),  ORDPRICE  numeric(14,2),  IODATET  TIMESTAMP,  DELVDATEIT  TIMESTAMP,  VENDOR  INT  ,  QTYOSTND  numeric(14,2),  BASEAMOUNT  numeric(14,2),  DELIVCHRG  numeric(14,2),  MISCCHRG  numeric(14,2),  TAX1AMT  numeric(14,2),  TAX2AMT  numeric(14,2),  TAX3AMT  numeric(14,2),  LINETOTL  numeric(14,2),  OWNER2  varchar(40),  PRIMARY  KEY(  SID),  FOREIGN  KEY  (  MATCODE)  REFERENCES "+schemaName+".ITEM  (  SID),  FOREIGN  KEY  (  VENDOR)  REFERENCES "+schemaName+".VENDOR  (  SID),  FOREIGN  KEY  (  CUINO)  REFERENCES "+schemaName+".CUINVOICE  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".CUPDETAILS  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, CUPNO  INT  not null ,  LINE  INT,  INVOICE  INT  ,  QTYORDRD  numeric(14,2),  ORDPRICE  numeric(14,2),  PAYTYPE  varchar(12),  PAYBYID  varchar(12), AMOUNTIN  numeric(14,2),BASEAMOUNT  numeric(14,2),  DELIVCHRG  numeric(14,2),  MISCCHRG  numeric(14,2),  TAX1AMT  numeric(14,2),  TAX2AMT  numeric(14,2),  TAX3AMT  numeric(14,2),  LINETOTL  numeric(14,2),  OWNER2  varchar(40),  PRIMARY  KEY(  SID),  FOREIGN  KEY  (  INVOICE)  REFERENCES "+schemaName+".CUINVOICE  (  SID),  FOREIGN  KEY  (  CUPNO)  REFERENCES "+schemaName+".CPAYMENT  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".ACTIVITYJOBDETAILS  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, JOBNO  INT   not null,  LINE  INT,  ACTIVITYCODE  INT  ,  PRODDATET  TIMESTAMP,  QTYALLOC  numeric(14,2),  PONO  INT,  ORDPRICE  numeric(14,2),  QTYOSTND  numeric(14,2),  QTYALSTK  numeric(14,2),  QTYISSUD  numeric(14,2),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  PRINTMSTAT  INT,  PRINMTFLDT  TIMESTAMP,  PRINTMSTATJ  INT,  PRINMTFLDTJ  TIMESTAMP,  TYPE  varchar(12),  ACTIVITYCODEOUT  INT,  QTYOUT  numeric(14,2),  LINETOTL  numeric(14,2),  OWNER2  varchar(40),  PRIMARY  KEY(  SID),  FOREIGN  KEY  (  ACTIVITYCODE)  REFERENCES "+schemaName+".ACTIVITY  (  SID),  FOREIGN  KEY  (  JOBNO)  REFERENCES "+schemaName+".ACTIVITYJOB  (  SID  )  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".SHIPMENTDETAILS  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, SHIPCODE  INT  not null ,  LINE  INT,  MATCODE  INT  ,  QTYSHIPPED  numeric(14,2),  SHIPPINGPRICE  numeric(14,2),  SHIPPER  INT,  PONO  INT,  CPONO  INT,  INVOICE  INT,  AMOUNT  numeric(14,2),  AMOUNTOSTND  numeric(14,2),  QTY  numeric(14,2),  QTYOSTND  numeric(14,2),  CARRIER  INT,  TYPE  varchar(12),  SHIPDATET  TIMESTAMP,  SHIPDATETA  TIMESTAMP,  TARENO  varchar(20),  PACKNO  varchar(20),  CUSTOMER  INT  ,  MAILTOCODE  INT  ,  SHIPTOCODE  INT  ,  NOTES  varchar(60),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  SERIALNO  varchar(25),  PRINTMSTAT  INT,  PRINMTFLDT  TIMESTAMP,  OWNER  varchar(40),  OWNER2  varchar(40),  BARSHIPCOD  varchar(30),  LINETOTL  numeric(14,2),  PRIMARY  KEY(  SID),  FOREIGN  KEY  (  MATCODE)  REFERENCES "+schemaName+".ITEM  (  SID),  FOREIGN  KEY  (  MAILTOCODE  )  REFERENCES "+schemaName+".ADDRESS(  SID  ),  FOREIGN  KEY  (  SHIPTOCODE  )  REFERENCES "+schemaName+".ADDRESS(  SID  ),  FOREIGN  KEY  (  SHIPCODE)  REFERENCES "+schemaName+".SHIPMENT  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".VENDQDETAILS  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, VENDQNO  INT  not null ,  LINE  INT,  MATCODE  INT  ,  QTYORDRD  numeric(14,2),  ORDUNIT  varchar(12),  ORDPRICE  numeric(14,2),  IODATET  TIMESTAMP,SHIPOPTION varchar(20) ,  CUSTOMER  INT  ,  QTYOSTND  numeric(14,2),BASEAMOUNT  numeric(14,2),  DELIVCHRG  numeric(14,2),  MISCCHRG  numeric(14,2),  TAX1AMT  numeric(14,2),  TAX2AMT  numeric(14,2),  TAX3AMT  numeric(14,2),  LINETOTL  numeric(14,2),  OWNER2  varchar(40),  PRIMARY  KEY(  SID),  FOREIGN  KEY  (  MATCODE)  REFERENCES "+schemaName+".ITEM  (  SID),  FOREIGN  KEY  (  CUSTOMER  )  REFERENCES "+schemaName+".CUSTOMER  (  SID  ),  FOREIGN  KEY  (  VENDQNO  )  REFERENCES "+schemaName+".VENQUOTE  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".VENDODETAILS  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, VENDONO  INT  not null ,  LINE  INT,  MATCODE  INT  ,  QTYORDRD  numeric(14,2),  ORDUNIT  varchar(12),  ORDPRICE  numeric(14,2),  IODATET  TIMESTAMP,  CUSTOMER  INT  ,SHIPOPTION varchar(20) ,  QTYOSTND  numeric(14,2),BASEAMOUNT  numeric(14,2),  DELIVCHRG  numeric(14,2),  MISCCHRG  numeric(14,2),  TAX1AMT  numeric(14,2),  TAX2AMT  numeric(14,2),  TAX3AMT  numeric(14,2),  LINETOTL  numeric(14,2),  OWNER2  varchar(40),  PRIMARY  KEY(  SID),  FOREIGN  KEY  (  MATCODE)  REFERENCES "+schemaName+".ITEM  (  SID),  FOREIGN  KEY  (  CUSTOMER  )  REFERENCES "+schemaName+".CUSTOMER  (  SID  ),  FOREIGN  KEY  (  VENDONO  )  REFERENCES "+schemaName+".VENDORDERS  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".VENDIDETAILS  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, VENDINO  INT not null  ,  LINE  INT,  MATCODE  INT  ,  QTYORDRD  numeric(14,2),  ORDUNIT  varchar(12),  ORDPRICE  numeric(14,2),  IODATET  TIMESTAMP,  CUSTOMER  INT  ,  QTYOSTND  numeric(14,2),BASEAMOUNT  numeric(14,2),  DELIVCHRG  numeric(14,2),  MISCCHRG  numeric(14,2),  TAX1AMT  numeric(14,2),  TAX2AMT  numeric(14,2),  TAX3AMT  numeric(14,2),  LINETOTL  numeric(14,2),  OWNER2  varchar(40),  PRIMARY  KEY(  SID),  FOREIGN  KEY  (  MATCODE)  REFERENCES "+schemaName+".ITEM  (  SID),  FOREIGN  KEY  (  CUSTOMER  )  REFERENCES "+schemaName+".CUSTOMER  (  SID  ),  FOREIGN  KEY  (  VENDINO  )  REFERENCES "+schemaName+".VINVOICE  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".VENDPDETAILS  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, VENDPNO  INT  not null ,  LINE  INT,  INVOICE  INT  ,  QTYORDRD  numeric(14,2),  ORDPRICE  numeric(14,2),  PAYTYPE  varchar(12),  PAYBYID  varchar(12), AMOUNTIN  numeric(14,2),  VENDOR  INT  ,  VONTACT  INT,  QTYOSTND  numeric(14,2),BASEAMOUNT  numeric(14,2),  DELIVCHRG  numeric(14,2),  MISCCHRG  numeric(14,2),  TAX1AMT  numeric(14,2),  TAX2AMT  numeric(14,2),  TAX3AMT  numeric(14,2),  LINETOTL  numeric(14,2),  OWNER2  varchar(40),  PRIMARY  KEY(  SID),  FOREIGN  KEY  (  INVOICE)  REFERENCES "+schemaName+".VINVOICE  (  SID),  FOREIGN  KEY  (  VENDOR  )  REFERENCES "+schemaName+".VENDOR  (  SID  ),  FOREIGN  KEY  (  VENDPNO  )  REFERENCES "+schemaName+".VPAYMENT  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".VSHIPMENDETAILS  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, SHIPCODE  INT  not null ,  LINE  INT,  MATCODE  INT  ,  QTYSHIPPED  numeric(14,2),  SHIPPINGPRICE  numeric(14,2),  SHIPPER  INT,  PONO  INT,  CPONO  INT,  INVOICE  INT,  AMOUNT  numeric(14,2),  AMOUNTOSTND  numeric(14,2),  QTY  numeric(14,2),  QTYOSTND  numeric(14,2),  CARRIER  INT,  TYPE  varchar(12),  SHIPDATET  TIMESTAMP,  SHIPDATETA  TIMESTAMP,  TARENO  varchar(20),  PACKNO  varchar(20),  VENDOR  INT,  MAILTOCODE  INT  ,  SHIPTOCODE  INT  ,  NOTES  varchar(60),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  SERIALNO  varchar(25),  PRINTMSTAT  INT,  PRINMTFLDT  TIMESTAMP,  OWNER  varchar(40),  OWNER2  varchar(40),  BARSHIPCOD  varchar(30),  LINETOTL  numeric(14,2),  PRIMARY  KEY(  SID),  FOREIGN  KEY  (  MATCODE)  REFERENCES "+schemaName+".ITEM  (  SID),  FOREIGN  KEY  (  MAILTOCODE  )  REFERENCES "+schemaName+".ADDRESS(  SID  ),  FOREIGN  KEY  (  SHIPTOCODE  )  REFERENCES "+schemaName+".ADDRESS(  SID  ),  FOREIGN  KEY  (  SHIPCODE)  REFERENCES "+schemaName+".VSHIPMEN  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".WAGEEARNERAUX  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, WAGEEARNERID  INT not null,  LINE  INT,  SIN  varchar(12),  WCBYTDL  numeric(14,2),  WCBYTDN  numeric(14,2),  INSYTDL  numeric(14,2),  INSYTDN  numeric(14,2),  VACATONYL  numeric(14,2),  VACATONYN  numeric(14,2),  PAYYTDL  numeric(14,2),  FPENSIYTL  numeric(14,2),  PPENSIYTL  numeric(14,2),  ITAXYTDL  numeric(14,2),  PTAXYTDL  numeric(14,2),  PAYYTDN  numeric(14,2),  FPENSIYTN  numeric(14,2),  PPENSIYTN  numeric(14,2),  ITAXYTDN  numeric(14,2),  PATXYTDN  numeric(14,2),  GPAYYTDL  numeric(14,2),  GPAYYTDN  numeric(14,2),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  OWNER  varchar(40),  OWNER2  varchar(40),  PRIMARY  KEY  (  SID),  FOREIGN  KEY  (  WAGEEARNERID)  REFERENCES "+schemaName+".WAGEEARNER  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE TABLE IF NOT EXISTS  "+schemaName+".Rgenapp ( SID INTEGER GENERATED BY DEFAULT AS IDENTITY, APPNAME varchar(40) not null, DESCRIPT  varchar(120),  APPTYPE varchar(20), APPWACCOUNTING boolean, APPWEMAIL boolean, APPWJMSMQ boolean, APPVENDOR varchar(20), APPVERSION varchar(20), APPPLATFORM varchar(40), APPMODELPKG varchar(40), APPACTIONPKG varchar(40), APPSKIN varchar(20), APPDEPLOYTYPE varchar(20), CREATEFIDATA varchar(4096000), REVENGDATA varchar(4096000), INITIALIZEFIDATA varchar(4096000), STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  NOTES  varchar(60),  OWNER  varchar(40), OWNER2  varchar(40), PRIMARY KEY(SID) )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".RGENDB ( SID INTEGER GENERATED BY DEFAULT AS IDENTITY, DBNAME varchar(40) not null, DESCRIPT  varchar(120),  DBTYPE varchar(20), DBVENDOR varchar(20), DBVERSION varchar(20), DBPLATFORM varchar(20), APPCODE  INT  ,  SQLDRIVER varchar(40), SQLURL varchar(40), SQLUSER varchar(20), SQLPASSWORD varchar(20), SQLCLASSPATH varchar(40), SQLCREATEDBSCRIPT varchar(20), SQLDROPDBSCRIPT varchar(20), SQLCREATETBLSSCRIPT varchar(20), SQLLOADTBLSSCRIPT varchar(20), STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  NOTES  varchar(60),  OWNER  varchar(40), OWNER2  varchar(40),  PRIMARY KEY(SID), FOREIGN  KEY  (  APPCODE  )  REFERENCES "+schemaName+".Rgenapp  (  SID  ) )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".RGENTABLE   (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, TABLENAME   varchar(40)  not null ,  DBCODE INT  , INADDMENU  boolean,  INLISTMENU  boolean,  INTRANSACTIONMENU  boolean,  INREPORTMENU  boolean,  INGRAPHSMENU  boolean,  INMAILINGMENU  boolean,  INGENERATEMENU  boolean,  INADMINMENU  boolean,  INMAINTENANCEMENU  boolean,  INLABELSMENU  boolean,  INSKIPMENU  boolean,  INCUSTOM1MENU  boolean,  MENULEVEL  varchar(12),  MENUROLE  varchar(12),  MENULABELGROUP  varchar(20),  SUBMENUSEQUENCE  INT,  USAGESCOPE varchar(12), STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  NOTES  varchar(60),  OWNER  varchar(40), OWNER2  varchar(40),  PRIMARY  KEY(  SID), FOREIGN  KEY  (  DBCODE  )  REFERENCES "+schemaName+".RGENDB  (  SID  ) )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".RGENFIELDS  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, DBCODE INT   , TABLENAME  INT   ,  FIELDNAME  varchar(60) not null,  FIELDTYPE varchar(20), FIELDLENGTH varchar(2), INGROUP  varchar(20),  SEQWITHINGROUP  INT,  FOCUSSEQ  INT,  FUTURE1  varchar(20),  INITIALVALUE  varchar(12),  KEYORADDITIONAL  varchar(12),  KEYORADDITIONAL2  varchar(12),  KEYORADDITIONAL3  varchar(12),  SHOWINMENU  varchar(20),  SHOWINREPORT  varchar(20),  PROCESSOPTION1  varchar(20),  PROCESSOPTION2  varchar(20), FDBCODE varchar(40)  ,  FTABLENAME   varchar(60)  ,  FFIELDKEYNAME1  varchar(60),  FFIELDKEYNAME2  varchar(60),  FFIELDKEYNAME3  varchar(60),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  NOTES  varchar(60),  OWNER  varchar(40),  OWNER2  varchar(40),  PRIMARY  KEY(  SID), FOREIGN  KEY  (  TABLENAME  )  REFERENCES "+schemaName+".RGENTABLE  (  SID), FOREIGN  KEY  (  DBCODE )  REFERENCES "+schemaName+".RGENDB  (  SID) )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".GENOPTIONS  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, ROW  varchar(2) not null,  GENOPTIONS01  varchar(159),  GENPURPOSE01  varchar(159),  GENVALUE01  varchar(159),  GENOPTIONS02  varchar(159),  GENPURPOSE02  varchar(159),  GENVALUE02  varchar(159),  GENOPTIONS03  varchar(159),  GENPURPOSE03  varchar(159),  GENVALUE03  varchar(159),  GENOPTIONS04  varchar(159),  GENPURPOSE04  varchar(159),  GENVALUE04  varchar(159),  GENOPTIONS05  varchar(159),  GENPURPOSE05  varchar(159),  GENVALUE05  varchar(159),  GENOPTIONS06  varchar(159),  GENPURPOSE06  varchar(159),  GENVALUE06  varchar(159),  GENOPTIONS07  varchar(159),  GENPURPOSE07  varchar(159),  GENVALUE07  varchar(159),  GENOPTIONS08  varchar(159),  GENPURPOSE08  varchar(159),  GENVALUE08  varchar(159),  GENOPTIONS09  varchar(159),  GENPURPOSE09  varchar(159),  GENVALUE09  varchar(159),  GENOPTIONS10  varchar(159),  GENPURPOSE10  varchar(159),  GENVALUE10  varchar(159),  GENOPTIONS11  varchar(159),  GENPURPOSE11  varchar(159),  GENVALUE11  varchar(159),  GENOPTIONS12  varchar(159),  GENPURPOSE12  varchar(159),  GENVALUE12  varchar(159),  GENOPTIONS13  varchar(159),  GENPURPOSE13  varchar(159),  GENVALUE13  varchar(159),  GENOPTIONS14  varchar(159),  GENPURPOSE14  varchar(159),  GENVALUE14  varchar(159),  GENOPTIONS15  varchar(159),  GENPURPOSE15  varchar(159),  GENVALUE15  varchar(159),  GENOPTIONS16  varchar(159),  GENPURPOSE16  varchar(159),  GENVALUE16  varchar(159),  GENOPTIONS17  varchar(159),  GENPURPOSE17  varchar(159),  GENVALUE17  varchar(159),  GENOPTIONS18  varchar(159),  GENPURPOSE18  varchar(159),  GENVALUE18  varchar(159),  GENOPTIONS19  varchar(159),  GENPURPOSE19  varchar(159),  GENVALUE19  varchar(159),  GENOPTIONS20  varchar(159),  GENPURPOSE20  varchar(159),  GENVALUE20  varchar(159),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  NOTES  varchar(60),  OWNER  varchar(40), OWNER2  varchar(40), PRIMARY  KEY(SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".BLOBDATA  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, FROMTABLE  varchar(35) not null,  FROMKEY varchar(35) not null, QUALIFIER  varchar(32) not null,  SEQUENCE  INT,  TYPE varchar(40), DATA  VARBINARY(1000000),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  NOTES  varchar(255),  OWNER  varchar(40),  OWNER2  varchar(40),  PRIMARY  KEY  (  SID ))";
      if(dbProductName.equals("psql")){
       sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".BLOBDATA  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, FROMTABLE  varchar(35) not null,  FROMKEY varchar(35) not null, QUALIFIER  varchar(32) not null,  SEQUENCE  INT,  TYPE varchar(40), DATA  BYTEA,  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  NOTES  varchar(255),  OWNER  varchar(40),  OWNER2  varchar(40),  PRIMARY  KEY  (  SID ))";
      }
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".CLOBDATA  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, FROMTABLE  varchar(35) not null,  FROMKEY varchar(35) not null, QUALIFIER  varchar(32) not null,  SEQUENCE  INT,  TYPE varchar(40), DATA  VARCHAR(4096000),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  NOTES  varchar(255),  OWNER  varchar(40),  OWNER2  varchar(40),  PRIMARY  KEY  (  SID))";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".CONTROLUSAGEBYPERIODS  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, CTLUSAGETRACKERID  varchar(32)  not null,  DESCRIPT  varchar(120), CONTROLCODE   INT,  CURRENCY  varchar(3),  PERIOD0LABEL varchar(20), PERIOD0B  numeric(14,2),  PERIOD0  numeric(14,2),  PERIODTOTALSLABEL varchar(20), PERIODTOTALSB  numeric(14,2),  PERIODTOTALS  numeric(14,2),  PERIOD1LABEL varchar(20), PERIOD1BUDGET  numeric(14,2),  PERIOD1ACTUAL  numeric(14,2),  PERIOD2LABEL varchar(20), PERIOD2B  numeric(14,2),  PERIOD2  numeric(14,2),  PERIOD3LABEL varchar(20), PERIOD3B  numeric(14,2),  PERIOD3  numeric(14,2),  PERIOD4LABEL varchar(20), PERIOD4B  numeric(14,2),  PERIOD4  numeric(14,2),  PERIOD5LABEL varchar(20), PERIOD5B  numeric(14,2),  PERIOD5  numeric(14,2),  PERIOD6LABEL varchar(20), PERIOD6B  numeric(14,2),  PERIOD6  numeric(14,2),  PERIOD7LABEL varchar(20), PERIOD7B  numeric(14,2),  PERIOD7  numeric(14,2),  PERIOD8LABEL varchar(20), PERIOD8B  numeric(14,2),  PERIOD8  numeric(14,2),  PERIOD9LABEL varchar(20), PERIOD9B  numeric(14,2),  PERIOD9  numeric(14,2),  PERIOD10LABEL varchar(20), PERIOD10B  numeric(14,2),  PERIOD10  numeric(14,2),  PERIOD11LABEL varchar(20), PERIOD11B  numeric(14,2),  PERIOD11  numeric(14,2),  PERIOD12LABEL varchar(20), PERIOD12B  numeric(14,2),  PERIOD12  numeric(14,2),  PERIODNLABEL varchar(20), PERIODNB  numeric(14,2),  PERIODN  numeric(14,2),  NOTES  varchar(60),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  OWNER  varchar(40),  OWNER2  varchar(40),  PRIMARY  KEY  (  SID),   FOREIGN  KEY  (  CONTROLCODE)  REFERENCES "+schemaName+".CONTROL  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".RESOURCEDETAILS  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, TASKNO  INT,  RESOURCENUMBER  INT,  PROJECTTEAM  INT  ,  RESOURCE  INT  not null ,  USAGEPERCENT numeric(14,2),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  OWNER  varchar(40), OWNER2  varchar(40),  PRIMARY  KEY(  SID),  FOREIGN  KEY  (PROJECTTEAM)  REFERENCES "+schemaName+".MEMBERSGROUP  (  SID),  FOREIGN  KEY  (RESOURCE)  REFERENCES "+schemaName+".GROUPMEMBERS  (  SID),  FOREIGN  KEY  (  TASKNO)  REFERENCES "+schemaName+".TASK  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".EMPLODETAILS  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, EMPLONO  INT  not null ,  LINE  INT not null,  MATCODE  INT  ,  QTYORDRD  numeric(14,2),  ORDUNIT  varchar(12),  ORDPRICE  numeric(14,2),  IODATE  TIMESTAMP,  IDELVDATE  TIMESTAMP,  VENDOR  INT  ,  QTYOSTND  numeric(14,2),BASEAMOUNT  numeric(14,2),  DELIVCHRG  numeric(14,2),  MISCCHRG  numeric(14,2),  TAX1AMT  numeric(14,2),  TAX2AMT  numeric(14,2),  TAX3AMT  numeric(14,2),  LINETOTL  numeric(14,2),  OWNER2  varchar(40),  PRIMARY  KEY(  SID),  FOREIGN  KEY  (  MATCODE)  REFERENCES "+schemaName+".ITEM  (  SID),  FOREIGN  KEY  (  VENDOR)  REFERENCES "+schemaName+".VENDOR  (  SID),  FOREIGN  KEY  (  EMPLONO)  REFERENCES "+schemaName+".EMPLORDERS  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".USAGEBYPERIODS  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, USAGETRACKERID  varchar(32) not null,  DESCRIPT  varchar(120),  MATCODE INT  , CURRENCY  varchar(3),  PERIOD0LABEL varchar(20), PERIOD0B  numeric(14,2),  PERIOD0  numeric(14,2),  PERIOD0FORMULAE  VARCHAR(159),  PERIODTOTALSLABEL varchar(20), PERIODTOTALSB  numeric(14,2),  PERIODTOTALS numeric(14,2),  PERIODTOTALSFORMULAE  VARCHAR(159),  PERIOD1LABEL varchar(20), PERIOD1BUDGET  numeric(14,2),  PERIOD1  numeric(14,2),  PERIOD1FORMULAE  VARCHAR(159),  PERIOD2LABEL varchar(20), PERIOD2B  numeric(14,2),  PERIOD2  numeric(14,2),  PERIOD2FORMULAE  VARCHAR(159),  PERIOD3LABEL varchar(20), PERIOD3B  numeric(14,2),  PERIOD3  numeric(14,2),  PERIOD3FORMULAE  VARCHAR(159),  PERIOD4LABEL varchar(20), PERIOD4B  numeric(14,2),  PERIOD4  numeric(14,2),  PERIOD4FORMULAE  VARCHAR(159),  PERIOD5LABEL varchar(20), PERIOD5B  numeric(14,2),  PERIOD5  numeric(14,2),  PERIOD5FORMULAE  VARCHAR(159),  PERIOD6LABEL varchar(20), PERIOD6B  numeric(14,2),  PERIOD6  numeric(14,2),  PERIOD6FORMULAE  VARCHAR(159),  PERIOD7LABEL varchar(20), PERIOD7B  numeric(14,2),  PERIOD7  numeric(14,2),  PERIOD7FORMULAE  VARCHAR(159),  PERIOD8LABEL varchar(20), PERIOD8B  numeric(14,2),  PERIOD8  numeric(14,2),  PERIOD8FORMULAE  VARCHAR(159),  PERIOD9LABEL varchar(20), PERIOD9B  numeric(14,2),  PERIOD9  numeric(14,2),  PERIOD9FORMULAE  VARCHAR(159),  PERIOD10LABEL varchar(20), PERIOD10B  numeric(14,2),  PERIOD10  numeric(14,2),  PERIOD10FORMULAE  VARCHAR(159),  PERIOD11LABEL varchar(20), PERIOD11B  numeric(14,2),  PERIOD11  numeric(14,2),  PERIOD11FORMULAE  VARCHAR(159),  PERIOD12LABEL varchar(20), PERIOD12B  numeric(14,2),  PERIOD12  numeric(14,2),  PERIOD12FORMULAE  VARCHAR(159),  PERIODNLABEL varchar(20), PERIODNB  numeric(14,2),  PERIODN  numeric(14,2),  PERIODNFORMULAE  VARCHAR(159),  NOTES  varchar(60),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  OWNER  varchar(40),  OWNER2  varchar(40),  GROUPCODE  INT  ,  PRIMARY  KEY  (  SID),  FOREIGN  KEY  (  MATCODE)  REFERENCES "+schemaName+".ITEM  (  SID), FOREIGN  KEY  (  GROUPCODE)  REFERENCES "+schemaName+".ROLLUPGROUP  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".RESOURCE_BUNDLE (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY,NAME varchar(50),LANGUAGE varchar(2),COUNTRY varchar(2),VARIANT varchar(2),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  OWNER  varchar(40),  OWNER2  varchar(40), PRIMARY  KEY(  SID))";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      //hsqldb needs underscores to be escaped , need diff version for psql to use lowercase
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".RESOURCE (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, \"_KEY\"  varchar(50) ,  \"_VALUE\" varchar(2555),  RESOURCEBUNDLE  INT  not null,  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  OWNER  varchar(40),  OWNER2  varchar(40),  PRIMARY  KEY(  SID), FOREIGN  KEY  (  RESOURCEBUNDLE)  REFERENCES "+schemaName+".RESOURCE_BUNDLE  (  SID) )";
      if(dbProductName.equals("psql")){
       sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".RESOURCE (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, _KEY  varchar(50) ,  _VALUE varchar(2555),  RESOURCEBUNDLE  INT  not null,  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  OWNER  varchar(40),  OWNER2  varchar(40),  PRIMARY  KEY(  SID), FOREIGN  KEY  (  RESOURCEBUNDLE)  REFERENCES "+schemaName+".RESOURCE_BUNDLE  (  SID) )";
      }
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".TRUEFALSE (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, TABLENAME  varchar(50) ,  QUALIFIER varchar(32), SHOW001 boolean, SHOW002 boolean, SHOW003 boolean, SHOW004 boolean, SHOW005 boolean, SHOW006 boolean, SHOW007 boolean, SHOW008 boolean, SHOW009 boolean, SHOW010 boolean, SHOW011 boolean, SHOW012 boolean, SHOW013 boolean, SHOW014 boolean, SHOW015 boolean, SHOW016 boolean, SHOW017 boolean, SHOW018 boolean, SHOW019 boolean, SHOW020 boolean, SHOW021 boolean, SHOW022 boolean, SHOW023 boolean, SHOW024 boolean, SHOW025 boolean, SHOW026 boolean, SHOW027 boolean, SHOW028 boolean, SHOW029 boolean, SHOW030 boolean, SHOW031 boolean, SHOW032 boolean, SHOW033 boolean, SHOW034 boolean, SHOW035 boolean, SHOW036 boolean, SHOW037 boolean, SHOW038 boolean, SHOW039 boolean, SHOW040 boolean, SHOW041 boolean, SHOW042 boolean, SHOW043 boolean, SHOW044 boolean, SHOW045 boolean, SHOW046 boolean, SHOW047 boolean, SHOW048 boolean, SHOW049 boolean, SHOW050 boolean, SHOW051 boolean, SHOW052 boolean, SHOW053 boolean, SHOW054 boolean, SHOW055 boolean, SHOW056 boolean, SHOW057 boolean, SHOW058 boolean, SHOW059 boolean, SHOW060 boolean, SHOW061 boolean, SHOW062 boolean, SHOW063 boolean, SHOW064 boolean, SHOW065 boolean, SHOW066 boolean, SHOW067 boolean, SHOW068 boolean, SHOW069 boolean, SHOW070 boolean, SHOW071 boolean, SHOW072 boolean, SHOW073 boolean, SHOW074 boolean, SHOW075 boolean, SHOW076 boolean, SHOW077 boolean, SHOW078 boolean, SHOW079 boolean, SHOW080 boolean, SHOW081 boolean, SHOW082 boolean, SHOW083 boolean, SHOW084 boolean , SHOW085 boolean, SHOW086 boolean, SHOW087 boolean, SHOW088 boolean, SHOW089 boolean, SHOW090 boolean, SHOW091 boolean, SHOW092 boolean, SHOW093 boolean, SHOW094 boolean, SHOW095 boolean, SHOW096 boolean, SHOW097 boolean, SHOW098 boolean, SHOW099 boolean, SHOW100 boolean, SHOW101 boolean, SHOW102 boolean, SHOW103 boolean, SHOW104 boolean, SHOW105 boolean, SHOW106 boolean, SHOW107 boolean, SHOW108 boolean, SHOW109 boolean, SHOW110 boolean, SHOW111 boolean, SHOW112 boolean, SHOW113 boolean, SHOW114 boolean, SHOW115 boolean, SHOW116 boolean, SHOW117 boolean, SHOW118 boolean, SHOW119 boolean, SHOW120 boolean, SHOW121 boolean, SHOW122 boolean, SHOW123 boolean, SHOW124 boolean, SHOW125 boolean, SHOW126 boolean, SHOW127 boolean, SHOW128 boolean, SHOW129 boolean, SHOW130 boolean, SHOW131 boolean, SHOW132 boolean, SHOW133 boolean, SHOW134 boolean, SHOW135 boolean, SHOW136 boolean, SHOW137 boolean, SHOW138 boolean, SHOW139 boolean,SHOW140 boolean,SHOW141 boolean,SHOW142 boolean,SHOW143 boolean,SHOW144 boolean,SHOW145 boolean,SHOW146 boolean,SHOW147 boolean,SHOW148 boolean,SHOW149 boolean,SHOW150 boolean,SHOW151 boolean,SHOW152 boolean,SHOW153 boolean,SHOW154 boolean,SHOW155 boolean,SHOW156 boolean,SHOW157 boolean,SHOW158 boolean,SHOW159 boolean,SHOW160 boolean,SHOW161 boolean,SHOW162 boolean,SHOW163 boolean,SHOW164 boolean,SHOW165 boolean,SHOW166 boolean,SHOW167 boolean,SHOW168 boolean,SHOW169 boolean,SHOW170 boolean,SHOW171 boolean,SHOW172 boolean,SHOW173 boolean,SHOW174 boolean,SHOW175 boolean,SHOW176 boolean,SHOW177 boolean,SHOW178 boolean,SHOW179 boolean,SHOW180 boolean,SHOW181 boolean,SHOW182 boolean,SHOW183 boolean,SHOW184 boolean,SHOW185 boolean,SHOW186 boolean,SHOW187 boolean,SHOW188 boolean,SHOW189 boolean,SHOW190 boolean,SHOW191 boolean,SHOW192 boolean,SHOW193 boolean,SHOW194 boolean,SHOW195 boolean,SHOW196 boolean,SHOW197 boolean,SHOW198 boolean,SHOW199 boolean, SHOW200 boolean, SHOW201 boolean, SHOW202 boolean, SHOW203 boolean, SHOW204 boolean, SHOW205 boolean, SHOW206 boolean, SHOW207 boolean, SHOW208 boolean, SHOW209 boolean, SHOW210 boolean, STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  OWNER  varchar(40),  OWNER2  varchar(40),  PRIMARY  KEY(  SID))";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".SEAT (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, LOCATION  INT  not null , ROW  varchar(4) not null, ROWLABEL  varchar(50), SEAT001STATUS varchar(1), NAME001 varchar(50), TICKET001 varchar(50), PO001 varchar(32), SEAT002STATUS varchar(1), NAME002 varchar(50), TICKET002 varchar(50), PO002 varchar(32), SEAT003STATUS varchar(1), NAME003 varchar(50), TICKET003 varchar(50), PO003 varchar(32), SEAT004STATUS varchar(1), NAME004 varchar(50), TICKET004 varchar(50), PO004 varchar(32), SEAT005STATUS varchar(1), NAME005 varchar(50), TICKET005 varchar(50), PO005 varchar(32), SEAT006STATUS varchar(1), NAME006 varchar(50), TICKET006 varchar(50), PO006 varchar(32), SEAT007STATUS varchar(1), NAME007 varchar(50), TICKET007 varchar(50), PO007 varchar(32), SEAT008STATUS varchar(1), NAME008 varchar(50), TICKET008 varchar(50), PO008 varchar(32), SEAT009STATUS varchar(1), NAME009 varchar(50), TICKET009 varchar(50), PO009 varchar(32), SEAT010STATUS varchar(1), NAME010 varchar(50), TICKET010 varchar(50), PO010 varchar(32), SEAT011STATUS varchar(1), NAME011 varchar(50), TICKET011 varchar(50), PO011 varchar(32), SEAT012STATUS varchar(1), NAME012 varchar(50), TICKET012 varchar(50), PO012 varchar(32), SEAT013STATUS varchar(1), NAME013 varchar(50), TICKET013 varchar(50), PO013 varchar(32), SEAT014STATUS varchar(1), NAME014 varchar(50), TICKET014 varchar(50), PO014 varchar(32), SEAT015STATUS varchar(1), NAME015 varchar(50), TICKET015 varchar(50), PO015 varchar(32), SEAT016STATUS varchar(1), NAME016 varchar(50), TICKET016 varchar(50), PO016 varchar(32), SEAT017STATUS varchar(1), NAME017 varchar(50), TICKET017 varchar(50), PO017 varchar(32), SEAT018STATUS varchar(1), NAME018 varchar(50), TICKET018 varchar(50), PO018 varchar(32), SEAT019STATUS varchar(1), NAME019 varchar(50), TICKET019 varchar(50), PO019 varchar(32), SEAT020STATUS varchar(1), NAME020 varchar(50), TICKET020 varchar(50), PO020 varchar(32), SEAT021STATUS varchar(1), NAME021 varchar(50), TICKET021 varchar(50), PO021 varchar(32), SEAT022STATUS varchar(1), NAME022 varchar(50), TICKET022 varchar(50), PO022 varchar(32), SEAT023STATUS varchar(1), NAME023 varchar(50), TICKET023 varchar(50), PO023 varchar(32), SEAT024STATUS varchar(1), NAME024 varchar(50), TICKET024 varchar(50), PO024 varchar(32), SEAT025STATUS varchar(1), NAME025 varchar(50), TICKET025 varchar(50), PO025 varchar(32), SEAT026STATUS varchar(1), NAME026 varchar(50), TICKET026 varchar(50), PO026 varchar(32), SEAT027STATUS varchar(1), NAME027 varchar(50), TICKET027 varchar(50), PO027 varchar(32), SEAT028STATUS varchar(1), NAME028 varchar(50), TICKET028 varchar(50), PO028 varchar(32), SEAT029STATUS varchar(1), NAME029 varchar(50), TICKET029 varchar(50), PO029 varchar(32), SEAT030STATUS varchar(1), NAME030 varchar(50), TICKET030 varchar(50), PO030 varchar(32), SEAT031STATUS varchar(1), NAME031 varchar(50), TICKET031 varchar(50), PO031 varchar(32), SEAT032STATUS varchar(1), NAME032 varchar(50), TICKET032 varchar(50), PO032 varchar(32), SEAT033STATUS varchar(1), NAME033 varchar(50), TICKET033 varchar(50), PO033 varchar(32), SEAT034STATUS varchar(1), NAME034 varchar(50), TICKET034 varchar(50), PO034 varchar(32), SEAT035STATUS varchar(1), NAME035 varchar(50), TICKET035 varchar(50), PO035 varchar(32), SEAT036STATUS varchar(1), NAME036 varchar(50), TICKET036 varchar(50), PO036 varchar(32), SEAT037STATUS varchar(1), NAME037 varchar(50), TICKET037 varchar(50), PO037 varchar(32), SEAT038STATUS varchar(1), NAME038 varchar(50), TICKET038 varchar(50), PO038 varchar(32), SEAT039STATUS varchar(1), NAME039 varchar(50), TICKET039 varchar(50), PO039 varchar(32), SEAT040STATUS varchar(1), NAME040 varchar(50), TICKET040 varchar(50), PO040 varchar(32),  SEAT041STATUS varchar(1), NAME041 varchar(50), TICKET041 varchar(50), PO041 varchar(32), SEAT042STATUS varchar(1), NAME042 varchar(50), TICKET042 varchar(50), PO042 varchar(32), SEAT043STATUS varchar(1), NAME043 varchar(50), TICKET043 varchar(50), PO043 varchar(32), SEAT044STATUS varchar(1), NAME044 varchar(50), TICKET044 varchar(50), PO044 varchar(32), SEAT045STATUS varchar(1), NAME045 varchar(50), TICKET045 varchar(50), PO045 varchar(32), SEAT046STATUS varchar(1), NAME046 varchar(50), TICKET046 varchar(50), PO046 varchar(32), SEAT047STATUS varchar(1), NAME047 varchar(50), TICKET047 varchar(50), PO047 varchar(32), SEAT048STATUS varchar(1), NAME048 varchar(50), TICKET048 varchar(50), PO048 varchar(32), SEAT049STATUS varchar(1), NAME049 varchar(50), TICKET049 varchar(50), PO049 varchar(32), SEAT050STATUS varchar(1), NAME050 varchar(50), TICKET050 varchar(50), PO050 varchar(32), STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  OWNER  varchar(40),  OWNER2  varchar(40),  PRIMARY  KEY(  SID), FOREIGN  KEY  (  LOCATION)  REFERENCES "+schemaName+".LOCATION  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
//sep09 2019 used as holding table to map csv to pojo columns, no need to backup this table, so no _b or _c
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".IMPORTCSV  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, TABLENM varchar(60), ROW  varchar(2) not null,  COLUMN01  varchar(159),  COLUMN02  varchar(159),  COLUMN03  varchar(159),  COLUMN04  varchar(159),  COLUMN05  varchar(159),  COLUMN06  varchar(159),  COLUMN07  varchar(159),  COLUMN08  varchar(159),  COLUMN09  varchar(159),  COLUMN10  varchar(159),  COLUMN11  varchar(159),  COLUMN12  varchar(159),  COLUMN13  varchar(159),  COLUMN14  varchar(159),  COLUMN15  varchar(159),  COLUMN16  varchar(159),  COLUMN17  varchar(159),  COLUMN18  varchar(159),  COLUMN19  varchar(159),  COLUMN20  varchar(159),  COLUMN21  varchar(159),  COLUMN22  varchar(159),  COLUMN23  varchar(159),  COLUMN24  varchar(159),  COLUMN25  varchar(159),  COLUMN26  varchar(159),  COLUMN27  varchar(159),  COLUMN28  varchar(159),  COLUMN29  varchar(159),  COLUMN30  varchar(159),  COLUMN31  varchar(159),  COLUMN32  varchar(159),  COLUMN33  varchar(159),  COLUMN34  varchar(159),  COLUMN35  varchar(159),  COLUMN36  varchar(159),  COLUMN37  varchar(159),  COLUMN38  varchar(159),  COLUMN39  varchar(159),  COLUMN40  varchar(159),  COLUMN41  varchar(159),  COLUMN42  varchar(159),  COLUMN43  varchar(159),  COLUMN44  varchar(159),  COLUMN45  varchar(159),  COLUMN46  varchar(159),  COLUMN47  varchar(159),  COLUMN48  varchar(159),  COLUMN49  varchar(159),  COLUMN50  varchar(159),  COLUMN51  varchar(159),  COLUMN52  varchar(159),  COLUMN53  varchar(159),  COLUMN54  varchar(159),  COLUMN55  varchar(159),  COLUMN56  varchar(159),  COLUMN57  varchar(159),  COLUMN58  varchar(159),  COLUMN59  varchar(159),  COLUMN60  varchar(159),  COLUMN61  varchar(159),  COLUMN62  varchar(159),  COLUMN63  varchar(159),  COLUMN64  varchar(159),  COLUMN65  varchar(159),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  NOTES  varchar(60),  OWNER  varchar(40), OWNER2  varchar(40), PRIMARY  KEY(SID), UNIQUE (TABLENM,ROW,OWNER2)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".ITEMPROFL  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, ITEMID  INT, ROW varchar(20), LENGTH varchar(255), WIDTH varchar(255),  HEIGHT  varchar(30),  SIZEUNIT  varchar(30), WEIGHT varchar(30), WEIGHTUNIT  varchar(30),  SHIPMODE  varchar(30),  COLOUR  varchar(30),  MATERIAL  boolean,  MADEIN  boolean,  SKU  boolean,  SALESCHANNEL  varchar(5),  COMPAREPRICE  varchar(5),  CUSTOMSCODE  varchar(5),  PAGETITLE  varchar(5),  METADESCRIPTION  varchar(5),  URLHANDLE  varchar(5),  RATING  varchar(30),  POINTS  varchar(30),  POINTSUNIT  varchar(30),  DTSTYLE  varchar(30),  FTSTYLE  varchar(20),  DEFAULTR  varchar(3),  DEFAULTC  varchar(3),  DBNAME  varchar(20),  ROOTDIR  varchar(35),  KEYORDER  varchar(3),  MARGIN  numeric(14,2),  FOOTER  numeric(14,2),  LISTBUILDC  boolean,  LISTBUILDV  boolean,  LISTBUILDE  boolean,  LISTBROWNC  INT,  LISTBROWNV  INT,  LISTBROWNE  INT,   STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  NOTES  varchar(4096000),  DOCMNT  varchar(90),  OWNER  varchar(40),  OWNER2  varchar(40), PRIMARY  KEY(SID), FOREIGN KEY(ITEMID) REFERENCES  "+schemaName+".item(SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();

      //FacesMessages.instance().add("create_tables_done");
      //null means global message, for a specific button etc use componentId which is tied to jsf ID
      //FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
      //FacesMessage.SEVERITY_INFO,bundle.getString("create")+" "+bundle.getString("tables")+" "+bundle.getString("done"),""));
      log.info("create tables for "+schemaName+ " done");
       return "create tables done";
      }catch (Exception e) {
       log.severe("create tables exception for "+schemaName+", error "+e.getMessage());
       return null;
      }

     }
     public String  createTablesMsql(String schemaName) {
      //mysql uses NOT NULL AUTO_INCREMENT instead of Identity, longblob instead of image or bytea
      if(schemaName == null || schemaName.isEmpty()){
       schemaName="genapp";
      }
      //so cannot use common createTables method, copy createTables()but change

        log.info("create mysql tables for schema "+schemaName+ " done");
	 return "create tables done";
	 }

     public String  createTablesMsql_b(String schemaName) {
      //mysql uses NOT NULL AUTO_INCREMENT instead of Identity, longblob instead of image or bytea
      if(schemaName == null || schemaName.isEmpty()){
       schemaName="genapp";
      }
      //so cannot use common createTables method, copy createTables()but change

        log.info("create mysql tables for schema "+schemaName+ " done");
	 return "create tables done";
	 }

     public String  createTablesMsql_c(String schemaName) {
      //mysql uses NOT NULL AUTO_INCREMENT instead of Identity, longblob instead of image or bytea
      if(schemaName == null || schemaName.isEmpty()){
       schemaName="genapp";
      }
      //so cannot use common createTables method, copy createTables()but change

        log.info("create mysql tables for schema "+schemaName+ " done");
	 return "create tables done";
	 }

     public String  createTables_b(String dbProductName,String schemaName) {
      if(dbProductName == null || dbProductName.isEmpty()){
       dbProductName="hsql";
      }
      if(schemaName == null || schemaName.isEmpty()){
       schemaName="genapp";
      }
     // warning- sqlscript may have multiple creates under one quote mark. do not put line feeds in the middle to look nicer
     // made separate scripts because hsqldb did not support it.
     if(dbProductName.equals("msql")){
      createTablesMsql_b(schemaName);// uses auto-create for identify
      return null;
     }
     try{
     String sqlScript ="";
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".ADDRESS_b  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, ADDRESCODE  varchar(32) not null,  ADDRL1  varchar(159),  ADDRL2  varchar(159),  ADDRL3  varchar(159),  CITY  varchar(20),  PROVNSTATE  varchar(20),  COUNTRY  varchar(20),  PZCODE  varchar(20),  DESCRIPT  varchar(120),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  NOTES  varchar(60),  OWNER  varchar(40),  OWNER2  varchar(40),  PRINTMSTAT  INT,  PRINMTFLDT  TIMESTAMP, PRIMARY  KEY(SID)  ) ";
      Query q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".OPTIONS_b  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, ROW  varchar(2) not null,  OPTIONS01  varchar(159),  PURPOSE01  varchar(159),  VALUE01  varchar(159),  OPTIONS02  varchar(159),  PURPOSE02  varchar(159),  VALUE02  varchar(159),  OPTIONS03  varchar(159),  PURPOSE03  varchar(159),  VALUE03  varchar(159),  OPTIONS04  varchar(159),  PURPOSE04  varchar(159),  VALUE04  varchar(159),  OPTIONS05  varchar(159),  PURPOSE05  varchar(159),  VALUE05  varchar(159),  OPTIONS06  varchar(159),  PURPOSE06  varchar(159),  VALUE06  varchar(159),  OPTIONS07  varchar(159),  PURPOSE07  varchar(159),  VALUE07  varchar(159),  OPTIONS08  varchar(159),  PURPOSE08  varchar(159),  VALUE08  varchar(159),  OPTIONS09  varchar(159),  PURPOSE09  varchar(159),  VALUE09  varchar(159),  OPTIONS10  varchar(159),  PURPOSE10  varchar(159),  VALUE10  varchar(159),  OPTIONS11  varchar(159),  PURPOSE11  varchar(159),  VALUE11  varchar(159),  OPTIONS12  varchar(159),  PURPOSE12  varchar(159),  VALUE12  varchar(159),  OPTIONS13  varchar(159),  PURPOSE13  varchar(159),  VALUE13  varchar(159),  OPTIONS14  varchar(159),  PURPOSE14  varchar(159),  VALUE14  varchar(159),  OPTIONS15  varchar(159),  PURPOSE15  varchar(159),  VALUE15  varchar(159),  OPTIONS16  varchar(159),  PURPOSE16  varchar(159),  VALUE16  varchar(159),  OPTIONS17  varchar(159),  PURPOSE17  varchar(159),  VALUE17  varchar(159),  OPTIONS18  varchar(159),  PURPOSE18  varchar(159),  VALUE18  varchar(159),  OPTIONS19  varchar(159),  PURPOSE19  varchar(159),  VALUE19  varchar(159),  OPTIONS20  varchar(159),  PURPOSE20  varchar(159),  VALUE20  varchar(159),  OPTIONS21  varchar(159),  PURPOSE21  varchar(159),  VALUE21  varchar(159),  OPTIONS22  varchar(159),  PURPOSE22  varchar(159),  VALUE22  varchar(159),  OPTIONS23  varchar(159),  PURPOSE23  varchar(159),  VALUE23  varchar(159),  OPTIONS24  varchar(159),  PURPOSE24  varchar(159),  VALUE24  varchar(159),  OPTIONS25  varchar(159),  PURPOSE25  varchar(159),  VALUE25  varchar(159),  OPTIONS26  varchar(159),  PURPOSE26  varchar(159),  VALUE26  varchar(159),  OPTIONS27  varchar(159),  PURPOSE27  varchar(159),  VALUE27  varchar(159),  OPTIONS28  varchar(159),  PURPOSE28  varchar(159),  VALUE28  varchar(159),  OPTIONS29  varchar(159),  PURPOSE29  varchar(159),  VALUE29  varchar(159),  OPTIONS30  varchar(159),  PURPOSE30  varchar(159),  VALUE30  varchar(159),  OPTIONS31  varchar(159),  PURPOSE31  varchar(159),  VALUE31  varchar(159),  OPTIONS32  varchar(159),  PURPOSE32  varchar(159),  VALUE32  varchar(159),  OPTIONS33  varchar(159),  PURPOSE33  varchar(159),  VALUE33  varchar(159),  OPTIONS34  varchar(159),  PURPOSE34  varchar(159),  VALUE34  varchar(159),  OPTIONS35  varchar(159),  PURPOSE35  varchar(159),  VALUE35  varchar(159),  OPTIONS36  varchar(159),  PURPOSE36  varchar(159),  VALUE36  varchar(159),  OPTIONS37  varchar(159),  PURPOSE37  varchar(159),  VALUE37  varchar(159),  OPTIONS38  varchar(159),  PURPOSE38  varchar(159),  VALUE38  varchar(159),  OPTIONS39  varchar(159),  PURPOSE39  varchar(159),  VALUE39  varchar(159),  OPTIONS40  varchar(159),  PURPOSE40  varchar(159),  VALUE40  varchar(159),  OPTIONS41  varchar(159),  PURPOSE41  varchar(159),  VALUE41  varchar(159),  OPTIONS42  varchar(159),  PURPOSE42  varchar(159),  VALUE42  varchar(159),  OPTIONS43  varchar(159),  PURPOSE43  varchar(159),  VALUE43  varchar(159),  OPTIONS44  varchar(159),  PURPOSE44  varchar(159),  VALUE44  varchar(159),  OPTIONS45  varchar(159),  PURPOSE45  varchar(159),  VALUE45  varchar(159),  OPTIONS46  varchar(159),  PURPOSE46  varchar(159),  VALUE46  varchar(159),  OPTIONS47  varchar(159),  PURPOSE47  varchar(159),  VALUE47  varchar(159),  OPTIONS48  varchar(159),  PURPOSE48  varchar(159),  VALUE48  varchar(159),  OPTIONS49  varchar(159),  PURPOSE49  varchar(159),  VALUE49  varchar(159),  OPTIONS50  varchar(159),  PURPOSE50  varchar(159),  VALUE50  varchar(159),  OPTIONS51  varchar(159),  PURPOSE51  varchar(159),  VALUE51  varchar(159),  OPTIONS52  varchar(159),  PURPOSE52  varchar(159),  VALUE52  varchar(159),  OPTIONS53  varchar(159),  PURPOSE53  varchar(159),  VALUE53  varchar(159),  OPTIONS54  varchar(159),  PURPOSE54  varchar(159),  VALUE54  varchar(159),  OPTIONS55  varchar(159),  PURPOSE55  varchar(159),  VALUE55  varchar(159),  OPTIONS56  varchar(159),  PURPOSE56  varchar(159),  VALUE56  varchar(159),  OPTIONS57  varchar(159),  PURPOSE57  varchar(159),  VALUE57  varchar(159),  OPTIONS58  varchar(159),  PURPOSE58  varchar(159),  VALUE58  varchar(159),  OPTIONS59  varchar(159),  PURPOSE59  varchar(159),  VALUE59  varchar(159),  OPTIONS60  varchar(159),  PURPOSE60  varchar(159),  VALUE60  varchar(159),  OPTIONS61  varchar(159),  PURPOSE61  varchar(159),  VALUE61  varchar(159),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  NOTES  varchar(60),  OWNER  varchar(40), OWNER2  varchar(40), PRIMARY  KEY(SID), UNIQUE (ROW,OWNER2)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".CLIENT_b  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, CLIENTVERSION  varchar(5) not null,  SERIALNUM  varchar(15),  ENTERPRISECOMPANYNA  varchar(35),  DESCRIPT  varchar(120),  ADDRL1  varchar(35),  ADDRL2  varchar(35),  ADDRL3  varchar(35),  CITY  varchar(20),  PROVNSTATE  varchar(20),  COUNTRYNAME  varchar(20),  PZCODE  varchar(20),  PHONEO  varchar(30),  PHONEH  varchar(25),  PHONEC  varchar(25),  PHONEX  varchar(30),  LANADDR  varchar(35),  WANADDR  varchar(35),  LMAILADDR  varchar(35),  IMAILADDR  varchar(60),  RMAILADDR  varchar(35),  INTADDR  varchar(60),  INRADDR  varchar(35),  ENTERPRISECOMPCODE  varchar(40),  ENTERPRISECOMPSIZE  varchar(15),  BARCSIZE  varchar(12),  LEVEL  boolean,  POSKIPP  varchar(10),  LOOSEIT  boolean,  JOBSKIP  varchar(10),  CARTONFL  boolean,  PICKLIST  boolean,  PRODDESC  varchar(15),  PRODCODE  varchar(12),  NJOB  varchar(15),  NMATERIA  varchar(15),  NACTIVITY  varchar(15),  NBUTT  varchar(15),  NCUSTOME  varchar(15),  NCONTACT  varchar(15),  NVENDOR  varchar(15),  NEMPLOYEE  varchar(15),  NSCHEDULE  varchar(15),  NREJECT  varchar(15),  NRETURN  varchar(15),  NCODE  varchar(15),  MANUFID  varchar(20),  BARTYPE  varchar(4),  CADTYPE  varchar(4),  CARTYPE  varchar(4),  SHITYPE  varchar(4),  REPTYPE  varchar(4),  LOCTYPE  varchar(4),  BARCOL  boolean,  CARCOL  boolean,  CADCOL  boolean,  SHICOL  boolean,  REPCOL  boolean,  LOCCOL  boolean,  ALTSERIA  boolean,  COUNTRYCODE  varchar(3),  NALTSERI  varchar(12),  SCRCOLOR  varchar(255),  HILCOLOR  varchar(255),  TEXTCOLOR  varchar(255),  BACCOLOR  varchar(255),  DATETYPE  varchar(7), CURRCODE  varchar(3),  PRINBAR  boolean,  BARPRINT  varchar(4),  CARPRINT  varchar(4),  CADPRINT  varchar(4),  LOCPRINT  varchar(4),  SHIPRINT  varchar(4),  REPPRINT  varchar(4),  BARPRTY  varchar(4),  REPPRTY  varchar(4),  CARPRTY  varchar(4),  CADPRTY  varchar(4),  SHIPRTY  varchar(4),  LOCPRTY  varchar(4),  ALTSELEN  INT,  CUSTOLEN  INT,  CARCSIZE  varchar(12),  CADCSIZE  varchar(12),  SHICSIZE  varchar(12),  REPCSIZE  varchar(12),  LOCCSIZE  varchar(12),  CS  varchar(15),  NCONFTYP  varchar(12),  NLOCATIO  varchar(12),  NDIVCODE  varchar(12),  NDEPCODE  varchar(12),  NADDCODE  varchar(12),  NFLOOR  varchar(12),  NROOM  varchar(12),  NRACK  varchar(12),  MENUTYPE  varchar(3),  PADTYPE  varchar(4),  NRATE1TA  varchar(12),  NRATE2TA  varchar(12),  DEFCONFT varchar(8)  ,  BEEPSOU  boolean,  CONFIRM  boolean,  LINEFEED  boolean,  REFBARADJ  INT,  SHIBARADJ  INT,  CUSBARADJ  INT,  LOCBARADJ  INT,  CARBARADJ  INT,  NCORDER  varchar(12),  NSPERSON  varchar(12),  PROMPTI  boolean,  CUSTOMERQUOTENB  varchar(15),  CUSTOMERQUOTEN  INT,  CUSTOMERQUOTENA  varchar(15),  CUSTOMERORDERNB  varchar(15),  CUSTOMERORDERN  INT,  CUSTOMERORDERNA  varchar(15),  VENDORORDERNB  varchar(15),  VENDORORDERN  INT,  VENDORORDERNA  varchar(15),JOBNB  varchar(15),  JOBN  INT,  JOBNA  varchar(15),  CUSTOMERINVOICENB  varchar(15),  CUSTOMERINVOICEN  INT,  CUSTOMERINVOICENA  varchar(15),  VENDORINVOICENB  varchar(15),  VENDORINVOICEN  INT,  VENDORINVOICENA  varchar(15),  CUSTOMERPICKNB  varchar(15),  CUSTOMERPICKN  INT,  CUSTOMERPICKNA  varchar(15),  VENDORQUOTENB  varchar(15),  VENDORQUOTEN  INT,  VENDORQUOTENA  varchar(15),  CUSTOMERPAYMNTNB  varchar(15),  CUSTOMERPAYMNTN  INT,  CUSTOMERPAYMNTNA  varchar(15),  VENDORPAYMNTNB  varchar(15),  VENDORPAYMNTN  INT,  VENDORPAYMNTNA  varchar(15),  VENDORCHQNB  varchar(15),  VENDORCHQN  INT,  VENDORCHQNA  varchar(15),  TASKNB  varchar(15),  TASKN  INT,  TASKNA  varchar(15),  ARSEQB  varchar(15),  ARSEQ  INT,  ARSEQA  varchar(15),  APSEQB  varchar(15),  APSEQ  INT,  APSEQA  varchar(15),  GLSEQB  varchar(15),  GLSEQ  INT,  GLSEQA  varchar(15),  PASEQB  varchar(15),  PASEQ  INT,  PASEQA  varchar(15),  ICSEQB  varchar(15),  ICSEQ  INT,  ICSEQA  varchar(15),  JOSEQB  varchar(15),  JOSEQ  INT,  JOSEQA  varchar(15),  SGLENTRY  varchar(15),  TAX1CODE  varchar(25),  TAX2CODE  varchar(25),  TAX3CODE  varchar(25),  NDECIMAL  INT,  EDIPASSW  varchar(10),  INTPASSW  varchar(15),  INRPASSW  varchar(10),  IMLPASSW  varchar(10),  RMLPASSW  varchar(10),  LMLPASSW  varchar(10),  HOSPASSW  varchar(10),  LANPASSW  varchar(10),  WANPASSW  varchar(10),  ASHOSTID  varchar(35),  HDSTYLE  varchar(30),  MTSTYLE  varchar(30),  STSTYLE  varchar(30),  DTSTYLE  varchar(30),  FTSTYLE  varchar(30),  DEFAULTR  varchar(15),  DEFAULTC  varchar(3),  DBNAME  varchar(35),  ROOTDIR  varchar(60),  KEYORDER  varchar(3),  CURRBUSDAT  TIMESTAMP,  LASTBUSDAT  TIMESTAMP,  CURRCALDAT  TIMESTAMP,  LASTCALDAT  TIMESTAMP,  PREPROCESS  boolean,  MARGIN  INT,  FOOTER  INT,  LASTUSER  varchar(10),  LISTBUILDC  boolean,  LISTBUILDV  boolean,  LISTBUILDE  boolean,  LISTBROWNC  INT,  LISTBROWNV  INT,  LISTBROWNE  INT,  SMTPSERVER  varchar(30),  SMTPUSER  varchar(35),  SMTPPASS  varchar(20),  POP3SERVER  varchar(30),  POP3USER  varchar(35),  POP3PASS  varchar(20),  SMATCODE  varchar(15),  FYREND  TIMESTAMP,  FPERIODS  INT,  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  NOTES  varchar(60),  OWNER  varchar(40), OWNER2  varchar(40),  EMPLOYEEORDERNB  varchar(15),  EMPLOYEEORDERN  INT,  EMPLOYEEORDERNA  varchar(15),  licensetype  varchar(15),licensestart  TIMESTAMP,licenseend  TIMESTAMP, apiclientid  varchar(255),apiclientsecret  varchar(12000),  CURRSYMB  varchar(4),  PRIMARY  KEY(SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".DEPARTMENT_b  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, DEPCODE  varchar(32) not null,  DESCRIPT  varchar(120),  GLPREFIX varchar(20), STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  NOTES  varchar(60),  OWNER  varchar(40), OWNER2  varchar(40), PRIMARY  KEY(SID)   )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".COMPANY_b  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, COMPANYCODE  varchar(32) not null,  DESCRIPT  varchar(120),  LEGALNAME  varchar(60),  MAILTOCODE INT , GLPREFIX varchar(20), STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  NOTES  varchar(60),  OWNER  varchar(40), OWNER2  varchar(40),  PRIMARY  KEY(SID),  FOREIGN  KEY  (  MAILTOCODE  )  REFERENCES "+schemaName+".ADDRESS_b(  SID  )  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".CONTROL_b  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, CONTROLCODE  varchar(32) not null,  DESCRIPT  varchar(120),  TYPEOFCONTROL  varchar(12),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  NOTES  varchar(60),  OWNER  varchar(40), OWNER2  varchar(40), PRIMARY  KEY(SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".DIVISION_b  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, DIVCODE  varchar(32) not null, DESCRIPT  varchar(120),  GLPREFIX varchar(20), STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  NOTES  varchar(60),  OWNER  varchar(40), OWNER2  varchar(40), PRIMARY KEY(SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".LOCATION_b  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, LOCATION  varchar(32) not null,  DESCRIPT  varchar(120),  COMPANYCODE  INT  , ADDRESSCODE   INT  ,  FLOOR  varchar(25),  ROOM  varchar(25),  RACK  varchar(25),  PRINTMSTAT  INT,  PRINMTFLDT  TIMESTAMP,  EXCLUDE  boolean,  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  NOTES  varchar(60),  OWNER  varchar(40),  OWNER2  varchar(40),  PRIMARY  KEY(  SID),  FOREIGN  KEY  (  COMPANYCODE  )  REFERENCES "+schemaName+".COMPANY_b  (  SID  ),  FOREIGN  KEY  (  ADDRESSCODE  )  REFERENCES "+schemaName+".ADDRESS_b(  SID  )  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".RESIDENCY_b  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, RESIDENCY  varchar(32) not null,  DESCRIPT  varchar(120),  MUNICIPALITY  varchar(20),  PROVINCE  varchar(20),  COUNTRYNAME  varchar(20),  EXCLUDE  boolean,  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  NOTES  varchar(60),  OWNER  varchar(40),  OWNER2  varchar(40),  PRIMARY  KEY(  SID  )  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".ACCOUNT_b  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, ACCOUNT  varchar(20) not null  ,  DESCRIPT  varchar(120),  CATEGORY  varchar(20),  TYPE  varchar(12),  BUDGET  numeric(14,2),  ACTUAL  numeric(14,2),  ACTUALN  numeric(14,2),  PREVBUDG  numeric(14,2),  PREVACT  numeric(14,2),  SEQUENCE  INT,  CHILD  varchar(20),  PARENT  varchar(20),  ROLLUPQ  INT,  COMPANYCODE  INT  ,  DEPCODE  INT  ,  DIVCODE  INT  ,  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  CURRENCY  varchar(3),  NOTES  varchar(255),  OWNER  varchar(40),  OWNER2  varchar(40),  P0  numeric(14,2),  P1  numeric(14,2),  P2  numeric(14,2),  P3  numeric(14,2),  P4  numeric(14,2),  P5  numeric(14,2),  P6  numeric(14,2),  P7  numeric(14,2),  P8  numeric(14,2),  P9  numeric(14,2),  P10  numeric(14,2),  P11  numeric(14,2),  P12  numeric(14,2),  P13  numeric(14,2),  P14  numeric(14,2),  P8T  numeric(14,2),  P9T  numeric(14,2),  P10T  numeric(14,2),  P11T  numeric(14,2),  PRIMARY  KEY  (  SID  ),  FOREIGN  KEY  (  COMPANYCODE  )  REFERENCES "+schemaName+".COMPANY_b  (  SID  ),  FOREIGN  KEY  (  DEPCODE  )  REFERENCES "+schemaName+".DEPARTMENT_b  (  SID  ),  FOREIGN  KEY  (  DIVCODE  )  REFERENCES "+schemaName+".DIVISION_b  (  SID  )  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".CUSTOMER_b  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, CUSTOMER  varchar(32) not null,  DESCRIPT  varchar(120),  TITLE  varchar(12),  JOBTITLE  varchar(20),  LASTNAME  varchar(25),  FIRSTNAME  varchar(25),  MIDDLENAM  varchar(20),  CUSTOMERASCOMPANYNAME  varchar(25),  CUSTTOTL  numeric(14,2),  CUSTTQTY  numeric(14,2), COMPANYCODE INT,  LOCATION  INT  ,  MAILTOCODE  INT  ,  SHIPTOCODE  INT  ,  TAX1  boolean,  TAX2  boolean,  TAX3  boolean,  CUSTTAX1  varchar(25),  CUSTTAX2  varchar(25),  CUSTTAX3  varchar(25),  PHONEO  varchar(20),  PHONEH  varchar(16),  PHONEC  varchar(16),  PHONEX  varchar(20),  LANADDR  varchar(35),  WANADDR  varchar(35),  LMAILADDR  varchar(35),  IMAILADDR  varchar(60),  RMAILADDR  varchar(35),  INTADDR  varchar(60),  INRADDR  varchar(35),  DOB TIMESTAMP, PLACEOFBIRTH varchar(60), SEX varchar(1), AGE int, CUSRTOTL  numeric(14,2),  CUSRTQTY  numeric(14,2),  CUSMTOTL  numeric(14,2),  CUSDTOTL  numeric(14,2),  LASTORDER  varchar(20),  LASTINVOIC  varchar(20),  LASTPAYMNQ  numeric(14,2),  PRINTMSTAT  INT,  PRINMTFLDT  TIMESTAMP,  SHIPLABEL  boolean,  TYPE  varchar(10),  DEFAULTGLAC  INT,  INTEGRSET  varchar(20),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  TOTLPAID  numeric(14,2),  CONTACTED  TIMESTAMP,  BYWHO  varchar(20),  NXTCONTACT  TIMESTAMP,  VIA  varchar(11),  KEYWORDS  varchar(30),  NOTES  varchar(159),  OWNER  varchar(40),  OWNER2  varchar(40),  DOCMNT  varchar(90),  PRIMARY  KEY  (  SID  ),  FOREIGN  KEY  (  MAILTOCODE)  REFERENCES "+schemaName+".ADDRESS_b(  SID  ),  FOREIGN  KEY  (  COMPANYCODE)  REFERENCES "+schemaName+".COMPANY_b(  SID  ),  FOREIGN  KEY  (  LOCATION  )  REFERENCES "+schemaName+".LOCATION_b  (  SID ),  FOREIGN  KEY  (  DEFAULTGLAC  )  REFERENCES "+schemaName+".ACCOUNT_b  (  SID ),  FOREIGN  KEY  (  SHIPTOCODE)  REFERENCES "+schemaName+".ADDRESS_b(  SID  )  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".VENDOR_b  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, VENDOR  varchar(32) not null,  DESCRIPT  varchar(60),  TITLE  varchar(20),  JOBTITLE  varchar(20),  LASTNAME  varchar(25),  FIRSTNAME  varchar(25),  MIDDLENAM  varchar(20),  VENDORASCOMPANYNAME  varchar(25),  VENDTOTL  numeric(14,2),  VENDTQTY  numeric(14,2), COMPANYCODE INT  ,  LOCATION  INT  ,  MAILTOCODE  INT  ,  PHONEO  varchar(30),  PHONEH  varchar(25),  PHONEC  varchar(25),  PHONEX  varchar(30),  LANADDR  varchar(35),  WANADDR  varchar(35),  LMAILADDR  varchar(35),  IMAILADDR  varchar(60),  RMAILADDR  varchar(35),  INTADDR  varchar(60),  INRADDR  varchar(35),  VENRTOTL  numeric(14,2),  VENRTQTY  numeric(14,2),  VENMTOTL  numeric(14,2),  VENDDTOTL  numeric(14,2),  LASTQUOTE  varchar(20),  LASTORDER  varchar(20),  LASTINVOIC  varchar(20),  LASTPAYMQ  numeric(14,2),  PRINTMSTAT  INT,  PRINMTFLDT  TIMESTAMP,  SHIPLABEL  boolean,  TYPE  varchar(10),  SHIPTOCODE  INT  ,  DEFAULTGLAC  INT,  INTEGRSET  varchar(20),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  TOTLPAID  numeric(14,2),  CONTACTED  TIMESTAMP,  BYWHO  varchar(20),  KEYWORDS  varchar(30),  NOTES  varchar(60),  OWNER  varchar(40),  OWNER2  varchar(40),  DOCMNT  varchar(90),  PRIMARY  KEY  (  SID),  FOREIGN  KEY  (  MAILTOCODE)  REFERENCES "+schemaName+".ADDRESS_b(  SID  ),  FOREIGN  KEY  (  COMPANYCODE)  REFERENCES "+schemaName+".COMPANY_b(  SID  ),  FOREIGN  KEY  (  LOCATION  )  REFERENCES "+schemaName+".LOCATION_b  (  SID ),  FOREIGN  KEY  (  DEFAULTGLAC  )  REFERENCES "+schemaName+".ACCOUNT_b  (  SID ),  FOREIGN  KEY  (  SHIPTOCODE)  REFERENCES "+schemaName+".ADDRESS_b(  SID  )  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".EMPLOYEE_b  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, EMPLOYEE  varchar(32) not null,  DESCRIPT  varchar(120),  TITLE  varchar(20),  JOBTITLE  varchar(20),  LASTNAME  varchar(25),  FIRSTNAME  varchar(25),  MIDDLENAM  varchar(20),  COMPANYCODE  INT  ,  EMPLTOTL  numeric(14,2),  EMPLTQTY  numeric(14,2),  DIVCODE  INT  ,  DEPCODE  INT  ,  LOCATION  INT  ,  RESIDENCY  INT  ,  MAILTOCODE  INT  ,  TAX1  boolean,  TAX2  boolean,  TAX3  boolean,  CUSTTAX1  varchar(25),  CUSTTAX2  varchar(25),  CUSTTAX3  varchar(25),  PHONEO  varchar(30),  PHONEH  varchar(25),  PHONEC  varchar(25),  PHONEX  varchar(30),  LANADDR  varchar(35),  WANADDR  varchar(35),  LMAILADDR  varchar(35),  IMAILADDR  varchar(60),  RMAILADDR  varchar(35),  INTADDR  varchar(60),  INRADDR  varchar(35),  EMPRTOTL  numeric(14,2),  EMPRTQTY  numeric(14,2),  EMPMTOTL  numeric(14,2),  EMPDTOTL  numeric(14,2),  LASTQUOTE  varchar(20),  LASTORDER  varchar(20),  LASTINVOIC  varchar(20),  LASTPAYMQ  numeric(14,2),  PRINTMSTAT  INT,  PRINMTFLDT  TIMESTAMP,  SHIPLABEL  boolean,  SHIPTOCODE  INT  ,  TYPE  varchar(12),  DEFAULTGLAC  INT,  INTEGRSET  varchar(20),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  CONTACTED  TIMESTAMP,  BYWHO  varchar(20),  KEYWORDS  varchar(30),  NOTES  varchar(60),  OWNER  varchar(40),  OWNER2  varchar(40),  DOCMNT  varchar(90),  PRIMARY  KEY  (  SID),  FOREIGN  KEY  (  DEPCODE  )  REFERENCES "+schemaName+".DEPARTMENT_b  (  SID  ),  FOREIGN  KEY  (  DIVCODE  )  REFERENCES "+schemaName+".DIVISION_b  (  SID  ),  FOREIGN  KEY  (  COMPANYCODE  )  REFERENCES "+schemaName+".COMPANY_b  (  SID  ),  FOREIGN  KEY  (  MAILTOCODE  )  REFERENCES "+schemaName+".ADDRESS_b(  SID  ),  FOREIGN  KEY  (  LOCATION  )  REFERENCES "+schemaName+".LOCATION_b  (  SID  ),  FOREIGN  KEY  (  DEFAULTGLAC  )  REFERENCES "+schemaName+".ACCOUNT_b  (  SID ),  FOREIGN  KEY  (  RESIDENCY)  REFERENCES "+schemaName+".RESIDENCY_b  (  SID  ),  FOREIGN  KEY  (  SHIPTOCODE)  REFERENCES "+schemaName+".ADDRESS_b(  SID  )  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".VCONTACT_b  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, CONTACT  varchar(20)  not null ,  VENDOR  INT,  TITLE  varchar(20),  JOBTITLE  varchar(20),  LASTNAME  varchar(25),  FIRSTNAME  varchar(25),  MIDDLENAM  varchar(20),  PHONEO  varchar(25),  PHONEH  varchar(25),  PHONEC  varchar(25),  PHONEX  varchar(20),  LANADDR  varchar(35),  WANADDR  varchar(35),  LMAILADDR  varchar(35),  IMAILADDR  varchar(60),  RMAILADDR  varchar(35),  INTADDR  varchar(60),  INRADDR  varchar(35),  LOCATION  INT,  MAILTOCODE  INT  ,  SHIPTOCODE  INT  ,  PRINTSTA  INT,  SHIPLABEL  boolean,  TYPE  varchar(12),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  KEYWORDS  varchar(30),  NOTES  varchar(60),  OWNER  varchar(40),  OWNER2  varchar(40),  DOCMNT  varchar(90),  PRIMARY  KEY  (  SID),  FOREIGN  KEY  (  MAILTOCODE)  REFERENCES "+schemaName+".ADDRESS_b(  SID  ),  FOREIGN  KEY  (  SHIPTOCODE)  REFERENCES "+schemaName+".ADDRESS_b(  SID  ),  FOREIGN  KEY  (  LOCATION)  REFERENCES "+schemaName+".LOCATION_b(  SID  ),  FOREIGN  KEY  (  VENDOR)  REFERENCES "+schemaName+".VENDOR_b  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".CCONTACT_b  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, CONTACT  varchar(32) not null,  CUSTOMER  INT,  TITLE  varchar(20),  JOBTITLE  varchar(20),  LASTNAME  varchar(25),  FIRSTNAME  varchar(25),  MIDDLENAM  varchar(20),  TAX1  boolean,  TAX2  boolean,  TAX3  boolean,  CUSTTAX1  varchar(25),  CUSTTAX2  varchar(25),  CUSTTAX3  varchar(25),  PHONEO  varchar(16),  PHONEH  varchar(16),  PHONEC  varchar(16),  PHONEX  varchar(20),  LANADDR  varchar(35),  WANADDR  varchar(35),  LMAILADDR  varchar(35),  IMAILADDR  varchar(60),  RMAILADDR  varchar(35),  INTADDR  varchar(60),  INRADDR  varchar(35),  LOCATION  INT,  MAILTOCODE  INT  ,  SHIPTOCODE  INT  ,  PRINTMSTAT  INT,  PRINMTFLDT  TIMESTAMP,  SHIPLABEL  boolean,  TYPE  varchar(12),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  KEYWORDS  varchar(30),  NOTES  varchar(60),  OWNER  varchar(40),  OWNER2  varchar(40),  DOCMNT  varchar(90),  PRIMARY  KEY  (  SID),  FOREIGN  KEY  (  MAILTOCODE)  REFERENCES "+schemaName+".ADDRESS_b(  SID  ),  FOREIGN  KEY  (  SHIPTOCODE)  REFERENCES "+schemaName+".ADDRESS_b(  SID  )  ,  FOREIGN  KEY  (  LOCATION)  REFERENCES "+schemaName+".LOCATION_b(  SID  )  ,  FOREIGN  KEY  (  CUSTOMER  )  REFERENCES "+schemaName+".CUSTOMER_b  (  SID  )  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".PERIODDATES_b  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, PERIOD  varchar(2) not null,  DESCRIPT  varchar(120),  STARTDATE  TIMESTAMP,  ENDDATE  TIMESTAMP,  STARTOFWEEK INT, STARTOFBWEEK INT, ENDOFBWEEK INT, STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  NOTES  varchar(255),  OWNER  varchar(40),  OWNER2  varchar(40),  PRIMARY  KEY  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".ACPERIOD_b  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, ROWID varchar(2) not null, CURRPERIOD  varchar(2),  DESCRIPT  varchar(120),  CURRBUSDATE  TIMESTAMP,  CURRCALDATE  TIMESTAMP,  CURRLOCALDATE  TIMESTAMP,  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  NOTES  varchar(255),  OWNER  varchar(40),  OWNER2  varchar(40),  PRIMARY KEY(SID) )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".WAGEEARNER_b  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, WAGEEARNERID  varchar(32) not null,  EMPLOYEE  INT  ,  SIN  varchar(20),  BIRTHDT  TIMESTAMP,  FEDCLAIM  numeric(14,2),  PROVCLAIM  numeric(14,2),  PAYYRFREQ  INT,  PAYPERIOD  INT,  WCB  boolean,  WCBYTD  numeric(14,2),  EMPLINSUR  boolean,  INSYTD  numeric(14,2),  VACRETAIN  boolean,  VACATONYT  numeric(14,2),  WAGEUNIT  varchar(20),  WAGERATE  numeric(14,2),  OTIMEUNIT  varchar(20),  OTIMERATE  numeric(14,2),  WAGEUNITS  numeric(14,2),  OTIMUNITS  numeric(14,2),  WAGEOUT  numeric(14,2),  OVTIMEOUT  numeric(14,2),  SALARYOUT  numeric(14,2),  COMMISSION  numeric(14,2),  BENEFITS  numeric(14,2),  VACATION  numeric(14,2),  VACPAYOUT  numeric(14,2),  ADVANCE  numeric(14,2),  PENSION  numeric(14,2),  AFTERTAX  boolean,  UNIONDUES  numeric(14,2),  MEDICAL  numeric(14,2),  FINCOMETX  numeric(14,2),  PINCOMETX  numeric(14,2),  THISPAYA  numeric(14,2),  LASTPAYA  numeric(14,2),  PAYYTD  numeric(14,2),  FPENSIYTD  numeric(14,2),  PPENSIYTD  numeric(14,2),  ITAXYTD  numeric(14,2),  PTAXYTD  numeric(14,2),  GRPAYYTD  numeric(14,2),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  NOTES  varchar(255),  OWNER  varchar(40),  OWNER2  varchar(40),  DOCMNT  varchar(90),  PRIMARY  KEY  (  SID),  FOREIGN  KEY  (  EMPLOYEE)  REFERENCES "+schemaName+".EMPLOYEE_b  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".ARTHATBL_b  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, USAGE  varchar(32) not null,  WCBPERCNT  numeric(14,2),  INSFACTOR  numeric(14,2),  VACATONRATE  numeric(14,2),  PENSIONMAX  numeric(14,2),  WCBMAX  numeric(14,2),  INSMAX  numeric(14,2),  ITAXLV0RATE  numeric(14,2),  ITAXLV1RATE  numeric(14,2),  ITAXLV2RATE  numeric(14,2),  ITAXLV3RATE  numeric(14,2),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  NOTES  varchar(255),  OWNER  varchar(40),  OWNER2  varchar(40),  PRIMARY  KEY  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".ROLLUPGROUP_b  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, GROUPID  varchar(32) not null,  DESCRIPT  varchar(120),  TYPE  varchar(10),  CURRPW  varchar(20),  EXPIRY  TIMESTAMP,  CURRENCY  varchar(3),  PERIOD0B  numeric(14,2),  PERIOD0  numeric(14,2),  PERIODTOTALSB  numeric(14,2),  PERIODTOTALS numeric(14,2),  PERIOD1BUDGET  numeric(14,2),  PERIOD1ACTUAL  numeric(14,2),  PERIOD2B  numeric(14,2),  PERIOD2  numeric(14,2),  PERIOD3B  numeric(14,2),  PERIOD3  numeric(14,2),  PERIOD4B  numeric(14,2),  PERIOD4  numeric(14,2),  PERIOD5B  numeric(14,2),  PERIOD5  numeric(14,2),  PERIOD6B  numeric(14,2),  PERIOD6  numeric(14,2),  PERIOD7B  numeric(14,2),  PERIOD7  numeric(14,2),  PERIOD8B  numeric(14,2),  PERIOD8  numeric(14,2),  PERIOD9B  numeric(14,2),  PERIOD9  numeric(14,2),  PERIOD10B  numeric(14,2),  PERIOD10  numeric(14,2),  PERIOD11B  numeric(14,2),  PERIOD11  numeric(14,2),  PERIOD12B  numeric(14,2),  PERIOD12  numeric(14,2),  PERIODNB  numeric(14,2),  PERIODN  numeric(14,2),  NOTES  varchar(60),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  OWNER  varchar(40),  OWNER2  varchar(40),  PRIMARY  KEY  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".MEMBERSGROUP_b  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, GROUPID  varchar(32) not null,  DESCRIPT  varchar(120),  QUANTITY numeric(14,2),  MODE  boolean,  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  OWNER  varchar(40),  OWNER2  varchar(40), PRIMARY  KEY(SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".ARTHAHIST_b  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, WAGEEARNER  varchar(32) not null,  SIN  varchar(12),  PERIOD  INT,  MONTH  INT,  CCYY  INT,  VACATION  numeric(14,2),  WAGE  numeric(14,2),  OVERTIME  numeric(14,2),  SALARY  numeric(14,2),  COMMISSION  numeric(14,2),  BENEFIT  numeric(14,2),  FINCOMETX  numeric(14,2),  PINCOMETX  numeric(14,2),  WCBOUT  numeric(14,2),  EMPLINSUR  numeric(14,2),  VACPAYOUT  numeric(14,2),  ADVANCE  numeric(14,2),  FPENSOBTX  numeric(14,2),  FPENSOATX  numeric(14,2),  UNIONDUES  numeric(14,2),  MEDICAL  numeric(14,2),  PAYAMT  numeric(14,2),  NOTES  varchar(60),  NOTES2  varchar(120),  CHQNUMBER  varchar(20),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  OWNER  varchar(40), OWNER2  varchar(40), PRIMARY  KEY(SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".GLENTRIES_b  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, GLENTRYNO  varchar(32) not null,  DESCRIPT  varchar(120),  REFCODE  varchar(20),  PERIOD  INT,  POSTDATE  TIMESTAMP,  CALENDARDT  TIMESTAMP,  DEPCODE  INT,  DIVCODE  INT,  ACCOUNT  INT,   TDEBITAMT  numeric(14,2),  TCREDITAMT  numeric(14,2),  NOTES  varchar(60),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  OWNER  varchar(40), OWNER2  varchar(40), PRIMARY  KEY(SID)  , FOREIGN  KEY  ( PERIOD)  REFERENCES "+schemaName+".PERIODDATES_b (  SID),  FOREIGN  KEY  ( ACCOUNT)  REFERENCES "+schemaName+".ACCOUNT_b  (  SID) )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".GENTRIESDETAILS_b  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, GLENTRYSIDNO  INT  not null ,  LINE  INT,  DEPCODE  INT,  DIVCODE  INT,  ACCOUNT  INT,  DEBITAMT  numeric(14,2),  CREDITAMT  numeric(14,2),  LINETOTL  numeric(14,2), NOTES  varchar(60),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  OWNER  varchar(40), OWNER2  varchar(40), PRIMARY  KEY(  SID), FOREIGN  KEY  (  GLENTRYSIDNO)  REFERENCES "+schemaName+".GLENTRIES_b  (  SID) ,  FOREIGN  KEY  ( ACCOUNT)  REFERENCES "+schemaName+".ACCOUNT_b  (  SID)   )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".HOLIDAY_b  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, SHOLIDAY  varchar(32) not null,  HOLIDAY  TIMESTAMP,  DESCRIPT  varchar(120),  TYPE  varchar(12),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  EMPLOYEE  INT  ,  RESIDENCY  INT  ,  OWNER  varchar(40),  OWNER2  varchar(40),  PRIMARY  KEY  (  SID),  FOREIGN  KEY  (  RESIDENCY)  REFERENCES "+schemaName+".RESIDENCY_b  (  SID  ),  FOREIGN  KEY  (  EMPLOYEE)  REFERENCES "+schemaName+".EMPLOYEE_b  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".JOURNAL_b  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, SPOSTDATE  VARCHAR(25) not null,  POSTDATE  TIMESTAMP,  CALENDARDT  TIMESTAMP,  JRNLTYPE  varchar(12),  JNLSEQB  varchar(15),  JNLSEQ  INT,  JNLSEQS  varchar(15),  PERIOD  INT,  ACCOUNT  varchar(20),  DEBIT  numeric(14,2),  CREDIT  numeric(14,2),  XREFERENCE  varchar(20),  DESCRIPT  varchar(120),  STATUSFL  INT,  OWNER  varchar(40),  OWNER2  varchar(40),  PRIMARY  KEY  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".CJOURNAL_b  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, SPOSTDATE  VARCHAR(25) not null,  POSTDATE  TIMESTAMP,  CALENDARDT  TIMESTAMP,  JRNLTYPE  varchar(12),  JNLSEQB  varchar(15),  JNLSEQ  INT,  JNLSEQS  varchar(15),  PERIOD  INT,  CONTROL  varchar(20),  DEBIT  numeric(14,2),  CREDIT  numeric(14,2),  XREFERENCE  varchar(20),  DESCRIPT  varchar(120),  STATUSFL  INT,  OWNER  varchar(40),  OWNER2  varchar(40),  PRIMARY  KEY  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".JJOURNAL_b  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, SPOSTDATE  VARCHAR(25) not null,  POSTDATE  TIMESTAMP,  CALENDARDT  TIMESTAMP,  JRNLTYPE  varchar(12),  JNLSEQB  varchar(15),  JNLSEQ  INT,  JNLSEQS  varchar(15),  PERIOD  INT,  JOB  varchar(20),  DEBIT  numeric(14,2),  CREDIT  numeric(14,2),  XREFERENCE  varchar(20),  DESCRIPT  varchar(120),  STATUSFL  INT,  OWNER  varchar(40),  OWNER2  varchar(40),  PRIMARY  KEY  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".ITEM_b  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, MATCODE  varchar(32) not null,  QUANTITY  numeric(14,2),  DESCRIPT  varchar(120),  DATEADDED  TIMESTAMP,   SOURCE1  varchar(35),  SOURCE2  varchar(35),  UPCCODE  varchar(25),  COST  numeric(14,2),  REPLCOST  numeric(14,2),  SELPRICE  numeric(14,2),  SPRICOLD  numeric(14,2),  SPRICNEW  numeric(14,2),  SPRICEFFDT  TIMESTAMP,  SHIPCODE  varchar(25),  PRINTMSTAT  INT,  PRINMTFLDT  TIMESTAMP,  MISCCODE1  varchar(25),  MISCCODE2  varchar(25),  QTYLEVEL1  numeric(14,2),  UNIT  varchar(12),  CASEQTY  numeric(14,2),  TYPE  varchar(12),  TAX1  boolean,  TAX2  boolean,  TAX3  boolean,  ALIASCODE  varchar(25),  PARENTCODE  INT  ,  AVGPRICE  numeric(14,2),  AVGCOST  numeric(14,2),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  SUBCODESN  VARCHAR(35),  SUBCODESN2 VARCHAR(35),  SUBCODESN3 VARCHAR(35),  CUORDQTY  numeric(14,2),  VENORQTY  numeric(14,2),  CUPICQTY  numeric(14,2),  VENPIQTY  numeric(14,2),  CUINVQTY  numeric(14,2),  CUSHIQTY  numeric(14,2),  VENSHQTY  numeric(14,2),  EFFDATE  TIMESTAMP,  INTEGRSET  varchar(20),  NOTES  varchar(4096000),  DOCMNT  varchar(90),  OWNER  varchar(40),  OWNER2  varchar(40),  LOCATION  INT  ,  BARUPC  varchar(30),  DATEEXPIRY  TIMESTAMP,  DATETORENEW  TIMESTAMP,  PRIMARY  KEY  (  SID), FOREIGN  KEY  (  PARENTCODE)  REFERENCES "+schemaName+".ITEM_b  (  SID)  , FOREIGN  KEY  (  LOCATION  )  REFERENCES "+schemaName+".LOCATION_b  (  SID ) )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".ACTIVITY_b  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, ACTIVITYCODE  varchar(32) not null,  QUANTITY  numeric(14,2),  DESCRIPT  varchar(120),  DATE  TIMESTAMP,  SOURCE1  varchar(35),  SOURCE2  varchar(35),  UPCCODE  varchar(25),  COST  numeric(14,2),  REPLCOST  numeric(14,2),  SELPRICE  numeric(14,2),  SPRICOLD  numeric(14,2),  SPRICNEW  numeric(14,2),  SPRICEFFDT  TIMESTAMP,  SHIPCODE  varchar(25),  PRINTMSTAT  INT,  PRINMTFLDT  TIMESTAMP,  MISCCODE1  varchar(25),  MISCCODE2  varchar(25),  QTYLEVEL1  numeric(14,2),  UNIT  varchar(12),  CASEQTY  numeric(14,2),  TYPE  varchar(12),  TAX1  boolean,  TAX2  boolean,  TAX3  boolean,  ALIASCODE  varchar(25),  PARENTCODE  INT  ,  AVGPRICE  numeric(14,2),  AVGCOST  numeric(14,2),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  SUBCODESN  VARCHAR(35),  SUBCODESN2 VARCHAR(35),  SUBCODESN3 VARCHAR(35),  CUORDQTY  numeric(14,2),  VENORQTY  numeric(14,2),  CUPICQTY  numeric(14,2),  VENPIQTY  numeric(14,2),  CUINVQTY  numeric(14,2),  CUSHIQTY  numeric(14,2),  VENSHQTY  numeric(14,2),  EFFDATE  TIMESTAMP,  INTEGRSET  varchar(20),  NOTES  varchar(60),  DOCMNT  varchar(90),  OWNER  varchar(40),  OWNER2  varchar(40),  BARUPC  varchar(30),  PRIMARY  KEY  (  SID), FOREIGN  KEY  (  PARENTCODE)  REFERENCES "+schemaName+".ACTIVITY_b  (  SID)   )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".SCHEDULE_b  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, TODO  varchar(35) not null,  DESCRIPT  varchar(120),  EMPLOYEE  INT  ,  SSDATET  varchar(30),  ACTIVITYCODE  INT  ,  LOCATION  INT  ,  SDATET  TIMESTAMP,  DURATIONH  INT,  DURATIONM  INT,  STIMEH  INT,  STIMEM  INT,  STIMEAMPM  boolean,  EDATET  TIMESTAMP,  PRIORITY  boolean,  PERCNTDONE  numeric(14,2),  VENDOR  INT  ,  VONTACT  INT  ,  CUSTOMER  INT  ,  TYPE  varchar(20),  MAILTOCODE  INT  ,  OTHEREMPLO  INT,  REPEATF  varchar(20),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  PRIVATEIND  boolean,  NOTES  varchar(60),  OWNER  varchar(40),  OWNER2  varchar(40),  DOCMNT  varchar(90), MGROUP INT ,  PRIMARY  KEY  (  SID ),  FOREIGN  KEY  (  ACTIVITYCODE)  REFERENCES "+schemaName+".ACTIVITY_b  (  SID),  FOREIGN  KEY  (  CUSTOMER  )  REFERENCES "+schemaName+".CUSTOMER_b  (  SID  ),  FOREIGN  KEY  (  MGROUP  )  REFERENCES "+schemaName+".MEMBERSGROUP_b  (  SID  ),  FOREIGN  KEY  (  EMPLOYEE)  REFERENCES "+schemaName+".EMPLOYEE_b  (  SID),  FOREIGN  KEY  (  VENDOR)  REFERENCES "+schemaName+".VENDOR_b  (  SID),  FOREIGN  KEY  (  MAILTOCODE)  REFERENCES "+schemaName+".ADDRESS_b(  SID  ),  FOREIGN KEY (LOCATION)  REFERENCES "+schemaName+".LOCATION_b  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".SCHEDULEDETAILS_b  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, SCHEDULESIDNO  INT  not null ,  LINE  INT,  EMPLOYEE  INT,  VENDOR  INT,  CUSTOMER  INT,   NOTES  varchar(60),  STATUSFL  INT,  OWNER  varchar(40), OWNER2  varchar(40), PRIMARY  KEY(  SID), FOREIGN  KEY  (  SCHEDULESIDNO)  REFERENCES "+schemaName+".SCHEDULE_b  (  SID) ,  FOREIGN  KEY  ( EMPLOYEE)  REFERENCES "+schemaName+".EMPLOYEE_b  (  SID)   ,  FOREIGN  KEY  ( VENDOR)  REFERENCES "+schemaName+".VENDOR_b  (  SID)   ,  FOREIGN  KEY  ( CUSTOMER)  REFERENCES "+schemaName+".CUSTOMER_b  (  SID)   )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".\"USER_b\"  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, ID  varchar(60) not null,  CLIENT  INT  ,  EMPLOYEE  INT  ,  VENDOR  INT  ,  CUSTOMER  INT  ,  OTHERID  varchar(60),  ALEVEL  varchar(12),  BLEVEL  varchar(12),  CURRPW  varchar(40) not null,  EXPIRY  TIMESTAMP,  OLDPW  varchar(40),  TEMPORARYPASSWORD  boolean,  PASSWORDHASH  VARBINARY(1000000),  ACTIVATIONKEY varchar(60),  RESTRICT1  varchar(20),  RESTRICT2  varchar(20),  RESTRICT3  varchar(20),  ALLOW1  varchar(20),  ALLOW2  varchar(20),  ALLOW3  varchar(20),  MAXPROFLROW varchar(20), CPROFLROW varchar(20), STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  UCURRCALDA  TIMESTAMP,  PREPROCESS  boolean,  NOTES  varchar(60),  DOCMNT  varchar(90),  OWNER  varchar(40),  OWNER2  varchar(40),SIGNATURE varchar(1200),  PRIMARY  KEY  (  SID),  FOREIGN  KEY  (  CLIENT  )  REFERENCES "+schemaName+".CLIENT_b  (  SID  ),  FOREIGN  KEY  (  CUSTOMER  )  REFERENCES "+schemaName+".CUSTOMER_b  (  SID  ),  FOREIGN  KEY  (  EMPLOYEE)  REFERENCES "+schemaName+".EMPLOYEE_b  (  SID),  FOREIGN  KEY  (  VENDOR)  REFERENCES "+schemaName+".VENDOR_b  (  SID)  )";
      if(dbProductName.equals("psql")){
       sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".\"user_b\"  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, ID  varchar(60) not null,  CLIENT  INT  ,  EMPLOYEE  INT  ,  VENDOR  INT  ,  CUSTOMER  INT  ,  OTHERID  varchar(60),  ALEVEL  varchar(12),  BLEVEL  varchar(12),  CURRPW  varchar(40) not null,  EXPIRY  TIMESTAMP,  OLDPW  varchar(40),  TEMPORARYPASSWORD  boolean,  PASSWORDHASH  BYTEA,  ACTIVATIONKEY varchar(60),  RESTRICT1  varchar(20),  RESTRICT2  varchar(20),  RESTRICT3  varchar(20),  ALLOW1  varchar(20),  ALLOW2  varchar(20),  ALLOW3  varchar(20),  MAXPROFLROW varchar(20), CPROFLROW varchar(20), STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  UCURRCALDA  TIMESTAMP,  PREPROCESS  boolean,  NOTES  varchar(60),  DOCMNT  varchar(90),  OWNER  varchar(40),  OWNER2  varchar(40),SIGNATURE varchar(1200),  PRIMARY  KEY  (  SID),  FOREIGN  KEY  (  CLIENT  )  REFERENCES "+schemaName+".CLIENT_b  (  SID  ),  FOREIGN  KEY  (  CUSTOMER  )  REFERENCES "+schemaName+".CUSTOMER_b  (  SID  ),  FOREIGN  KEY  (  EMPLOYEE)  REFERENCES "+schemaName+".EMPLOYEE_b  (  SID),  FOREIGN  KEY  (  VENDOR)  REFERENCES "+schemaName+".VENDOR_b  (  SID)  )";
      }
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".USERPROFL_b  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, LOGONID  INT, ROW varchar(20), OPTION varchar(255), SELECTVALUE varchar(255),  SCRCOLOR  varchar(30),  HILCOLOR  varchar(30),  TEXTCOLOR  varchar(30),  BACCOLOR  varchar(30),  BEEPSOU  boolean,  CONFIRM  boolean,  PROMPTI  boolean,  P1  varchar(5),  P2  varchar(5),  P3  varchar(5),  P4  varchar(5),  P5  varchar(5),  P6  varchar(5),  MTSTYLE  varchar(30),  STSTYLE  varchar(30),  DTSTYLE  varchar(30),  FTSTYLE  varchar(30),  DEFAULTR  varchar(20),  DEFAULTC  varchar(3),  DBNAME  varchar(20),  ROOTDIR  varchar(35),  KEYORDER  varchar(3),  MARGIN  numeric(14,2),  FOOTER  numeric(14,2),  LISTBUILDC  boolean,  LISTBUILDV  boolean,  LISTBUILDE  boolean,  LISTBROWNC  INT,  LISTBROWNV  INT,  LISTBROWNE  INT,   STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  OWNER  varchar(40),  OWNER2  varchar(40), PRIMARY  KEY(SID), FOREIGN KEY(LOGONID) REFERENCES  "+schemaName+".\"USER_b\"(SID)  )";
      if(dbProductName.equals("psql")){
       sqlScript="CREATE  TABLE IF NOT EXISTS "+schemaName+".USERPROFL_b  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, LOGONID  INT, ROW varchar(20), OPTION varchar(255), SELECTVALUE varchar(255),  SCRCOLOR  varchar(30),  HILCOLOR  varchar(30),  TEXTCOLOR  varchar(30),  BACCOLOR  varchar(30),  BEEPSOU  boolean,  CONFIRM  boolean,  PROMPTI  boolean,  P1  varchar(5),  P2  varchar(5),  P3  varchar(5),  P4  varchar(5),  P5  varchar(5),  P6  varchar(5),  MTSTYLE  varchar(30),  STSTYLE  varchar(30),  DTSTYLE  varchar(30),  FTSTYLE  varchar(30),  DEFAULTR  varchar(20),  DEFAULTC  varchar(3),  DBNAME  varchar(20),  ROOTDIR  varchar(35),  KEYORDER  varchar(3),  MARGIN  numeric(14,2),  FOOTER  numeric(14,2),  LISTBUILDC  boolean,  LISTBUILDV  boolean,  LISTBUILDE  boolean,  LISTBROWNC  INT,  LISTBROWNV  INT,  LISTBROWNE  INT,   STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  OWNER  varchar(40),  OWNER2  varchar(40), PRIMARY  KEY(SID), FOREIGN KEY(LOGONID) REFERENCES  "+schemaName+".\"user_b\"(SID)  )";
      }
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".VENARTHA_b  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, CHQNUMBER  varchar(32) not null,  RECONCILED  varchar(12),  VENDORC  INT  ,  DATE  TIMESTAMP,  ADDRESCODE  INT,  CHQAMT  numeric(14,2),  AMTVERBOS  varchar(120),  NOTES  varchar(60),  ADVISEL1  varchar(60),  ADVISEL2  varchar(60),  ADVISEL3  varchar(60),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  OWNER  varchar(40), OWNER2  varchar(40),  PRIMARY  KEY (SID ) ,  FOREIGN  KEY  (  VENDORC  )  REFERENCES "+schemaName+".VENDOR_b  (  SID )  )" ;
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".ACINTEGR_b  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, MODULEID  varchar(12)  ,  USAGEDESCR  varchar(35),  USAGECODE  varchar(3)  ,  SETSID  varchar(20)  ,  ACCOUNT  INT  ,  EXTRAINTFIELD  varchar(20),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  NOTES  varchar(60),  OWNER  varchar(40),  OWNER2  varchar(40),  PRIMARY  KEY  (  SID),  FOREIGN  KEY  ( ACCOUNT)  REFERENCES "+schemaName+".ACCOUNT_b  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".ITEMJOB_b  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, JOBNO  varchar(32) not null,  MATCODE  INT  ,  PRODDATET  TIMESTAMP,  QTYALLOC  numeric(14,2),  PONO  varchar(20),  QTYOSTND  numeric(14,2),  QTYALSTK  numeric(14,2),  QTYISSUD  numeric(14,2),  JOBTOTL  numeric(14,2),  STATUSFL  INT,  CUSTOMEJ  INT  ,  VENDOR  INT,  STATUSFLDT  TIMESTAMP,  PRINTMSTAT  INT,  PRINMTFLDT  TIMESTAMP,  PRINTMSTATJ  INT,  PRINMTFLDTJ  TIMESTAMP,  TYPE  varchar(12),  MATCODEOUT  varchar(20),  QTYOUT  numeric(14,2),  NOTES  varchar(60),  OWNER  varchar(40),  OWNER2  varchar(40),  DOCMNT  varchar(90),  PRIMARY  KEY  (  SID),  FOREIGN  KEY  (  MATCODE)  REFERENCES "+schemaName+".ITEM_b  (  SID),  FOREIGN  KEY  (  CUSTOMEJ  )  REFERENCES "+schemaName+".CUSTOMER_b  (  SID  )  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".ACTIVITYJOB_b  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, JOBNO  varchar(32) not null,  ACTIVITYCODE  INT  ,  PRODDATET  TIMESTAMP,  QTYALLOC  numeric(14,2),  PONO  INT,  QTYOSTND  numeric(14,2),  QTYALSTK  numeric(14,2),  QTYISSUD  numeric(14,2),  JOBTOTL  numeric(14,2),  STATUSFL  INT,  CUSTOMEJ  INT  ,  VENDOR  INT,  STATUSFLDT  TIMESTAMP,  PRINTMSTAT  INT,  PRINMTFLDT  TIMESTAMP,  PRINTMSTATJ  INT,  PRINMTFLDTJ  TIMESTAMP,  TYPE  varchar(12),  MATCODEOUT  varchar(20),  QTYOUT  numeric(14,2),  NOTES  varchar(60),  OWNER  varchar(40),  OWNER2  varchar(40),  DOCMNT  varchar(90),  PRIMARY  KEY  (  SID),  FOREIGN  KEY  (  ACTIVITYCODE)  REFERENCES "+schemaName+".ACTIVITY_b  (  SID),  FOREIGN  KEY  (  CUSTOMEJ  )  REFERENCES "+schemaName+".CUSTOMER_b  (  SID  )  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".VENQUOTE_b  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, PURCHSNO  varchar(32) not null,  DELVDATET  TIMESTAMP,  VENDOR  INT  ,  MATCODE  INT  ,  REPLICATE  INT  ,  AMOUNTTOTAL  numeric(14,2),  AMOUNTOSTNDT  numeric(14,2),  QTYTOTAL  numeric(14,2),  QTYOSTNDT  numeric(14,2),  STATUSFL  INT,  CINVOICE  varchar(20),  JOBNO  varchar(20),  VPONO  varchar(20),  RFPORD  varchar(20),  STATUSFLDT  TIMESTAMP,  RCPONO  varchar(20),  ODATET  TIMESTAMP,  TERMS  varchar(20),  PRIORITY  boolean,  PRINTMSTAT  INT,  PRINMTFLDT  TIMESTAMP,  TYPE  varchar(25),  VINVOICE  varchar(20),  ATTACH  varchar(20),  SHIPCODE  varchar(20),  AGENT  INT  ,BASEAMOUNTT  numeric(14,2),  DELIVCHRGT  numeric(14,2),  MISCCHRGT  numeric(14,2),  TAX1AMTT  numeric(14,2),  TAX2AMTT  numeric(14,2),  TAX3AMTT  numeric(14,2),  STARTDATET  TIMESTAMP,  NOTES  varchar(60),  OWNER  varchar(40),  OWNER2  varchar(40),  DOCMNT  varchar(90),  PRIMARY  KEY  (  SID  ),  FOREIGN  KEY  (  VENDOR)  REFERENCES "+schemaName+".VENDOR  (  SID),  FOREIGN  KEY  (  MATCODE)  REFERENCES "+schemaName+".ITEM_b  (  SID),  FOREIGN  KEY  (  REPLICATE)  REFERENCES "+schemaName+".VENQUOTE_b  (  SID),  FOREIGN  KEY  (  AGENT)  REFERENCES "+schemaName+".EMPLOYEE_b  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".VENDORDERS_b  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, PURCHSNO  varchar(32) not null,  DELVDATET  TIMESTAMP,  VENDOR  INT  ,  MATCODE  INT  ,  AMOUNTTOTAL  numeric(14,2),  AMOUNTOSTNDT  numeric(14,2),  QTYTOTAL  numeric(14,2),  QTYOSTNDT  numeric(14,2),  STATUSFL  INT,  JOBNO  varchar(20),  VENDQNO  INT  ,  RFPORD  varchar(20),  STATUSFLDT  TIMESTAMP,  RCPONO  varchar(20),  ODATET  TIMESTAMP,  TERMS  varchar(20),  PRIORITY  boolean,  PRINTMSTAT  INT,  PRINMTFLDT  TIMESTAMP,  TYPE  varchar(25),  VINVOICE  varchar(20),  ATTACH  varchar(20),  SHIPCODE  varchar(20),  AGENT  INT  ,BASEAMOUNTT  numeric(14,2),  DELIVCHRGT  numeric(14,2),  MISCCHRGT  numeric(14,2),  TAX1AMTT  numeric(14,2),  TAX2AMTT  numeric(14,2),  TAX3AMTT  numeric(14,2),  STARTDATET  TIMESTAMP,  NOTES  varchar(60),  OWNER  varchar(40),  OWNER2  varchar(40),  DOCMNT  varchar(90),  PRIMARY  KEY(  SID),  FOREIGN  KEY  (  VENDOR)  REFERENCES "+schemaName+".VENDOR_b  (  SID),  FOREIGN  KEY  (  MATCODE)  REFERENCES "+schemaName+".ITEM_b  (  SID),  FOREIGN KEY ( VENDQNO ) REFERENCES "+schemaName+". VENQUOTE_b (  SID ), FOREIGN  KEY  (  AGENT)  REFERENCES "+schemaName+".EMPLOYEE_b  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".VSHIPMEN_b  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, SHIPCODE  varchar(32) not null,  MATCODE  INT  ,  SHIPPER  INT,  PONO  INT  ,  CPONO  INT,  INVOICE  INT,  AMOUNTTOTAL  numeric(14,2),  AMOUNTOSTNDT  numeric(14,2),  QTYTOTAL  numeric(14,2),  QTYOSTNDT  numeric(14,2),  CARRIER  varchar(20),  TYPE  varchar(12),  SHIPDATET  TIMESTAMP,  SHIPDATETA  TIMESTAMP,  TARENO  varchar(20),  PACKNO  varchar(20),  VENDOR  INT  ,  CUSTOMER  INT  ,  BILLTOCODE  INT  ,  BILLTOSAMEASSHIPTO boolean, SHIPTOCODE  INT  ,  NOTES  varchar(60),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  SERIALNO  varchar(25),  PRINTMSTAT  INT,  PRINMTFLDT  TIMESTAMP,  OWNER  varchar(40),  OWNER2  varchar(40),  PRIMARY  KEY(  SID),  FOREIGN  KEY  (  SHIPTOCODE  )  REFERENCES "+schemaName+".ADDRESS_b(  SID  ),  FOREIGN  KEY  (  BILLTOCODE)  REFERENCES "+schemaName+".ADDRESS_b(  SID  ),  FOREIGN  KEY  (  MATCODE)  REFERENCES "+schemaName+".ITEM_b  (  SID)  ,  FOREIGN  KEY  (  VENDOR  )  REFERENCES "+schemaName+".VENDOR_b  (  SID  ), FOREIGN  KEY  (  PONO  )  REFERENCES "+schemaName+".VENDORDERS_b  (  SID  ),  FOREIGN  KEY  (  CUSTOMER  )  REFERENCES "+schemaName+".CUSTOMER_b  (  SID  )  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".CUQUOTE_b  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, PURCHSNO  varchar(32) not null,  DELVDATET  TIMESTAMP,  VENDOR  INT,  AMOUNTTOTAL  numeric(14,2),  AMOUNTOSTNDT  numeric(14,2),  QTYTOTAL  numeric(14,2),  QTYOSTNDT  numeric(14,2),  STATUSFL  INT,  CUSTOMER  INT  ,  MATCODE  INT  ,  REPLICATE  INT  ,  CINVOICE  varchar(20),  ORDPRICE  numeric(14,2),  JOBNO  varchar(20),  VPONO  varchar(20),  QUOORDT  varchar(20),  STATUSFLDT  TIMESTAMP,  PRINTMSTAT  INT,  PRINMTFLDT  TIMESTAMP,  TYPE  varchar(12),  TERMS  varchar(25),  PRIORITY  boolean,  ODATET  TIMESTAMP,  SHIPCODE  INT,  ACTIVITYCODE  varchar(20),  AGENT  INT  ,BASEAMOUNTT  numeric(14,2),  DELIVCHRGT  numeric(14,2),  MISCCHRGT  numeric(14,2),  TAX1AMTT  numeric(14,2),  TAX2AMTT  numeric(14,2),  TAX3AMTT  numeric(14,2),  ATTACH  varchar(20),  NOTES  varchar(60),  OWNER  varchar(40),  OWNER2  varchar(40),  DOCMNT  varchar(90),  PRIMARY  KEY(  SID),  FOREIGN  KEY  (  CUSTOMER  )  REFERENCES "+schemaName+".CUSTOMER_b  (  SID  ),  FOREIGN  KEY  (  MATCODE)  REFERENCES "+schemaName+".ITEM_b  (  SID),  FOREIGN  KEY  (  REPLICATE)  REFERENCES "+schemaName+".CUQUOTE_b  (  SID),  FOREIGN  KEY  (  AGENT)  REFERENCES "+schemaName+".EMPLOYEE_b  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".CUORDERS_b  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, PURCHSNO  varchar(32) not null,  DELVDATET  TIMESTAMP,  CUSTOMER  INT  ,  MATCODE  INT  ,  CUQUOTE INT  , CINVOICE  INT,  JOBNO  INT,  AMOUNTTOTAL  numeric(14,2),  AMOUNTOSTNDT  numeric(14,2),  QTYTOTAL  numeric(14,2),  QTYOSTNDT  numeric(14,2),  VPONO  INT,  RFPORD  INT,  RCPONO  INT,  ODATET  TIMESTAMP,  TERMS  varchar(20),  PRIORITY  boolean,  PRINTMSTAT  INT,  PRINMTFLDT  TIMESTAMP,  TYPE  varchar(25),  VINVOICE  INT,  ATTACH  varchar(90),  AGENT  INT  ,BASEAMOUNTT  numeric(14,2),  DELIVCHRGT  numeric(14,2),  MISCCHRGT  numeric(14,2),  TAX1AMTT  numeric(14,2),  TAX2AMTT  numeric(14,2),  TAX3AMTT  numeric(14,2),  STARTDATET  TIMESTAMP,  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  NOTES  varchar(60),  OWNER  varchar(40),  OWNER2  varchar(40),  DOCMNT  varchar(90),  SHIPCODEFROMPAY  INT,  SHIPCODE  INT, BARPO  varchar(30),  PRIMARY  KEY  (  SID  ),  FOREIGN  KEY  (  CUSTOMER  )  REFERENCES "+schemaName+".CUSTOMER_b  (  SID  ),  FOREIGN  KEY  (  MATCODE)  REFERENCES "+schemaName+".ITEM_b  (  SID),  FOREIGN  KEY  (  CUQUOTE  )  REFERENCES "+schemaName+".CUQUOTE_b  (  SID  ),  FOREIGN  KEY  (  AGENT)  REFERENCES "+schemaName+".EMPLOYEE_b  (  SID) ,  FOREIGN  KEY  (  SHIPCODEFROMPAY)  REFERENCES "+schemaName+".ADDRESS_b  (  SID) , FOREIGN  KEY  (  SHIPCODE)  REFERENCES "+schemaName+".ADDRESS_b  (  SID) )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".CUINVOICE_b  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, INVOICE  varchar(32) not null,  CUSTOMER  INT  ,  MATCODE  INT  ,  INVODATE  TIMESTAMP,  AMOUNTTOTAL  numeric(14,2),  AMOUNTOSTNDT  numeric(14,2),  QTYTOTAL  numeric(14,2),  QTYOSTNDT  numeric(14,2),  PONO  INT  ,  REF1TYP  varchar(20),  REF1CODE  varchar(35),  SHIPDATET  TIMESTAMP,  SHIPTYPE  varchar(12),  SHIPCODE  varchar(20),  TERMS  varchar(20),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  TERMSDAT  TIMESTAMP,  DISCOUNP  numeric(14,2),  DISCOUDT  TIMESTAMP,  DISCOUDS  numeric(14,2),  NETDDAT  TIMESTAMP,  NETDDYS  numeric(14,2),  FOB  varchar(20),  TYPE  varchar(12),  INTEGRSET  varchar(20),  ATTACH  varchar(20),  BASEAMOUNTT  numeric(14,2),  DELIVCHRGT  numeric(14,2),  MISCCHRGT  numeric(14,2),  TAX1AMTT  numeric(14,2),  TAX2AMTT  numeric(14,2),  TAX3AMTT  numeric(14,2),  AGENT  INT  ,  NOTES  varchar(60),  PRINTMSTAT  INT,  PRINMTFLDT  TIMESTAMP,  OWNER  varchar(40),  OWNER2  varchar(40),  DOCMNT  varchar(90),  BARINVOICE  varchar(30),  PRIMARY  KEY(  SID),  FOREIGN  KEY  (  CUSTOMER  )  REFERENCES "+schemaName+".CUSTOMER_b  (  SID  ),  FOREIGN  KEY  (  MATCODE)  REFERENCES "+schemaName+".ITEM_b  (  SID),  FOREIGN  KEY  (  PONO  )  REFERENCES "+schemaName+".CUORDERS_b  (  SID  ),  FOREIGN  KEY  (  AGENT)  REFERENCES "+schemaName+".EMPLOYEE_b  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".SHIPMENT_b  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, SHIPCODE  varchar(32) not null,  MATCODE  INT  ,  SHIPPER  INT  ,  PONO  INT,  CPONO  INT  ,  INVOICE  INT  ,  AMOUNTTOTAL  numeric(14,2),  AMOUNTOSTNDT  numeric(14,2),  QTYTOTAL  numeric(14,2),  QTYOSTNDT  numeric(14,2),  CARRIER  INT,  TYPE  varchar(12),  SHIPDATET  TIMESTAMP,  SHIPDATETA  TIMESTAMP,  TARENO  varchar(20),  PACKNO  varchar(20),  CUSTOMER  INT  ,  BILLTOCODE  INT  ,  BILLTOSAMEASSHIPTO boolean, SHIPTOCODE  INT  ,  NOTES  varchar(60),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  SERIALNO  varchar(25),  PRINTMSTAT  INT,  PRINMTFLDT  TIMESTAMP,  OWNER  varchar(40),  OWNER2  varchar(40),  BARSHIPCOD  varchar(30),  PRIMARY  KEY(  SID  ),  FOREIGN  KEY  (  SHIPPER)  REFERENCES "+schemaName+".VENDOR_b  (  SID), FOREIGN  KEY  (  CARRIER)  REFERENCES "+schemaName+".VENDOR_b  (  SID),  FOREIGN  KEY  (  BILLTOCODE)  REFERENCES "+schemaName+".ADDRESS_b(  SID  ),  FOREIGN  KEY  (  SHIPTOCODE)  REFERENCES "+schemaName+".ADDRESS_b(  SID  )  ,  FOREIGN  KEY  (  MATCODE)  REFERENCES "+schemaName+".ITEM_b  (  SID),  FOREIGN  KEY  (  CUSTOMER  )  REFERENCES "+schemaName+".CUSTOMER_b  (  SID  ),  FOREIGN  KEY  (  INVOICE  )  REFERENCES "+schemaName+".CUINVOICE_b  (  SID  ),  FOREIGN  KEY  (  CPONO  )  REFERENCES "+schemaName+".CUORDERS_b  (  SID  )  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".EMPLORDERS_b  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, PURCHSNO  varchar(32) not null,  DELVDATET  TIMESTAMP,  EMPLOYEE  INT  ,  MATCODE  INT  ,  AMOUNTTOTAL  numeric(14,2),  AMOUNTOSTNDT  numeric(14,2),  QTYTOTAL  numeric(14,2),  QTYOSTNDT  numeric(14,2),  STATUSFL  INT,  JOBNO  INT,  VPONO  INT,  RFPORD  INT,  STATUSFLDT  TIMESTAMP,  RCPONO  INT,  ODATET  TIMESTAMP,  TERMS  varchar(20),  PRIORITY  boolean,  PRINTMSTAT  INT,  PRINMTFLDT  TIMESTAMP,  TYPE  varchar(25),  VINVOICE  INT,  ATTACH  varchar(20),  SHIPCODE  INT  ,  AGENT  INT  ,BASEAMOUNTT  numeric(14,2),  DELIVCHRGT  numeric(14,2),  MISCCHRGT  numeric(14,2),  TAX1AMTT  numeric(14,2),  TAX2AMTT  numeric(14,2),  TAX3AMTT  numeric(14,2),  STARTDATET  TIMESTAMP,  NOTES  varchar(60),  OWNER  varchar(40),  OWNER2  varchar(40),  DOCMNT  varchar(90),  PRIMARY  KEY(  SID),  FOREIGN  KEY  (  EMPLOYEE)  REFERENCES "+schemaName+".EMPLOYEE_b  (  SID),  FOREIGN  KEY  (  MATCODE)  REFERENCES "+schemaName+".ITEM_b  (  SID),  FOREIGN  KEY  (  SHIPCODE)  REFERENCES "+schemaName+".VSHIPMEN_b  (  SID),  FOREIGN  KEY  (  AGENT)  REFERENCES "+schemaName+".EMPLOYEE_b  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".EDITLOG_b  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, DATABASENM  varchar(20) not null  ,  RECORDNO  INT,  FIELD  varchar(20),  DATET  TIMESTAMP,  USERNAME  varchar(20),  DELETED  boolean,  PREVCHAR  varchar(30),  PREVNUM  INT,  PREVLOG  boolean,  PREVDATE  TIMESTAMP,  NEWCHAR  varchar(30),  NEWNUM  INT,  NEWLOG  boolean,  NEWDATE  TIMESTAMP,  OWNER  varchar(40), OWNER2  varchar(40), PRIMARY  KEY(SID) )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".HLOGFILE_b  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, SERIALNO  varchar(25)  not null ,  MATCODE  varchar(32),  QUANRECD  INT,  VENDOR  varchar(20),  LOCATION  varchar(20),  RECVRPT  varchar(25),  INFLG  boolean,  PHY  boolean,  DATETIN  TIMESTAMP,  DATETOUT  TIMESTAMP,  JOBNO  varchar(20),  PRINTMSTAT  INT,  PRINMTFLDT  TIMESTAMP,  PONO  varchar(20),  SCANDATET  TIMESTAMP,  QUANISSD  INT,  BUTT  varchar(25),  STATUSFL  INT,  QUANREJD  numeric(14,2),  CUSTOMER  varchar(25),  CPONO  varchar(20),  CUSTOMEJ  varchar(25),  ORGCOST  numeric(14,2),  ORGPONO  varchar(20),  ORGJOBNO  varchar(20),  ALTSERNO  varchar(25),  SELPRICE  numeric(14,2),  PHYSQTY  numeric(14,2),  SPERSON  varchar(25),  CARTONID  varchar(25),  CARTONPR  boolean,  PACKCODE  varchar(20),  TARECODE  varchar(20),  SHIPCODE  varchar(20),  TYPE  varchar(12),  STATUSFLDT  TIMESTAMP,  OWNER  varchar(40), OWNER2  varchar(40), PRIMARY  KEY(SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".CPAYMENT_b  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, PAYMENT  varchar(32) not null,  CUSTOMER  INT  ,  CINVOICE  INT  ,  CHEQDATE TIMESTAMP, PAYMENTDUEDATE timestamp, POSTINGPERIOD INT, MATCODE  INT,  INTEGRSET  varchar(20),  ACCOUNT  INT,  AMOUNTTOTAL  numeric(14,2),  AMOUNTOSTNDT  numeric(14,2), AMOUNTIN numeric(14,2),  QTYTOTAL  numeric(14,2),  QTYOSTNDT  numeric(14,2),  DISCOUNT  numeric(14,2),  BASEAMOUNTT  numeric(14,2),  DELIVCHRGT  numeric(14,2),  MISCCHRGT  numeric(14,2),  TAX1AMTT  numeric(14,2),  TAX2AMTT  numeric(14,2),  TAX3AMTT  numeric(14,2),  PAYTYPE  varchar(4),  PAYBYID  varchar(20),  PAYBYDATE  TIMESTAMP,  CURRENCY  varchar(12),  CONVRATE  numeric(14,2),  LOCAMOUNTT  numeric(14,2),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  NOTES  varchar(60),  OWNER  varchar(40),  OWNER2  varchar(40),  PRIMARY  KEY  (  SID),  FOREIGN  KEY  (  CINVOICE)  REFERENCES "+schemaName+".CUINVOICE_b  (  SID),  FOREIGN  KEY  (  CUSTOMER  )  REFERENCES "+schemaName+".CUSTOMER_b  (  SID  ),  FOREIGN  KEY  ( ACCOUNT)  REFERENCES "+schemaName+".ACCOUNT_b  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".SERIALNUMBERS_b  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, SERIALNO  varchar(25) not null  ,  MATCODE  varchar(32),  QUANRECD  numeric(14,2),  VENDOR  varchar(20),  LOCATION  varchar(20),  RECVRPT  varchar(20),  INFL  boolean,  PHY  boolean,  DATETIN  TIMESTAMP,  DATETOUT  TIMESTAMP,  JOBNO  varchar(20),  PRINTMSTAT  INT,  PRINMTFLDT  TIMESTAMP,  PONO  varchar(20),  SCANDATET  TIMESTAMP,  QUANISSD  numeric(14,2),  BUTT  varchar(20),  STATUSFL  INT,  QUANREJD  numeric(14,2),  CUSTOMER  varchar(20),  CPONO  varchar(20),  CUSTOMEJ  varchar(20),  ORGCOST  numeric(14,2),  ORGPONO  varchar(20),  ORGJOBNO  varchar(20),  ALTSERNO  varchar(25),  SELPRICE  numeric(14,2),  PHYSQTY  numeric(14,2),  SPERSON  varchar(20),  CARTONID  varchar(20),  CARTONPR  boolean,  PACKCODE  varchar(20),  TARECODE  varchar(20),  SHIPCODE  varchar(20),  TYPE  varchar(12),  OWNER  varchar(40),  OWNER2  varchar(40),  BARSERIAL  varchar(30), PRIMARY  KEY(SID))";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".MACHINE_b  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, MACHINECODE  varchar(32) not null,  QUANTITY  numeric(14,2),  DESCRIPT  varchar(120),  DATEADDED  TIMESTAMP,  SOURCE1  varchar(35),  SOURCE2  varchar(35),  UPCCODE  varchar(25),  COST  numeric(14,2),  REPLCOST  numeric(14,2),  SELPRICE  numeric(14,2),  SPRICOLD  numeric(14,2),  SPRICNEW  numeric(14,2),  SPRICEFFDT  TIMESTAMP,  SHIPCODE  varchar(25),  PRINTMSTAT  INT,  PRINMTFLDT  TIMESTAMP,  MISCCODE1  varchar(25),  MISCCODE2  varchar(25),  QTYLEVEL1  numeric(14,2),  UNIT  varchar(12),  CASEQTY  numeric(14,2),  TYPE  varchar(12),  TAX1  boolean,  TAX2  boolean,  TAX3  boolean,  ALIASCODE  varchar(25),  PARENTCODE  INT  ,  AVGPRICE  numeric(14,2),  AVGCOST  numeric(14,2),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  SUBCODESN  VARCHAR(35),  SUBCODESN2 VARCHAR(35),  SUBCODESN3 VARCHAR(35),  CUORDQTY  numeric(14,2),  VENORQTY  numeric(14,2),  CUPICQTY  numeric(14,2),  VENPIQTY  numeric(14,2),  CUINVQTY  numeric(14,2),  CUSHIQTY  numeric(14,2),  VENSHQTY  numeric(14,2),  EFFDATE  TIMESTAMP,  INTEGRSET  varchar(20),  NOTES  varchar(60),  DOCMNT  varchar(90),  OWNER  varchar(40),  OWNER2  varchar(40),  BARUPC  varchar(30),  PRIMARY  KEY  (  SID), FOREIGN  KEY  (  PARENTCODE)  REFERENCES "+schemaName+".MACHINE_b  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".GROUPMEMBERS_b  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, GROUPID  INT not null,  MEMBERID  varchar(32) not null,  DESCRIPT  varchar(120), SOURCETYPE varchar(10),  MEMBEREM  INT  ,  MEMBERCU  INT  ,  MEMBERVE  INT  ,  MEMBERIT  INT  ,  MEMBERAC  INT  ,  MEMBERMA  INT  ,  TYPE  varchar(10),  CURRPW  varchar(32) ,  EXPIRY  TIMESTAMP,  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  OWNER  varchar(40),  OWNER2  varchar(40),  PRIMARY  KEY  (  SID),  FOREIGN  KEY  (  GROUPID)  REFERENCES "+schemaName+".MEMBERSGROUP_b (  SID),  FOREIGN  KEY  (  MEMBEREM)  REFERENCES "+schemaName+".EMPLOYEE_b  (  SID),  FOREIGN  KEY  (  MEMBERCU)  REFERENCES "+schemaName+".CUSTOMER_b  (  SID),  FOREIGN  KEY  (  MEMBERIT)  REFERENCES "+schemaName+".ITEM_b  (  SID),  FOREIGN  KEY  (  MEMBERAC)  REFERENCES "+schemaName+".ACTIVITY_b  (  SID),  FOREIGN  KEY  (  MEMBERMA)  REFERENCES "+schemaName+".MACHINE_b  (  SID),  FOREIGN  KEY  (  MEMBERVE)  REFERENCES "+schemaName+".VENDOR_b  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".JOBASSIGNMENT_b  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, JOBASSIGN varchar(32) not null, MACHINE  INT ,  SEQUENCE  varchar(12) ,  LOCATION  INT  ,  SDATET  TIMESTAMP,  DURATIONH  INT,  DURATIONM  INT,  STIMEH  INT,  STIMEM  INT,  STIMEAMPM  boolean,  EDATET  TIMESTAMP,  PRIORITY  boolean,  PERCNTDONE  numeric(14,2),REPEATF  varchar(20),  JOBNO  INT  ,  MATCODE  INT  , QTYTOTAL  numeric(14,2),  QTYOSTNDT  numeric(14,2),  PONO  INT,  VENDOR  INT  ,  CPONO  INT,  CUSTOMER  INT  ,  STATUSFL  INT, STATUSFLDT  TIMESTAMP,  OWNER  varchar(40),  OWNER2  varchar(40),  NOTES  varchar(60),  PRIMARY  KEY(  SID),  FOREIGN  KEY  (  CUSTOMER  )  REFERENCES "+schemaName+".CUSTOMER_b  (  SID  ),  FOREIGN  KEY  (  VENDOR)  REFERENCES "+schemaName+".VENDOR_b  (  SID),  FOREIGN  KEY  (  MATCODE)  REFERENCES "+schemaName+".ITEM_b  (  SID),  FOREIGN  KEY  (  MACHINE)  REFERENCES "+schemaName+".MACHINE_b  (  SID),      FOREIGN  KEY  (  JOBNO)  REFERENCES "+schemaName+".ITEMJOB_b  (  SID),FOREIGN KEY (LOCATION)  REFERENCES "+schemaName+".LOCATION_b  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".NEXTSERIALNO_b  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, NXTSERNO  varchar(4)  not null ,  CURSERNO  varchar(4),  PREVSERN  varchar(4),  IS9999  boolean,  REFNO varchar(14)  , OWNER  varchar(40),  OWNER2  varchar(40), PRIMARY  KEY(SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".RATE1F_b  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, USERTYPE  varchar(12)  not null ,  PRODTYPE  varchar(12) not null,  STEPNAME  varchar(25) not null,  STEP  INT,  VALUE  numeric(14,2),  EFFDATE  TIMESTAMP,  ENDDATE  TIMESTAMP,  INCENTIVE  varchar(25),  IEFFDATE  TIMESTAMP,  IENDDATE  TIMESTAMP, OWNER  varchar(40),  OWNER2  varchar(40), STATUSFL INT, STATUSFLDT  TIMESTAMP, PRIMARY  KEY(SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".ITEMBOM_b  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, BOMCODE  varchar(32) not null,  DESCRIPT  varchar(120),  QUANTITY numeric(14,2),  MODE  boolean,  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  OWNER  varchar(40), OWNER2  varchar(40), PRIMARY  KEY(SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".ITEMBOMDETAILS_b  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, BOMCODE  INT not null,  MATCODE  INT  not null ,  MODE  boolean,  SUBQTY  numeric(14,2), DESCRIPT  varchar(1200), SEQ  varchar(4),  NOTES  varchar(60), STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  OWNER  varchar(40),  OWNER2  varchar(40),  PRIMARY  KEY(  SID  ),  FOREIGN  KEY  (  BOMCODE)  REFERENCES "+schemaName+".ITEMBOM_b  (  SID),  FOREIGN  KEY  (  MATCODE)  REFERENCES "+schemaName+".ITEM_b  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".TASK_b  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, TASKID varchar(32) not null,  DESCRIPT  varchar(120),  ACTIVITYCODE  INT  ,  PROJECTTEAM  INT  ,  RESOURCE INT  , MODE  boolean,  ESTSTART TIMESTAMP, CALCSTART  TIMESTAMP,  ACTLSTART  TIMESTAMP,  ESTEND  TIMESTAMP,  CALCEND  TIMESTAMP,  ACTLEND  TIMESTAMP,  SUBQTY  numeric(14,2),  BOMCODE  INT,  LOCATION  INT,  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  OWNER  varchar(40), OWNER2  varchar(40),  PRIMARY  KEY(SID) ,  FOREIGN  KEY  (  PROJECTTEAM)  REFERENCES "+schemaName+".MEMBERSGROUP_b (  SID),  FOREIGN  KEY  (RESOURCE)  REFERENCES "+schemaName+".GROUPMEMBERS_b  (  SID),  FOREIGN  KEY  (  ACTIVITYCODE  )  REFERENCES "+schemaName+".ACTIVITY_b  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".JOBASSIGNMENTDETAILS_b  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, JOBASSIGN INT not null, LINE  INT, MACHINE  INT ,  SEQUENCE  varchar(12) ,  LOCATION  INT  ,  SDATET  TIMESTAMP,  DURATIONH  INT,  DURATIONM  INT,  STIMEH  INT,  STIMEM  INT,  STIMEAMPM  boolean,  EDATET  TIMESTAMP,  PRIORITY  boolean,  PERCNTDONE  numeric(14,2),REPEATF  varchar(20),  JOBNO  INT  ,  MATCODE  INT  , QTYTOTAL  numeric(14,2),  QTYOSTNDT  numeric(14,2),  PONO  INT,  VENDOR  INT  ,  CPONO  INT,  CUSTOMER  INT  ,  STATUSFL  INT,  LINETOTL  numeric(14,2), OWNER  varchar(40),  OWNER2  varchar(40), JAFIELD1 varchar(60),JAFIELD2 varchar(60), JAFIELD3 varchar(60), JAFIELD4 varchar(60), NOTES varchar(60), PRIMARY  KEY(  SID),  FOREIGN  KEY  (  CUSTOMER  )  REFERENCES "+schemaName+".CUSTOMER_b  (  SID  ),  FOREIGN  KEY  (  VENDOR)  REFERENCES "+schemaName+".VENDOR_b  (  SID),  FOREIGN  KEY  (  MATCODE)  REFERENCES "+schemaName+".ITEM_b  (  SID),  FOREIGN  KEY  (  MACHINE)  REFERENCES "+schemaName+".MACHINE_b  (  SID),      FOREIGN  KEY  (  JOBNO)  REFERENCES "+schemaName+".ITEMJOB_b  (  SID),FOREIGN KEY (LOCATION)  REFERENCES "+schemaName+".LOCATION_b  (  SID), FOREIGN  KEY  (  JOBASSIGN)  REFERENCES "+schemaName+".JOBASSIGNMENT_b  (  SID  ) )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".PROCESSDETAILS_b  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, PROCESS varchar(32) not null, CPONO INT , MATCODE  INT , CUSTOMER INT,  SDATET  TIMESTAMP,  DURATIONH  INT,  DURATIONM  INT,  STIMEH  INT,  STIMEM  INT,  STIMEAMPM  boolean,  EDATET  TIMESTAMP,  PRIORITY  boolean, PERCNTDONE  numeric(14,2), STATUSFL  INT, STATUSFLDT  TIMESTAMP,  NOTES varchar(60), OWNER  varchar(40),  OWNER2  varchar(40),  PRIMARY  KEY(  SID),  FOREIGN  KEY  (  CUSTOMER  )  REFERENCES "+schemaName+".CUSTOMER_b  (  SID  ), FOREIGN  KEY  (  MATCODE)  REFERENCES "+schemaName+".ITEM_b  (  SID), FOREIGN  KEY  (  CPONO)  REFERENCES "+schemaName+".CUORDERS_b  (  SID) )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".PROCESSATTRIBUTES_b  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, PDETAILS INT not null, NAME  varchar(32) , VALUE varchar(32),  TYPE  varchar(32),  RANGE  varchar(32),  STEP  INT,   STATUSFL  INT, STATUSFLDT  TIMESTAMP,  NOTES varchar(60), OWNER  varchar(40),  OWNER2  varchar(40),  PRIMARY  KEY(  SID),  FOREIGN  KEY  (  PDETAILS  )  REFERENCES "+schemaName+".PROCESSDETAILS_b  (  SID  ))";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".PROJECT_b (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, PROJ  varchar(32) not null,  PARENTCODE  INT  ,  DESCRIPT  varchar(120),  COMPANYCODE INT  , DIVCODE  INT  ,  DEPCODE  INT  ,  LOCATION  INT  ,  SDATET  TIMESTAMP,  EDATET  TIMESTAMP,  OWNER  varchar(40), OWNER2  varchar(40),  PRIMARY  KEY(SID),  FOREIGN  KEY  (  PARENTCODE  )  REFERENCES "+schemaName+".PROJECT_b  (  SID), FOREIGN  KEY  (  COMPANYCODE  )  REFERENCES "+schemaName+".COMPANY_b  (  SID  ),  FOREIGN  KEY  (  DEPCODE )  REFERENCES "+schemaName+".DEPARTMENT_b  (  SID  ),  FOREIGN  KEY  (  DIVCODE  )  REFERENCES "+schemaName+".DIVISION_b  (  SID  ))";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".OUTLINE_b  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, PROJ  INT not null,  PARENTCODE  INT  ,  USEROW  numeric(14,2),  USECOL  numeric(14,2),  OWNER  varchar(40), OWNER2  varchar(40),  PRIMARY  KEY(SID),  FOREIGN  KEY  (  PARENTCODE  )  REFERENCES "+schemaName+".OUTLINE_b  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".SCANDATE_b  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, SDSATETIMEOFSCAN  varchar(25) not null  ,  DATETIMEOFSCAN  TIMESTAMP,  LASTDATE  TIMESTAMP,  BKUPDATE  TIMESTAMP, OWNER  varchar(40), OWNER2  varchar(40), PRIMARY  KEY(SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".VINVOICE_b  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, INVOICE  varchar(32) not null,  VENDOR  INT  ,  MATCODE  INT  ,  INTEGRSET  varchar(20),  INVODATE  TIMESTAMP,  AMOUNTTOTAL  numeric(14,2),  AMOUNTOSTNDT  numeric(14,2),  QTYTOTAL  numeric(14,2),  QTYOSTNDT  numeric(14,2),  PONO  INT  ,  REF1TYP  varchar(20),  REF1CODE  varchar(35),  SHIPDATET  TIMESTAMP,  SHIPTYPE  varchar(12),  SHIPCODE  INT  ,  TERMS  varchar(20),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  TERMSDAT  TIMESTAMP,  DISCOUNP  numeric(14,2),  DISCOUDT  TIMESTAMP,  DISCOUDS  numeric(14,2),  NETDDAT  TIMESTAMP,  NETDDYS  INT,  FOB  varchar(20),  TYPE  varchar(12),  ATTACH  varchar(20),BASEAMOUNTT  numeric(14,2),  DELIVCHRGT  numeric(14,2),  MISCCHRGT  numeric(14,2),  TAX1AMTT  numeric(14,2),  TAX2AMTT  numeric(14,2),  TAX3AMTT  numeric(14,2),  AGENT  INT  ,  NOTES  varchar(60),  PRINTMSTAT  INT,  PRINMTFLDT  TIMESTAMP,  OWNER  varchar(40),  OWNER2  varchar(40),  DOCMNT  varchar(90),  PRIMARY  KEY(  SID),  FOREIGN  KEY  (  VENDOR)  REFERENCES "+schemaName+".VENDOR_b  (  SID),  FOREIGN  KEY  (  MATCODE)  REFERENCES "+schemaName+".ITEM_b  (  SID),  FOREIGN  KEY  (  SHIPCODE)  REFERENCES "+schemaName+".VSHIPMEN_b  (  SID),  FOREIGN  KEY  (  PONO  )  REFERENCES "+schemaName+".VENDORDERS_b  (  SID  ),  FOREIGN  KEY  (  AGENT)  REFERENCES "+schemaName+".EMPLOYEE_b  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".VPAYMENT_b  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, PAYMENT  varchar(32) not null,  VENDOR  INT  ,  VINVOICE  INT  ,  CHEQDATE TIMESTAMP, PAYMENTDUEDATE timestamp, POSTINGPERIOD INT, MATCODE  INT,  INTEGRSET  varchar(20),  ACCOUNT  INT,  AMOUNTTOTAL  numeric(14,2),  AMOUNTOSTNDT  numeric(14,2),  AMOUNTIN numeric(14,2),  QTYTOTAL  numeric(14,2),  QTYOSTNDT  numeric(14,2),  BASEAMOUNTT  numeric(14,2),  DELIVCHRGT  numeric(14,2),  MISCCHRGT  numeric(14,2),  TAX1AMTT  numeric(14,2),  TAX2AMTT  numeric(14,2),  TAX3AMTT  numeric(14,2),  DISCOUNT  numeric(14,2),  PAYTYPE  varchar(4),  PAYBYID  varchar(20),  PAYBYDATE  TIMESTAMP,  CURRENCY  varchar(12),  CONVRATE  numeric(14,2),  LOCAMOUNT  numeric(14,2),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  NOTES  varchar(60),  OWNER  varchar(40),  OWNER2  varchar(40),  PRIMARY  KEY  (  SID),  FOREIGN  KEY  (  VINVOICE)  REFERENCES "+schemaName+".VINVOICE_b  (  SID),  FOREIGN  KEY  (  VENDOR  )  REFERENCES "+schemaName+".VENDOR_b  (  SID)  , FOREIGN  KEY  ( ACCOUNT)  REFERENCES "+schemaName+".ACCOUNT_b  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".CUQDETAILS_b  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, CUQNO  INT   not null,  LINE  INT,  MATCODE  INT  ,  QTYORDRD  numeric(14,2),  ORDUNIT  varchar(12),  ORDPRICE  numeric(14,2),  IODATE  TIMESTAMP,  IDELVDATE  TIMESTAMP, SHIPOPTION varchar(20) ,  VENDOR  INT  ,  QTYOSTND  numeric(14,2),BASEAMOUNT  numeric(14,2),  DELIVCHRG  numeric(14,2),  MISCCHRG  numeric(14,2),  TAX1AMT  numeric(14,2),  TAX2AMT  numeric(14,2),  TAX3AMT  numeric(14,2),  LINETOTL  numeric(14,2),  OWNER2  varchar(40),  PRIMARY  KEY(  SID),  FOREIGN  KEY  (  MATCODE)  REFERENCES "+schemaName+".ITEM_b  (  SID),  FOREIGN  KEY  (  VENDOR)  REFERENCES "+schemaName+".VENDOR_b  (  SID),  FOREIGN  KEY  (  CUQNO)  REFERENCES "+schemaName+".CUQUOTE_b  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".CUODETAILS_b  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, CUONO  INT  not null ,  LINE  INT,  MATCODE  INT  ,  QTYORDRD  numeric(14,2),  ORDUNIT  varchar(12),  ORDPRICE  numeric(14,2),  IODATE  TIMESTAMP,  IDELVDATE  TIMESTAMP,  VENDOR  INT  ,SHIPOPTION varchar(20) ,  QTYOSTND  numeric(14,2),BASEAMOUNT  numeric(14,2),  DELIVCHRG  numeric(14,2),  MISCCHRG  numeric(14,2),  TAX1AMT  numeric(14,2),  TAX2AMT  numeric(14,2),  TAX3AMT  numeric(14,2),  LINETOTL  numeric(14,2), OWNER2  varchar(40),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,BARPO varchar(30),  PRIMARY  KEY(  SID),  FOREIGN  KEY  (  MATCODE)  REFERENCES "+schemaName+".ITEM_b  (  SID),  FOREIGN  KEY  (  VENDOR)  REFERENCES "+schemaName+".VENDOR_b  (  SID),  FOREIGN  KEY  (  CUONO)  REFERENCES "+schemaName+".CUORDERS_b  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".CUIDETAILS_b  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, CUINO  INT   not null,  LINE  INT,  MATCODE  INT  ,  QTYORDRD  numeric(14,2),  ORDUNIT  varchar(12),  ORDPRICE  numeric(14,2),  IODATET  TIMESTAMP,  DELVDATEIT  TIMESTAMP,  VENDOR  INT  ,  QTYOSTND  numeric(14,2),  BASEAMOUNT  numeric(14,2),  DELIVCHRG  numeric(14,2),  MISCCHRG  numeric(14,2),  TAX1AMT  numeric(14,2),  TAX2AMT  numeric(14,2),  TAX3AMT  numeric(14,2),  LINETOTL  numeric(14,2),  OWNER2  varchar(40),  PRIMARY  KEY(  SID),  FOREIGN  KEY  (  MATCODE)  REFERENCES "+schemaName+".ITEM_b  (  SID),  FOREIGN  KEY  (  VENDOR)  REFERENCES "+schemaName+".VENDOR_b  (  SID),  FOREIGN  KEY  (  CUINO)  REFERENCES "+schemaName+".CUINVOICE_b  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".CUPDETAILS_b  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, CUPNO  INT  not null ,  LINE  INT,  INVOICE  INT  ,  QTYORDRD  numeric(14,2),  ORDPRICE  numeric(14,2),  PAYTYPE  varchar(12),  PAYBYID  varchar(12), AMOUNTIN  numeric(14,2),BASEAMOUNT  numeric(14,2),  DELIVCHRG  numeric(14,2),  MISCCHRG  numeric(14,2),  TAX1AMT  numeric(14,2),  TAX2AMT  numeric(14,2),  TAX3AMT  numeric(14,2),  LINETOTL  numeric(14,2),  OWNER2  varchar(40),  PRIMARY  KEY(  SID),  FOREIGN  KEY  (  INVOICE)  REFERENCES "+schemaName+".CUINVOICE_b  (  SID),  FOREIGN  KEY  (  CUPNO)  REFERENCES "+schemaName+".CPAYMENT_b  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".ACTIVITYJOBDETAILS_b  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, JOBNO  INT   not null,  LINE  INT,  ACTIVITYCODE  INT  ,  PRODDATET  TIMESTAMP,  QTYALLOC  numeric(14,2),  PONO  INT,  ORDPRICE  numeric(14,2),  QTYOSTND  numeric(14,2),  QTYALSTK  numeric(14,2),  QTYISSUD  numeric(14,2),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  PRINTMSTAT  INT,  PRINMTFLDT  TIMESTAMP,  PRINTMSTATJ  INT,  PRINMTFLDTJ  TIMESTAMP,  TYPE  varchar(12),  ACTIVITYCODEOUT  INT,  QTYOUT  numeric(14,2),  LINETOTL  numeric(14,2),  OWNER2  varchar(40),  PRIMARY  KEY(  SID),  FOREIGN  KEY  (  ACTIVITYCODE)  REFERENCES "+schemaName+".ACTIVITY_b  (  SID),  FOREIGN  KEY  (  JOBNO)  REFERENCES "+schemaName+".ACTIVITYJOB_b  (  SID  )  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".SHIPMENTDETAILS_b  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, SHIPCODE  INT  not null ,  LINE  INT,  MATCODE  INT  ,  QTYSHIPPED  numeric(14,2),  SHIPPINGPRICE  numeric(14,2),  SHIPPER  INT,  PONO  INT,  CPONO  INT,  INVOICE  INT,  AMOUNT  numeric(14,2),  AMOUNTOSTND  numeric(14,2),  QTY  numeric(14,2),  QTYOSTND  numeric(14,2),  CARRIER  INT,  TYPE  varchar(12),  SHIPDATET  TIMESTAMP,  SHIPDATETA  TIMESTAMP,  TARENO  varchar(20),  PACKNO  varchar(20),  CUSTOMER  INT  ,  MAILTOCODE  INT  ,  SHIPTOCODE  INT  ,  NOTES  varchar(60),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  SERIALNO  varchar(25),  PRINTMSTAT  INT,  PRINMTFLDT  TIMESTAMP,  OWNER  varchar(40),  OWNER2  varchar(40),  BARSHIPCOD  varchar(30),  LINETOTL  numeric(14,2),  PRIMARY  KEY(  SID),  FOREIGN  KEY  (  MATCODE)  REFERENCES "+schemaName+".ITEM_b  (  SID),  FOREIGN  KEY  (  MAILTOCODE  )  REFERENCES "+schemaName+".ADDRESS_b(  SID  ),  FOREIGN  KEY  (  SHIPTOCODE  )  REFERENCES "+schemaName+".ADDRESS_b(  SID  ),  FOREIGN  KEY  (  SHIPCODE)  REFERENCES "+schemaName+".SHIPMENT_b  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".VENDQDETAILS_b  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, VENDQNO  INT  not null ,  LINE  INT,  MATCODE  INT  ,  QTYORDRD  numeric(14,2),  ORDUNIT  varchar(12),  ORDPRICE  numeric(14,2),  IODATET  TIMESTAMP,SHIPOPTION varchar(20) ,  CUSTOMER  INT  ,  QTYOSTND  numeric(14,2),BASEAMOUNT  numeric(14,2),  DELIVCHRG  numeric(14,2),  MISCCHRG  numeric(14,2),  TAX1AMT  numeric(14,2),  TAX2AMT  numeric(14,2),  TAX3AMT  numeric(14,2),  LINETOTL  numeric(14,2),  OWNER2  varchar(40),  PRIMARY  KEY(  SID),  FOREIGN  KEY  (  MATCODE)  REFERENCES "+schemaName+".ITEM_b  (  SID),  FOREIGN  KEY  (  CUSTOMER  )  REFERENCES "+schemaName+".CUSTOMER_b  (  SID  ),  FOREIGN  KEY  (  VENDQNO  )  REFERENCES "+schemaName+".VENQUOTE_b  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".VENDODETAILS_b  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, VENDONO  INT  not null ,  LINE  INT,  MATCODE  INT  ,  QTYORDRD  numeric(14,2),  ORDUNIT  varchar(12),  ORDPRICE  numeric(14,2),  IODATET  TIMESTAMP,  CUSTOMER  INT  ,SHIPOPTION varchar(20) ,  QTYOSTND  numeric(14,2),BASEAMOUNT  numeric(14,2),  DELIVCHRG  numeric(14,2),  MISCCHRG  numeric(14,2),  TAX1AMT  numeric(14,2),  TAX2AMT  numeric(14,2),  TAX3AMT  numeric(14,2),  LINETOTL  numeric(14,2),  OWNER2  varchar(40),  PRIMARY  KEY(  SID),  FOREIGN  KEY  (  MATCODE)  REFERENCES "+schemaName+".ITEM_b  (  SID),  FOREIGN  KEY  (  CUSTOMER  )  REFERENCES "+schemaName+".CUSTOMER_b  (  SID  ),  FOREIGN  KEY  (  VENDONO  )  REFERENCES "+schemaName+".VENDORDERS_b  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".VENDIDETAILS_b  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, VENDINO  INT not null  ,  LINE  INT,  MATCODE  INT  ,  QTYORDRD  numeric(14,2),  ORDUNIT  varchar(12),  ORDPRICE  numeric(14,2),  IODATET  TIMESTAMP,  CUSTOMER  INT  ,  QTYOSTND  numeric(14,2),BASEAMOUNT  numeric(14,2),  DELIVCHRG  numeric(14,2),  MISCCHRG  numeric(14,2),  TAX1AMT  numeric(14,2),  TAX2AMT  numeric(14,2),  TAX3AMT  numeric(14,2),  LINETOTL  numeric(14,2),  OWNER2  varchar(40),  PRIMARY  KEY(  SID),  FOREIGN  KEY  (  MATCODE)  REFERENCES "+schemaName+".ITEM_b  (  SID),  FOREIGN  KEY  (  CUSTOMER  )  REFERENCES "+schemaName+".CUSTOMER_b  (  SID  ),  FOREIGN  KEY  (  VENDINO  )  REFERENCES "+schemaName+".VINVOICE_b  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".VENDPDETAILS_b  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, VENDPNO  INT  not null ,  LINE  INT,  INVOICE  INT  ,  QTYORDRD  numeric(14,2),  ORDPRICE  numeric(14,2),  PAYTYPE  varchar(12),  PAYBYID  varchar(12), AMOUNTIN  numeric(14,2),  VENDOR  INT  ,  VONTACT  INT,  QTYOSTND  numeric(14,2),BASEAMOUNT  numeric(14,2),  DELIVCHRG  numeric(14,2),  MISCCHRG  numeric(14,2),  TAX1AMT  numeric(14,2),  TAX2AMT  numeric(14,2),  TAX3AMT  numeric(14,2),  LINETOTL  numeric(14,2),  OWNER2  varchar(40),  PRIMARY  KEY(  SID),  FOREIGN  KEY  (  INVOICE)  REFERENCES "+schemaName+".VINVOICE_b  (  SID),  FOREIGN  KEY  (  VENDOR  )  REFERENCES "+schemaName+".VENDOR_b  (  SID  ),  FOREIGN  KEY  (  VENDPNO  )  REFERENCES "+schemaName+".VPAYMENT_b  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".VSHIPMENDETAILS_b  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, SHIPCODE  INT  not null ,  LINE  INT,  MATCODE  INT  ,  QTYSHIPPED  numeric(14,2),  SHIPPINGPRICE  numeric(14,2),  SHIPPER  INT,  PONO  INT,  CPONO  INT,  INVOICE  INT,  AMOUNT  numeric(14,2),  AMOUNTOSTND  numeric(14,2),  QTY  numeric(14,2),  QTYOSTND  numeric(14,2),  CARRIER  INT,  TYPE  varchar(12),  SHIPDATET  TIMESTAMP,  SHIPDATETA  TIMESTAMP,  TARENO  varchar(20),  PACKNO  varchar(20),  VENDOR  INT,  MAILTOCODE  INT  ,  SHIPTOCODE  INT  ,  NOTES  varchar(60),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  SERIALNO  varchar(25),  PRINTMSTAT  INT,  PRINMTFLDT  TIMESTAMP,  OWNER  varchar(40),  OWNER2  varchar(40),  BARSHIPCOD  varchar(30),  LINETOTL  numeric(14,2),  PRIMARY  KEY(  SID),  FOREIGN  KEY  (  MATCODE)  REFERENCES "+schemaName+".ITEM_b (  SID),  FOREIGN  KEY  (  MAILTOCODE  )  REFERENCES "+schemaName+".ADDRESS_b(  SID  ),  FOREIGN  KEY  (  SHIPTOCODE  )  REFERENCES "+schemaName+".ADDRESS_b(  SID  ),  FOREIGN  KEY  (  SHIPCODE)  REFERENCES "+schemaName+".VSHIPMEN_b  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".WAGEEARNERAUX_b  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, WAGEEARNERID  INT not null,  LINE  INT,  SIN  varchar(12),  WCBYTDL  numeric(14,2),  WCBYTDN  numeric(14,2),  INSYTDL  numeric(14,2),  INSYTDN  numeric(14,2),  VACATONYL  numeric(14,2),  VACATONYN  numeric(14,2),  PAYYTDL  numeric(14,2),  FPENSIYTL  numeric(14,2),  PPENSIYTL  numeric(14,2),  ITAXYTDL  numeric(14,2),  PTAXYTDL  numeric(14,2),  PAYYTDN  numeric(14,2),  FPENSIYTN  numeric(14,2),  PPENSIYTN  numeric(14,2),  ITAXYTDN  numeric(14,2),  PATXYTDN  numeric(14,2),  GPAYYTDL  numeric(14,2),  GPAYYTDN  numeric(14,2),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  OWNER  varchar(40),  OWNER2  varchar(40),  PRIMARY  KEY  (  SID),  FOREIGN  KEY  (  WAGEEARNERID)  REFERENCES "+schemaName+".WAGEEARNER_b  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE TABLE IF NOT EXISTS  "+schemaName+".Rgenapp_b ( SID INTEGER GENERATED BY DEFAULT AS IDENTITY, APPNAME varchar(40) not null, DESCRIPT  varchar(120),  APPTYPE varchar(20), APPWACCOUNTING boolean, APPWEMAIL boolean, APPWJMSMQ boolean, APPVENDOR varchar(20), APPVERSION varchar(20), APPPLATFORM varchar(40), APPMODELPKG varchar(40), APPACTIONPKG varchar(40), APPSKIN varchar(20), APPDEPLOYTYPE varchar(20), CREATEFIDATA varchar(4096000), REVENGDATA varchar(4096000), INITIALIZEFIDATA varchar(4096000), STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  NOTES  varchar(60),  OWNER  varchar(40), OWNER2  varchar(40), PRIMARY KEY(SID) )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".RGENDB_b ( SID INTEGER GENERATED BY DEFAULT AS IDENTITY, DBNAME varchar(40) not null, DESCRIPT  varchar(120),  DBTYPE varchar(20), DBVENDOR varchar(20), DBVERSION varchar(20), DBPLATFORM varchar(20), APPCODE  INT  ,  SQLDRIVER varchar(40), SQLURL varchar(40), SQLUSER varchar(20), SQLPASSWORD varchar(20), SQLCLASSPATH varchar(40), SQLCREATEDBSCRIPT varchar(20), SQLDROPDBSCRIPT varchar(20), SQLCREATETBLSSCRIPT varchar(20), SQLLOADTBLSSCRIPT varchar(20), STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  NOTES  varchar(60),  OWNER  varchar(40), OWNER2  varchar(40),  PRIMARY KEY(SID), FOREIGN  KEY  (  APPCODE  )  REFERENCES "+schemaName+".Rgenapp_b  (  SID  ) )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".RGENTABLE_b   (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, TABLENAME   varchar(40)  not null ,  DBCODE INT  , INADDMENU  boolean,  INLISTMENU  boolean,  INTRANSACTIONMENU  boolean,  INREPORTMENU  boolean,  INGRAPHSMENU  boolean,  INMAILINGMENU  boolean,  INGENERATEMENU  boolean,  INADMINMENU  boolean,  INMAINTENANCEMENU  boolean,  INLABELSMENU  boolean,  INSKIPMENU  boolean,  INCUSTOM1MENU  boolean,  MENULEVEL  varchar(12),  MENUROLE  varchar(12),  MENULABELGROUP  varchar(20),  SUBMENUSEQUENCE  INT,  USAGESCOPE varchar(12), STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  NOTES  varchar(60),  OWNER  varchar(40), OWNER2  varchar(40),  PRIMARY  KEY(  SID), FOREIGN  KEY  (  DBCODE  )  REFERENCES "+schemaName+".RGENDB_b  (  SID  ) )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".RGENFIELDS_b  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, DBCODE INT   , TABLENAME  INT   ,  FIELDNAME  varchar(60) not null,  FIELDTYPE varchar(20), FIELDLENGTH varchar(2), INGROUP  varchar(20),  SEQWITHINGROUP  INT,  FOCUSSEQ  INT,  FUTURE1  varchar(20),  INITIALVALUE  varchar(12),  KEYORADDITIONAL  varchar(12),  KEYORADDITIONAL2  varchar(12),  KEYORADDITIONAL3  varchar(12),  SHOWINMENU  varchar(20),  SHOWINREPORT  varchar(20),  PROCESSOPTION1  varchar(20),  PROCESSOPTION2  varchar(20), FDBCODE varchar(40)  ,  FTABLENAME   varchar(60)  ,  FFIELDKEYNAME1  varchar(60),  FFIELDKEYNAME2  varchar(60),  FFIELDKEYNAME3  varchar(60),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  NOTES  varchar(60),  OWNER  varchar(40),  OWNER2  varchar(40),  PRIMARY  KEY(  SID), FOREIGN  KEY  (  TABLENAME  )  REFERENCES "+schemaName+".RGENTABLE_b  (  SID), FOREIGN  KEY  (  DBCODE )  REFERENCES "+schemaName+".RGENDB_b  (  SID) )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".GENOPTIONS_b  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, ROW  varchar(2) not null,  GENOPTIONS01  varchar(159),  GENPURPOSE01  varchar(159),  GENVALUE01  varchar(159),  GENOPTIONS02  varchar(159),  GENPURPOSE02  varchar(159),  GENVALUE02  varchar(159),  GENOPTIONS03  varchar(159),  GENPURPOSE03  varchar(159),  GENVALUE03  varchar(159),  GENOPTIONS04  varchar(159),  GENPURPOSE04  varchar(159),  GENVALUE04  varchar(159),  GENOPTIONS05  varchar(159),  GENPURPOSE05  varchar(159),  GENVALUE05  varchar(159),  GENOPTIONS06  varchar(159),  GENPURPOSE06  varchar(159),  GENVALUE06  varchar(159),  GENOPTIONS07  varchar(159),  GENPURPOSE07  varchar(159),  GENVALUE07  varchar(159),  GENOPTIONS08  varchar(159),  GENPURPOSE08  varchar(159),  GENVALUE08  varchar(159),  GENOPTIONS09  varchar(159),  GENPURPOSE09  varchar(159),  GENVALUE09  varchar(159),  GENOPTIONS10  varchar(159),  GENPURPOSE10  varchar(159),  GENVALUE10  varchar(159),  GENOPTIONS11  varchar(159),  GENPURPOSE11  varchar(159),  GENVALUE11  varchar(159),  GENOPTIONS12  varchar(159),  GENPURPOSE12  varchar(159),  GENVALUE12  varchar(159),  GENOPTIONS13  varchar(159),  GENPURPOSE13  varchar(159),  GENVALUE13  varchar(159),  GENOPTIONS14  varchar(159),  GENPURPOSE14  varchar(159),  GENVALUE14  varchar(159),  GENOPTIONS15  varchar(159),  GENPURPOSE15  varchar(159),  GENVALUE15  varchar(159),  GENOPTIONS16  varchar(159),  GENPURPOSE16  varchar(159),  GENVALUE16  varchar(159),  GENOPTIONS17  varchar(159),  GENPURPOSE17  varchar(159),  GENVALUE17  varchar(159),  GENOPTIONS18  varchar(159),  GENPURPOSE18  varchar(159),  GENVALUE18  varchar(159),  GENOPTIONS19  varchar(159),  GENPURPOSE19  varchar(159),  GENVALUE19  varchar(159),  GENOPTIONS20  varchar(159),  GENPURPOSE20  varchar(159),  GENVALUE20  varchar(159),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  NOTES  varchar(60),  OWNER  varchar(40), OWNER2  varchar(40), PRIMARY  KEY(SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".BLOBDATA_b  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, FROMTABLE  varchar(35) not null,  FROMKEY varchar(35) not null, QUALIFIER  varchar(32) not null,  SEQUENCE  INT,  TYPE varchar(40), DATA  VARBINARY(1000000),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  NOTES  varchar(255),  OWNER  varchar(40),  OWNER2  varchar(40),  PRIMARY  KEY  (  SID ))";
      if(dbProductName.equals("psql")){
       sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".BLOBDATA_b  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, FROMTABLE  varchar(35) not null,  FROMKEY varchar(35) not null, QUALIFIER  varchar(32) not null,  SEQUENCE  INT,  TYPE varchar(40), DATA  BYTEA,  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  NOTES  varchar(255),  OWNER  varchar(40),  OWNER2  varchar(40),  PRIMARY  KEY  (  SID ))";
      }
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".CLOBDATA_b  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, FROMTABLE  varchar(35) not null,  FROMKEY varchar(35) not null, QUALIFIER  varchar(32) not null,  SEQUENCE  INT,  TYPE varchar(40), DATA  VARCHAR(4096000),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  NOTES  varchar(255),  OWNER  varchar(40),  OWNER2  varchar(40),  PRIMARY  KEY  (  SID))";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".CONTROLUSAGEBYPERIODS_b  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, CTLUSAGETRACKERID  varchar(32)  not null,  DESCRIPT  varchar(120), CONTROLCODE   INT,  CURRENCY  varchar(3),  PERIOD0LABEL varchar(20), PERIOD0B  numeric(14,2),  PERIOD0  numeric(14,2),  PERIODTOTALSLABEL varchar(20), PERIODTOTALSB  numeric(14,2),  PERIODTOTALS  numeric(14,2),  PERIOD1LABEL varchar(20), PERIOD1BUDGET  numeric(14,2),  PERIOD1ACTUAL  numeric(14,2),  PERIOD2LABEL varchar(20), PERIOD2B  numeric(14,2),  PERIOD2  numeric(14,2),  PERIOD3LABEL varchar(20), PERIOD3B  numeric(14,2),  PERIOD3  numeric(14,2),  PERIOD4LABEL varchar(20), PERIOD4B  numeric(14,2),  PERIOD4  numeric(14,2),  PERIOD5LABEL varchar(20), PERIOD5B  numeric(14,2),  PERIOD5  numeric(14,2),  PERIOD6LABEL varchar(20), PERIOD6B  numeric(14,2),  PERIOD6  numeric(14,2),  PERIOD7LABEL varchar(20), PERIOD7B  numeric(14,2),  PERIOD7  numeric(14,2),  PERIOD8LABEL varchar(20), PERIOD8B  numeric(14,2),  PERIOD8  numeric(14,2),  PERIOD9LABEL varchar(20), PERIOD9B  numeric(14,2),  PERIOD9  numeric(14,2),  PERIOD10LABEL varchar(20), PERIOD10B  numeric(14,2),  PERIOD10  numeric(14,2),  PERIOD11LABEL varchar(20), PERIOD11B  numeric(14,2),  PERIOD11  numeric(14,2),  PERIOD12LABEL varchar(20), PERIOD12B  numeric(14,2),  PERIOD12  numeric(14,2),  PERIODNLABEL varchar(20), PERIODNB  numeric(14,2),  PERIODN  numeric(14,2),  NOTES  varchar(60),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  OWNER  varchar(40),  OWNER2  varchar(40),  PRIMARY  KEY  (  SID),   FOREIGN  KEY  (  CONTROLCODE)  REFERENCES "+schemaName+".CONTROL_b  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".RESOURCEDETAILS_b  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, TASKNO  INT,  RESOURCENUMBER  INT,  PROJECTTEAM  INT  ,  RESOURCE  INT  not null ,  USAGEPERCENT numeric(14,2),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  OWNER  varchar(40), OWNER2  varchar(40),  PRIMARY  KEY(  SID),  FOREIGN  KEY  (PROJECTTEAM)  REFERENCES "+schemaName+".MEMBERSGROUP_b  (  SID),  FOREIGN  KEY  (RESOURCE)  REFERENCES "+schemaName+".GROUPMEMBERS_b  (  SID),  FOREIGN  KEY  (  TASKNO)  REFERENCES "+schemaName+".TASK_b  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".EMPLODETAILS_b  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, EMPLONO  INT  not null ,  LINE  INT not null,  MATCODE  INT  ,  QTYORDRD  numeric(14,2),  ORDUNIT  varchar(12),  ORDPRICE  numeric(14,2),  IODATE  TIMESTAMP,  IDELVDATE  TIMESTAMP,  VENDOR  INT  ,  QTYOSTND  numeric(14,2),BASEAMOUNT  numeric(14,2),  DELIVCHRG  numeric(14,2),  MISCCHRG  numeric(14,2),  TAX1AMT  numeric(14,2),  TAX2AMT  numeric(14,2),  TAX3AMT  numeric(14,2),  LINETOTL  numeric(14,2),  OWNER2  varchar(40),  PRIMARY  KEY(  SID),  FOREIGN  KEY  (  MATCODE)  REFERENCES "+schemaName+".ITEM_b  (  SID),  FOREIGN  KEY  (  VENDOR)  REFERENCES "+schemaName+".VENDOR_b  (  SID),  FOREIGN  KEY  (  EMPLONO)  REFERENCES "+schemaName+".EMPLORDERS_b  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".USAGEBYPERIODS_b  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, USAGETRACKERID  varchar(32) not null,  DESCRIPT  varchar(120),  MATCODE INT  , CURRENCY  varchar(3),  PERIOD0LABEL varchar(20), PERIOD0B  numeric(14,2),  PERIOD0  numeric(14,2),  PERIOD0FORMULAE  VARCHAR(159),  PERIODTOTALSLABEL varchar(20), PERIODTOTALSB  numeric(14,2),  PERIODTOTALS numeric(14,2),  PERIODTOTALSFORMULAE  VARCHAR(159),  PERIOD1LABEL varchar(20), PERIOD1BUDGET  numeric(14,2),  PERIOD1  numeric(14,2),  PERIOD1FORMULAE  VARCHAR(159),  PERIOD2LABEL varchar(20), PERIOD2B  numeric(14,2),  PERIOD2  numeric(14,2),  PERIOD2FORMULAE  VARCHAR(159),  PERIOD3LABEL varchar(20), PERIOD3B  numeric(14,2),  PERIOD3  numeric(14,2),  PERIOD3FORMULAE  VARCHAR(159),  PERIOD4LABEL varchar(20), PERIOD4B  numeric(14,2),  PERIOD4  numeric(14,2),  PERIOD4FORMULAE  VARCHAR(159),  PERIOD5LABEL varchar(20), PERIOD5B  numeric(14,2),  PERIOD5  numeric(14,2),  PERIOD5FORMULAE  VARCHAR(159),  PERIOD6LABEL varchar(20), PERIOD6B  numeric(14,2),  PERIOD6  numeric(14,2),  PERIOD6FORMULAE  VARCHAR(159),  PERIOD7LABEL varchar(20), PERIOD7B  numeric(14,2),  PERIOD7  numeric(14,2),  PERIOD7FORMULAE  VARCHAR(159),  PERIOD8LABEL varchar(20), PERIOD8B  numeric(14,2),  PERIOD8  numeric(14,2),  PERIOD8FORMULAE  VARCHAR(159),  PERIOD9LABEL varchar(20), PERIOD9B  numeric(14,2),  PERIOD9  numeric(14,2),  PERIOD9FORMULAE  VARCHAR(159),  PERIOD10LABEL varchar(20), PERIOD10B  numeric(14,2),  PERIOD10  numeric(14,2),  PERIOD10FORMULAE  VARCHAR(159),  PERIOD11LABEL varchar(20), PERIOD11B  numeric(14,2),  PERIOD11  numeric(14,2),  PERIOD11FORMULAE  VARCHAR(159),  PERIOD12LABEL varchar(20), PERIOD12B  numeric(14,2),  PERIOD12  numeric(14,2),  PERIOD12FORMULAE  VARCHAR(159),  PERIODNLABEL varchar(20), PERIODNB  numeric(14,2),  PERIODN  numeric(14,2),  PERIODNFORMULAE  VARCHAR(159),  NOTES  varchar(60),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  OWNER  varchar(40),  OWNER2  varchar(40),  GROUPCODE  INT  ,  PRIMARY  KEY  (  SID),  FOREIGN  KEY  (  MATCODE)  REFERENCES "+schemaName+".ITEM_b  (  SID), FOREIGN  KEY  (  GROUPCODE)  REFERENCES "+schemaName+".ROLLUPGROUP_b  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".RESOURCE_BUNDLE_b (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY,NAME varchar(50),LANGUAGE varchar(2),COUNTRY varchar(2),VARIANT varchar(2),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  OWNER  varchar(40),  OWNER2  varchar(40), PRIMARY  KEY(  SID))";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".RESOURCE_b (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, \"_KEY\"  varchar(50) ,  \"_VALUE\" varchar(2555),  RESOURCEBUNDLE  INT  not null,  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  OWNER  varchar(40),  OWNER2  varchar(40),  PRIMARY  KEY(  SID), FOREIGN  KEY  (  RESOURCEBUNDLE)  REFERENCES "+schemaName+".RESOURCE_BUNDLE_b  (  SID) )";
      if(dbProductName.equals("psql")){
       sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".RESOURCE_b (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, _KEY  varchar(50) ,  _VALUE varchar(2555),  RESOURCEBUNDLE  INT  not null,  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  OWNER  varchar(40),  OWNER2  varchar(40),  PRIMARY  KEY(  SID), FOREIGN  KEY  (  RESOURCEBUNDLE)  REFERENCES "+schemaName+".RESOURCE_BUNDLE_b  (  SID) )";
      }
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".TRUEFALSE_b (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, TABLENAME  varchar(50) ,  QUALIFIER varchar(32), SHOW001 boolean, SHOW002 boolean, SHOW003 boolean, SHOW004 boolean, SHOW005 boolean, SHOW006 boolean, SHOW007 boolean, SHOW008 boolean, SHOW009 boolean, SHOW010 boolean, SHOW011 boolean, SHOW012 boolean, SHOW013 boolean, SHOW014 boolean, SHOW015 boolean, SHOW016 boolean, SHOW017 boolean, SHOW018 boolean, SHOW019 boolean, SHOW020 boolean, SHOW021 boolean, SHOW022 boolean, SHOW023 boolean, SHOW024 boolean, SHOW025 boolean, SHOW026 boolean, SHOW027 boolean, SHOW028 boolean, SHOW029 boolean, SHOW030 boolean, SHOW031 boolean, SHOW032 boolean, SHOW033 boolean, SHOW034 boolean, SHOW035 boolean, SHOW036 boolean, SHOW037 boolean, SHOW038 boolean, SHOW039 boolean, SHOW040 boolean, SHOW041 boolean, SHOW042 boolean, SHOW043 boolean, SHOW044 boolean, SHOW045 boolean, SHOW046 boolean, SHOW047 boolean, SHOW048 boolean, SHOW049 boolean, SHOW050 boolean, SHOW051 boolean, SHOW052 boolean, SHOW053 boolean, SHOW054 boolean, SHOW055 boolean, SHOW056 boolean, SHOW057 boolean, SHOW058 boolean, SHOW059 boolean, SHOW060 boolean, SHOW061 boolean, SHOW062 boolean, SHOW063 boolean, SHOW064 boolean, SHOW065 boolean, SHOW066 boolean, SHOW067 boolean, SHOW068 boolean, SHOW069 boolean, SHOW070 boolean, SHOW071 boolean, SHOW072 boolean, SHOW073 boolean, SHOW074 boolean, SHOW075 boolean, SHOW076 boolean, SHOW077 boolean, SHOW078 boolean, SHOW079 boolean, SHOW080 boolean, SHOW081 boolean, SHOW082 boolean, SHOW083 boolean, SHOW084 boolean , SHOW085 boolean, SHOW086 boolean, SHOW087 boolean, SHOW088 boolean, SHOW089 boolean, SHOW090 boolean, SHOW091 boolean, SHOW092 boolean, SHOW093 boolean, SHOW094 boolean, SHOW095 boolean, SHOW096 boolean, SHOW097 boolean, SHOW098 boolean, SHOW099 boolean, SHOW100 boolean, SHOW101 boolean, SHOW102 boolean, SHOW103 boolean, SHOW104 boolean, SHOW105 boolean, SHOW106 boolean, SHOW107 boolean, SHOW108 boolean, SHOW109 boolean, SHOW110 boolean, SHOW111 boolean, SHOW112 boolean, SHOW113 boolean, SHOW114 boolean, SHOW115 boolean, SHOW116 boolean, SHOW117 boolean, SHOW118 boolean, SHOW119 boolean, SHOW120 boolean, SHOW121 boolean, SHOW122 boolean, SHOW123 boolean, SHOW124 boolean, SHOW125 boolean, SHOW126 boolean, SHOW127 boolean, SHOW128 boolean, SHOW129 boolean, SHOW130 boolean, SHOW131 boolean, SHOW132 boolean, SHOW133 boolean, SHOW134 boolean, SHOW135 boolean, SHOW136 boolean, SHOW137 boolean, SHOW138 boolean, SHOW139 boolean,SHOW140 boolean,SHOW141 boolean,SHOW142 boolean,SHOW143 boolean,SHOW144 boolean,SHOW145 boolean,SHOW146 boolean,SHOW147 boolean,SHOW148 boolean,SHOW149 boolean,SHOW150 boolean,SHOW151 boolean,SHOW152 boolean,SHOW153 boolean,SHOW154 boolean,SHOW155 boolean,SHOW156 boolean,SHOW157 boolean,SHOW158 boolean,SHOW159 boolean,SHOW160 boolean,SHOW161 boolean,SHOW162 boolean,SHOW163 boolean,SHOW164 boolean,SHOW165 boolean,SHOW166 boolean,SHOW167 boolean,SHOW168 boolean,SHOW169 boolean,SHOW170 boolean,SHOW171 boolean,SHOW172 boolean,SHOW173 boolean,SHOW174 boolean,SHOW175 boolean,SHOW176 boolean,SHOW177 boolean,SHOW178 boolean,SHOW179 boolean,SHOW180 boolean,SHOW181 boolean,SHOW182 boolean,SHOW183 boolean,SHOW184 boolean,SHOW185 boolean,SHOW186 boolean,SHOW187 boolean,SHOW188 boolean,SHOW189 boolean,SHOW190 boolean,SHOW191 boolean,SHOW192 boolean,SHOW193 boolean,SHOW194 boolean,SHOW195 boolean,SHOW196 boolean,SHOW197 boolean,SHOW198 boolean,SHOW199 boolean, SHOW200 boolean, SHOW201 boolean, SHOW202 boolean, SHOW203 boolean, SHOW204 boolean, SHOW205 boolean, SHOW206 boolean, SHOW207 boolean, SHOW208 boolean, SHOW209 boolean, SHOW210 boolean, STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  OWNER  varchar(40),  OWNER2  varchar(40),  PRIMARY  KEY(  SID))";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".SEAT_b (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, LOCATION  INT  not null , ROW  varchar(4) not null, ROWLABEL  varchar(50), SEAT001STATUS varchar(1), NAME001 varchar(50), TICKET001 varchar(50), PO001 varchar(32), SEAT002STATUS varchar(1), NAME002 varchar(50), TICKET002 varchar(50), PO002 varchar(32), SEAT003STATUS varchar(1), NAME003 varchar(50), TICKET003 varchar(50), PO003 varchar(32), SEAT004STATUS varchar(1), NAME004 varchar(50), TICKET004 varchar(50), PO004 varchar(32), SEAT005STATUS varchar(1), NAME005 varchar(50), TICKET005 varchar(50), PO005 varchar(32), SEAT006STATUS varchar(1), NAME006 varchar(50), TICKET006 varchar(50), PO006 varchar(32), SEAT007STATUS varchar(1), NAME007 varchar(50), TICKET007 varchar(50), PO007 varchar(32), SEAT008STATUS varchar(1), NAME008 varchar(50), TICKET008 varchar(50), PO008 varchar(32), SEAT009STATUS varchar(1), NAME009 varchar(50), TICKET009 varchar(50), PO009 varchar(32), SEAT010STATUS varchar(1), NAME010 varchar(50), TICKET010 varchar(50), PO010 varchar(32), SEAT011STATUS varchar(1), NAME011 varchar(50), TICKET011 varchar(50), PO011 varchar(32), SEAT012STATUS varchar(1), NAME012 varchar(50), TICKET012 varchar(50), PO012 varchar(32), SEAT013STATUS varchar(1), NAME013 varchar(50), TICKET013 varchar(50), PO013 varchar(32), SEAT014STATUS varchar(1), NAME014 varchar(50), TICKET014 varchar(50), PO014 varchar(32), SEAT015STATUS varchar(1), NAME015 varchar(50), TICKET015 varchar(50), PO015 varchar(32), SEAT016STATUS varchar(1), NAME016 varchar(50), TICKET016 varchar(50), PO016 varchar(32), SEAT017STATUS varchar(1), NAME017 varchar(50), TICKET017 varchar(50), PO017 varchar(32), SEAT018STATUS varchar(1), NAME018 varchar(50), TICKET018 varchar(50), PO018 varchar(32), SEAT019STATUS varchar(1), NAME019 varchar(50), TICKET019 varchar(50), PO019 varchar(32), SEAT020STATUS varchar(1), NAME020 varchar(50), TICKET020 varchar(50), PO020 varchar(32), SEAT021STATUS varchar(1), NAME021 varchar(50), TICKET021 varchar(50), PO021 varchar(32), SEAT022STATUS varchar(1), NAME022 varchar(50), TICKET022 varchar(50), PO022 varchar(32), SEAT023STATUS varchar(1), NAME023 varchar(50), TICKET023 varchar(50), PO023 varchar(32), SEAT024STATUS varchar(1), NAME024 varchar(50), TICKET024 varchar(50), PO024 varchar(32), SEAT025STATUS varchar(1), NAME025 varchar(50), TICKET025 varchar(50), PO025 varchar(32), SEAT026STATUS varchar(1), NAME026 varchar(50), TICKET026 varchar(50), PO026 varchar(32), SEAT027STATUS varchar(1), NAME027 varchar(50), TICKET027 varchar(50), PO027 varchar(32), SEAT028STATUS varchar(1), NAME028 varchar(50), TICKET028 varchar(50), PO028 varchar(32), SEAT029STATUS varchar(1), NAME029 varchar(50), TICKET029 varchar(50), PO029 varchar(32), SEAT030STATUS varchar(1), NAME030 varchar(50), TICKET030 varchar(50), PO030 varchar(32), SEAT031STATUS varchar(1), NAME031 varchar(50), TICKET031 varchar(50), PO031 varchar(32), SEAT032STATUS varchar(1), NAME032 varchar(50), TICKET032 varchar(50), PO032 varchar(32), SEAT033STATUS varchar(1), NAME033 varchar(50), TICKET033 varchar(50), PO033 varchar(32), SEAT034STATUS varchar(1), NAME034 varchar(50), TICKET034 varchar(50), PO034 varchar(32), SEAT035STATUS varchar(1), NAME035 varchar(50), TICKET035 varchar(50), PO035 varchar(32), SEAT036STATUS varchar(1), NAME036 varchar(50), TICKET036 varchar(50), PO036 varchar(32), SEAT037STATUS varchar(1), NAME037 varchar(50), TICKET037 varchar(50), PO037 varchar(32), SEAT038STATUS varchar(1), NAME038 varchar(50), TICKET038 varchar(50), PO038 varchar(32), SEAT039STATUS varchar(1), NAME039 varchar(50), TICKET039 varchar(50), PO039 varchar(32), SEAT040STATUS varchar(1), NAME040 varchar(50), TICKET040 varchar(50), PO040 varchar(32),  SEAT041STATUS varchar(1), NAME041 varchar(50), TICKET041 varchar(50), PO041 varchar(32), SEAT042STATUS varchar(1), NAME042 varchar(50), TICKET042 varchar(50), PO042 varchar(32), SEAT043STATUS varchar(1), NAME043 varchar(50), TICKET043 varchar(50), PO043 varchar(32), SEAT044STATUS varchar(1), NAME044 varchar(50), TICKET044 varchar(50), PO044 varchar(32), SEAT045STATUS varchar(1), NAME045 varchar(50), TICKET045 varchar(50), PO045 varchar(32), SEAT046STATUS varchar(1), NAME046 varchar(50), TICKET046 varchar(50), PO046 varchar(32), SEAT047STATUS varchar(1), NAME047 varchar(50), TICKET047 varchar(50), PO047 varchar(32), SEAT048STATUS varchar(1), NAME048 varchar(50), TICKET048 varchar(50), PO048 varchar(32), SEAT049STATUS varchar(1), NAME049 varchar(50), TICKET049 varchar(50), PO049 varchar(32), SEAT050STATUS varchar(1), NAME050 varchar(50), TICKET050 varchar(50), PO050 varchar(32), STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  OWNER  varchar(40),  OWNER2  varchar(40),  PRIMARY  KEY(  SID), FOREIGN  KEY  (  LOCATION)  REFERENCES "+schemaName+".LOCATION_b  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
//sep09 2019 used as holding table to map csv to pojo columns, no need to backup this table, so no _b or _c
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".IMPORTCSV_b  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, TABLENM varchar(60), ROW  varchar(2) not null,  COLUMN01  varchar(159),  COLUMN02  varchar(159),  COLUMN03  varchar(159),  COLUMN04  varchar(159),  COLUMN05  varchar(159),  COLUMN06  varchar(159),  COLUMN07  varchar(159),  COLUMN08  varchar(159),  COLUMN09  varchar(159),  COLUMN10  varchar(159),  COLUMN11  varchar(159),  COLUMN12  varchar(159),  COLUMN13  varchar(159),  COLUMN14  varchar(159),  COLUMN15  varchar(159),  COLUMN16  varchar(159),  COLUMN17  varchar(159),  COLUMN18  varchar(159),  COLUMN19  varchar(159),  COLUMN20  varchar(159),  COLUMN21  varchar(159),  COLUMN22  varchar(159),  COLUMN23  varchar(159),  COLUMN24  varchar(159),  COLUMN25  varchar(159),  COLUMN26  varchar(159),  COLUMN27  varchar(159),  COLUMN28  varchar(159),  COLUMN29  varchar(159),  COLUMN30  varchar(159),  COLUMN31  varchar(159),  COLUMN32  varchar(159),  COLUMN33  varchar(159),  COLUMN34  varchar(159),  COLUMN35  varchar(159),  COLUMN36  varchar(159),  COLUMN37  varchar(159),  COLUMN38  varchar(159),  COLUMN39  varchar(159),  COLUMN40  varchar(159),  COLUMN41  varchar(159),  COLUMN42  varchar(159),  COLUMN43  varchar(159),  COLUMN44  varchar(159),  COLUMN45  varchar(159),  COLUMN46  varchar(159),  COLUMN47  varchar(159),  COLUMN48  varchar(159),  COLUMN49  varchar(159),  COLUMN50  varchar(159),  COLUMN51  varchar(159),  COLUMN52  varchar(159),  COLUMN53  varchar(159),  COLUMN54  varchar(159),  COLUMN55  varchar(159),  COLUMN56  varchar(159),  COLUMN57  varchar(159),  COLUMN58  varchar(159),  COLUMN59  varchar(159),  COLUMN60  varchar(159),  COLUMN61  varchar(159),  COLUMN62  varchar(159),  COLUMN63  varchar(159),  COLUMN64  varchar(159),  COLUMN65  varchar(159),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  NOTES  varchar(60),  OWNER  varchar(40), OWNER2  varchar(40), PRIMARY  KEY(SID), UNIQUE (TABLENM,ROW,OWNER2)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();

      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".ITEMPROFL_b  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, ITEMID  INT, ROW varchar(20), LENGTH varchar(255), WIDTH varchar(255),  HEIGHT  varchar(30),  SIZEUNIT  varchar(30), WEIGHT varchar(30), WEIGHTUNIT  varchar(30),  SHIPMODE  varchar(30),  COLOUR  varchar(30),  MATERIAL  boolean,  MADEIN  boolean,  SKU  boolean,  SALESCHANNEL  varchar(5),  COMPAREPRICE  varchar(5),  CUSTOMSCODE  varchar(5),  PAGETITLE  varchar(5),  METADESCRIPTION  varchar(5),  URLHANDLE  varchar(5),  RATING  varchar(30),  POINTS  varchar(30),  POINTSUNIT  varchar(30),  DTSTYLE  varchar(30),  FTSTYLE  varchar(20),  DEFAULTR  varchar(3),  DEFAULTC  varchar(3),  DBNAME  varchar(20),  ROOTDIR  varchar(35),  KEYORDER  varchar(3),  MARGIN  numeric(14,2),  FOOTER  numeric(14,2),  LISTBUILDC  boolean,  LISTBUILDV  boolean,  LISTBUILDE  boolean,  LISTBROWNC  INT,  LISTBROWNV  INT,  LISTBROWNE  INT,   STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  NOTES  varchar(4096000),  DOCMNT  varchar(90),  OWNER  varchar(40),  OWNER2  varchar(40), PRIMARY  KEY(SID), FOREIGN KEY(ITEMID) REFERENCES  "+schemaName+".item_b(SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      log.info("create tables_b done");
	 return "create tables_b done";
      }catch (Exception e) {
       log.severe("create tables_b exception for "+schemaName+", error "+e.getMessage());
       return null;
      }

     }


     public String  createTables_c(String dbProductName,String schemaName) {
      if(dbProductName == null || dbProductName.isEmpty()){
       dbProductName="hsql";
      }
      if(schemaName == null || schemaName.isEmpty()){
       schemaName="genapp";
      }
     // warning- sqlscript may have multiple creates under one quote mark. do not put line feeds in the middle to look nicer
     // made separate scripts because hsqldb did not support it.
     if(dbProductName.equals("msql")){
      createTablesMsql_c(schemaName);// uses auto-create for identify
      return null;
     }
      try{
      String sqlScript ="";
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".ADDRESS_c  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, ADDRESCODE  varchar(32) not null,  ADDRL1  varchar(159),  ADDRL2  varchar(159),  ADDRL3  varchar(159),  CITY  varchar(20),  PROVNSTATE  varchar(20),  COUNTRY  varchar(20),  PZCODE  varchar(20),  DESCRIPT  varchar(120),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  NOTES  varchar(60),  OWNER  varchar(40),  OWNER2  varchar(40),  PRINTMSTAT  INT,  PRINMTFLDT  TIMESTAMP, PRIMARY  KEY(SID)  ) ";
      Query q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".OPTIONS_c  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, ROW  varchar(2) not null,  OPTIONS01  varchar(159),  PURPOSE01  varchar(159),  VALUE01  varchar(159),  OPTIONS02  varchar(159),  PURPOSE02  varchar(159),  VALUE02  varchar(159),  OPTIONS03  varchar(159),  PURPOSE03  varchar(159),  VALUE03  varchar(159),  OPTIONS04  varchar(159),  PURPOSE04  varchar(159),  VALUE04  varchar(159),  OPTIONS05  varchar(159),  PURPOSE05  varchar(159),  VALUE05  varchar(159),  OPTIONS06  varchar(159),  PURPOSE06  varchar(159),  VALUE06  varchar(159),  OPTIONS07  varchar(159),  PURPOSE07  varchar(159),  VALUE07  varchar(159),  OPTIONS08  varchar(159),  PURPOSE08  varchar(159),  VALUE08  varchar(159),  OPTIONS09  varchar(159),  PURPOSE09  varchar(159),  VALUE09  varchar(159),  OPTIONS10  varchar(159),  PURPOSE10  varchar(159),  VALUE10  varchar(159),  OPTIONS11  varchar(159),  PURPOSE11  varchar(159),  VALUE11  varchar(159),  OPTIONS12  varchar(159),  PURPOSE12  varchar(159),  VALUE12  varchar(159),  OPTIONS13  varchar(159),  PURPOSE13  varchar(159),  VALUE13  varchar(159),  OPTIONS14  varchar(159),  PURPOSE14  varchar(159),  VALUE14  varchar(159),  OPTIONS15  varchar(159),  PURPOSE15  varchar(159),  VALUE15  varchar(159),  OPTIONS16  varchar(159),  PURPOSE16  varchar(159),  VALUE16  varchar(159),  OPTIONS17  varchar(159),  PURPOSE17  varchar(159),  VALUE17  varchar(159),  OPTIONS18  varchar(159),  PURPOSE18  varchar(159),  VALUE18  varchar(159),  OPTIONS19  varchar(159),  PURPOSE19  varchar(159),  VALUE19  varchar(159),  OPTIONS20  varchar(159),  PURPOSE20  varchar(159),  VALUE20  varchar(159),  OPTIONS21  varchar(159),  PURPOSE21  varchar(159),  VALUE21  varchar(159),  OPTIONS22  varchar(159),  PURPOSE22  varchar(159),  VALUE22  varchar(159),  OPTIONS23  varchar(159),  PURPOSE23  varchar(159),  VALUE23  varchar(159),  OPTIONS24  varchar(159),  PURPOSE24  varchar(159),  VALUE24  varchar(159),  OPTIONS25  varchar(159),  PURPOSE25  varchar(159),  VALUE25  varchar(159),  OPTIONS26  varchar(159),  PURPOSE26  varchar(159),  VALUE26  varchar(159),  OPTIONS27  varchar(159),  PURPOSE27  varchar(159),  VALUE27  varchar(159),  OPTIONS28  varchar(159),  PURPOSE28  varchar(159),  VALUE28  varchar(159),  OPTIONS29  varchar(159),  PURPOSE29  varchar(159),  VALUE29  varchar(159),  OPTIONS30  varchar(159),  PURPOSE30  varchar(159),  VALUE30  varchar(159),  OPTIONS31  varchar(159),  PURPOSE31  varchar(159),  VALUE31  varchar(159),  OPTIONS32  varchar(159),  PURPOSE32  varchar(159),  VALUE32  varchar(159),  OPTIONS33  varchar(159),  PURPOSE33  varchar(159),  VALUE33  varchar(159),  OPTIONS34  varchar(159),  PURPOSE34  varchar(159),  VALUE34  varchar(159),  OPTIONS35  varchar(159),  PURPOSE35  varchar(159),  VALUE35  varchar(159),  OPTIONS36  varchar(159),  PURPOSE36  varchar(159),  VALUE36  varchar(159),  OPTIONS37  varchar(159),  PURPOSE37  varchar(159),  VALUE37  varchar(159),  OPTIONS38  varchar(159),  PURPOSE38  varchar(159),  VALUE38  varchar(159),  OPTIONS39  varchar(159),  PURPOSE39  varchar(159),  VALUE39  varchar(159),  OPTIONS40  varchar(159),  PURPOSE40  varchar(159),  VALUE40  varchar(159),  OPTIONS41  varchar(159),  PURPOSE41  varchar(159),  VALUE41  varchar(159),  OPTIONS42  varchar(159),  PURPOSE42  varchar(159),  VALUE42  varchar(159),  OPTIONS43  varchar(159),  PURPOSE43  varchar(159),  VALUE43  varchar(159),  OPTIONS44  varchar(159),  PURPOSE44  varchar(159),  VALUE44  varchar(159),  OPTIONS45  varchar(159),  PURPOSE45  varchar(159),  VALUE45  varchar(159),  OPTIONS46  varchar(159),  PURPOSE46  varchar(159),  VALUE46  varchar(159),  OPTIONS47  varchar(159),  PURPOSE47  varchar(159),  VALUE47  varchar(159),  OPTIONS48  varchar(159),  PURPOSE48  varchar(159),  VALUE48  varchar(159),  OPTIONS49  varchar(159),  PURPOSE49  varchar(159),  VALUE49  varchar(159),  OPTIONS50  varchar(159),  PURPOSE50  varchar(159),  VALUE50  varchar(159),  OPTIONS51  varchar(159),  PURPOSE51  varchar(159),  VALUE51  varchar(159),  OPTIONS52  varchar(159),  PURPOSE52  varchar(159),  VALUE52  varchar(159),  OPTIONS53  varchar(159),  PURPOSE53  varchar(159),  VALUE53  varchar(159),  OPTIONS54  varchar(159),  PURPOSE54  varchar(159),  VALUE54  varchar(159),  OPTIONS55  varchar(159),  PURPOSE55  varchar(159),  VALUE55  varchar(159),  OPTIONS56  varchar(159),  PURPOSE56  varchar(159),  VALUE56  varchar(159),  OPTIONS57  varchar(159),  PURPOSE57  varchar(159),  VALUE57  varchar(159),  OPTIONS58  varchar(159),  PURPOSE58  varchar(159),  VALUE58  varchar(159),  OPTIONS59  varchar(159),  PURPOSE59  varchar(159),  VALUE59  varchar(159),  OPTIONS60  varchar(159),  PURPOSE60  varchar(159),  VALUE60  varchar(159),  OPTIONS61  varchar(159),  PURPOSE61  varchar(159),  VALUE61  varchar(159),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  NOTES  varchar(60),  OWNER  varchar(40), OWNER2  varchar(40), PRIMARY  KEY(SID), UNIQUE (ROW,OWNER2)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".CLIENT_c  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, CLIENTVERSION  varchar(5) not null,  SERIALNUM  varchar(15),  ENTERPRISECOMPANYNA  varchar(35),  DESCRIPT  varchar(120),  ADDRL1  varchar(35),  ADDRL2  varchar(35),  ADDRL3  varchar(35),  CITY  varchar(20),  PROVNSTATE  varchar(20),  COUNTRYNAME  varchar(20),  PZCODE  varchar(20),  PHONEO  varchar(30),  PHONEH  varchar(25),  PHONEC  varchar(25),  PHONEX  varchar(30),  LANADDR  varchar(35),  WANADDR  varchar(35),  LMAILADDR  varchar(35),  IMAILADDR  varchar(60),  RMAILADDR  varchar(35),  INTADDR  varchar(60),  INRADDR  varchar(35),  ENTERPRISECOMPCODE  varchar(40),  ENTERPRISECOMPSIZE  varchar(15),  BARCSIZE  varchar(12),  LEVEL  boolean,  POSKIPP  varchar(10),  LOOSEIT  boolean,  JOBSKIP  varchar(10),  CARTONFL  boolean,  PICKLIST  boolean,  PRODDESC  varchar(15),  PRODCODE  varchar(12),  NJOB  varchar(15),  NMATERIA  varchar(15),  NACTIVITY  varchar(15),  NBUTT  varchar(15),  NCUSTOME  varchar(15),  NCONTACT  varchar(15),  NVENDOR  varchar(15),  NEMPLOYEE  varchar(15),  NSCHEDULE  varchar(15),  NREJECT  varchar(15),  NRETURN  varchar(15),  NCODE  varchar(15),  MANUFID  varchar(20),  BARTYPE  varchar(4),  CADTYPE  varchar(4),  CARTYPE  varchar(4),  SHITYPE  varchar(4),  REPTYPE  varchar(4),  LOCTYPE  varchar(4),  BARCOL  boolean,  CARCOL  boolean,  CADCOL  boolean,  SHICOL  boolean,  REPCOL  boolean,  LOCCOL  boolean,  ALTSERIA  boolean,  COUNTRYCODE  varchar(3),  NALTSERI  varchar(12),  SCRCOLOR  varchar(255),  HILCOLOR  varchar(255),  TEXTCOLOR  varchar(255),  BACCOLOR  varchar(255),  DATETYPE  varchar(7), CURRCODE  varchar(3),  PRINBAR  boolean,  BARPRINT  varchar(4),  CARPRINT  varchar(4),  CADPRINT  varchar(4),  LOCPRINT  varchar(4),  SHIPRINT  varchar(4),  REPPRINT  varchar(4),  BARPRTY  varchar(4),  REPPRTY  varchar(4),  CARPRTY  varchar(4),  CADPRTY  varchar(4),  SHIPRTY  varchar(4),  LOCPRTY  varchar(4),  ALTSELEN  INT,  CUSTOLEN  INT,  CARCSIZE  varchar(12),  CADCSIZE  varchar(12),  SHICSIZE  varchar(12),  REPCSIZE  varchar(255),  LOCCSIZE  varchar(12),  CS  varchar(15),  NCONFTYP  varchar(12),  NLOCATIO  varchar(12),  NDIVCODE  varchar(12),  NDEPCODE  varchar(12),  NADDCODE  varchar(12),  NFLOOR  varchar(12),  NROOM  varchar(12),  NRACK  varchar(12),  MENUTYPE  varchar(3),  PADTYPE  varchar(4),  NRATE1TA  varchar(12),  NRATE2TA  varchar(12),  DEFCONFT varchar(8)  ,  BEEPSOU  boolean,  CONFIRM  boolean,  LINEFEED  boolean,  REFBARADJ  INT,  SHIBARADJ  INT,  CUSBARADJ  INT,  LOCBARADJ  INT,  CARBARADJ  INT,  NCORDER  varchar(12),  NSPERSON  varchar(12),  PROMPTI  boolean,  CUSTOMERQUOTENB  varchar(15),  CUSTOMERQUOTEN  INT,  CUSTOMERQUOTENA  varchar(15),  CUSTOMERORDERNB  varchar(15),  CUSTOMERORDERN  INT,  CUSTOMERORDERNA  varchar(15),  VENDORORDERNB  varchar(15),  VENDORORDERN  INT,  VENDORORDERNA  varchar(15),JOBNB  varchar(15),  JOBN  INT,  JOBNA  varchar(15),  CUSTOMERINVOICENB  varchar(15),  CUSTOMERINVOICEN  INT,  CUSTOMERINVOICENA  varchar(15),  VENDORINVOICENB  varchar(15),  VENDORINVOICEN  INT,  VENDORINVOICENA  varchar(15),  CUSTOMERPICKNB  varchar(15),  CUSTOMERPICKN  INT,  CUSTOMERPICKNA  varchar(15),  VENDORQUOTENB  varchar(15),  VENDORQUOTEN  INT,  VENDORQUOTENA  varchar(15),  CUSTOMERPAYMNTNB  varchar(15),  CUSTOMERPAYMNTN  INT,  CUSTOMERPAYMNTNA  varchar(15),  VENDORPAYMNTNB  varchar(15),  VENDORPAYMNTN  INT,  VENDORPAYMNTNA  varchar(15),  VENDORCHQNB  varchar(15),  VENDORCHQN  INT,  VENDORCHQNA  varchar(15),  TASKNB  varchar(15),  TASKN  INT,  TASKNA  varchar(15),  ARSEQB  varchar(15),  ARSEQ  INT,  ARSEQA  varchar(15),  APSEQB  varchar(15),  APSEQ  INT,  APSEQA  varchar(15),  GLSEQB  varchar(15),  GLSEQ  INT,  GLSEQA  varchar(15),  PASEQB  varchar(15),  PASEQ  INT,  PASEQA  varchar(15),  ICSEQB  varchar(15),  ICSEQ  INT,  ICSEQA  varchar(15),  JOSEQB  varchar(15),  JOSEQ  INT,  JOSEQA  varchar(15),  SGLENTRY  varchar(15),  TAX1CODE  varchar(25),  TAX2CODE  varchar(25),  TAX3CODE  varchar(25),  NDECIMAL  INT,  EDIPASSW  varchar(10),  INTPASSW  varchar(15),  INRPASSW  varchar(10),  IMLPASSW  varchar(10),  RMLPASSW  varchar(10),  LMLPASSW  varchar(10),  HOSPASSW  varchar(10),  LANPASSW  varchar(10),  WANPASSW  varchar(10),  ASHOSTID  varchar(35),  HDSTYLE  varchar(30),  MTSTYLE  varchar(30),  STSTYLE  varchar(30),  DTSTYLE  varchar(30),  FTSTYLE  varchar(30),  DEFAULTR  varchar(15),  DEFAULTC  varchar(3),  DBNAME  varchar(35),  ROOTDIR  varchar(60),  KEYORDER  varchar(3),  CURRBUSDAT  TIMESTAMP,  LASTBUSDAT  TIMESTAMP,  CURRCALDAT  TIMESTAMP,  LASTCALDAT  TIMESTAMP,  PREPROCESS  boolean,  MARGIN  INT,  FOOTER  INT,  LASTUSER  varchar(10),  LISTBUILDC  boolean,  LISTBUILDV  boolean,  LISTBUILDE  boolean,  LISTBROWNC  INT,  LISTBROWNV  INT,  LISTBROWNE  INT,  SMTPSERVER  varchar(30),  SMTPUSER  varchar(35),  SMTPPASS  varchar(20),  POP3SERVER  varchar(30),  POP3USER  varchar(35),  POP3PASS  varchar(20),  SMATCODE  varchar(15),  FYREND  TIMESTAMP,  FPERIODS  INT,  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  NOTES  varchar(60),  OWNER  varchar(40), OWNER2  varchar(40),  EMPLOYEEORDERNB  varchar(15),  EMPLOYEEORDERN  INT,  EMPLOYEEORDERNA  varchar(15),  licensetype  varchar(15),licensestart  TIMESTAMP,licenseend  TIMESTAMP, apiclientid  varchar(255),apiclientsecret  varchar(12000), CURRSYMB  varchar(4),  PRIMARY  KEY(SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".DEPARTMENT_c  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, DEPCODE  varchar(32) not null,  DESCRIPT  varchar(120),  GLPREFIX varchar(20), STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  NOTES  varchar(60),  OWNER  varchar(40), OWNER2  varchar(40), PRIMARY  KEY(SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".COMPANY_c  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, COMPANYCODE  varchar(32) not null,  DESCRIPT  varchar(120),  LEGALNAME  varchar(60),  MAILTOCODE INT , GLPREFIX varchar(20), STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  NOTES  varchar(60),  OWNER  varchar(40), OWNER2  varchar(40),  PRIMARY  KEY(SID),  FOREIGN  KEY  (  MAILTOCODE  )  REFERENCES "+schemaName+".ADDRESS_c(  SID  )  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".CONTROL_c  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, CONTROLCODE  varchar(32) not null,  DESCRIPT  varchar(120),  TYPEOFCONTROL  varchar(12),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  NOTES  varchar(60),  OWNER  varchar(40), OWNER2  varchar(40), PRIMARY  KEY(SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".DIVISION_c  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, DIVCODE  varchar(32) not null, DESCRIPT  varchar(120),  GLPREFIX varchar(20), STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  NOTES  varchar(60),  OWNER  varchar(40), OWNER2  varchar(40), PRIMARY KEY(SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".LOCATION_c  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, LOCATION  varchar(32) not null,  DESCRIPT  varchar(120),  COMPANYCODE  INT  , ADDRESSCODE   INT  ,  FLOOR  varchar(25),  ROOM  varchar(25),  RACK  varchar(25),  PRINTMSTAT  INT,  PRINMTFLDT  TIMESTAMP,  EXCLUDE  boolean,  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  NOTES  varchar(60),  OWNER  varchar(40),  OWNER2  varchar(40),  PRIMARY  KEY(  SID),  FOREIGN  KEY  (  COMPANYCODE  )  REFERENCES "+schemaName+".COMPANY_c  (  SID  ),  FOREIGN  KEY  (  ADDRESSCODE  )  REFERENCES "+schemaName+".ADDRESS_c(  SID  )  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".RESIDENCY_c  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, RESIDENCY  varchar(32) not null,  DESCRIPT  varchar(120),  MUNICIPALITY  varchar(20),  PROVINCE  varchar(20),  COUNTRYNAME  varchar(20),  EXCLUDE  boolean,  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  NOTES  varchar(60),  OWNER  varchar(40),  OWNER2  varchar(40),  PRIMARY  KEY(  SID  )  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".ACCOUNT_c  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, ACCOUNT  varchar(20) not null  ,  DESCRIPT  varchar(120),  CATEGORY  varchar(20),  TYPE  varchar(12),  BUDGET  numeric(14,2),  ACTUAL  numeric(14,2),  ACTUALN  numeric(14,2),  PREVBUDG  numeric(14,2),  PREVACT  numeric(14,2),  SEQUENCE  INT,  CHILD  varchar(20),  PARENT  varchar(20),  ROLLUPQ  INT,  COMPANYCODE  INT  ,  DEPCODE  INT  ,  DIVCODE  INT  ,  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  CURRENCY  varchar(3),  NOTES  varchar(255),  OWNER  varchar(40),  OWNER2  varchar(40),  P0  numeric(14,2),  P1  numeric(14,2),  P2  numeric(14,2),  P3  numeric(14,2),  P4  numeric(14,2),  P5  numeric(14,2),  P6  numeric(14,2),  P7  numeric(14,2),  P8  numeric(14,2),  P9  numeric(14,2),  P10  numeric(14,2),  P11  numeric(14,2),  P12  numeric(14,2),  P13  numeric(14,2),  P14  numeric(14,2),  P8T  numeric(14,2),  P9T  numeric(14,2),  P10T  numeric(14,2),  P11T  numeric(14,2),  PRIMARY  KEY  (  SID  ),  FOREIGN  KEY  (  COMPANYCODE  )  REFERENCES "+schemaName+".COMPANY_c  (  SID  ),  FOREIGN  KEY  (  DEPCODE  )  REFERENCES "+schemaName+".DEPARTMENT_c  (  SID  ),  FOREIGN  KEY  (  DIVCODE  )  REFERENCES "+schemaName+".DIVISION_c  (  SID  )  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".CUSTOMER_c  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, CUSTOMER  varchar(32) not null,  DESCRIPT  varchar(120),  TITLE  varchar(12),  JOBTITLE  varchar(20),  LASTNAME  varchar(25),  FIRSTNAME  varchar(25),  MIDDLENAM  varchar(20),  CUSTOMERASCOMPANYNAME  varchar(25),  CUSTTOTL  numeric(14,2),  CUSTTQTY  numeric(14,2), COMPANYCODE INT,  LOCATION  INT  ,  MAILTOCODE  INT  ,  SHIPTOCODE  INT  ,  TAX1  boolean,  TAX2  boolean,  TAX3  boolean,  CUSTTAX1  varchar(25),  CUSTTAX2  varchar(25),  CUSTTAX3  varchar(25),  PHONEO  varchar(20),  PHONEH  varchar(16),  PHONEC  varchar(16),  PHONEX  varchar(20),  LANADDR  varchar(35),  WANADDR  varchar(35),  LMAILADDR  varchar(35),  IMAILADDR  varchar(60),  RMAILADDR  varchar(35),  INTADDR  varchar(60),  INRADDR  varchar(35),  DOB TIMESTAMP, PLACEOFBIRTH varchar(60), SEX varchar(1), AGE int, CUSRTOTL  numeric(14,2),  CUSRTQTY  numeric(14,2),  CUSMTOTL  numeric(14,2),  CUSDTOTL  numeric(14,2),  LASTORDER  varchar(20),  LASTINVOIC  varchar(20),  LASTPAYMNQ  numeric(14,2),  PRINTMSTAT  INT,  PRINMTFLDT  TIMESTAMP,  SHIPLABEL  boolean,  TYPE  varchar(10),  DEFAULTGLAC  INT,  INTEGRSET  varchar(20),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  TOTLPAID  numeric(14,2),  CONTACTED  TIMESTAMP,  BYWHO  varchar(20),  NXTCONTACT  TIMESTAMP,  VIA  varchar(11),  KEYWORDS  varchar(30),  NOTES  varchar(159),  OWNER  varchar(40),  OWNER2  varchar(40),  DOCMNT  varchar(90),  PRIMARY  KEY  (  SID  ),  FOREIGN  KEY  (  MAILTOCODE)  REFERENCES "+schemaName+".ADDRESS_c(  SID  ),  FOREIGN  KEY  (  COMPANYCODE)  REFERENCES "+schemaName+".COMPANY_c(  SID  ),  FOREIGN  KEY  (  LOCATION  )  REFERENCES "+schemaName+".LOCATION_c  (  SID ),  FOREIGN  KEY  (  DEFAULTGLAC  )  REFERENCES "+schemaName+".ACCOUNT_c  (  SID ),  FOREIGN  KEY  (  SHIPTOCODE)  REFERENCES "+schemaName+".ADDRESS_c(  SID  )  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".VENDOR_c  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, VENDOR  varchar(32) not null,  DESCRIPT  varchar(60),  TITLE  varchar(20),  JOBTITLE  varchar(20),  LASTNAME  varchar(25),  FIRSTNAME  varchar(25),  MIDDLENAM  varchar(20),  VENDORASCOMPANYNAME  varchar(25),  VENDTOTL  numeric(14,2),  VENDTQTY  numeric(14,2), COMPANYCODE INT  ,  LOCATION  INT  ,  MAILTOCODE  INT  ,  PHONEO  varchar(30),  PHONEH  varchar(25),  PHONEC  varchar(25),  PHONEX  varchar(30),  LANADDR  varchar(35),  WANADDR  varchar(35),  LMAILADDR  varchar(35),  IMAILADDR  varchar(60),  RMAILADDR  varchar(35),  INTADDR  varchar(60),  INRADDR  varchar(35),  VENRTOTL  numeric(14,2),  VENRTQTY  numeric(14,2),  VENMTOTL  numeric(14,2),  VENDDTOTL  numeric(14,2),  LASTQUOTE  varchar(20),  LASTORDER  varchar(20),  LASTINVOIC  varchar(20),  LASTPAYMQ  numeric(14,2),  PRINTMSTAT  INT,  PRINMTFLDT  TIMESTAMP,  SHIPLABEL  boolean,  TYPE  varchar(10),  SHIPTOCODE  INT  ,  DEFAULTGLAC  INT,  INTEGRSET  varchar(20),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  TOTLPAID  numeric(14,2),  CONTACTED  TIMESTAMP,  BYWHO  varchar(20),  KEYWORDS  varchar(30),  NOTES  varchar(60),  OWNER  varchar(40),  OWNER2  varchar(40),  DOCMNT  varchar(90),  PRIMARY  KEY  (  SID),  FOREIGN  KEY  (  MAILTOCODE)  REFERENCES "+schemaName+".ADDRESS_c(  SID  ),  FOREIGN  KEY  (  COMPANYCODE)  REFERENCES "+schemaName+".COMPANY_c(  SID  ),  FOREIGN  KEY  (  LOCATION  )  REFERENCES "+schemaName+".LOCATION_c  (  SID ),  FOREIGN  KEY  (  DEFAULTGLAC  )  REFERENCES "+schemaName+".ACCOUNT_c  (  SID ),  FOREIGN  KEY  (  SHIPTOCODE)  REFERENCES "+schemaName+".ADDRESS_c(  SID  )  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".EMPLOYEE_c  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, EMPLOYEE  varchar(32) not null,  DESCRIPT  varchar(120),  TITLE  varchar(20),  JOBTITLE  varchar(20),  LASTNAME  varchar(25),  FIRSTNAME  varchar(25),  MIDDLENAM  varchar(20),  COMPANYCODE  INT  ,  EMPLTOTL  numeric(14,2),  EMPLTQTY  numeric(14,2),  DIVCODE  INT  ,  DEPCODE  INT  ,  LOCATION  INT  ,  RESIDENCY  INT  ,  MAILTOCODE  INT  ,  TAX1  boolean,  TAX2  boolean,  TAX3  boolean,  CUSTTAX1  varchar(25),  CUSTTAX2  varchar(25),  CUSTTAX3  varchar(25),  PHONEO  varchar(30),  PHONEH  varchar(25),  PHONEC  varchar(25),  PHONEX  varchar(30),  LANADDR  varchar(35),  WANADDR  varchar(35),  LMAILADDR  varchar(35),  IMAILADDR  varchar(60),  RMAILADDR  varchar(35),  INTADDR  varchar(60),  INRADDR  varchar(35),  EMPRTOTL  numeric(14,2),  EMPRTQTY  numeric(14,2),  EMPMTOTL  numeric(14,2),  EMPDTOTL  numeric(14,2),  LASTQUOTE  varchar(20),  LASTORDER  varchar(20),  LASTINVOIC  varchar(20),  LASTPAYMQ  numeric(14,2),  PRINTMSTAT  INT,  PRINMTFLDT  TIMESTAMP,  SHIPLABEL  boolean,  SHIPTOCODE  INT  ,  TYPE  varchar(12),  DEFAULTGLAC  INT,  INTEGRSET  varchar(20),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  CONTACTED  TIMESTAMP,  BYWHO  varchar(20),  KEYWORDS  varchar(30),  NOTES  varchar(60),  OWNER  varchar(40),  OWNER2  varchar(40),  DOCMNT  varchar(90),  PRIMARY  KEY  (  SID),  FOREIGN  KEY  (  DEPCODE  )  REFERENCES "+schemaName+".DEPARTMENT_c  (  SID  ),  FOREIGN  KEY  (  DIVCODE  )  REFERENCES "+schemaName+".DIVISION_c  (  SID  ),  FOREIGN  KEY  (  COMPANYCODE  )  REFERENCES "+schemaName+".COMPANY_c  (  SID  ),  FOREIGN  KEY  (  MAILTOCODE  )  REFERENCES "+schemaName+".ADDRESS_c(  SID  ),  FOREIGN  KEY  (  LOCATION  )  REFERENCES "+schemaName+".LOCATION_c  (  SID  ),  FOREIGN  KEY  (  DEFAULTGLAC  )  REFERENCES "+schemaName+".ACCOUNT_c  (  SID ),  FOREIGN  KEY  (  RESIDENCY)  REFERENCES "+schemaName+".RESIDENCY_c  (  SID  ),  FOREIGN  KEY  (  SHIPTOCODE)  REFERENCES "+schemaName+".ADDRESS_c(  SID  )  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".VCONTACT_c  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, CONTACT  varchar(20)  not null ,  VENDOR  INT,  TITLE  varchar(20),  JOBTITLE  varchar(20),  LASTNAME  varchar(25),  FIRSTNAME  varchar(25),  MIDDLENAM  varchar(20),  PHONEO  varchar(25),  PHONEH  varchar(25),  PHONEC  varchar(25),  PHONEX  varchar(20),  LANADDR  varchar(35),  WANADDR  varchar(35),  LMAILADDR  varchar(35),  IMAILADDR  varchar(60),  RMAILADDR  varchar(35),  INTADDR  varchar(60),  INRADDR  varchar(35),  LOCATION  INT,  MAILTOCODE  INT  ,  SHIPTOCODE  INT  ,  PRINTSTA  INT,  SHIPLABEL  boolean,  TYPE  varchar(12),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  KEYWORDS  varchar(30),  NOTES  varchar(60),  OWNER  varchar(40),  OWNER2  varchar(40),  DOCMNT  varchar(90),  PRIMARY  KEY  (  SID),  FOREIGN  KEY  (  MAILTOCODE)  REFERENCES "+schemaName+".ADDRESS_c(  SID  ),  FOREIGN  KEY  (  SHIPTOCODE)  REFERENCES "+schemaName+".ADDRESS_c(  SID  ),  FOREIGN  KEY  (  LOCATION)  REFERENCES "+schemaName+".LOCATION_c(  SID  ),  FOREIGN  KEY  (  VENDOR)  REFERENCES "+schemaName+".VENDOR_c  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".CCONTACT_c  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, CONTACT  varchar(32) not null,  CUSTOMER  INT,  TITLE  varchar(20),  JOBTITLE  varchar(20),  LASTNAME  varchar(25),  FIRSTNAME  varchar(25),  MIDDLENAM  varchar(20),  TAX1  boolean,  TAX2  boolean,  TAX3  boolean,  CUSTTAX1  varchar(25),  CUSTTAX2  varchar(25),  CUSTTAX3  varchar(25),  PHONEO  varchar(16),  PHONEH  varchar(16),  PHONEC  varchar(16),  PHONEX  varchar(20),  LANADDR  varchar(35),  WANADDR  varchar(35),  LMAILADDR  varchar(35),  IMAILADDR  varchar(60),  RMAILADDR  varchar(35),  INTADDR  varchar(60),  INRADDR  varchar(35),  LOCATION  INT,  MAILTOCODE  INT  ,  SHIPTOCODE  INT  ,  PRINTMSTAT  INT,  PRINMTFLDT  TIMESTAMP,  SHIPLABEL  boolean,  TYPE  varchar(12),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  KEYWORDS  varchar(30),  NOTES  varchar(60),  OWNER  varchar(40),  OWNER2  varchar(40),  DOCMNT  varchar(90),  PRIMARY  KEY  (  SID),  FOREIGN  KEY  (  MAILTOCODE)  REFERENCES "+schemaName+".ADDRESS_c(  SID  ),  FOREIGN  KEY  (  SHIPTOCODE)  REFERENCES "+schemaName+".ADDRESS_c(  SID  )  ,  FOREIGN  KEY  (  LOCATION)  REFERENCES "+schemaName+".LOCATION_c(  SID  )  ,  FOREIGN  KEY  (  CUSTOMER  )  REFERENCES "+schemaName+".CUSTOMER_c  (  SID  )  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".PERIODDATES_c  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, PERIOD  varchar(2) not null,  DESCRIPT  varchar(120),  STARTDATE  TIMESTAMP,  ENDDATE  TIMESTAMP,  STARTOFWEEK INT, STARTOFBWEEK INT, ENDOFBWEEK INT, STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  NOTES  varchar(255),  OWNER  varchar(40),  OWNER2  varchar(40),  PRIMARY  KEY  (  SID) )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".ACPERIOD_c  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, ROWID varchar(2) not null, CURRPERIOD  varchar(2),  DESCRIPT  varchar(120),  CURRBUSDATE  TIMESTAMP,  CURRCALDATE  TIMESTAMP,  CURRLOCALDATE  TIMESTAMP,  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  NOTES  varchar(255),  OWNER  varchar(40),  OWNER2  varchar(40),  PRIMARY KEY(SID) )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".WAGEEARNER_c  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, WAGEEARNERID  varchar(32) not null,  EMPLOYEE  INT  ,  SIN  varchar(20),  BIRTHDT  TIMESTAMP,  FEDCLAIM  numeric(14,2),  PROVCLAIM  numeric(14,2),  PAYYRFREQ  INT,  PAYPERIOD  INT,  WCB  boolean,  WCBYTD  numeric(14,2),  EMPLINSUR  boolean,  INSYTD  numeric(14,2),  VACRETAIN  boolean,  VACATONYT  numeric(14,2),  WAGEUNIT  varchar(20),  WAGERATE  numeric(14,2),  OTIMEUNIT  varchar(20),  OTIMERATE  numeric(14,2),  WAGEUNITS  numeric(14,2),  OTIMUNITS  numeric(14,2),  WAGEOUT  numeric(14,2),  OVTIMEOUT  numeric(14,2),  SALARYOUT  numeric(14,2),  COMMISSION  numeric(14,2),  BENEFITS  numeric(14,2),  VACATION  numeric(14,2),  VACPAYOUT  numeric(14,2),  ADVANCE  numeric(14,2),  PENSION  numeric(14,2),  AFTERTAX  boolean,  UNIONDUES  numeric(14,2),  MEDICAL  numeric(14,2),  FINCOMETX  numeric(14,2),  PINCOMETX  numeric(14,2),  THISPAYA  numeric(14,2),  LASTPAYA  numeric(14,2),  PAYYTD  numeric(14,2),  FPENSIYTD  numeric(14,2),  PPENSIYTD  numeric(14,2),  ITAXYTD  numeric(14,2),  PTAXYTD  numeric(14,2),  GRPAYYTD  numeric(14,2),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  NOTES  varchar(255),  OWNER  varchar(40),  OWNER2  varchar(40),  DOCMNT  varchar(90),  PRIMARY  KEY  (  SID),  FOREIGN  KEY  (  EMPLOYEE)  REFERENCES "+schemaName+".EMPLOYEE_c  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".ARTHATBL_c  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, USAGE  varchar(32) not null,  WCBPERCNT  numeric(14,2),  INSFACTOR  numeric(14,2),  VACATONRATE  numeric(14,2),  PENSIONMAX  numeric(14,2),  WCBMAX  numeric(14,2),  INSMAX  numeric(14,2),  ITAXLV0RATE  numeric(14,2),  ITAXLV1RATE  numeric(14,2),  ITAXLV2RATE  numeric(14,2),  ITAXLV3RATE  numeric(14,2),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  NOTES  varchar(255),  OWNER  varchar(40),  OWNER2  varchar(40),  PRIMARY  KEY  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".ROLLUPGROUP_c  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, GROUPID  varchar(32) not null,  DESCRIPT  varchar(120),  TYPE  varchar(10),  CURRPW  varchar(20),  EXPIRY  TIMESTAMP,  CURRENCY  varchar(3),  PERIOD0B  numeric(14,2),  PERIOD0  numeric(14,2),  PERIODTOTALSB  numeric(14,2),  PERIODTOTALS numeric(14,2),  PERIOD1BUDGET  numeric(14,2),  PERIOD1ACTUAL  numeric(14,2),  PERIOD2B  numeric(14,2),  PERIOD2  numeric(14,2),  PERIOD3B  numeric(14,2),  PERIOD3  numeric(14,2),  PERIOD4B  numeric(14,2),  PERIOD4  numeric(14,2),  PERIOD5B  numeric(14,2),  PERIOD5  numeric(14,2),  PERIOD6B  numeric(14,2),  PERIOD6  numeric(14,2),  PERIOD7B  numeric(14,2),  PERIOD7  numeric(14,2),  PERIOD8B  numeric(14,2),  PERIOD8  numeric(14,2),  PERIOD9B  numeric(14,2),  PERIOD9  numeric(14,2),  PERIOD10B  numeric(14,2),  PERIOD10  numeric(14,2),  PERIOD11B  numeric(14,2),  PERIOD11  numeric(14,2),  PERIOD12B  numeric(14,2),  PERIOD12  numeric(14,2),  PERIODNB  numeric(14,2),  PERIODN  numeric(14,2),  NOTES  varchar(60),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  OWNER  varchar(40),  OWNER2  varchar(40),  PRIMARY  KEY  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".MEMBERSGROUP_c  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, GROUPID  varchar(32) not null,  DESCRIPT  varchar(120),  QUANTITY numeric(14,2),  MODE  boolean,  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  OWNER  varchar(40),  OWNER2  varchar(40), PRIMARY  KEY(SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".ARTHAHIST_c  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, WAGEEARNER  varchar(32) not null,  SIN  varchar(12),  PERIOD  INT,  MONTH  INT,  CCYY  INT,  VACATION  numeric(14,2),  WAGE  numeric(14,2),  OVERTIME  numeric(14,2),  SALARY  numeric(14,2),  COMMISSION  numeric(14,2),  BENEFIT  numeric(14,2),  FINCOMETX  numeric(14,2),  PINCOMETX  numeric(14,2),  WCBOUT  numeric(14,2),  EMPLINSUR  numeric(14,2),  VACPAYOUT  numeric(14,2),  ADVANCE  numeric(14,2),  FPENSOBTX  numeric(14,2),  FPENSOATX  numeric(14,2),  UNIONDUES  numeric(14,2),  MEDICAL  numeric(14,2),  PAYAMT  numeric(14,2),  NOTES  varchar(60),  NOTES2  varchar(120),  CHQNUMBER  varchar(20),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  OWNER  varchar(40), OWNER2  varchar(40), PRIMARY  KEY(SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".GLENTRIES_c  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, GLENTRYNO  varchar(32) not null,  DESCRIPT  varchar(120),  REFCODE  varchar(20),  PERIOD  INT,  POSTDATE  TIMESTAMP,  CALENDARDT  TIMESTAMP,  DEPCODE  INT,  DIVCODE  INT,  ACCOUNT  INT,  TDEBITAMT  numeric(14,2),  TCREDITAMT  numeric(14,2),  NOTES  varchar(60),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  OWNER  varchar(40), OWNER2  varchar(40), PRIMARY  KEY(SID)  , FOREIGN  KEY  ( PERIOD)  REFERENCES "+schemaName+".PERIODDATES_c (  SID),  FOREIGN  KEY  ( ACCOUNT)  REFERENCES "+schemaName+".ACCOUNT_c  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".GENTRIESDETAILS_c  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, GLENTRYSIDNO  INT  not null ,  LINE  INT,  DEPCODE  INT,  DIVCODE  INT,  ACCOUNT  INT,  DEBITAMT  numeric(14,2),  CREDITAMT  numeric(14,2),  LINETOTL  numeric(14,2), NOTES  varchar(60),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  OWNER  varchar(40), OWNER2  varchar(40), PRIMARY  KEY(  SID), FOREIGN  KEY  (  GLENTRYSIDNO)  REFERENCES "+schemaName+".GLENTRIES_c  (  SID) ,  FOREIGN  KEY  ( ACCOUNT)  REFERENCES "+schemaName+".ACCOUNT_c  (  SID)   )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".HOLIDAY_c  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, SHOLIDAY  varchar(32) not null,  HOLIDAY  TIMESTAMP,  DESCRIPT  varchar(120),  TYPE  varchar(12),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  EMPLOYEE  INT  ,  RESIDENCY  INT  ,  OWNER  varchar(40),  OWNER2  varchar(40),  PRIMARY  KEY  (  SID),  FOREIGN  KEY  (  RESIDENCY)  REFERENCES "+schemaName+".RESIDENCY_c  (  SID  ),  FOREIGN  KEY  (  EMPLOYEE)  REFERENCES "+schemaName+".EMPLOYEE_c  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".JOURNAL_c  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, SPOSTDATE  VARCHAR(25) not null,  POSTDATE  TIMESTAMP,  CALENDARDT  TIMESTAMP,  JRNLTYPE  varchar(12),  JNLSEQB  varchar(15),  JNLSEQ  INT,  JNLSEQS  varchar(15),  PERIOD  INT,  ACCOUNT  varchar(20),  DEBIT  numeric(14,2),  CREDIT  numeric(14,2),  XREFERENCE  varchar(20),  DESCRIPT  varchar(120),  STATUSFL  INT,  OWNER  varchar(40),  OWNER2  varchar(40),  PRIMARY  KEY  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".CJOURNAL_c  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, SPOSTDATE  VARCHAR(25) not null,  POSTDATE  TIMESTAMP,  CALENDARDT  TIMESTAMP,  JRNLTYPE  varchar(12),  JNLSEQB  varchar(15),  JNLSEQ  INT,  JNLSEQS  varchar(15),  PERIOD  INT,  CONTROL  varchar(20),  DEBIT  numeric(14,2),  CREDIT  numeric(14,2),  XREFERENCE  varchar(20),  DESCRIPT  varchar(120),  STATUSFL  INT,  OWNER  varchar(40),  OWNER2  varchar(40),  PRIMARY  KEY  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".JJOURNAL_c  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, SPOSTDATE  VARCHAR(25) not null,  POSTDATE  TIMESTAMP,  CALENDARDT  TIMESTAMP,  JRNLTYPE  varchar(12),  JNLSEQB  varchar(15),  JNLSEQ  INT,  JNLSEQS  varchar(15),  PERIOD  INT,  JOB  varchar(20),  DEBIT  numeric(14,2),  CREDIT  numeric(14,2),  XREFERENCE  varchar(20),  DESCRIPT  varchar(120),  STATUSFL  INT,  OWNER  varchar(40),  OWNER2  varchar(40),  PRIMARY  KEY  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".ITEM_c  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, MATCODE  varchar(32) not null,  QUANTITY  numeric(14,2),  DESCRIPT  varchar(120),  DATEADDED  TIMESTAMP,   SOURCE1  varchar(35),  SOURCE2  varchar(35),  UPCCODE  varchar(25),  COST  numeric(14,2),  REPLCOST  numeric(14,2),  SELPRICE  numeric(14,2),  SPRICOLD  numeric(14,2),  SPRICNEW  numeric(14,2),  SPRICEFFDT  TIMESTAMP,  SHIPCODE  varchar(25),  PRINTMSTAT  INT,  PRINMTFLDT  TIMESTAMP,  MISCCODE1  varchar(25),  MISCCODE2  varchar(25),  QTYLEVEL1  numeric(14,2),  UNIT  varchar(12),  CASEQTY  numeric(14,2),  TYPE  varchar(12),  TAX1  boolean,  TAX2  boolean,  TAX3  boolean,  ALIASCODE  varchar(25),  PARENTCODE  INT  ,  AVGPRICE  numeric(14,2),  AVGCOST  numeric(14,2),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  SUBCODESN  VARCHAR(35),  SUBCODESN2 VARCHAR(35),  SUBCODESN3 VARCHAR(35),  CUORDQTY  numeric(14,2),  VENORQTY  numeric(14,2),  CUPICQTY  numeric(14,2),  VENPIQTY  numeric(14,2),  CUINVQTY  numeric(14,2),  CUSHIQTY  numeric(14,2),  VENSHQTY  numeric(14,2),  EFFDATE  TIMESTAMP,  INTEGRSET  varchar(20),  NOTES  varchar(4096000),  DOCMNT  varchar(90),  OWNER  varchar(40),  OWNER2  varchar(40),  LOCATION  INT  ,  BARUPC  varchar(30),  DATEEXPIRY  TIMESTAMP,  DATETORENEW  TIMESTAMP,  PRIMARY  KEY  (  SID), FOREIGN  KEY  (  PARENTCODE)  REFERENCES "+schemaName+".ITEM_c  (  SID)  , FOREIGN  KEY  (  LOCATION  )  REFERENCES "+schemaName+".LOCATION_c  (  SID ) )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".ACTIVITY_c  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, ACTIVITYCODE  varchar(32) not null,  QUANTITY  numeric(14,2),  DESCRIPT  varchar(120),  DATE  TIMESTAMP,  SOURCE1  varchar(35),  SOURCE2  varchar(35),  UPCCODE  varchar(25),  COST  numeric(14,2),  REPLCOST  numeric(14,2),  SELPRICE  numeric(14,2),  SPRICOLD  numeric(14,2),  SPRICNEW  numeric(14,2),  SPRICEFFDT  TIMESTAMP,  SHIPCODE  varchar(25),  PRINTMSTAT  INT,  PRINMTFLDT  TIMESTAMP,  MISCCODE1  varchar(25),  MISCCODE2  varchar(25),  QTYLEVEL1  numeric(14,2),  UNIT  varchar(12),  CASEQTY  numeric(14,2),  TYPE  varchar(12),  TAX1  boolean,  TAX2  boolean,  TAX3  boolean,  ALIASCODE  varchar(25),  PARENTCODE  INT  ,  AVGPRICE  numeric(14,2),  AVGCOST  numeric(14,2),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  SUBCODESN  VARCHAR(35),  SUBCODESN2 VARCHAR(35),  SUBCODESN3 VARCHAR(35),  CUORDQTY  numeric(14,2),  VENORQTY  numeric(14,2),  CUPICQTY  numeric(14,2),  VENPIQTY  numeric(14,2),  CUINVQTY  numeric(14,2),  CUSHIQTY  numeric(14,2),  VENSHQTY  numeric(14,2),  EFFDATE  TIMESTAMP,  INTEGRSET  varchar(20),  NOTES  varchar(60),  DOCMNT  varchar(90),  OWNER  varchar(40),  OWNER2  varchar(40),  BARUPC  varchar(30),  PRIMARY  KEY  (  SID), FOREIGN  KEY  (  PARENTCODE)  REFERENCES "+schemaName+".ACTIVITY_c  (  SID)   )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".SCHEDULE_c  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, TODO  varchar(35) not null,  DESCRIPT  varchar(120),  EMPLOYEE  INT  ,  SSDATET  varchar(30),  ACTIVITYCODE  INT  ,  LOCATION  INT  ,  SDATET  TIMESTAMP,  DURATIONH  INT,  DURATIONM  INT,  STIMEH  INT,  STIMEM  INT,  STIMEAMPM  boolean,  EDATET  TIMESTAMP,  PRIORITY  boolean,  PERCNTDONE  numeric(14,2),  VENDOR  INT  ,  VONTACT  INT  ,  CUSTOMER  INT ,  TYPE  varchar(20),  MAILTOCODE  INT  ,  OTHEREMPLO  INT,  REPEATF  varchar(20),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  PRIVATEIND  boolean,  NOTES  varchar(60),  OWNER  varchar(40),  OWNER2  varchar(40),  DOCMNT  varchar(90), MGROUP INT ,  PRIMARY  KEY  (  SID ),  FOREIGN  KEY  (  ACTIVITYCODE)  REFERENCES "+schemaName+".ACTIVITY_c  (  SID),  FOREIGN  KEY  (  CUSTOMER  )  REFERENCES "+schemaName+".CUSTOMER_c  (  SID  ),  FOREIGN  KEY  (  MGROUP  )  REFERENCES "+schemaName+".MEMBERSGROUP_c  (  SID  ),  FOREIGN  KEY  (  EMPLOYEE)  REFERENCES "+schemaName+".EMPLOYEE_c  (  SID),  FOREIGN  KEY  (  VENDOR)  REFERENCES "+schemaName+".VENDOR_c  (  SID),  FOREIGN  KEY  (  MAILTOCODE)  REFERENCES "+schemaName+".ADDRESS_c(  SID  ),  FOREIGN KEY (LOCATION)  REFERENCES "+schemaName+".LOCATION_c  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();

      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".SCHEDULEDETAILS_c  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, SCHEDULESIDNO  INT  not null ,  LINE  INT,  EMPLOYEE  INT,  VENDOR  INT,  CUSTOMER  INT,   NOTES  varchar(60),  STATUSFL  INT,  OWNER  varchar(40), OWNER2  varchar(40), PRIMARY  KEY(  SID), FOREIGN  KEY  (  SCHEDULESIDNO)  REFERENCES "+schemaName+".SCHEDULE_c  (  SID) ,  FOREIGN  KEY  ( EMPLOYEE)  REFERENCES "+schemaName+".EMPLOYEE_c  (  SID)   ,  FOREIGN  KEY  ( VENDOR)  REFERENCES "+schemaName+".VENDOR_c  (  SID)   ,  FOREIGN  KEY  ( CUSTOMER)  REFERENCES "+schemaName+".CUSTOMER_c  (  SID)   )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".\"USER_c\"  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, ID  varchar(60) not null,  CLIENT  INT  ,  EMPLOYEE  INT  ,  VENDOR  INT  ,  CUSTOMER  INT  ,  OTHERID  varchar(60),  ALEVEL  varchar(12),  BLEVEL  varchar(12),  CURRPW  varchar(40) not null,  EXPIRY  TIMESTAMP,  OLDPW  varchar(40),  TEMPORARYPASSWORD  boolean,  PASSWORDHASH  VARBINARY(1000000),  ACTIVATIONKEY varchar(60),  RESTRICT1  varchar(20),  RESTRICT2  varchar(20),  RESTRICT3  varchar(20),  ALLOW1  varchar(20),  ALLOW2  varchar(20),  ALLOW3  varchar(20),  MAXPROFLROW varchar(20), CPROFLROW varchar(20), STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  UCURRCALDA  TIMESTAMP,  PREPROCESS  boolean,  NOTES  varchar(60),  DOCMNT  varchar(90),  OWNER  varchar(40),  OWNER2  varchar(40),SIGNATURE varchar(1200),  PRIMARY  KEY  (  SID),  FOREIGN  KEY  (  CLIENT  )  REFERENCES "+schemaName+".CLIENT_c  (  SID  ),  FOREIGN  KEY  (  CUSTOMER  )  REFERENCES "+schemaName+".CUSTOMER_c  (  SID  ),  FOREIGN  KEY  (  EMPLOYEE)  REFERENCES "+schemaName+".EMPLOYEE_c  (  SID),  FOREIGN  KEY  (  VENDOR)  REFERENCES "+schemaName+".VENDOR_c  (  SID)  )";
      if(dbProductName.equals("psql")){
       sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".\"user_c\"  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, ID  varchar(60) not null,  CLIENT  INT  ,  EMPLOYEE  INT  ,  VENDOR  INT  ,  CUSTOMER  INT  ,  OTHERID  varchar(60),  ALEVEL  varchar(12),  BLEVEL  varchar(12),  CURRPW  varchar(40) not null,  EXPIRY  TIMESTAMP,  OLDPW  varchar(40),  TEMPORARYPASSWORD  boolean,  PASSWORDHASH  BYTEA,  ACTIVATIONKEY varchar(60),  RESTRICT1  varchar(20),  RESTRICT2  varchar(20),  RESTRICT3  varchar(20),  ALLOW1  varchar(20),  ALLOW2  varchar(20),  ALLOW3  varchar(20),  MAXPROFLROW varchar(20), CPROFLROW varchar(20), STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  UCURRCALDA  TIMESTAMP,  PREPROCESS  boolean,  NOTES  varchar(60),  DOCMNT  varchar(90),  OWNER  varchar(40),  OWNER2  varchar(40),SIGNATURE varchar(1200),  PRIMARY  KEY  (  SID),  FOREIGN  KEY  (  CLIENT  )  REFERENCES "+schemaName+".CLIENT_c  (  SID  ),  FOREIGN  KEY  (  CUSTOMER  )  REFERENCES "+schemaName+".CUSTOMER_c  (  SID  ),  FOREIGN  KEY  (  EMPLOYEE)  REFERENCES "+schemaName+".EMPLOYEE_c  (  SID),  FOREIGN  KEY  (  VENDOR)  REFERENCES "+schemaName+".VENDOR_c  (  SID)  )";
      }
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".USERPROFL_c  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, LOGONID  INT, ROW varchar(20), OPTION varchar(255), SELECTVALUE varchar(255),  SCRCOLOR  varchar(30),  HILCOLOR  varchar(30),  TEXTCOLOR  varchar(30),  BACCOLOR  varchar(30),  BEEPSOU  boolean,  CONFIRM  boolean,  PROMPTI  boolean,  P1  varchar(5),  P2  varchar(5),  P3  varchar(5),  P4  varchar(5),  P5  varchar(5),  P6  varchar(5),  MTSTYLE  varchar(30),  STSTYLE  varchar(30),  DTSTYLE  varchar(30),  FTSTYLE  varchar(30),  DEFAULTR  varchar(20),  DEFAULTC  varchar(3),  DBNAME  varchar(20),  ROOTDIR  varchar(35),  KEYORDER  varchar(3),  MARGIN  numeric(14,2),  FOOTER  numeric(14,2),  LISTBUILDC  boolean,  LISTBUILDV  boolean,  LISTBUILDE  boolean,  LISTBROWNC  INT,  LISTBROWNV  INT,  LISTBROWNE  INT,  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  OWNER  varchar(40),  OWNER2  varchar(40), PRIMARY  KEY(SID), FOREIGN KEY(LOGONID) REFERENCES  "+schemaName+".\"USER_c\"(SID)  )";
      if(dbProductName.equals("psql")){
       sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".USERPROFL_c  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, LOGONID  INT, ROW varchar(20), OPTION varchar(255), SELECTVALUE varchar(255),  SCRCOLOR  varchar(30),  HILCOLOR  varchar(30),  TEXTCOLOR  varchar(30),  BACCOLOR  varchar(30),  BEEPSOU  boolean,  CONFIRM  boolean,  PROMPTI  boolean,  P1  varchar(5),  P2  varchar(5),  P3  varchar(5),  P4  varchar(5),  P5  varchar(5),  P6  varchar(5),  MTSTYLE  varchar(30),  STSTYLE  varchar(30),  DTSTYLE  varchar(30),  FTSTYLE  varchar(30),  DEFAULTR  varchar(20),  DEFAULTC  varchar(3),  DBNAME  varchar(20),  ROOTDIR  varchar(35),  KEYORDER  varchar(3),  MARGIN  numeric(14,2),  FOOTER  numeric(14,2),  LISTBUILDC  boolean,  LISTBUILDV  boolean,  LISTBUILDE  boolean,  LISTBROWNC  INT,  LISTBROWNV  INT,  LISTBROWNE  INT,   STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  OWNER  varchar(40),  OWNER2  varchar(40), PRIMARY  KEY(SID), FOREIGN KEY(LOGONID) REFERENCES  "+schemaName+".\"user_c\"(SID)  )";
      }
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".VENARTHA_c  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, CHQNUMBER  varchar(32) not null,  RECONCILED  varchar(12),  VENDORC  INT  ,  DATE  TIMESTAMP,  ADDRESCODE  INT,  CHQAMT  numeric(14,2),  AMTVERBOS  varchar(120),  NOTES  varchar(60),  ADVISEL1  varchar(60),  ADVISEL2  varchar(60),  ADVISEL3  varchar(60),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  OWNER  varchar(40), OWNER2  varchar(40),  PRIMARY  KEY (SID ) ,  FOREIGN  KEY  (  VENDORC  )  REFERENCES "+schemaName+".VENDOR_c  (  SID )  )" ;
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".ACINTEGR_c  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, MODULEID  varchar(12)  ,  USAGEDESCR  varchar(35),  USAGECODE  varchar(3)  ,  SETSID  varchar(20)  ,  ACCOUNT  INT  ,  EXTRAINTFIELD  varchar(20),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  NOTES  varchar(60),  OWNER  varchar(40),  OWNER2  varchar(40),  PRIMARY  KEY  (  SID),  FOREIGN  KEY  ( ACCOUNT)  REFERENCES "+schemaName+".ACCOUNT_c  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".ITEMJOB_c  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, JOBNO  varchar(32) not null,  MATCODE  INT  ,  PRODDATET  TIMESTAMP,  QTYALLOC  numeric(14,2),  PONO  varchar(20),  QTYOSTND  numeric(14,2),  QTYALSTK  numeric(14,2),  QTYISSUD  numeric(14,2),  JOBTOTL  numeric(14,2),  STATUSFL  INT,  CUSTOMEJ  INT  ,  VENDOR  INT,  STATUSFLDT  TIMESTAMP,  PRINTMSTAT  INT,  PRINMTFLDT  TIMESTAMP,  PRINTMSTATJ  INT,  PRINMTFLDTJ  TIMESTAMP,  TYPE  varchar(12),  MATCODEOUT  varchar(20),  QTYOUT  numeric(14,2),  NOTES  varchar(60),  OWNER  varchar(40),  OWNER2  varchar(40),  DOCMNT  varchar(90),  PRIMARY  KEY  (  SID),  FOREIGN  KEY  (  MATCODE)  REFERENCES "+schemaName+".ITEM_c  (  SID),  FOREIGN  KEY  (  CUSTOMEJ  )  REFERENCES "+schemaName+".CUSTOMER_c  (  SID  )  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".ACTIVITYJOB_c  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, JOBNO  varchar(32) not null,  ACTIVITYCODE  INT  ,  PRODDATET  TIMESTAMP,  QTYALLOC  numeric(14,2),  PONO  INT,  QTYOSTND  numeric(14,2),  QTYALSTK  numeric(14,2),  QTYISSUD  numeric(14,2),  JOBTOTL  numeric(14,2),  STATUSFL  INT,  CUSTOMEJ  INT  ,  VENDOR  INT,  STATUSFLDT  TIMESTAMP,  PRINTMSTAT  INT,  PRINMTFLDT  TIMESTAMP,  PRINTMSTATJ  INT,  PRINMTFLDTJ  TIMESTAMP,  TYPE  varchar(12),  MATCODEOUT  varchar(20),  QTYOUT  numeric(14,2),  NOTES  varchar(60),  OWNER  varchar(40),  OWNER2  varchar(40),  DOCMNT  varchar(90),  PRIMARY  KEY  (  SID),  FOREIGN  KEY  (  ACTIVITYCODE)  REFERENCES "+schemaName+".ACTIVITY_c  (  SID),  FOREIGN  KEY  (  CUSTOMEJ  )  REFERENCES "+schemaName+".CUSTOMER_c  (  SID  )  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".VENQUOTE_c  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, PURCHSNO  varchar(32) not null,  DELVDATET  TIMESTAMP,  VENDOR  INT  ,  MATCODE  INT  ,  REPLICATE  INT  ,  AMOUNTTOTAL  numeric(14,2),  AMOUNTOSTNDT  numeric(14,2),  QTYTOTAL  numeric(14,2),  QTYOSTNDT  numeric(14,2),  STATUSFL  INT,  CINVOICE  varchar(20),  JOBNO  varchar(20),  VPONO  varchar(20),  RFPORD  varchar(20),  STATUSFLDT  TIMESTAMP,  RCPONO  varchar(20),  ODATET  TIMESTAMP,  TERMS  varchar(20),  PRIORITY  boolean,  PRINTMSTAT  INT,  PRINMTFLDT  TIMESTAMP,  TYPE  varchar(25),  VINVOICE  varchar(20),  ATTACH  varchar(20),  SHIPCODE  varchar(20),  AGENT  INT  ,BASEAMOUNTT  numeric(14,2),  DELIVCHRGT  numeric(14,2),  MISCCHRGT  numeric(14,2),  TAX1AMTT  numeric(14,2),  TAX2AMTT  numeric(14,2),  TAX3AMTT  numeric(14,2),  STARTDATET  TIMESTAMP,  NOTES  varchar(60),  OWNER  varchar(40),  OWNER2  varchar(40),  DOCMNT  varchar(90),  PRIMARY  KEY  (  SID  ),  FOREIGN  KEY  (  VENDOR)  REFERENCES "+schemaName+".VENDOR_c  (  SID),  FOREIGN  KEY  (  MATCODE)  REFERENCES "+schemaName+".ITEM_c  (  SID),  FOREIGN  KEY  (  REPLICATE)  REFERENCES "+schemaName+".VENQUOTE_c  (  SID),  FOREIGN  KEY  (  AGENT)  REFERENCES "+schemaName+".EMPLOYEE_c  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".VENDORDERS_c  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, PURCHSNO  varchar(32) not null,  DELVDATET  TIMESTAMP,  VENDOR  INT  ,  MATCODE  INT  ,  AMOUNTTOTAL  numeric(14,2),  AMOUNTOSTNDT  numeric(14,2),  QTYTOTAL  numeric(14,2),  QTYOSTNDT  numeric(14,2),  STATUSFL  INT,  JOBNO  varchar(20),  VENDQNO  INT  ,  RFPORD  varchar(20),  STATUSFLDT  TIMESTAMP,  RCPONO  varchar(20),  ODATET  TIMESTAMP,  TERMS  varchar(20),  PRIORITY  boolean,  PRINTMSTAT  INT,  PRINMTFLDT  TIMESTAMP,  TYPE  varchar(25),  VINVOICE  varchar(20),  ATTACH  varchar(20),  SHIPCODE  varchar(20),  AGENT  INT  ,BASEAMOUNTT  numeric(14,2),  DELIVCHRGT  numeric(14,2),  MISCCHRGT  numeric(14,2),  TAX1AMTT  numeric(14,2),  TAX2AMTT  numeric(14,2),  TAX3AMTT  numeric(14,2),  STARTDATET  TIMESTAMP,  NOTES  varchar(60),  OWNER  varchar(40),  OWNER2  varchar(40),  DOCMNT  varchar(90),  PRIMARY  KEY(  SID),  FOREIGN  KEY  (  VENDOR)  REFERENCES "+schemaName+".VENDOR_c  (  SID),  FOREIGN  KEY  (  MATCODE)  REFERENCES "+schemaName+".ITEM_c  (  SID),  FOREIGN KEY ( VENDQNO ) REFERENCES  "+schemaName+".VENQUOTE_c (  SID ), FOREIGN  KEY  (  AGENT)  REFERENCES "+schemaName+".EMPLOYEE_c  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
       sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".VSHIPMEN_c  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, SHIPCODE  varchar(32) not null,  MATCODE  INT  ,  SHIPPER  INT,  PONO  INT  ,  CPONO  INT,  INVOICE  INT,  AMOUNTTOTAL  numeric(14,2),  AMOUNTOSTNDT  numeric(14,2),  QTYTOTAL  numeric(14,2),  QTYOSTNDT  numeric(14,2),  CARRIER  varchar(20),  TYPE  varchar(12),  SHIPDATET  TIMESTAMP,  SHIPDATETA  TIMESTAMP,  TARENO  varchar(20),  PACKNO  varchar(20),  VENDOR  INT  ,  CUSTOMER  INT  ,  BILLTOCODE  INT  ,  BILLTOSAMEASSHIPTO boolean, SHIPTOCODE  INT  ,  NOTES  varchar(60),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  SERIALNO  varchar(25),  PRINTMSTAT  INT,  PRINMTFLDT  TIMESTAMP,  OWNER  varchar(40),  OWNER2  varchar(40),  PRIMARY  KEY(  SID),  FOREIGN  KEY  (  SHIPTOCODE  )  REFERENCES "+schemaName+".ADDRESS_c(  SID  ),  FOREIGN  KEY  (  BILLTOCODE)  REFERENCES "+schemaName+".ADDRESS_c(  SID  ),  FOREIGN  KEY  (  MATCODE)  REFERENCES "+schemaName+".ITEM_c  (  SID)  ,  FOREIGN  KEY  (  VENDOR  )  REFERENCES "+schemaName+".VENDOR_c (  SID  ), FOREIGN  KEY  (  PONO  )  REFERENCES "+schemaName+".VENDORDERS_c  (  SID  ),  FOREIGN  KEY  (  CUSTOMER  )  REFERENCES "+schemaName+".CUSTOMER_c  (  SID  )  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".CUQUOTE_c  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, PURCHSNO  varchar(32) not null,  DELVDATET  TIMESTAMP,  VENDOR  INT,  AMOUNTTOTAL  numeric(14,2),  AMOUNTOSTNDT  numeric(14,2),  QTYTOTAL  numeric(14,2),  QTYOSTNDT  numeric(14,2),  STATUSFL  INT,  CUSTOMER  INT  ,  MATCODE  INT  ,  REPLICATE  INT  ,  CINVOICE  varchar(20),  ORDPRICE  numeric(14,2),  JOBNO  varchar(20),  VPONO  varchar(20),  QUOORDT  varchar(20),  STATUSFLDT  TIMESTAMP,  PRINTMSTAT  INT,  PRINMTFLDT  TIMESTAMP,  TYPE  varchar(12),  TERMS  varchar(25),  PRIORITY  boolean,  ODATET  TIMESTAMP,  SHIPCODE  INT,  ACTIVITYCODE  varchar(20),  AGENT  INT  ,BASEAMOUNTT  numeric(14,2),  DELIVCHRGT  numeric(14,2),  MISCCHRGT  numeric(14,2),  TAX1AMTT  numeric(14,2),  TAX2AMTT  numeric(14,2),  TAX3AMTT  numeric(14,2),  ATTACH  varchar(20),  NOTES  varchar(60),  OWNER  varchar(40),  OWNER2  varchar(40),  DOCMNT  varchar(90),  PRIMARY  KEY(  SID),  FOREIGN  KEY  (  CUSTOMER  )  REFERENCES "+schemaName+".CUSTOMER_c  (  SID  ),  FOREIGN  KEY  (  MATCODE)  REFERENCES "+schemaName+".ITEM_c  (  SID),  FOREIGN  KEY  (  REPLICATE)  REFERENCES "+schemaName+".CUQUOTE_c  (  SID),  FOREIGN  KEY  (  AGENT)  REFERENCES "+schemaName+".EMPLOYEE_c  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".CUORDERS_c  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, PURCHSNO  varchar(32) not null,  DELVDATET  TIMESTAMP,  CUSTOMER  INT  ,  MATCODE  INT  ,  CUQUOTE INT  , CINVOICE  INT,  JOBNO  INT,  AMOUNTTOTAL  numeric(14,2),  AMOUNTOSTNDT  numeric(14,2),  QTYTOTAL  numeric(14,2),  QTYOSTNDT  numeric(14,2),  VPONO  INT,  RFPORD  INT,  RCPONO  INT,  ODATET  TIMESTAMP,  TERMS  varchar(20),  PRIORITY  boolean,  PRINTMSTAT  INT,  PRINMTFLDT  TIMESTAMP,  TYPE  varchar(25),  VINVOICE  INT,  ATTACH  varchar(90),  AGENT  INT  ,BASEAMOUNTT  numeric(14,2),  DELIVCHRGT  numeric(14,2),  MISCCHRGT  numeric(14,2),  TAX1AMTT  numeric(14,2),  TAX2AMTT  numeric(14,2),  TAX3AMTT  numeric(14,2),  STARTDATET  TIMESTAMP,  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  NOTES  varchar(60),  OWNER  varchar(40),  OWNER2  varchar(40),  DOCMNT  varchar(90),   SHIPCODEFROMPAY  INT,  SHIPCODE  INT, BARPO  varchar(30),  PRIMARY  KEY  (  SID  ),  FOREIGN  KEY  (  CUSTOMER  )  REFERENCES "+schemaName+".CUSTOMER_c  (  SID  ),  FOREIGN  KEY  (  MATCODE)  REFERENCES "+schemaName+".ITEM_c  (  SID),  FOREIGN  KEY  (  CUQUOTE  )  REFERENCES "+schemaName+".CUQUOTE_c  (  SID  ),  FOREIGN  KEY  (  AGENT)  REFERENCES "+schemaName+".EMPLOYEE_c  (  SID) ,  FOREIGN  KEY  (  SHIPCODEFROMPAY)  REFERENCES "+schemaName+".ADDRESS  (  SID),  FOREIGN  KEY  (  SHIPCODE)  REFERENCES "+schemaName+".ADDRESS  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".CUINVOICE_c  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, INVOICE  varchar(32) not null,  CUSTOMER  INT  ,  MATCODE  INT  ,  INVODATE  TIMESTAMP,  AMOUNTTOTAL  numeric(14,2),  AMOUNTOSTNDT  numeric(14,2),  QTYTOTAL  numeric(14,2),  QTYOSTNDT  numeric(14,2),  PONO  INT  ,  REF1TYP  varchar(20),  REF1CODE  varchar(35),  SHIPDATET  TIMESTAMP,  SHIPTYPE  varchar(12),  SHIPCODE  varchar(20),  TERMS  varchar(20),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  TERMSDAT  TIMESTAMP,  DISCOUNP  numeric(14,2),  DISCOUDT  TIMESTAMP,  DISCOUDS  numeric(14,2),  NETDDAT  TIMESTAMP,  NETDDYS  numeric(14,2),  FOB  varchar(20),  TYPE  varchar(12),  INTEGRSET  varchar(20),  ATTACH  varchar(20),  BASEAMOUNTT  numeric(14,2),  DELIVCHRGT  numeric(14,2),  MISCCHRGT  numeric(14,2),  TAX1AMTT  numeric(14,2),  TAX2AMTT  numeric(14,2),  TAX3AMTT  numeric(14,2),  AGENT  INT  ,  NOTES  varchar(60),  PRINTMSTAT  INT,  PRINMTFLDT  TIMESTAMP,  OWNER  varchar(40),  OWNER2  varchar(40),  DOCMNT  varchar(90),  BARINVOICE  varchar(30),  PRIMARY  KEY(  SID),  FOREIGN  KEY  (  CUSTOMER  )  REFERENCES "+schemaName+".CUSTOMER_c  (  SID  ),  FOREIGN  KEY  (  MATCODE)  REFERENCES "+schemaName+".ITEM_c  (  SID),  FOREIGN  KEY  (  PONO  )  REFERENCES "+schemaName+".CUORDERS_c  (  SID  ),  FOREIGN  KEY  (  AGENT)  REFERENCES "+schemaName+".EMPLOYEE_c  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".SHIPMENT_c  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, SHIPCODE  varchar(32) not null,  MATCODE  INT  ,  SHIPPER  INT  ,  PONO  INT,  CPONO  INT  ,  INVOICE  INT  ,  AMOUNTTOTAL  numeric(14,2),  AMOUNTOSTNDT  numeric(14,2),  QTYTOTAL  numeric(14,2),  QTYOSTNDT  numeric(14,2),  CARRIER  INT,  TYPE  varchar(12),  SHIPDATET  TIMESTAMP,  SHIPDATETA  TIMESTAMP,  TARENO  varchar(20),  PACKNO  varchar(20),  CUSTOMER  INT  ,  BILLTOCODE  INT  ,  BILLTOSAMEASSHIPTO boolean, SHIPTOCODE  INT  ,  NOTES  varchar(60),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  SERIALNO  varchar(25),  PRINTMSTAT  INT,  PRINMTFLDT  TIMESTAMP,  OWNER  varchar(40),  OWNER2  varchar(40),  BARSHIPCOD  varchar(30),  PRIMARY  KEY(  SID  ),  FOREIGN  KEY  (  SHIPPER)  REFERENCES "+schemaName+".VENDOR_c  (  SID), FOREIGN  KEY  (  CARRIER)  REFERENCES "+schemaName+".VENDOR_c  (  SID),  FOREIGN  KEY  (  BILLTOCODE)  REFERENCES "+schemaName+".ADDRESS_c(  SID  ),  FOREIGN  KEY  (  SHIPTOCODE)  REFERENCES "+schemaName+".ADDRESS_c(  SID  )  ,  FOREIGN  KEY  (  MATCODE)  REFERENCES "+schemaName+".ITEM_c  (  SID),  FOREIGN  KEY  (  CUSTOMER  )  REFERENCES "+schemaName+".CUSTOMER_c  (  SID  ),  FOREIGN  KEY  (  INVOICE  )  REFERENCES "+schemaName+".CUINVOICE_c  (  SID  ),  FOREIGN  KEY  (  CPONO  )  REFERENCES "+schemaName+".CUORDERS_c  (  SID  )  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".EMPLORDERS_c  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, PURCHSNO  varchar(32) not null,  DELVDATET  TIMESTAMP,  EMPLOYEE  INT  ,  MATCODE  INT  ,  AMOUNTTOTAL  numeric(14,2),  AMOUNTOSTNDT  numeric(14,2),  QTYTOTAL  numeric(14,2),  QTYOSTNDT  numeric(14,2),  STATUSFL  INT,  JOBNO  INT,  VPONO  INT,  RFPORD  INT,  STATUSFLDT  TIMESTAMP,  RCPONO  INT,  ODATET  TIMESTAMP,  TERMS  varchar(20),  PRIORITY  boolean,  PRINTMSTAT  INT,  PRINMTFLDT  TIMESTAMP,  TYPE  varchar(25),  VINVOICE  INT,  ATTACH  varchar(20),  SHIPCODE  INT  ,  AGENT  INT  ,BASEAMOUNTT  numeric(14,2),  DELIVCHRGT  numeric(14,2),  MISCCHRGT  numeric(14,2),  TAX1AMTT  numeric(14,2),  TAX2AMTT  numeric(14,2),  TAX3AMTT  numeric(14,2),  STARTDATET  TIMESTAMP,  NOTES  varchar(60),  OWNER  varchar(40),  OWNER2  varchar(40),  DOCMNT  varchar(90),  PRIMARY  KEY(  SID),  FOREIGN  KEY  (  EMPLOYEE)  REFERENCES "+schemaName+".EMPLOYEE_c  (  SID),  FOREIGN  KEY  (  MATCODE)  REFERENCES "+schemaName+".ITEM_c  (  SID),  FOREIGN  KEY  (  SHIPCODE)  REFERENCES "+schemaName+".VSHIPMEN_c  (  SID),  FOREIGN  KEY  (  AGENT)  REFERENCES "+schemaName+".EMPLOYEE_c  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".EDITLOG_c  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, DATABASENM  varchar(20) not null  ,  RECORDNO  INT,  FIELD  varchar(20),  DATET  TIMESTAMP,  USERNAME  varchar(20),  DELETED  boolean,  PREVCHAR  varchar(30),  PREVNUM  INT,  PREVLOG  boolean,  PREVDATE  TIMESTAMP,  NEWCHAR  varchar(30),  NEWNUM  INT,  NEWLOG  boolean,  NEWDATE  TIMESTAMP,  OWNER  varchar(40), OWNER2  varchar(40), PRIMARY  KEY(SID) )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".HLOGFILE_c  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, SERIALNO  varchar(25)  not null ,  MATCODE  varchar(32),  QUANRECD  INT,  VENDOR  varchar(20),  LOCATION  varchar(20),  RECVRPT  varchar(25),  INFLG  boolean,  PHY  boolean,  DATETIN  TIMESTAMP,  DATETOUT  TIMESTAMP,  JOBNO  varchar(20),  PRINTMSTAT  INT,  PRINMTFLDT  TIMESTAMP,  PONO  varchar(20),  SCANDATET  TIMESTAMP,  QUANISSD  INT,  BUTT  varchar(25),  STATUSFL  INT,  QUANREJD  numeric(14,2),  CUSTOMER  varchar(25),  CPONO  varchar(20),  CUSTOMEJ  varchar(25),  ORGCOST  numeric(14,2),  ORGPONO  varchar(20),  ORGJOBNO  varchar(20),  ALTSERNO  varchar(25),  SELPRICE  numeric(14,2),  PHYSQTY  numeric(14,2),  SPERSON  varchar(25),  CARTONID  varchar(25),  CARTONPR  boolean,  PACKCODE  varchar(20),  TARECODE  varchar(20),  SHIPCODE  varchar(20),  TYPE  varchar(12),  STATUSFLDT  TIMESTAMP,  OWNER  varchar(40), OWNER2  varchar(40), PRIMARY  KEY(SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".CPAYMENT_c  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, PAYMENT  varchar(32) not null,  CUSTOMER  INT  ,  CINVOICE  INT  ,  CHEQDATE TIMESTAMP, PAYMENTDUEDATE timestamp, POSTINGPERIOD INT, MATCODE  INT,  INTEGRSET  varchar(20),  ACCOUNT  INT,  AMOUNTTOTAL  numeric(14,2),  AMOUNTOSTNDT  numeric(14,2), AMOUNTIN numeric(14,2),  QTYTOTAL  numeric(14,2),  QTYOSTNDT  numeric(14,2),  DISCOUNT  numeric(14,2),  BASEAMOUNTT  numeric(14,2),  DELIVCHRGT  numeric(14,2),  MISCCHRGT  numeric(14,2),  TAX1AMTT  numeric(14,2),  TAX2AMTT  numeric(14,2),  TAX3AMTT  numeric(14,2),  PAYTYPE  varchar(4),  PAYBYID  varchar(20),  PAYBYDATE  TIMESTAMP,  CURRENCY  varchar(12),  CONVRATE  numeric(14,2),  LOCAMOUNTT  numeric(14,2),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  NOTES  varchar(60),  OWNER  varchar(40),  OWNER2  varchar(40),  PRIMARY  KEY  (  SID),  FOREIGN  KEY  (  CINVOICE)  REFERENCES "+schemaName+".CUINVOICE_c  (  SID),  FOREIGN  KEY  (  CUSTOMER  )  REFERENCES "+schemaName+".CUSTOMER_c  (  SID  ),  FOREIGN  KEY  ( ACCOUNT)  REFERENCES "+schemaName+".ACCOUNT_c  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".SERIALNUMBERS_c  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, SERIALNO  varchar(25) not null  ,  MATCODE  varchar(32),  QUANRECD  numeric(14,2),  VENDOR  varchar(20),  LOCATION  varchar(20),  RECVRPT  varchar(20),  INFL  boolean,  PHY  boolean,  DATETIN  TIMESTAMP,  DATETOUT  TIMESTAMP,  JOBNO  varchar(20),  PRINTMSTAT  INT,  PRINMTFLDT  TIMESTAMP,  PONO  varchar(20),  SCANDATET  TIMESTAMP,  QUANISSD  numeric(14,2),  BUTT  varchar(20),  STATUSFL  INT,  QUANREJD  numeric(14,2),  CUSTOMER  varchar(20),  CPONO  varchar(20),  CUSTOMEJ  varchar(20),  ORGCOST  numeric(14,2),  ORGPONO  varchar(20),  ORGJOBNO  varchar(20),  ALTSERNO  varchar(25),  SELPRICE  numeric(14,2),  PHYSQTY  numeric(14,2),  SPERSON  varchar(20),  CARTONID  varchar(20),  CARTONPR  boolean,  PACKCODE  varchar(20),  TARECODE  varchar(20),  SHIPCODE  varchar(20),  TYPE  varchar(12),  OWNER  varchar(40),  OWNER2  varchar(40),  BARSERIAL  varchar(30), PRIMARY  KEY(SID))";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".MACHINE_c  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, MACHINECODE  varchar(32) not null,  QUANTITY  numeric(14,2),  DESCRIPT  varchar(120),  DATEADDED  TIMESTAMP,  SOURCE1  varchar(35),  SOURCE2  varchar(35),  UPCCODE  varchar(25),  COST  numeric(14,2),  REPLCOST  numeric(14,2),  SELPRICE  numeric(14,2),  SPRICOLD  numeric(14,2),  SPRICNEW  numeric(14,2),  SPRICEFFDT  TIMESTAMP,  SHIPCODE  varchar(25),  PRINTMSTAT  INT,  PRINMTFLDT  TIMESTAMP,  MISCCODE1  varchar(25),  MISCCODE2  varchar(25),  QTYLEVEL1  numeric(14,2),  UNIT  varchar(12),  CASEQTY  numeric(14,2),  TYPE  varchar(12),  TAX1  boolean,  TAX2  boolean,  TAX3  boolean,  ALIASCODE  varchar(25),  PARENTCODE  INT  ,  AVGPRICE  numeric(14,2),  AVGCOST  numeric(14,2),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  SUBCODESN  VARCHAR(35),  SUBCODESN2 VARCHAR(35),  SUBCODESN3 VARCHAR(35),  CUORDQTY  numeric(14,2),  VENORQTY  numeric(14,2),  CUPICQTY  numeric(14,2),  VENPIQTY  numeric(14,2),  CUINVQTY  numeric(14,2),  CUSHIQTY  numeric(14,2),  VENSHQTY  numeric(14,2),  EFFDATE  TIMESTAMP,  INTEGRSET  varchar(20),  NOTES  varchar(60),  DOCMNT  varchar(90),  OWNER  varchar(40),  OWNER2  varchar(40),  BARUPC  varchar(30),  PRIMARY  KEY  (  SID), FOREIGN  KEY  (  PARENTCODE)  REFERENCES "+schemaName+".MACHINE_c  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".GROUPMEMBERS_c  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, GROUPID  INT not null,  MEMBERID  varchar(32) not null,  DESCRIPT  varchar(120), SOURCETYPE varchar(10),  MEMBEREM  INT  ,  MEMBERCU  INT  ,  MEMBERVE  INT  ,  MEMBERIT  INT  ,  MEMBERAC  INT  ,  MEMBERMA  INT  ,  TYPE  varchar(10),  CURRPW  varchar(32) ,  EXPIRY  TIMESTAMP,  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  OWNER  varchar(40),  OWNER2  varchar(40),  PRIMARY  KEY  (  SID),  FOREIGN  KEY  (  GROUPID)  REFERENCES "+schemaName+".MEMBERSGROUP_c (  SID),  FOREIGN  KEY  (  MEMBEREM)  REFERENCES "+schemaName+".EMPLOYEE_c  (  SID),  FOREIGN  KEY  (  MEMBERCU)  REFERENCES "+schemaName+".CUSTOMER_c  (  SID),  FOREIGN  KEY  (  MEMBERIT)  REFERENCES "+schemaName+".ITEM_c  (  SID),  FOREIGN  KEY  (  MEMBERAC)  REFERENCES "+schemaName+".ACTIVITY_c  (  SID),  FOREIGN  KEY  (  MEMBERMA)  REFERENCES "+schemaName+".MACHINE_c  (  SID),  FOREIGN  KEY  (  MEMBERVE)  REFERENCES "+schemaName+".VENDOR_c  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".JOBASSIGNMENT_c  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, JOBASSIGN varchar(32) not null, MACHINE  INT ,  SEQUENCE  varchar(12) ,  LOCATION  INT  ,  SDATET  TIMESTAMP,  DURATIONH  INT,  DURATIONM  INT,  STIMEH  INT,  STIMEM  INT,  STIMEAMPM  boolean,  EDATET  TIMESTAMP,  PRIORITY  boolean,  PERCNTDONE  numeric(14,2),REPEATF  varchar(20),   JOBNO  INT  ,  MATCODE  INT  , QTYTOTAL  numeric(14,2),  QTYOSTNDT  numeric(14,2),  PONO  INT,  VENDOR  INT  ,  CPONO  INT,  CUSTOMER  INT  ,  STATUSFL  INT, STATUSFLDT  TIMESTAMP,  OWNER  varchar(40),  OWNER2  varchar(40),  NOTES  varchar(60),  PRIMARY  KEY(  SID),  FOREIGN  KEY  (  CUSTOMER  )  REFERENCES "+schemaName+".CUSTOMER_c  (  SID  ),  FOREIGN  KEY  (  VENDOR)  REFERENCES "+schemaName+".VENDOR_c  (  SID),  FOREIGN  KEY  (  MATCODE)  REFERENCES "+schemaName+".ITEM_c  (  SID),  FOREIGN  KEY  (  MACHINE)  REFERENCES "+schemaName+".MACHINE_c  (  SID),    FOREIGN  KEY  (  JOBNO)  REFERENCES "+schemaName+".ITEMJOB_c  (  SID),FOREIGN KEY (LOCATION)  REFERENCES "+schemaName+".LOCATION_c  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".NEXTSERIALNO_c  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, NXTSERNO  varchar(4)  not null ,  CURSERNO  varchar(4),  PREVSERN  varchar(4),  IS9999  boolean,  REFNO varchar(14)  , OWNER  varchar(40),  OWNER2  varchar(40), PRIMARY  KEY(SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".RATE1F_c  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, USERTYPE  varchar(12)  not null ,  PRODTYPE  varchar(12) not null,  STEPNAME  varchar(25) not null,  STEP  INT,  VALUE  numeric(14,2),  EFFDATE  TIMESTAMP,  ENDDATE  TIMESTAMP,  INCENTIVE  varchar(25),  IEFFDATE  TIMESTAMP,  IENDDATE  TIMESTAMP, OWNER  varchar(40),  OWNER2  varchar(40), STATUSFL INT, STATUSFLDT  TIMESTAMP, PRIMARY  KEY(SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".ITEMBOM_c  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, BOMCODE  varchar(32) not null,  DESCRIPT  varchar(120),  QUANTITY numeric(14,2),  MODE  boolean,  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  OWNER  varchar(40), OWNER2  varchar(40), PRIMARY  KEY(SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".ITEMBOMDETAILS_c  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, BOMCODE  INT not null,  MATCODE  INT  not null ,  MODE  boolean,  SUBQTY  numeric(14,2), DESCRIPT  varchar(1200), SEQ  varchar(4),  NOTES  varchar(60),   STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  OWNER  varchar(40),  OWNER2  varchar(40),  PRIMARY  KEY(  SID  ),  FOREIGN  KEY  (  BOMCODE)  REFERENCES "+schemaName+".ITEMBOM_c  (  SID),  FOREIGN  KEY  (  MATCODE)  REFERENCES "+schemaName+".ITEM_c  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".TASK_c  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, TASKID varchar(32) not null,  DESCRIPT  varchar(120),  ACTIVITYCODE  INT  ,  PROJECTTEAM  INT  ,  RESOURCE INT  , MODE  boolean,  ESTSTART TIMESTAMP, CALCSTART  TIMESTAMP,  ACTLSTART  TIMESTAMP,  ESTEND  TIMESTAMP,  CALCEND  TIMESTAMP,  ACTLEND  TIMESTAMP,  SUBQTY  numeric(14,2),  BOMCODE  INT,  LOCATION  INT,  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  OWNER  varchar(40), OWNER2  varchar(40),  PRIMARY  KEY(SID) ,  FOREIGN  KEY  (  PROJECTTEAM)  REFERENCES "+schemaName+".MEMBERSGROUP_c (  SID),  FOREIGN  KEY  (RESOURCE)  REFERENCES "+schemaName+".GROUPMEMBERS_c  (  SID),  FOREIGN  KEY  (  ACTIVITYCODE  )  REFERENCES "+schemaName+".ACTIVITY_c  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".JOBASSIGNMENTDETAILS_c  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, JOBASSIGN INT not null, LINE  INT, MACHINE  INT ,  SEQUENCE  varchar(12) ,  LOCATION  INT  ,  SDATET  TIMESTAMP,  DURATIONH  INT,  DURATIONM  INT,  STIMEH  INT,  STIMEM  INT,  STIMEAMPM  boolean,  EDATET  TIMESTAMP,  PRIORITY  boolean,  PERCNTDONE  numeric(14,2),REPEATF  varchar(20),  JOBNO  INT  ,  MATCODE  INT  ,QTYTOTAL  numeric(14,2),  QTYOSTNDT  numeric(14,2),  PONO  INT,  VENDOR  INT  ,  CPONO  INT,  CUSTOMER  INT  ,  STATUSFL  INT,  LINETOTL  numeric(14,2), OWNER  varchar(40),  OWNER2  varchar(40), JAFIELD1 varchar(60), JAFIELD2 varchar(60), JAFIELD3 varchar(60), JAFIELD4 varchar(60), NOTES varchar(60),  PRIMARY  KEY(  SID),  FOREIGN  KEY  (  CUSTOMER  )  REFERENCES "+schemaName+".CUSTOMER_c  (  SID  ),  FOREIGN  KEY  (  VENDOR)  REFERENCES "+schemaName+".VENDOR_c  (  SID),  FOREIGN  KEY  (  MATCODE)  REFERENCES "+schemaName+".ITEM_c  (  SID),  FOREIGN  KEY  (  MACHINE)  REFERENCES "+schemaName+".MACHINE_c  (  SID),      FOREIGN  KEY  (  JOBNO)  REFERENCES "+schemaName+".ITEMJOB_c  (  SID),FOREIGN KEY (LOCATION)  REFERENCES "+schemaName+".LOCATION_c  (  SID), FOREIGN  KEY  (  JOBASSIGN)  REFERENCES "+schemaName+".JOBASSIGNMENT_c  (  SID  ) )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".PROCESSDETAILS_c  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, PROCESS varchar(32) not null, CPONO INT , MATCODE  INT , CUSTOMER INT,  SDATET  TIMESTAMP,  DURATIONH  INT,  DURATIONM  INT,  STIMEH  INT,  STIMEM  INT,  STIMEAMPM  boolean,  EDATET  TIMESTAMP,  PRIORITY  boolean, PERCNTDONE  numeric(14,2), STATUSFL  INT, STATUSFLDT  TIMESTAMP,  NOTES varchar(60), OWNER  varchar(40),  OWNER2  varchar(40),  PRIMARY  KEY(  SID),  FOREIGN  KEY  (  CUSTOMER  )  REFERENCES "+schemaName+".CUSTOMER  (  SID  ), FOREIGN  KEY  (  MATCODE)  REFERENCES "+schemaName+".ITEM  (  SID), FOREIGN  KEY  (  CPONO)  REFERENCES "+schemaName+".CUORDERS_c  (  SID) )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".PROCESSATTRIBUTES_c  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, PDETAILS INT not null, NAME  varchar(32) , VALUE varchar(32),  TYPE  varchar(32),  RANGE  varchar(32),  STEP  INT,   STATUSFL  INT, STATUSFLDT  TIMESTAMP,  NOTES varchar(60), OWNER  varchar(40),  OWNER2  varchar(40),  PRIMARY  KEY(  SID),  FOREIGN  KEY  (  PDETAILS  )  REFERENCES "+schemaName+".PROCESSDETAILS_c  (  SID  ))";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".PROJECT_c (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, PROJ  varchar(32) not null,  PARENTCODE  INT  ,  DESCRIPT  varchar(120),  COMPANYCODE INT  , DIVCODE  INT  ,  DEPCODE  INT  ,  LOCATION  INT  ,  SDATET  TIMESTAMP,  EDATET  TIMESTAMP,  OWNER  varchar(40), OWNER2  varchar(40),  PRIMARY  KEY(SID),  FOREIGN  KEY  (  PARENTCODE  )  REFERENCES "+schemaName+".PROJECT_c  (  SID), FOREIGN  KEY  (  COMPANYCODE  )  REFERENCES "+schemaName+".COMPANY_c  (  SID  ),  FOREIGN  KEY  (  DEPCODE )  REFERENCES "+schemaName+".DEPARTMENT_c  (  SID  ),  FOREIGN  KEY  (  DIVCODE  )  REFERENCES "+schemaName+".DIVISION_c  (  SID  ))";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
       sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".OUTLINE_c  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, PROJ  INT not null,  PARENTCODE  INT  ,  USEROW  numeric(14,2),  USECOL  numeric(14,2),  OWNER  varchar(40), OWNER2  varchar(40),  PRIMARY  KEY(SID),  FOREIGN  KEY  (  PARENTCODE  )  REFERENCES "+schemaName+".OUTLINE_c  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".SCANDATE_c  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, SDSATETIMEOFSCAN  varchar(25) not null  ,  DATETIMEOFSCAN  TIMESTAMP,  LASTDATE  TIMESTAMP,  BKUPDATE  TIMESTAMP, OWNER  varchar(40), OWNER2  varchar(40), PRIMARY  KEY(SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".VINVOICE_c  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, INVOICE  varchar(32) not null,  VENDOR  INT  ,  MATCODE  INT  ,  INTEGRSET  varchar(20),  INVODATE  TIMESTAMP,  AMOUNTTOTAL  numeric(14,2),  AMOUNTOSTNDT  numeric(14,2),  QTYTOTAL  numeric(14,2),  QTYOSTNDT  numeric(14,2),  PONO  INT  ,  REF1TYP  varchar(20),  REF1CODE  varchar(35),  SHIPDATET  TIMESTAMP,  SHIPTYPE  varchar(12),  SHIPCODE  INT  ,  TERMS  varchar(20),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  TERMSDAT  TIMESTAMP,  DISCOUNP  numeric(14,2),  DISCOUDT  TIMESTAMP,  DISCOUDS  numeric(14,2),  NETDDAT  TIMESTAMP,  NETDDYS  INT,  FOB  varchar(20),  TYPE  varchar(12),  ATTACH  varchar(20),BASEAMOUNTT  numeric(14,2),  DELIVCHRGT  numeric(14,2),  MISCCHRGT  numeric(14,2),  TAX1AMTT  numeric(14,2),  TAX2AMTT  numeric(14,2),  TAX3AMTT  numeric(14,2),  AGENT  INT  ,  NOTES  varchar(60),  PRINTMSTAT  INT,  PRINMTFLDT  TIMESTAMP,  OWNER  varchar(40),  OWNER2  varchar(40),  DOCMNT  varchar(90),  PRIMARY  KEY(  SID),  FOREIGN  KEY  (  VENDOR)  REFERENCES "+schemaName+".VENDOR_c  (  SID),  FOREIGN  KEY  (  MATCODE)  REFERENCES "+schemaName+".ITEM_c  (  SID),  FOREIGN  KEY  (  SHIPCODE)  REFERENCES "+schemaName+".VSHIPMEN_c  (  SID),  FOREIGN  KEY  (  PONO  )  REFERENCES "+schemaName+".VENDORDERS_c  (  SID  ),  FOREIGN  KEY  (  AGENT)  REFERENCES "+schemaName+".EMPLOYEE_c  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".VPAYMENT_c  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, PAYMENT  varchar(32) not null,  VENDOR  INT  ,  VINVOICE  INT  ,  CHEQDATE TIMESTAMP, PAYMENTDUEDATE timestamp, POSTINGPERIOD INT, MATCODE  INT,  INTEGRSET  varchar(20),  ACCOUNT  INT,  AMOUNTTOTAL  numeric(14,2),  AMOUNTOSTNDT  numeric(14,2),  AMOUNTIN numeric(14,2),  QTYTOTAL  numeric(14,2),  QTYOSTNDT  numeric(14,2),  BASEAMOUNTT  numeric(14,2),  DELIVCHRGT  numeric(14,2),  MISCCHRGT  numeric(14,2),  TAX1AMTT  numeric(14,2),  TAX2AMTT  numeric(14,2),  TAX3AMTT  numeric(14,2),  DISCOUNT  numeric(14,2),  PAYTYPE  varchar(4),  PAYBYID  varchar(20),  PAYBYDATE  TIMESTAMP,  CURRENCY  varchar(12),  CONVRATE  numeric(14,2),  LOCAMOUNT  numeric(14,2),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  NOTES  varchar(60),  OWNER  varchar(40),  OWNER2  varchar(40),  PRIMARY  KEY  (  SID),  FOREIGN  KEY  (  VINVOICE)  REFERENCES "+schemaName+".VINVOICE_c  (  SID),  FOREIGN  KEY  (  VENDOR  )  REFERENCES "+schemaName+".VENDOR_c  (  SID)  , FOREIGN  KEY  ( ACCOUNT)  REFERENCES "+schemaName+".ACCOUNT_c  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".CUQDETAILS_c  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, CUQNO  INT   not null,  LINE  INT,  MATCODE  INT  ,  QTYORDRD  numeric(14,2),  ORDUNIT  varchar(12),  ORDPRICE  numeric(14,2),  IODATE  TIMESTAMP,  IDELVDATE  TIMESTAMP, SHIPOPTION varchar(20) ,  VENDOR  INT  ,  QTYOSTND  numeric(14,2),BASEAMOUNT  numeric(14,2),  DELIVCHRG  numeric(14,2),  MISCCHRG  numeric(14,2),  TAX1AMT  numeric(14,2),  TAX2AMT  numeric(14,2),  TAX3AMT  numeric(14,2),  LINETOTL  numeric(14,2),  OWNER2  varchar(40),  PRIMARY  KEY(  SID),  FOREIGN  KEY  (  MATCODE)  REFERENCES "+schemaName+".ITEM_c  (  SID),  FOREIGN  KEY  (  VENDOR)  REFERENCES "+schemaName+".VENDOR_c  (  SID),  FOREIGN  KEY  (  CUQNO)  REFERENCES "+schemaName+".CUQUOTE_c  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".CUODETAILS_c  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, CUONO  INT  not null ,  LINE  INT,  MATCODE  INT  ,  QTYORDRD  numeric(14,2),  ORDUNIT  varchar(12),  ORDPRICE  numeric(14,2),  IODATE  TIMESTAMP,  IDELVDATE  TIMESTAMP,  VENDOR  INT  ,SHIPOPTION varchar(20) ,  QTYOSTND  numeric(14,2),BASEAMOUNT  numeric(14,2),  DELIVCHRG  numeric(14,2),  MISCCHRG  numeric(14,2),  TAX1AMT  numeric(14,2),  TAX2AMT  numeric(14,2),  TAX3AMT  numeric(14,2),  LINETOTL  numeric(14,2), OWNER2  varchar(40),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,BARPO varchar(30),  PRIMARY  KEY(  SID),  FOREIGN  KEY  (  MATCODE)  REFERENCES "+schemaName+".ITEM_c  (  SID),  FOREIGN  KEY  (  VENDOR)  REFERENCES "+schemaName+".VENDOR_c  (  SID),  FOREIGN  KEY  (  CUONO)  REFERENCES "+schemaName+".CUORDERS_c  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".CUIDETAILS_c  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, CUINO  INT   not null,  LINE  INT,  MATCODE  INT  ,  QTYORDRD  numeric(14,2),  ORDUNIT  varchar(12),  ORDPRICE  numeric(14,2),  IODATET  TIMESTAMP,  DELVDATEIT  TIMESTAMP,  VENDOR  INT  ,  QTYOSTND  numeric(14,2),  BASEAMOUNT  numeric(14,2),  DELIVCHRG  numeric(14,2),  MISCCHRG  numeric(14,2),  TAX1AMT  numeric(14,2),  TAX2AMT  numeric(14,2),  TAX3AMT  numeric(14,2),  LINETOTL  numeric(14,2),  OWNER2  varchar(40),  PRIMARY  KEY(  SID),  FOREIGN  KEY  (  MATCODE)  REFERENCES "+schemaName+".ITEM_c  (  SID),  FOREIGN  KEY  (  VENDOR)  REFERENCES "+schemaName+".VENDOR_c  (  SID),  FOREIGN  KEY  (  CUINO)  REFERENCES "+schemaName+".CUINVOICE_c  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".CUPDETAILS_c  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, CUPNO  INT  not null ,  LINE  INT,  INVOICE  INT  ,  QTYORDRD  numeric(14,2),  ORDPRICE  numeric(14,2),  PAYTYPE  varchar(12),  PAYBYID  varchar(12), AMOUNTIN  numeric(14,2),BASEAMOUNT  numeric(14,2),  DELIVCHRG  numeric(14,2),  MISCCHRG  numeric(14,2),  TAX1AMT  numeric(14,2),  TAX2AMT  numeric(14,2),  TAX3AMT  numeric(14,2),  LINETOTL  numeric(14,2),  OWNER2  varchar(40),  PRIMARY  KEY(  SID),  FOREIGN  KEY  (  INVOICE)  REFERENCES "+schemaName+".CUINVOICE_c  (  SID),  FOREIGN  KEY  (  CUPNO)  REFERENCES "+schemaName+".CPAYMENT_c  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".ACTIVITYJOBDETAILS_c  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, JOBNO  INT   not null,  LINE  INT,  ACTIVITYCODE  INT  ,  PRODDATET  TIMESTAMP,  QTYALLOC  numeric(14,2),  PONO  INT,  ORDPRICE  numeric(14,2),  QTYOSTND  numeric(14,2),  QTYALSTK  numeric(14,2),  QTYISSUD  numeric(14,2),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  PRINTMSTAT  INT,  PRINMTFLDT  TIMESTAMP,  PRINTMSTATJ  INT,  PRINMTFLDTJ  TIMESTAMP,  TYPE  varchar(12),  ACTIVITYCODEOUT  INT,  QTYOUT  numeric(14,2),  LINETOTL  numeric(14,2),  OWNER2  varchar(40),  PRIMARY  KEY(  SID),  FOREIGN  KEY  (  ACTIVITYCODE)  REFERENCES "+schemaName+".ACTIVITY_c  (  SID),  FOREIGN  KEY  (  JOBNO)  REFERENCES "+schemaName+".ACTIVITYJOB_c  (  SID  )  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".SHIPMENTDETAILS_c  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, SHIPCODE  INT  not null ,  LINE  INT,  MATCODE  INT  ,  QTYSHIPPED  numeric(14,2),  SHIPPINGPRICE  numeric(14,2),  SHIPPER  INT,  PONO  INT,  CPONO  INT,  INVOICE  INT,  AMOUNT  numeric(14,2),  AMOUNTOSTND  numeric(14,2),  QTY  numeric(14,2),  QTYOSTND  numeric(14,2),  CARRIER  INT,  TYPE  varchar(12),  SHIPDATET  TIMESTAMP,  SHIPDATETA  TIMESTAMP,  TARENO  varchar(20),  PACKNO  varchar(20),  CUSTOMER  INT  ,  MAILTOCODE  INT  ,  SHIPTOCODE  INT  ,  NOTES  varchar(60),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  SERIALNO  varchar(25),  PRINTMSTAT  INT,  PRINMTFLDT  TIMESTAMP,  OWNER  varchar(40),  OWNER2  varchar(40),  BARSHIPCOD  varchar(30),  LINETOTL  numeric(14,2),  PRIMARY  KEY(  SID),  FOREIGN  KEY  (  MATCODE)  REFERENCES "+schemaName+".ITEM_c  (  SID),  FOREIGN  KEY  (  MAILTOCODE  )  REFERENCES "+schemaName+".ADDRESS_c(  SID  ),  FOREIGN  KEY  (  SHIPTOCODE  )  REFERENCES "+schemaName+".ADDRESS_c(  SID  ),  FOREIGN  KEY  (  SHIPCODE)  REFERENCES "+schemaName+".SHIPMENT_c  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".VENDQDETAILS_c  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, VENDQNO  INT  not null ,  LINE  INT,  MATCODE  INT  ,  QTYORDRD  numeric(14,2),  ORDUNIT  varchar(12),  ORDPRICE  numeric(14,2),  IODATET  TIMESTAMP,SHIPOPTION varchar(20) ,  CUSTOMER  INT  ,  QTYOSTND  numeric(14,2),BASEAMOUNT  numeric(14,2),  DELIVCHRG  numeric(14,2),  MISCCHRG  numeric(14,2),  TAX1AMT  numeric(14,2),  TAX2AMT  numeric(14,2),  TAX3AMT  numeric(14,2),  LINETOTL  numeric(14,2),  OWNER2  varchar(40),  PRIMARY  KEY(  SID),  FOREIGN  KEY  (  MATCODE)  REFERENCES "+schemaName+".ITEM_c  (  SID),  FOREIGN  KEY  (  CUSTOMER  )  REFERENCES "+schemaName+".CUSTOMER_c  (  SID  ),  FOREIGN  KEY  (  VENDQNO  )  REFERENCES "+schemaName+".VENQUOTE_c  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".VENDODETAILS_c  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, VENDONO  INT  not null ,  LINE  INT,  MATCODE  INT  ,  QTYORDRD  numeric(14,2),  ORDUNIT  varchar(12),  ORDPRICE  numeric(14,2),  IODATET  TIMESTAMP,  CUSTOMER  INT  ,SHIPOPTION varchar(20) ,  QTYOSTND  numeric(14,2),BASEAMOUNT  numeric(14,2),  DELIVCHRG  numeric(14,2),  MISCCHRG  numeric(14,2),  TAX1AMT  numeric(14,2),  TAX2AMT  numeric(14,2),  TAX3AMT  numeric(14,2),  LINETOTL  numeric(14,2),  OWNER2  varchar(40),  PRIMARY  KEY(  SID),  FOREIGN  KEY  (  MATCODE)  REFERENCES "+schemaName+".ITEM_c  (  SID),  FOREIGN  KEY  (  CUSTOMER  )  REFERENCES "+schemaName+".CUSTOMER_c  (  SID  ),  FOREIGN  KEY  (  VENDONO  )  REFERENCES "+schemaName+".VENDORDERS_c  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".VENDIDETAILS_c  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, VENDINO  INT not null  ,  LINE  INT,  MATCODE  INT  ,  QTYORDRD  numeric(14,2),  ORDUNIT  varchar(12),  ORDPRICE  numeric(14,2),  IODATET  TIMESTAMP,  CUSTOMER  INT  ,  QTYOSTND  numeric(14,2),BASEAMOUNT  numeric(14,2),  DELIVCHRG  numeric(14,2),  MISCCHRG  numeric(14,2),  TAX1AMT  numeric(14,2),  TAX2AMT  numeric(14,2),  TAX3AMT  numeric(14,2),  LINETOTL  numeric(14,2),  OWNER2  varchar(40),  PRIMARY  KEY(  SID),  FOREIGN  KEY  (  MATCODE)  REFERENCES "+schemaName+".ITEM_c  (  SID),  FOREIGN  KEY  (  CUSTOMER  )  REFERENCES "+schemaName+".CUSTOMER_c  (  SID  ),  FOREIGN  KEY  (  VENDINO  )  REFERENCES "+schemaName+".VINVOICE_c  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".VENDPDETAILS_c  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, VENDPNO  INT  not null ,  LINE  INT,  INVOICE  INT  ,  QTYORDRD  numeric(14,2),  ORDPRICE  numeric(14,2),  PAYTYPE  varchar(12),  PAYBYID  varchar(12), AMOUNTIN  numeric(14,2),  VENDOR  INT  ,  VONTACT  INT,  QTYOSTND  numeric(14,2),BASEAMOUNT  numeric(14,2),  DELIVCHRG  numeric(14,2),  MISCCHRG  numeric(14,2),  TAX1AMT  numeric(14,2),  TAX2AMT  numeric(14,2),  TAX3AMT  numeric(14,2),  LINETOTL  numeric(14,2),  OWNER2  varchar(40),  PRIMARY  KEY(  SID),  FOREIGN  KEY  (  INVOICE)  REFERENCES "+schemaName+".VINVOICE_c  (  SID),  FOREIGN  KEY  (  VENDOR  )  REFERENCES "+schemaName+".VENDOR_c  (  SID  ),  FOREIGN  KEY  (  VENDPNO  )  REFERENCES "+schemaName+".VPAYMENT_c  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".VSHIPMENDETAILS_c  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, SHIPCODE  INT  not null ,  LINE  INT,  MATCODE  INT  ,  QTYSHIPPED  numeric(14,2),  SHIPPINGPRICE  numeric(14,2),  SHIPPER  INT,  PONO  INT,  CPONO  INT,  INVOICE  INT,  AMOUNT  numeric(14,2),  AMOUNTOSTND  numeric(14,2),  QTY  numeric(14,2),  QTYOSTND  numeric(14,2),  CARRIER  INT,  TYPE  varchar(12),  SHIPDATET  TIMESTAMP,  SHIPDATETA  TIMESTAMP,  TARENO  varchar(20),  PACKNO  varchar(20),  VENDOR  INT,  MAILTOCODE  INT  ,  SHIPTOCODE  INT  ,  NOTES  varchar(60),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  SERIALNO  varchar(25),  PRINTMSTAT  INT,  PRINMTFLDT  TIMESTAMP,  OWNER  varchar(40),  OWNER2  varchar(40),  BARSHIPCOD  varchar(30),  LINETOTL  numeric(14,2),  PRIMARY  KEY(  SID),  FOREIGN  KEY  (  MATCODE)  REFERENCES "+schemaName+".ITEM_c  (  SID),  FOREIGN  KEY  (  MAILTOCODE  )  REFERENCES "+schemaName+".ADDRESS_c(  SID  ),  FOREIGN  KEY  (  SHIPTOCODE  )  REFERENCES "+schemaName+".ADDRESS_c(  SID  ),  FOREIGN  KEY  (  SHIPCODE)  REFERENCES "+schemaName+".VSHIPMEN_c  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".WAGEEARNERAUX_c  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, WAGEEARNERID  INT not null,  LINE  INT,  SIN  varchar(12),  WCBYTDL  numeric(14,2),  WCBYTDN  numeric(14,2),  INSYTDL  numeric(14,2),  INSYTDN  numeric(14,2),  VACATONYL  numeric(14,2),  VACATONYN  numeric(14,2),  PAYYTDL  numeric(14,2),  FPENSIYTL  numeric(14,2),  PPENSIYTL  numeric(14,2),  ITAXYTDL  numeric(14,2),  PTAXYTDL  numeric(14,2),  PAYYTDN  numeric(14,2),  FPENSIYTN  numeric(14,2),  PPENSIYTN  numeric(14,2),  ITAXYTDN  numeric(14,2),  PATXYTDN  numeric(14,2),  GPAYYTDL  numeric(14,2),  GPAYYTDN  numeric(14,2),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  OWNER  varchar(40),  OWNER2  varchar(40),  PRIMARY  KEY  (  SID),  FOREIGN  KEY  (  WAGEEARNERID)  REFERENCES "+schemaName+".WAGEEARNER_c  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE TABLE IF NOT EXISTS  "+schemaName+".Rgenapp_c ( SID INTEGER GENERATED BY DEFAULT AS IDENTITY, APPNAME varchar(40) not null, DESCRIPT  varchar(120),  APPTYPE varchar(20), APPWACCOUNTING boolean, APPWEMAIL boolean, APPWJMSMQ boolean, APPVENDOR varchar(20), APPVERSION varchar(20), APPPLATFORM varchar(40), APPMODELPKG varchar(40), APPACTIONPKG varchar(40), APPSKIN varchar(20), APPDEPLOYTYPE varchar(20), CREATEFIDATA varchar(4096000), REVENGDATA varchar(4096000), INITIALIZEFIDATA varchar(4096000), STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  NOTES  varchar(60),  OWNER  varchar(40), OWNER2  varchar(40), PRIMARY KEY(SID) )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".RGENDB_c ( SID INTEGER GENERATED BY DEFAULT AS IDENTITY, DBNAME varchar(40) not null, DESCRIPT  varchar(120),  DBTYPE varchar(20), DBVENDOR varchar(20), DBVERSION varchar(20), DBPLATFORM varchar(20), APPCODE  INT  ,  SQLDRIVER varchar(40), SQLURL varchar(40), SQLUSER varchar(20), SQLPASSWORD varchar(20), SQLCLASSPATH varchar(40), SQLCREATEDBSCRIPT varchar(20), SQLDROPDBSCRIPT varchar(20), SQLCREATETBLSSCRIPT varchar(20), SQLLOADTBLSSCRIPT varchar(20), STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  NOTES  varchar(60),  OWNER  varchar(40), OWNER2  varchar(40),  PRIMARY KEY(SID), FOREIGN  KEY  (  APPCODE  )  REFERENCES "+schemaName+".Rgenapp_c  (  SID  ) )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".RGENTABLE_c   (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, TABLENAME   varchar(40)  not null ,  DBCODE INT  , INADDMENU  boolean,  INLISTMENU  boolean,  INTRANSACTIONMENU  boolean,  INREPORTMENU  boolean,  INGRAPHSMENU  boolean,  INMAILINGMENU  boolean,  INGENERATEMENU  boolean,  INADMINMENU  boolean,  INMAINTENANCEMENU  boolean,  INLABELSMENU  boolean,  INSKIPMENU  boolean,  INCUSTOM1MENU  boolean,  MENULEVEL  varchar(12),  MENUROLE  varchar(12),  MENULABELGROUP  varchar(20),  SUBMENUSEQUENCE  INT,  USAGESCOPE varchar(12), STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  NOTES  varchar(60),  OWNER  varchar(40), OWNER2  varchar(40),  PRIMARY  KEY(  SID), FOREIGN  KEY  (  DBCODE  )  REFERENCES "+schemaName+".RGENDB_c  (  SID  ) )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".RGENFIELDS_c  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, DBCODE INT   , TABLENAME   INT   ,  FIELDNAME  varchar(60) not null,  FIELDTYPE varchar(20), FIELDLENGTH varchar(2), INGROUP  varchar(20),  SEQWITHINGROUP  INT,  FOCUSSEQ  INT,  FUTURE1  varchar(20),  INITIALVALUE  varchar(12),  KEYORADDITIONAL  varchar(12),  KEYORADDITIONAL2  varchar(12),  KEYORADDITIONAL3  varchar(12),  SHOWINMENU  varchar(20),  SHOWINREPORT  varchar(20),  PROCESSOPTION1  varchar(20),  PROCESSOPTION2  varchar(20), FDBCODE varchar(40)  ,  FTABLENAME   varchar(60)  ,  FFIELDKEYNAME1  varchar(60),  FFIELDKEYNAME2  varchar(60),  FFIELDKEYNAME3  varchar(60),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  NOTES  varchar(60),  OWNER  varchar(40),  OWNER2  varchar(40),  PRIMARY  KEY(  SID), FOREIGN  KEY  (  TABLENAME  )  REFERENCES "+schemaName+".RGENTABLE_c   (  SID), FOREIGN  KEY  (  DBCODE )  REFERENCES "+schemaName+".RGENDB_c  (  SID) )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".GENOPTIONS_c  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, ROW  varchar(2) not null,  GENOPTIONS01  varchar(159),  GENPURPOSE01  varchar(159),  GENVALUE01  varchar(159),  GENOPTIONS02  varchar(159),  GENPURPOSE02  varchar(159),  GENVALUE02  varchar(159),  GENOPTIONS03  varchar(159),  GENPURPOSE03  varchar(159),  GENVALUE03  varchar(159),  GENOPTIONS04  varchar(159),  GENPURPOSE04  varchar(159),  GENVALUE04  varchar(159),  GENOPTIONS05  varchar(159),  GENPURPOSE05  varchar(159),  GENVALUE05  varchar(159),  GENOPTIONS06  varchar(159),  GENPURPOSE06  varchar(159),  GENVALUE06  varchar(159),  GENOPTIONS07  varchar(159),  GENPURPOSE07  varchar(159),  GENVALUE07  varchar(159),  GENOPTIONS08  varchar(159),  GENPURPOSE08  varchar(159),  GENVALUE08  varchar(159),  GENOPTIONS09  varchar(159),  GENPURPOSE09  varchar(159),  GENVALUE09  varchar(159),  GENOPTIONS10  varchar(159),  GENPURPOSE10  varchar(159),  GENVALUE10  varchar(159),  GENOPTIONS11  varchar(159),  GENPURPOSE11  varchar(159),  GENVALUE11  varchar(159),  GENOPTIONS12  varchar(159),  GENPURPOSE12  varchar(159),  GENVALUE12  varchar(159),  GENOPTIONS13  varchar(159),  GENPURPOSE13  varchar(159),  GENVALUE13  varchar(159),  GENOPTIONS14  varchar(159),  GENPURPOSE14  varchar(159),  GENVALUE14  varchar(159),  GENOPTIONS15  varchar(159),  GENPURPOSE15  varchar(159),  GENVALUE15  varchar(159),  GENOPTIONS16  varchar(159),  GENPURPOSE16  varchar(159),  GENVALUE16  varchar(159),  GENOPTIONS17  varchar(159),  GENPURPOSE17  varchar(159),  GENVALUE17  varchar(159),  GENOPTIONS18  varchar(159),  GENPURPOSE18  varchar(159),  GENVALUE18  varchar(159),  GENOPTIONS19  varchar(159),  GENPURPOSE19  varchar(159),  GENVALUE19  varchar(159),  GENOPTIONS20  varchar(159),  GENPURPOSE20  varchar(159),  GENVALUE20  varchar(159),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  NOTES  varchar(60),  OWNER  varchar(40), OWNER2  varchar(40), PRIMARY  KEY(SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".BLOBDATA_c  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, FROMTABLE  varchar(35) not null,  FROMKEY varchar(35) not null, QUALIFIER  varchar(32) not null,  SEQUENCE  INT,  TYPE varchar(40), DATA  VARBINARY(1000000),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  NOTES  varchar(255),  OWNER  varchar(40),  OWNER2  varchar(40),  PRIMARY  KEY  (  SID ))";
      if(dbProductName.equals("psql")){
       sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".BLOBDATA_c  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, FROMTABLE  varchar(35) not null,  FROMKEY varchar(35) not null, QUALIFIER  varchar(32) not null,  SEQUENCE  INT,  TYPE varchar(40), DATA  BYTEA,  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  NOTES  varchar(255),  OWNER  varchar(40),  OWNER2  varchar(40),  PRIMARY  KEY  (  SID ))";
      }
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".CLOBDATA_c  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, FROMTABLE  varchar(35) not null,  FROMKEY varchar(35) not null, QUALIFIER  varchar(32) not null,  SEQUENCE  INT,  TYPE varchar(40), DATA  VARCHAR(4096000),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  NOTES  varchar(255),  OWNER  varchar(40),  OWNER2  varchar(40),  PRIMARY  KEY  (  SID))";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".CONTROLUSAGEBYPERIODS_c  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, CTLUSAGETRACKERID  varchar(32)  not null,  DESCRIPT  varchar(120), CONTROLCODE   INT,  CURRENCY  varchar(3),  PERIOD0LABEL varchar(20), PERIOD0B  numeric(14,2),  PERIOD0  numeric(14,2),  PERIODTOTALSLABEL varchar(20), PERIODTOTALSB  numeric(14,2),  PERIODTOTALS  numeric(14,2),  PERIOD1LABEL varchar(20), PERIOD1BUDGET  numeric(14,2),  PERIOD1ACTUAL  numeric(14,2),  PERIOD2LABEL varchar(20), PERIOD2B  numeric(14,2),  PERIOD2  numeric(14,2),  PERIOD3LABEL varchar(20), PERIOD3B  numeric(14,2),  PERIOD3  numeric(14,2),  PERIOD4LABEL varchar(20), PERIOD4B  numeric(14,2),  PERIOD4  numeric(14,2),  PERIOD5LABEL varchar(20), PERIOD5B  numeric(14,2),  PERIOD5  numeric(14,2),  PERIOD6LABEL varchar(20), PERIOD6B  numeric(14,2),  PERIOD6  numeric(14,2),  PERIOD7LABEL varchar(20), PERIOD7B  numeric(14,2),  PERIOD7  numeric(14,2),  PERIOD8LABEL varchar(20), PERIOD8B  numeric(14,2),  PERIOD8  numeric(14,2),  PERIOD9LABEL varchar(20), PERIOD9B  numeric(14,2),  PERIOD9  numeric(14,2),  PERIOD10LABEL varchar(20), PERIOD10B  numeric(14,2),  PERIOD10  numeric(14,2),  PERIOD11LABEL varchar(20), PERIOD11B  numeric(14,2),  PERIOD11  numeric(14,2),  PERIOD12LABEL varchar(20), PERIOD12B  numeric(14,2),  PERIOD12  numeric(14,2),  PERIODNLABEL varchar(20), PERIODNB  numeric(14,2),  PERIODN  numeric(14,2),  NOTES  varchar(60),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  OWNER  varchar(40),  OWNER2  varchar(40),  PRIMARY  KEY  (  SID),   FOREIGN  KEY  (  CONTROLCODE)  REFERENCES "+schemaName+".CONTROL_c  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".RESOURCEDETAILS_c  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, TASKNO  INT,  RESOURCENUMBER  INT,  PROJECTTEAM  INT  ,  RESOURCE  INT  not null ,  USAGEPERCENT numeric(14,2),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  OWNER  varchar(40), OWNER2  varchar(40),  PRIMARY  KEY(  SID),  FOREIGN  KEY  (PROJECTTEAM)  REFERENCES "+schemaName+".MEMBERSGROUP_c  (  SID),  FOREIGN  KEY  (RESOURCE)  REFERENCES "+schemaName+".GROUPMEMBERS_c  (  SID),  FOREIGN  KEY  (  TASKNO)  REFERENCES "+schemaName+".TASK_c  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".EMPLODETAILS_c  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, EMPLONO  INT  not null ,  LINE  INT not null,  MATCODE  INT  ,  QTYORDRD  numeric(14,2),  ORDUNIT  varchar(12),  ORDPRICE  numeric(14,2),  IODATE  TIMESTAMP,  IDELVDATE  TIMESTAMP,  VENDOR  INT  ,  QTYOSTND  numeric(14,2),BASEAMOUNT  numeric(14,2),  DELIVCHRG  numeric(14,2),  MISCCHRG  numeric(14,2),  TAX1AMT  numeric(14,2),  TAX2AMT  numeric(14,2),  TAX3AMT  numeric(14,2),  LINETOTL  numeric(14,2),  OWNER2  varchar(40),  PRIMARY  KEY(  SID),  FOREIGN  KEY  (  MATCODE)  REFERENCES "+schemaName+".ITEM_c  (  SID),  FOREIGN  KEY  (  VENDOR)  REFERENCES "+schemaName+".VENDOR_c  (  SID),  FOREIGN  KEY  (  EMPLONO)  REFERENCES "+schemaName+".EMPLORDERS_c  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
       sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".USAGEBYPERIODS_c  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, USAGETRACKERID  varchar(32) not null,  DESCRIPT  varchar(120),  MATCODE INT  , CURRENCY  varchar(3),  PERIOD0LABEL varchar(20), PERIOD0B  numeric(14,2),  PERIOD0  numeric(14,2),  PERIOD0FORMULAE  VARCHAR(159),  PERIODTOTALSLABEL varchar(20), PERIODTOTALSB  numeric(14,2),  PERIODTOTALS numeric(14,2),  PERIODTOTALSFORMULAE  VARCHAR(159),  PERIOD1LABEL varchar(20), PERIOD1BUDGET  numeric(14,2),  PERIOD1  numeric(14,2),  PERIOD1FORMULAE  VARCHAR(159),  PERIOD2LABEL varchar(20), PERIOD2B  numeric(14,2),  PERIOD2  numeric(14,2),  PERIOD2FORMULAE  VARCHAR(159),  PERIOD3LABEL varchar(20), PERIOD3B  numeric(14,2),  PERIOD3  numeric(14,2),  PERIOD3FORMULAE  VARCHAR(159),  PERIOD4LABEL varchar(20), PERIOD4B  numeric(14,2),  PERIOD4  numeric(14,2),  PERIOD4FORMULAE  VARCHAR(159),  PERIOD5LABEL varchar(20), PERIOD5B  numeric(14,2),  PERIOD5  numeric(14,2),  PERIOD5FORMULAE  VARCHAR(159),  PERIOD6LABEL varchar(20), PERIOD6B  numeric(14,2),  PERIOD6  numeric(14,2),  PERIOD6FORMULAE  VARCHAR(159),  PERIOD7LABEL varchar(20), PERIOD7B  numeric(14,2),  PERIOD7  numeric(14,2),  PERIOD7FORMULAE  VARCHAR(159),  PERIOD8LABEL varchar(20), PERIOD8B  numeric(14,2),  PERIOD8  numeric(14,2),  PERIOD8FORMULAE  VARCHAR(159),  PERIOD9LABEL varchar(20), PERIOD9B  numeric(14,2),  PERIOD9  numeric(14,2),  PERIOD9FORMULAE  VARCHAR(159),  PERIOD10LABEL varchar(20), PERIOD10B  numeric(14,2),  PERIOD10  numeric(14,2),  PERIOD10FORMULAE  VARCHAR(159),  PERIOD11LABEL varchar(20), PERIOD11B  numeric(14,2),  PERIOD11  numeric(14,2),  PERIOD11FORMULAE  VARCHAR(159),  PERIOD12LABEL varchar(20), PERIOD12B  numeric(14,2),  PERIOD12  numeric(14,2),  PERIOD12FORMULAE  VARCHAR(159),  PERIODNLABEL varchar(20), PERIODNB  numeric(14,2),  PERIODN  numeric(14,2),  PERIODNFORMULAE  VARCHAR(159),  NOTES  varchar(60),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  OWNER  varchar(40),  OWNER2  varchar(40),  GROUPCODE  INT  ,  PRIMARY  KEY  (  SID),  FOREIGN  KEY  (  MATCODE)  REFERENCES "+schemaName+".ITEM_c  (  SID), FOREIGN  KEY  (  GROUPCODE)  REFERENCES "+schemaName+".ROLLUPGROUP_c  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".RESOURCE_BUNDLE_c (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY,NAME varchar(50),LANGUAGE varchar(2),COUNTRY varchar(2),VARIANT varchar(2),  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  OWNER  varchar(40),  OWNER2  varchar(40), PRIMARY  KEY(  SID))";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".RESOURCE_c (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, \"_KEY\"  varchar(50) , \"_VALUE\" varchar(2555),  RESOURCEBUNDLE  INT  not null,  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  OWNER  varchar(40),  OWNER2  varchar(40),  PRIMARY  KEY(  SID), FOREIGN  KEY  (  RESOURCEBUNDLE)  REFERENCES "+schemaName+".RESOURCE_BUNDLE_c  (  SID) )";
      if(dbProductName.equals("psql")){
       sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".RESOURCE_c (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, _KEY  varchar(50) ,  _VALUE varchar(2555),  RESOURCEBUNDLE  INT  not null,  STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  OWNER  varchar(40),  OWNER2  varchar(40),  PRIMARY  KEY(  SID), FOREIGN  KEY  (  RESOURCEBUNDLE)  REFERENCES "+schemaName+".RESOURCE_BUNDLE_c  (  SID) )";
      }
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".TRUEFALSE_c (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, TABLENAME  varchar(50) ,  QUALIFIER varchar(32), SHOW001 boolean, SHOW002 boolean, SHOW003 boolean, SHOW004 boolean, SHOW005 boolean, SHOW006 boolean, SHOW007 boolean, SHOW008 boolean, SHOW009 boolean, SHOW010 boolean, SHOW011 boolean, SHOW012 boolean, SHOW013 boolean, SHOW014 boolean, SHOW015 boolean, SHOW016 boolean, SHOW017 boolean, SHOW018 boolean, SHOW019 boolean, SHOW020 boolean, SHOW021 boolean, SHOW022 boolean, SHOW023 boolean, SHOW024 boolean, SHOW025 boolean, SHOW026 boolean, SHOW027 boolean, SHOW028 boolean, SHOW029 boolean, SHOW030 boolean, SHOW031 boolean, SHOW032 boolean, SHOW033 boolean, SHOW034 boolean, SHOW035 boolean, SHOW036 boolean, SHOW037 boolean, SHOW038 boolean, SHOW039 boolean, SHOW040 boolean, SHOW041 boolean, SHOW042 boolean, SHOW043 boolean, SHOW044 boolean, SHOW045 boolean, SHOW046 boolean, SHOW047 boolean, SHOW048 boolean, SHOW049 boolean, SHOW050 boolean, SHOW051 boolean, SHOW052 boolean, SHOW053 boolean, SHOW054 boolean, SHOW055 boolean, SHOW056 boolean, SHOW057 boolean, SHOW058 boolean, SHOW059 boolean, SHOW060 boolean, SHOW061 boolean, SHOW062 boolean, SHOW063 boolean, SHOW064 boolean, SHOW065 boolean, SHOW066 boolean, SHOW067 boolean, SHOW068 boolean, SHOW069 boolean, SHOW070 boolean, SHOW071 boolean, SHOW072 boolean, SHOW073 boolean, SHOW074 boolean, SHOW075 boolean, SHOW076 boolean, SHOW077 boolean, SHOW078 boolean, SHOW079 boolean, SHOW080 boolean, SHOW081 boolean, SHOW082 boolean, SHOW083 boolean, SHOW084 boolean , SHOW085 boolean, SHOW086 boolean, SHOW087 boolean, SHOW088 boolean, SHOW089 boolean, SHOW090 boolean, SHOW091 boolean, SHOW092 boolean, SHOW093 boolean, SHOW094 boolean, SHOW095 boolean, SHOW096 boolean, SHOW097 boolean, SHOW098 boolean, SHOW099 boolean, SHOW100 boolean, SHOW101 boolean, SHOW102 boolean, SHOW103 boolean, SHOW104 boolean, SHOW105 boolean, SHOW106 boolean, SHOW107 boolean, SHOW108 boolean, SHOW109 boolean, SHOW110 boolean, SHOW111 boolean, SHOW112 boolean, SHOW113 boolean, SHOW114 boolean, SHOW115 boolean, SHOW116 boolean, SHOW117 boolean, SHOW118 boolean, SHOW119 boolean, SHOW120 boolean, SHOW121 boolean, SHOW122 boolean, SHOW123 boolean, SHOW124 boolean, SHOW125 boolean, SHOW126 boolean, SHOW127 boolean, SHOW128 boolean, SHOW129 boolean, SHOW130 boolean, SHOW131 boolean, SHOW132 boolean, SHOW133 boolean, SHOW134 boolean, SHOW135 boolean, SHOW136 boolean, SHOW137 boolean, SHOW138 boolean, SHOW139 boolean,SHOW140 boolean,SHOW141 boolean,SHOW142 boolean,SHOW143 boolean,SHOW144 boolean,SHOW145 boolean,SHOW146 boolean,SHOW147 boolean,SHOW148 boolean,SHOW149 boolean,SHOW150 boolean,SHOW151 boolean,SHOW152 boolean,SHOW153 boolean,SHOW154 boolean,SHOW155 boolean,SHOW156 boolean,SHOW157 boolean,SHOW158 boolean,SHOW159 boolean,SHOW160 boolean,SHOW161 boolean,SHOW162 boolean,SHOW163 boolean,SHOW164 boolean,SHOW165 boolean,SHOW166 boolean,SHOW167 boolean,SHOW168 boolean,SHOW169 boolean,SHOW170 boolean,SHOW171 boolean,SHOW172 boolean,SHOW173 boolean,SHOW174 boolean,SHOW175 boolean,SHOW176 boolean,SHOW177 boolean,SHOW178 boolean,SHOW179 boolean,SHOW180 boolean,SHOW181 boolean,SHOW182 boolean,SHOW183 boolean,SHOW184 boolean,SHOW185 boolean,SHOW186 boolean,SHOW187 boolean,SHOW188 boolean,SHOW189 boolean,SHOW190 boolean,SHOW191 boolean,SHOW192 boolean,SHOW193 boolean,SHOW194 boolean,SHOW195 boolean,SHOW196 boolean,SHOW197 boolean,SHOW198 boolean,SHOW199 boolean, SHOW200 boolean, SHOW201 boolean, SHOW202 boolean, SHOW203 boolean, SHOW204 boolean, SHOW205 boolean, SHOW206 boolean, SHOW207 boolean, SHOW208 boolean, SHOW209 boolean, SHOW210 boolean, STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  OWNER  varchar(40),  OWNER2  varchar(40),  PRIMARY  KEY(  SID))";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".SEAT_c (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, LOCATION  INT  not null , ROW  varchar(4) not null, ROWLABEL  varchar(50), SEAT001STATUS varchar(1), NAME001 varchar(50), TICKET001 varchar(50), PO001 varchar(32), SEAT002STATUS varchar(1), NAME002 varchar(50), TICKET002 varchar(50), PO002 varchar(32), SEAT003STATUS varchar(1), NAME003 varchar(50), TICKET003 varchar(50), PO003 varchar(32), SEAT004STATUS varchar(1), NAME004 varchar(50), TICKET004 varchar(50), PO004 varchar(32), SEAT005STATUS varchar(1), NAME005 varchar(50), TICKET005 varchar(50), PO005 varchar(32), SEAT006STATUS varchar(1), NAME006 varchar(50), TICKET006 varchar(50), PO006 varchar(32), SEAT007STATUS varchar(1), NAME007 varchar(50), TICKET007 varchar(50), PO007 varchar(32), SEAT008STATUS varchar(1), NAME008 varchar(50), TICKET008 varchar(50), PO008 varchar(32), SEAT009STATUS varchar(1), NAME009 varchar(50), TICKET009 varchar(50), PO009 varchar(32), SEAT010STATUS varchar(1), NAME010 varchar(50), TICKET010 varchar(50), PO010 varchar(32), SEAT011STATUS varchar(1), NAME011 varchar(50), TICKET011 varchar(50), PO011 varchar(32), SEAT012STATUS varchar(1), NAME012 varchar(50), TICKET012 varchar(50), PO012 varchar(32), SEAT013STATUS varchar(1), NAME013 varchar(50), TICKET013 varchar(50), PO013 varchar(32), SEAT014STATUS varchar(1), NAME014 varchar(50), TICKET014 varchar(50), PO014 varchar(32), SEAT015STATUS varchar(1), NAME015 varchar(50), TICKET015 varchar(50), PO015 varchar(32), SEAT016STATUS varchar(1), NAME016 varchar(50), TICKET016 varchar(50), PO016 varchar(32), SEAT017STATUS varchar(1), NAME017 varchar(50), TICKET017 varchar(50), PO017 varchar(32), SEAT018STATUS varchar(1), NAME018 varchar(50), TICKET018 varchar(50), PO018 varchar(32), SEAT019STATUS varchar(1), NAME019 varchar(50), TICKET019 varchar(50), PO019 varchar(32), SEAT020STATUS varchar(1), NAME020 varchar(50), TICKET020 varchar(50), PO020 varchar(32), SEAT021STATUS varchar(1), NAME021 varchar(50), TICKET021 varchar(50), PO021 varchar(32), SEAT022STATUS varchar(1), NAME022 varchar(50), TICKET022 varchar(50), PO022 varchar(32), SEAT023STATUS varchar(1), NAME023 varchar(50), TICKET023 varchar(50), PO023 varchar(32), SEAT024STATUS varchar(1), NAME024 varchar(50), TICKET024 varchar(50), PO024 varchar(32), SEAT025STATUS varchar(1), NAME025 varchar(50), TICKET025 varchar(50), PO025 varchar(32), SEAT026STATUS varchar(1), NAME026 varchar(50), TICKET026 varchar(50), PO026 varchar(32), SEAT027STATUS varchar(1), NAME027 varchar(50), TICKET027 varchar(50), PO027 varchar(32), SEAT028STATUS varchar(1), NAME028 varchar(50), TICKET028 varchar(50), PO028 varchar(32), SEAT029STATUS varchar(1), NAME029 varchar(50), TICKET029 varchar(50), PO029 varchar(32), SEAT030STATUS varchar(1), NAME030 varchar(50), TICKET030 varchar(50), PO030 varchar(32), SEAT031STATUS varchar(1), NAME031 varchar(50), TICKET031 varchar(50), PO031 varchar(32), SEAT032STATUS varchar(1), NAME032 varchar(50), TICKET032 varchar(50), PO032 varchar(32), SEAT033STATUS varchar(1), NAME033 varchar(50), TICKET033 varchar(50), PO033 varchar(32), SEAT034STATUS varchar(1), NAME034 varchar(50), TICKET034 varchar(50), PO034 varchar(32), SEAT035STATUS varchar(1), NAME035 varchar(50), TICKET035 varchar(50), PO035 varchar(32), SEAT036STATUS varchar(1), NAME036 varchar(50), TICKET036 varchar(50), PO036 varchar(32), SEAT037STATUS varchar(1), NAME037 varchar(50), TICKET037 varchar(50), PO037 varchar(32), SEAT038STATUS varchar(1), NAME038 varchar(50), TICKET038 varchar(50), PO038 varchar(32), SEAT039STATUS varchar(1), NAME039 varchar(50), TICKET039 varchar(50), PO039 varchar(32), SEAT040STATUS varchar(1), NAME040 varchar(50), TICKET040 varchar(50), PO040 varchar(32),  SEAT041STATUS varchar(1), NAME041 varchar(50), TICKET041 varchar(50), PO041 varchar(32), SEAT042STATUS varchar(1), NAME042 varchar(50), TICKET042 varchar(50), PO042 varchar(32), SEAT043STATUS varchar(1), NAME043 varchar(50), TICKET043 varchar(50), PO043 varchar(32), SEAT044STATUS varchar(1), NAME044 varchar(50), TICKET044 varchar(50), PO044 varchar(32), SEAT045STATUS varchar(1), NAME045 varchar(50), TICKET045 varchar(50), PO045 varchar(32), SEAT046STATUS varchar(1), NAME046 varchar(50), TICKET046 varchar(50), PO046 varchar(32), SEAT047STATUS varchar(1), NAME047 varchar(50), TICKET047 varchar(50), PO047 varchar(32), SEAT048STATUS varchar(1), NAME048 varchar(50), TICKET048 varchar(50), PO048 varchar(32), SEAT049STATUS varchar(1), NAME049 varchar(50), TICKET049 varchar(50), PO049 varchar(32), SEAT050STATUS varchar(1), NAME050 varchar(50), TICKET050 varchar(50), PO050 varchar(32), STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  OWNER  varchar(40),  OWNER2  varchar(40),  PRIMARY  KEY(  SID), FOREIGN  KEY  (  LOCATION)  REFERENCES "+schemaName+".LOCATION  (  SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();
      sqlScript="CREATE  TABLE IF NOT EXISTS  "+schemaName+".ITEMPROFL_c  (  SID INTEGER GENERATED BY DEFAULT AS IDENTITY, ITEMID  INT, ROW varchar(20), LENGTH varchar(255), WIDTH varchar(255),  HEIGHT  varchar(30),  SIZEUNIT  varchar(30), WEIGHT varchar(30), WEIGHTUNIT  varchar(30),  SHIPMODE  varchar(30),  COLOUR  varchar(30),  MATERIAL  boolean,  MADEIN  boolean,  SKU  boolean,  SALESCHANNEL  varchar(5),  COMPAREPRICE  varchar(5),  CUSTOMSCODE  varchar(5),  PAGETITLE  varchar(5),  METADESCRIPTION  varchar(5),  URLHANDLE  varchar(5),  RATING  varchar(30),  POINTS  varchar(30),  POINTSUNIT  varchar(30),  DTSTYLE  varchar(30),  FTSTYLE  varchar(20),  DEFAULTR  varchar(3),  DEFAULTC  varchar(3),  DBNAME  varchar(20),  ROOTDIR  varchar(35),  KEYORDER  varchar(3),  MARGIN  numeric(14,2),  FOOTER  numeric(14,2),  LISTBUILDC  boolean,  LISTBUILDV  boolean,  LISTBUILDE  boolean,  LISTBROWNC  INT,  LISTBROWNV  INT,  LISTBROWNE  INT,   STATUSFL  INT,  STATUSFLDT  TIMESTAMP,  NOTES  varchar(4096000),  DOCMNT  varchar(90),  OWNER  varchar(40),  OWNER2  varchar(40), PRIMARY  KEY(SID), FOREIGN KEY(ITEMID) REFERENCES  "+schemaName+".item(SID)  )";
      q = entityManager.createNativeQuery(sqlScript);
      q.executeUpdate();

      log.info("create tables_c done");

	 return "create daily backUp tables_c done";
      }catch (Exception e) {
       log.severe("create tables_c exception for "+schemaName+"., error "+e.getMessage());
       return null;
      }


	}


	public String  truncateBackupTenants() {
         //aug 04 2018 use truncate with cascade for backup tables only
         // Delete is DML, Truncate is DDL and with cascade we can ignore constrain and ok for corrupted backups
         // why schedule not here?? any other
      //using jdbc connection to get database metadata rather than entitymanager way to be ORM neutral
      DatabaseMetaData databaseMetaData=null;
      String productName="";
      String dbProductName="hsql";
      //try with resource ensures resouce gets closed, better than using finally to close
      try(Connection conn = getConnection();){
       databaseMetaData = conn.getMetaData();
       productName = databaseMetaData.getDatabaseProductName();
      } catch (Exception e) {
       log.severe("No datasouce connection or databaseMetaData, Cannot continue");
       return null;
      }
      if(productName==null || productName.isEmpty()){
       log.severe("No datasouce setup yet, check tomee.xml or standalone.xml etc. Cannot continue");
       return null;
      }
      if(productName.contains("PostgreSQL")){
       dbProductName="psql";
      }

      schemaName="genapp";//hard code for now

     String sqlScript ="";
try{
     int deletedCount=0;
     int updatedCount=0;
     int insertedCount=0;
     int countp=0;

     // cascade deletes all foreign fields related tables as well

     // follow insertionOrder.txt produced by schemaSpyGui which is in reverse order of deleteOrder.txt.

      countp=deletedCount;
      //hsql truncate table genapp.address_b and commit no check
      sqlScript="truncate table "+schemaName+".address_b and commit no check";
      if(dbProductName.equals("psql")){
       sqlScript="truncate "+schemaName+".address_b cascade";
      }
      Query q = entityManager.createNativeQuery(sqlScript);
      deletedCount=deletedCount+q.executeUpdate();
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
       FacesMessage.SEVERITY_INFO,bundle.getString("truncate")+" "+bundle.getString("address_b")+" "+bundle.getString("count")+" "+((deletedCount-countp)),""));
      countp=deletedCount;

      sqlScript="truncate table "+schemaName+".department_b and commit no check";
      if(dbProductName.equals("psql")){
       sqlScript="truncate "+schemaName+".department_b cascade";
      }
      q = entityManager.createNativeQuery(sqlScript);
      deletedCount=deletedCount+q.executeUpdate();
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
       FacesMessage.SEVERITY_INFO,bundle.getString("truncate")+" "+bundle.getString("address_b")+" "+bundle.getString("count")+" "+((deletedCount-countp)),""));
      countp=deletedCount;

      sqlScript="truncate table "+schemaName+".division_b and commit no check";
      if(dbProductName.equals("psql")){
       sqlScript="truncate "+schemaName+".division_b cascade";
      }
      q = entityManager.createNativeQuery(sqlScript);
      deletedCount=deletedCount+q.executeUpdate();
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
       FacesMessage.SEVERITY_INFO,bundle.getString("truncate")+" "+bundle.getString("address_b")+" "+bundle.getString("count")+" "+((deletedCount-countp)),""));
      countp=deletedCount;

      sqlScript="truncate table "+schemaName+".membersgroup_b and commit no check";
      if(dbProductName.equals("psql")){
      sqlScript="truncate "+schemaName+".membersgroup_b cascade";
      }
      q = entityManager.createNativeQuery(sqlScript);
      deletedCount=deletedCount+q.executeUpdate();
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
       FacesMessage.SEVERITY_INFO,bundle.getString("truncate")+" "+bundle.getString("address_b")+" "+bundle.getString("count")+" "+((deletedCount-countp)),""));
      countp=deletedCount;

      sqlScript="truncate table "+schemaName+".residency_b and commit no check";
      if(dbProductName.equals("psql")){
      sqlScript="truncate "+schemaName+".residency_b cascade";
      }
      q = entityManager.createNativeQuery(sqlScript);
      deletedCount=deletedCount+q.executeUpdate();
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
       FacesMessage.SEVERITY_INFO,bundle.getString("truncate")+" "+bundle.getString("address_b")+" "+bundle.getString("count")+" "+((deletedCount-countp)),""));
      countp=deletedCount;

      sqlScript="truncate table "+schemaName+".client_b and commit no check";
      if(dbProductName.equals("psql")){
      sqlScript="truncate "+schemaName+".client_b cascade";
      }
      q = entityManager.createNativeQuery(sqlScript);
      deletedCount=deletedCount+q.executeUpdate();
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
       FacesMessage.SEVERITY_INFO,bundle.getString("truncate")+" "+bundle.getString("address_b")+" "+bundle.getString("count")+" "+((deletedCount-countp)),""));
      countp=deletedCount;

      sqlScript="truncate table "+schemaName+".control_b and commit no check";
      if(dbProductName.equals("psql")){
      sqlScript="truncate "+schemaName+".control_b cascade";
      }
      q = entityManager.createNativeQuery(sqlScript);
      deletedCount=deletedCount+q.executeUpdate();
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
       FacesMessage.SEVERITY_INFO,bundle.getString("truncate")+" "+bundle.getString("address_b")+" "+bundle.getString("count")+" "+((deletedCount-countp)),""));
      countp=deletedCount;

      sqlScript="truncate table "+schemaName+".itembom_b and commit no check";
      if(dbProductName.equals("psql")){
      sqlScript="truncate "+schemaName+".itembom_b cascade";
      }
      q = entityManager.createNativeQuery(sqlScript);
      deletedCount=deletedCount+q.executeUpdate();
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
       FacesMessage.SEVERITY_INFO,bundle.getString("truncate")+" "+bundle.getString("address_b")+" "+bundle.getString("count")+" "+((deletedCount-countp)),""));
      countp=deletedCount;

      sqlScript="truncate table "+schemaName+".perioddates_b and commit no check";
      if(dbProductName.equals("psql")){
      sqlScript="truncate "+schemaName+".perioddates_b cascade";
      }
      q = entityManager.createNativeQuery(sqlScript);
      deletedCount=deletedCount+q.executeUpdate();
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
       FacesMessage.SEVERITY_INFO,bundle.getString("truncate")+" "+bundle.getString("address_b")+" "+bundle.getString("count")+" "+((deletedCount-countp)),""));
      countp=deletedCount;

      sqlScript="truncate table "+schemaName+".rgenapp_b and commit no check";
      if(dbProductName.equals("psql")){
      sqlScript="truncate "+schemaName+".rgenapp_b cascade";
      }
      q = entityManager.createNativeQuery(sqlScript);
      deletedCount=deletedCount+q.executeUpdate();
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
       FacesMessage.SEVERITY_INFO,bundle.getString("truncate")+" "+bundle.getString("address_b")+" "+bundle.getString("count")+" "+((deletedCount-countp)),""));
      countp=deletedCount;

      sqlScript="truncate table "+schemaName+".rollupgroup_b and commit no check";
      if(dbProductName.equals("psql")){
      sqlScript="truncate "+schemaName+".rollupgroup_b cascade";
      }
      q = entityManager.createNativeQuery(sqlScript);
      deletedCount=deletedCount+q.executeUpdate();
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
       FacesMessage.SEVERITY_INFO,bundle.getString("truncate")+" "+bundle.getString("address_b")+" "+bundle.getString("count")+" "+((deletedCount-countp)),""));
      countp=deletedCount;

      sqlScript="truncate table "+schemaName+".company_b and commit no check";
      if(dbProductName.equals("psql")){
      sqlScript="truncate "+schemaName+".company_b cascade";
      }
      q = entityManager.createNativeQuery(sqlScript);
      deletedCount=deletedCount+q.executeUpdate();
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
       FacesMessage.SEVERITY_INFO,bundle.getString("truncate")+" "+bundle.getString("address_b")+" "+bundle.getString("count")+" "+((deletedCount-countp)),""));
      countp=deletedCount;

      sqlScript="truncate table "+schemaName+".rgendb_b and commit no check";
      if(dbProductName.equals("psql")){
      sqlScript="truncate "+schemaName+".rgendb_b cascade";
      }
      q = entityManager.createNativeQuery(sqlScript);
      deletedCount=deletedCount+q.executeUpdate();
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
       FacesMessage.SEVERITY_INFO,bundle.getString("truncate")+" "+bundle.getString("address_b")+" "+bundle.getString("count")+" "+((deletedCount-countp)),""));
      countp=deletedCount;

      sqlScript="truncate table "+schemaName+".account_b and commit no check";
      if(dbProductName.equals("psql")){
      sqlScript="truncate "+schemaName+".account_b cascade";
      }
      q = entityManager.createNativeQuery(sqlScript);
      deletedCount=deletedCount+q.executeUpdate();
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
       FacesMessage.SEVERITY_INFO,bundle.getString("truncate")+" "+bundle.getString("address_b")+" "+bundle.getString("count")+" "+((deletedCount-countp)),""));
      countp=deletedCount;

      sqlScript="truncate table "+schemaName+".location_b and commit no check";
      if(dbProductName.equals("psql")){
      sqlScript="truncate "+schemaName+".location_b cascade";
      }
      q = entityManager.createNativeQuery(sqlScript);
      deletedCount=deletedCount+q.executeUpdate();
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
       FacesMessage.SEVERITY_INFO,bundle.getString("truncate")+" "+bundle.getString("address_b")+" "+bundle.getString("count")+" "+((deletedCount-countp)),""));
      countp=deletedCount;

      sqlScript="truncate table "+schemaName+".vendor_b and commit no check";
      if(dbProductName.equals("psql")){
      sqlScript="truncate "+schemaName+".vendor_b cascade";
      }
      q = entityManager.createNativeQuery(sqlScript);
      deletedCount=deletedCount+q.executeUpdate();
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
       FacesMessage.SEVERITY_INFO,bundle.getString("truncate")+" "+bundle.getString("address_b")+" "+bundle.getString("count")+" "+((deletedCount-countp)),""));
      countp=deletedCount;

      sqlScript="truncate table "+schemaName+".customer_b and commit no check";
      if(dbProductName.equals("psql")){
      sqlScript="truncate "+schemaName+".customer_b cascade";
      }
      q = entityManager.createNativeQuery(sqlScript);
      deletedCount=deletedCount+q.executeUpdate();
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
       FacesMessage.SEVERITY_INFO,bundle.getString("truncate")+" "+bundle.getString("address_b")+" "+bundle.getString("count")+" "+((deletedCount-countp)),""));
      countp=deletedCount;

      sqlScript="truncate table "+schemaName+".acperiod_b and commit no check";
      if(dbProductName.equals("psql")){
      sqlScript="truncate "+schemaName+".acperiod_b cascade";
      }
      q = entityManager.createNativeQuery(sqlScript);
      deletedCount=deletedCount+q.executeUpdate();
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
       FacesMessage.SEVERITY_INFO,bundle.getString("truncate")+" "+bundle.getString("address_b")+" "+bundle.getString("count")+" "+((deletedCount-countp)),""));
      countp=deletedCount;

      sqlScript="truncate table "+schemaName+".blobdata_b and commit no check";
      if(dbProductName.equals("psql")){
      sqlScript="truncate "+schemaName+".blobdata_b cascade";
      }
      q = entityManager.createNativeQuery(sqlScript);
      deletedCount=deletedCount+q.executeUpdate();
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
       FacesMessage.SEVERITY_INFO,bundle.getString("truncate")+" "+bundle.getString("address_b")+" "+bundle.getString("count")+" "+((deletedCount-countp)),""));
      countp=deletedCount;

      sqlScript="truncate table "+schemaName+".clobdata_b and commit no check";
      if(dbProductName.equals("psql")){
      sqlScript="truncate "+schemaName+".clobdata_b cascade";
      }
      q = entityManager.createNativeQuery(sqlScript);
      deletedCount=deletedCount+q.executeUpdate();
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
       FacesMessage.SEVERITY_INFO,bundle.getString("truncate")+" "+bundle.getString("address_b")+" "+bundle.getString("count")+" "+((deletedCount-countp)),""));
      countp=deletedCount;

      sqlScript="truncate table "+schemaName+".journal_b and commit no check";
      if(dbProductName.equals("psql")){
      sqlScript="truncate "+schemaName+".journal_b cascade";
      }
      q = entityManager.createNativeQuery(sqlScript);
      deletedCount=deletedCount+q.executeUpdate();
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
       FacesMessage.SEVERITY_INFO,bundle.getString("truncate")+" "+bundle.getString("address_b")+" "+bundle.getString("count")+" "+((deletedCount-countp)),""));
      countp=deletedCount;

      sqlScript="truncate table "+schemaName+".machine_b and commit no check";
      if(dbProductName.equals("psql")){
      sqlScript="truncate "+schemaName+".machine_b cascade";
      }
      q = entityManager.createNativeQuery(sqlScript);
      deletedCount=deletedCount+q.executeUpdate();
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
       FacesMessage.SEVERITY_INFO,bundle.getString("truncate")+" "+bundle.getString("address_b")+" "+bundle.getString("count")+" "+((deletedCount-countp)),""));
      countp=deletedCount;

      sqlScript="truncate table "+schemaName+".options_b and commit no check";
      if(dbProductName.equals("psql")){
      sqlScript="truncate "+schemaName+".options_b cascade";
      }
      q = entityManager.createNativeQuery(sqlScript);
      deletedCount=deletedCount+q.executeUpdate();
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
       FacesMessage.SEVERITY_INFO,bundle.getString("truncate")+" "+bundle.getString("address_b")+" "+bundle.getString("count")+" "+((deletedCount-countp)),""));
      countp=deletedCount;

      sqlScript="truncate table "+schemaName+".rate1f_b and commit no check";
      if(dbProductName.equals("psql")){
      sqlScript="truncate "+schemaName+".rate1f_b cascade";
      }
      q = entityManager.createNativeQuery(sqlScript);
      deletedCount=deletedCount+q.executeUpdate();
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
       FacesMessage.SEVERITY_INFO,bundle.getString("truncate")+" "+bundle.getString("address_b")+" "+bundle.getString("count")+" "+((deletedCount-countp)),""));
      countp=deletedCount;

      sqlScript="truncate table "+schemaName+".resource_b and commit no check";
      if(dbProductName.equals("psql")){
      sqlScript="truncate "+schemaName+".resource_b cascade";
      }
      q = entityManager.createNativeQuery(sqlScript);
      deletedCount=deletedCount+q.executeUpdate();
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
       FacesMessage.SEVERITY_INFO,bundle.getString("truncate")+" "+bundle.getString("address_b")+" "+bundle.getString("count")+" "+((deletedCount-countp)),""));

      countp=deletedCount;
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
       FacesMessage.SEVERITY_INFO,bundle.getString("truncate")+" "+bundle.getString("backups")+" "+bundle.getString("count")+" "+((deletedCount)),""));


 } catch (Exception e) {
      int len=sqlScript.length();
      len=len>120?120:len;
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
       FacesMessage.SEVERITY_INFO,bundle.getString("error")+" "+bundle.getString("in")+" "+bundle.getString("truncate")+" "+bundle.getString("backup")+" "+sqlScript.substring(0,len) + ", "+e.getMessage(),""));

 }
       return "truncated";



        }

	public String  validateSitesData() {
        // used to check client productCode, license data
        // tbd check excessive or abnormal record counts, orphan records
        //Note if ratetable has any missing prodcode in incentive then will not create serialnum
        String product ="";
        String site="";
        String prodCode="";
        int countn=0;
        int countu=0;
        int countt=0;
        int countp=0;
        int countpr=0;
        yxxxch522xhhxxhxxxxxclientList.setMaxResultsVal(1200);

                //pass1 no serialnum, so add it to client
		try {
                List<Yxxxch522xhhxxhxxxxxclient> listofStatus=yxxxch522xhhxxhxxxxxclientList.getClientsList() ;
		Iterator<Yxxxch522xhhxxhxxxxxclient> itr = listofStatus.iterator();
		while (itr.hasNext()) {
		  yxxxch522xhhxxhxxxxxclientli = itr.next();
                  countt=countt+1;
                  site=yxxxch522xhhxxhxxxxxclientli.getZzxxu2oxxhxxxxxxxxxxowner2();
                  if(yxxxch522xhhxxhxxxxxclientli.getA0xxukxxbvxxxxxxxxxxclientversion().equals("01")
                   && (yxxxch522xhhxxhxxxxxclientli.getB1xxuisxlvxxxxxxxxxxserialnum() ==null
                    || yxxxch522xhhxxhxxxxxclientli.getB1xxuisxlvxxxxxxxxxxserialnum().isEmpty())){
                   prodCode=yxxxch522xhhxxhxxxxxclientli.getG2xxuxpclvxxxxxxxxxxprodcode();//eege or ee
                   if(prodCode !=null && !prodCode.isEmpty() && prodCode.length() >=2){
                    if(yxxxuq591xwwqqhxxxxxrate1fList.getRaaspiIncentiveToEntity("PC",prodCode.substring(0,2)) !=null){
                     product =yxxxuq591xwwqqhxxxxxrate1fList.getRaaspiIncentiveToEntity("PC",prodCode.substring(0,2)).getB2xxuxxrbv51xxxxxxxxstepname();//item sidS
                     if(product !=null && !product.isEmpty()){
		      yxxxch522xhhxxhxxxxxclientli.setB1xxuisxlvxxxxxxxxxxserialnum(product);//sidS
                      yxxxch522xhhxxhxxxxxclientHome.clearInstance();
                      yxxxch522xhhxxhxxxxxclientHome.setInstance(yxxxch522xhhxxhxxxxxclientli);
                      yxxxch522xhhxxhxxxxxclientHome.allowUpdate();
                      countn=countn+1;
                      product="";
                      continue;
                     }else{
                      countp=countp+1;
                      product="";
                      continue;
                     }
                    }else{
                      countp=countp+1;
                      product="";
                      continue;
                    }
                   }else{
                     countpr=countpr+1;//skip if invalid prodcode
                     product="";
                   }
                  }
		}//while loop
                FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                  FacesMessage.SEVERITY_INFO,bundle.getString("validateSitesData")+" "+bundle.getString("pass1")+" "+bundle.getString("done")+ ", "+bundle.getString("Total")+" "+countt+": "+bundle.getString("added")+" "+countn+" "+bundle.getString("client-noprodcode")+" "+countpr+" "+bundle.getString("rate-no-prodcode-match")+" "+countp,""));
		} catch (Exception e) {
		 log.severe("validateSitesData error " + e.getMessage());
                 FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                  FacesMessage.SEVERITY_INFO,bundle.getString("validateSitesData")+" "+bundle.getString("pass1")+ " "+bundle.getString("error")+"- "+site+" "+e.getMessage(),""));
		}

         //pass2 exising but needs change
         countn=0;
         countu=0;
         countt=0;
         countp=0;
         countpr=0;

		try {
                List<Yxxxch522xhhxxhxxxxxclient> listofStatus=yxxxch522xhhxxhxxxxxclientList.getClientsList() ;
		Iterator<Yxxxch522xhhxxhxxxxxclient> itr = listofStatus.iterator();
		while (itr.hasNext()) {
		  yxxxch522xhhxxhxxxxxclientli = itr.next();
                  countt=countt+1;
                  site=yxxxch522xhhxxhxxxxxclientli.getZzxxu2oxxhxxxxxxxxxxowner2();
                  if(yxxxch522xhhxxhxxxxxclientli.getA0xxukxxbvxxxxxxxxxxclientversion().equals("01")
                   && (yxxxch522xhhxxhxxxxxclientli.getB1xxuisxlvxxxxxxxxxxserialnum() !=null
                    && !yxxxch522xhhxxhxxxxxclientli.getB1xxuisxlvxxxxxxxxxxserialnum().isEmpty())){
                    //maynot be null but rate table was updated or was wrong . So assume assume prodcode correct,recheck and update
                   prodCode=yxxxch522xhhxxhxxxxxclientli.getG2xxuxpclvxxxxxxxxxxprodcode();
                   if(prodCode !=null && !prodCode.isEmpty() && prodCode.length() >=2){//oage or oa
                    if(yxxxuq591xwwqqhxxxxxrate1fList.getRaaspiIncentiveToEntity("PC",prodCode.substring(0,2)) !=null){
                     product =yxxxuq591xwwqqhxxxxxrate1fList.getRaaspiIncentiveToEntity("PC",prodCode.substring(0,2)).getB2xxuxxrbv51xxxxxxxxstepname();
                     if(product !=null && !product.isEmpty()){
                      if(!yxxxch522xhhxxhxxxxxclientli.getB1xxuisxlvxxxxxxxxxxserialnum().equals(product)){
		       yxxxch522xhhxxhxxxxxclientli.setB1xxuisxlvxxxxxxxxxxserialnum(product);
                       yxxxch522xhhxxhxxxxxclientHome.clearInstance();
                       yxxxch522xhhxxhxxxxxclientHome.setInstance(yxxxch522xhhxxhxxxxxclientli);
                       yxxxch522xhhxxhxxxxxclientHome.allowUpdate();
                       product="";
                       countu=countu+1;
                       continue;
                      }
                     }else{
                       countp=countp+1;
                       product="";
                       continue;
                     }
                    }else{
                       countp=countp+1;
                       product="";
                       continue;
                    }
                   }else{
                     countpr=countpr+1;
                     product="";
                   }
                  }
		}//while loop
                FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                  FacesMessage.SEVERITY_INFO,bundle.getString("validateSitesData")+" "+bundle.getString("pass2")+ " "+bundle.getString("done")+ ", "+bundle.getString("Total")+" "+countt+": "+bundle.getString("client-noprodcode")+" "+countpr+" "+bundle.getString("replaced")+" "+countu+" "+bundle.getString("no-prodcode-match")+" "+countp,""));
		} catch (Exception e) {
		 log.severe("validateSitesData error " + e.getMessage());
                 FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                  FacesMessage.SEVERITY_INFO,bundle.getString("validateSitesData")+" "+bundle.getString("pass2")+ " "+bundle.getString("error")+"- "+site+" "+e.getMessage(),""));
		}
         return null;


        }


	public String  fullBackupAll() {
      // to be used after backup truncate ie empty all backups
      // 1-insert into backup if rows in main
      //use DatabaseMetaData, as in authenticator.java, to avoid harcoding here
      //using jdbc connection to get database metadata rather than entitymanager way to be ORM neutral
      DatabaseMetaData databaseMetaData=null;
      String productName="";
      String dbProductName="hsql";
      try(Connection conn = getConnection();){
       databaseMetaData = conn.getMetaData();
       productName = databaseMetaData.getDatabaseProductName();
      } catch (Exception e) {
       log.severe("No datasouce connection or databaseMetaData, Cannot continue");
       return null;
      }
      if(productName==null || productName.isEmpty()){
       log.severe("No datasouce setup yet, check tomee.xml or standalone.xml etc. Cannot continue");
       return null;
      }
      if(productName.contains("PostgreSQL")){
       dbProductName="psql";
      }
      schemaName="genapp";//hard code for now

     String sqlScript ="";
try{
     int deletedCount=0;
     int updatedCount=0;
     int insertedCount=0;
     int countp=0;
     // insert into backup if new rows in main
     // follow insertionOrder.txt produced by schemaSpyGui which is in reverse order of deleteOrder.txt.

      sqlScript="insert into "+schemaName+".address_b select * from "+schemaName+".address a where  not exists (select sid from "+schemaName+".address_b b where b.sid = a.sid)";
      Query q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".department_b select * from "+schemaName+".department a where  not exists (select a.sid from "+schemaName+".department_b b where b.sid = a.sid)";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".division_b select * from "+schemaName+".division a where  not exists (select sid from "+schemaName+".division_b b where b.sid = a.sid)";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".membersgroup_b select * from "+schemaName+".membersgroup a where  not exists (select sid from "+schemaName+".membersgroup_b b where b.sid = a.sid)";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".residency_b select * from "+schemaName+".residency a where  not exists (select sid from "+schemaName+".residency_b b where b.sid = a.sid)";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".client_b select * from "+schemaName+".client a where  not exists (select sid from "+schemaName+".client_b b where b.sid = a.sid)";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".control_b select * from "+schemaName+".control a where  not exists (select sid from "+schemaName+".control_b b where b.sid = a.sid)";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".itembom_b select * from "+schemaName+".itembom a where  not exists (select sid from "+schemaName+".itembom_b b where b.sid = a.sid)";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();
//bundle
      sqlScript="insert into "+schemaName+".resource_bundle_b select * from "+schemaName+".resource_bundle a where  not exists (select sid from "+schemaName+".resource_bundle_b b where b.sid = a.sid)";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();
      /* prev one covers it
      //if(owner2Code.equals("raaspi")){
      if(customIdentity.isMasterSite()){
      sqlScript="insert into "+schemaName+".resource_bundle_b select * from "+schemaName+".resource_bundle a where  not exists (select sid from "+schemaName+".resource_bundle_b b where b.sid = a.sid)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", "SYSTEM");
      insertedCount=insertedCount+q.executeUpdate();
      }
      */
      sqlScript="insert into "+schemaName+".perioddates_b select * from "+schemaName+".perioddates a where  not exists (select sid from "+schemaName+".perioddates_b b where b.sid = a.sid)";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".rgenapp_b select * from "+schemaName+".rgenapp a where  not exists (select sid from "+schemaName+".rgenapp_b b where b.sid = a.sid)";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".rollupgroup_b select * from "+schemaName+".rollupgroup a where  not exists (select sid from "+schemaName+".rollupgroup_b b where b.sid = a.sid)";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".company_b select * from "+schemaName+".company a where  not exists (select sid from "+schemaName+".company_b b where b.sid = a.sid)";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".rgendb_b select * from "+schemaName+".rgendb a where  not exists (select sid from "+schemaName+".rgendb_b b where b.sid = a.sid)";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".account_b select * from "+schemaName+".account a where  not exists (select sid from "+schemaName+".account_b b where b.sid = a.sid)";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".location_b select * from "+schemaName+".location a where  not exists (select sid from "+schemaName+".location_b b where b.sid = a.sid)";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".vendor_b select * from "+schemaName+".vendor a where  not exists (select sid from "+schemaName+".vendor_b b where b.sid = a.sid)";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".customer_b select * from "+schemaName+".customer a where  not exists (select sid from "+schemaName+".customer_b b where b.sid = a.sid)";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".employee_b select * from "+schemaName+".employee a where  not exists (select sid from "+schemaName+".employee_b b where b.sid = a.sid)";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".item_b select * from "+schemaName+".item a where  not exists (select sid from "+schemaName+".item_b b where b.sid = a.sid)";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".activity_b select * from "+schemaName+".activity a where  not exists (select sid from "+schemaName+".activity_b b where b.sid = a.sid)";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".machine_b select * from "+schemaName+".machine a where  not exists (select sid from "+schemaName+".machine_b b where b.sid = a.sid)";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".cuquote_b select * from "+schemaName+".cuquote a where  not exists (select sid from "+schemaName+".cuquote_b b where b.sid = a.sid)";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".venquote_b select * from "+schemaName+".venquote a where  not exists (select sid from "+schemaName+".venquote_b b where b.sid = a.sid)";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".outline_b select * from "+schemaName+".outline a where  not exists (select sid from "+schemaName+".outline_b b where b.sid = a.sid)";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".project_b select * from "+schemaName+".project a where  not exists (select sid from "+schemaName+".project_b b where b.sid = a.sid)";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".cuorders_b select * from "+schemaName+".cuorders a where  not exists (select sid from "+schemaName+".cuorders_b b where b.sid = a.sid)";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".vendorders_b select * from "+schemaName+".vendorders a where  not exists (select sid from "+schemaName+".vendorders_b b where b.sid = a.sid)";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".vshipmen_b select * from "+schemaName+".vshipmen a where  not exists (select sid from "+schemaName+".vshipmen_b b where b.sid = a.sid)";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".cuinvoice_b select * from "+schemaName+".cuinvoice a where  not exists (select sid from "+schemaName+".cuinvoice_b b where b.sid = a.sid)";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".shipment_b select * from "+schemaName+".shipment a where  not exists (select sid from "+schemaName+".shipment_b b where b.sid = a.sid)";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".vinvoice_b select * from "+schemaName+".vinvoice a where  not exists (select sid from "+schemaName+".vinvoice_b b where b.sid = a.sid)";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".groupmembers_b select * from "+schemaName+".groupmembers a where  not exists (select sid from "+schemaName+".groupmembers_b b where b.sid = a.sid)";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".processdetails_b select * from "+schemaName+".processdetails a where  not exists (select sid from "+schemaName+".processdetails_b b where b.sid = a.sid)";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".itemjob_b select * from "+schemaName+".itemjob a where  not exists (select sid from "+schemaName+".itemjob_b b where b.sid = a.sid)";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".rgentable_b select * from "+schemaName+".rgentable a where  not exists (select sid from "+schemaName+".rgentable_b b where b.sid = a.sid)";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".wageearner_b select * from "+schemaName+".wageearner a where  not exists (select sid from "+schemaName+".wageearner_b b where b.sid = a.sid)";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".activityjob_b select * from "+schemaName+".activityjob a where  not exists (select sid from "+schemaName+".activityjob_b b where b.sid = a.sid)";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".glentries_b select * from "+schemaName+".glentries a where  not exists (select sid from "+schemaName+".glentries_b b where b.sid = a.sid)";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".cpayment_b select * from "+schemaName+".cpayment a where  not exists (select sid from "+schemaName+".cpayment_b b where b.sid = a.sid)";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".task_b select * from "+schemaName+".task a where  not exists (select sid from "+schemaName+".task_b b where b.sid = a.sid)";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".vpayment_b select * from "+schemaName+".vpayment a where  not exists (select sid from "+schemaName+".vpayment_b b where b.sid = a.sid)";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".emplorders_b select * from "+schemaName+".emplorders a where  not exists (select sid from "+schemaName+".emplorders_b b where b.sid = a.sid)";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".\"USER_b\" select * from "+schemaName+".\"USER\" a where  not exists (select sid from "+schemaName+".\"USER_b\" b where b.sid = a.sid)";
      if(dbProductName.equals("psql")){
       sqlScript="insert into "+schemaName+".\"user_b\" select * from "+schemaName+".\"user\" a where  not exists (select sid from "+schemaName+".\"user_b\" b where b.sid = a.sid)";
      }
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".acintegr_b select * from "+schemaName+".acintegr a where  not exists (select sid from "+schemaName+".acintegr_b b where b.sid = a.sid)";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".controlusagebyperiods_b select * from "+schemaName+".controlusagebyperiods a where  not exists (select sid from "+schemaName+".controlusagebyperiods_b b where b.sid = a.sid)";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".processattributes_b select * from "+schemaName+".processattributes a where  not exists (select sid from "+schemaName+".processattributes_b b where b.sid = a.sid)";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".resource_b select * from "+schemaName+".resource a where  not exists (select sid from "+schemaName+".resource_b b where b.sid = a.sid)";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();
      /* prev one covers this
      //if(owner2Code.equals("raaspi")){
      if(customIdentity.isMasterSite()){
      sqlScript="insert into "+schemaName+".resource_b select * from "+schemaName+".resource a where  a.owner2='SYSTEM'  and  not exists (select sid from "+schemaName+".resource_b b where b.sid = a.sid and b.owner2='SYSTEM')";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      }
      */
      sqlScript="insert into "+schemaName+".userprofl_b select * from "+schemaName+".userprofl a where  not exists (select sid from "+schemaName+".userprofl_b b where b.sid = a.sid)";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".venartha_b select * from "+schemaName+".venartha a where  not exists (select sid from "+schemaName+".venartha_b b where b.sid = a.sid)";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".wageearneraux_b select * from "+schemaName+".wageearneraux a where  not exists (select sid from "+schemaName+".wageearneraux_b b where b.sid = a.sid)";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".activityjobdetails_b select * from "+schemaName+".activityjobdetails a where  not exists (select sid from "+schemaName+".activityjobdetails_b b where b.sid = a.sid)";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".cupdetails_b select * from "+schemaName+".cupdetails a where  not exists (select sid from "+schemaName+".cupdetails_b b where b.sid = a.sid)";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".gentriesdetails_b select * from "+schemaName+".gentriesdetails a where  not exists (select sid from "+schemaName+".gentriesdetails_b b where b.sid = a.sid)";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".holiday_b select * from "+schemaName+".holiday a where  not exists (select sid from "+schemaName+".holiday_b b where b.sid = a.sid)";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".itembomdetails_b select * from "+schemaName+".itembomdetails a where  not exists (select sid from "+schemaName+".itembomdetails_b b where b.sid = a.sid)";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();




      sqlScript="insert into "+schemaName+".rgenfields_b select * from "+schemaName+".rgenfields a where  not exists (select sid from "+schemaName+".rgenfields_b b where b.sid = a.sid)";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".usagebyperiods_b select * from "+schemaName+".usagebyperiods a where  not exists (select sid from "+schemaName+".usagebyperiods_b b where b.sid = a.sid)";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".cuidetails_b select * from "+schemaName+".cuidetails a where  not exists (select sid from "+schemaName+".cuidetails_b b where b.sid = a.sid)";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".cuodetails_b select * from "+schemaName+".cuodetails a where  not exists (select sid from "+schemaName+".cuodetails_b b where b.sid = a.sid)";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".cuqdetails_b select * from "+schemaName+".cuqdetails a where  not exists (select sid from "+schemaName+".cuqdetails_b b where b.sid = a.sid)";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".emplodetails_b select * from "+schemaName+".emplodetails a where  not exists (select sid from "+schemaName+".emplodetails_b b where b.sid = a.sid)";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".resourcedetails_b select * from "+schemaName+".resourcedetails a where  not exists (select sid from "+schemaName+".resourcedetails_b b where b.sid = a.sid)";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".vendidetails_b select * from "+schemaName+".vendidetails a where  not exists (select sid from "+schemaName+".vendidetails_b b where b.sid = a.sid)";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".vendodetails_b select * from "+schemaName+".vendodetails a where  not exists (select sid from "+schemaName+".vendodetails_b b where b.sid = a.sid)";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".vendpdetails_b select * from "+schemaName+".vendpdetails a where  not exists (select sid from "+schemaName+".vendpdetails_b b where b.sid = a.sid)";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".vendqdetails_b select * from "+schemaName+".vendqdetails a where  not exists (select sid from "+schemaName+".vendqdetails_b b where b.sid = a.sid)";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".ccontact_b select * from "+schemaName+".ccontact a where  not exists (select sid from "+schemaName+".ccontact_b b where b.sid = a.sid)";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".shipmentdetails_b select * from "+schemaName+".shipmentdetails a where  not exists (select sid from "+schemaName+".shipmentdetails_b b where b.sid = a.sid)";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".vcontact_b select * from "+schemaName+".vcontact a where  not exists (select sid from "+schemaName+".vcontact_b b where b.sid = a.sid)";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".vshipmendetails_b select * from "+schemaName+".vshipmendetails a where  not exists (select sid from "+schemaName+".vshipmendetails_b b where b.sid = a.sid)";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".schedule_b select * from "+schemaName+".schedule a where  not exists (select sid from "+schemaName+".schedule_b b where b.sid = a.sid)";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="insert into "+schemaName+".jobassignment_b select * from "+schemaName+".jobassignment a where  not exists (select sid from "+schemaName+".jobassignment_b b where b.sid = a.sid)";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".acperiod_b select * from "+schemaName+".acperiod a where  not exists (select sid from "+schemaName+".acperiod_b b where b.sid = a.sid)";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".arthahist_b select * from "+schemaName+".arthahist a where  not exists (select sid from "+schemaName+".arthahist_b b where b.sid = a.sid)";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".arthatbl_b select * from "+schemaName+".arthatbl a where  not exists (select sid from "+schemaName+".arthatbl_b b where b.sid = a.sid)";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".holiday_b select * from "+schemaName+".holiday a where  not exists (select sid from "+schemaName+".holiday_b b where b.sid = a.sid)";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".blobdata_b select * from "+schemaName+".blobdata a where  not exists (select sid from "+schemaName+".blobdata_b b where b.sid = a.sid)";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();
      /*
      //if(owner2Code.equals("raaspi")){
      if(customIdentity.isMasterSite()){
      sqlScript="insert into "+schemaName+".blobdata_b select * from "+schemaName+".blobdata a where  a.owner2='SYSTEM'  and  not exists (select sid from "+schemaName+".blobdata_b b where b.sid = a.sid and b.owner2='SYSTEM')";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      }
      */
      sqlScript="insert into "+schemaName+".cjournal_b select * from "+schemaName+".cjournal a where  not exists (select sid from "+schemaName+".cjournal_b b where b.sid = a.sid)";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".clobdata_b select * from "+schemaName+".clobdata a where  not exists (select sid from "+schemaName+".clobdata_b b where b.sid = a.sid)";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();

      /* raaspi only*/
      //if(owner2Code.equals("raaspi")){
      if(customIdentity.isMasterSite()){
      sqlScript="insert into "+schemaName+".clobdata_b select * from "+schemaName+".clobdata a where  a.owner2='SYSTEM'  and  not exists (select sid from "+schemaName+".clobdata_b b where b.sid = a.sid and b.owner2='SYSTEM')";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      }

      sqlScript="insert into "+schemaName+".editlog_b select * from "+schemaName+".editlog a where  not exists (select sid from "+schemaName+".editlog_b b where b.sid = a.sid)";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".genoptions_b select * from "+schemaName+".genoptions a where  not exists (select sid from "+schemaName+".genoptions_b b where b.sid = a.sid)";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".hlogfile_b select * from "+schemaName+".hlogfile a where  not exists (select sid from "+schemaName+".hlogfile_b b where b.sid = a.sid)";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".jjournal_b select * from "+schemaName+".jjournal a where  not exists (select sid from "+schemaName+".jjournal_b b where b.sid = a.sid)";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".journal_b select * from "+schemaName+".journal a where  not exists (select sid from "+schemaName+".journal_b b where b.sid = a.sid)";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".nextserialno_b select * from "+schemaName+".nextserialno a where  not exists (select sid from "+schemaName+".nextserialno_b b where b.sid = a.sid)";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".options_b select * from "+schemaName+".options a where  not exists (select sid from "+schemaName+".options_b b where b.sid = a.sid)";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".rate1f_b select * from "+schemaName+".rate1f a where  not exists (select sid from "+schemaName+".rate1f_b b where b.sid = a.sid)";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".scandate_b select * from "+schemaName+".scandate a where  not exists (select sid from "+schemaName+".scandate_b b where b.sid = a.sid)";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".serialnumbers_b select * from "+schemaName+".serialnumbers a where  not exists (select sid from "+schemaName+".serialnumbers_b b where b.sid = a.sid)";
      q = entityManager.createNativeQuery(sqlScript);

      insertedCount=insertedCount+q.executeUpdate();



      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
       FacesMessage.SEVERITY_INFO,bundle.getString("removed")+": "+deletedCount+" "+bundle.getString("inserted")+": "+insertedCount,""));


     /* need to change the logic as it affects all owner2, may be a xxx-c will be used for system backups
     //postgresql UPDATE genapp.journal_b SET sid=a.sid,spostdate=a.spostdate,postdate=a.postdate,owner2=a.owner2 FROM  genapp.journal a  where(genapp.journal_b.sid=a.sid AND a.postdate<>genapp.journal_b.postdate AND a.owner2='localhost')
     //hsqldb or stanard UPDATE genapp.journal_b b SET (sid,spostdate,postdate,owner2)=(SELECT sid,spostdate,postdate,owner2 FROM  genapp.journal a where b.sid=a.sid AND a.postdate<>b.postdate AND a.owner2='localhost')
     sqlScript="UPDATE "+schemaName+".journal_b b SET(sid,spostdate,postdate,calendardt,jrnltype,jnlseqb,jnlseq,jnlseqs,period,account,debit,credit,xreference,descript,statusfl,owner,owner2)=(SELECT sid,spostdate,postdate,calendardt,jrnltype,jnlseqb,jnlseq,jnlseqs,period,account,debit,credit,xreference,descript,statusfl,owner,owner2 FROM "+schemaName+".journal a where a.sid=b.sid AND a.postdate<>b.postdate and a.owner2=:owner2)";
     if(dbProductName.equals("psql")){
      sqlScript="UPDATE "+schemaName+".journal_b SET sid=a.sid,a.spostdate=a.spostdate,postdate=a.postdate,calendardt=a.calendardt,jrnltype=a.jrnltype,jnlseqb=,jnlseq=a.jnlseq,jnlseqs=a.jnlseqs,period=a.period,account=a.account,debit=a.debit,credit=a.credit,xreference=a.xreference,descript=a.descript,statusfl=a.statusfl,owner=a.owner,owner2=a.owner2) FROM "+schemaName+".journal a where(genapp.journal_b.sid=a.sid AND a.postdate<>genapp.journal_b.postdate AND a.owner2=:owner2)";
     }

     // update client record field carcsize to show last backupdate as a varchar
     sqlScript="update "+schemaName+".client set carcsize=:backupdts where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2Code", owner2Code).setParameter("backupdts", sdf.format(calendar.getTime()));
      q.executeUpdate();
      */
 } catch (Exception e) {
      int len=sqlScript.length();
      len=len>120?120:len;
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
       FacesMessage.SEVERITY_INFO,bundle.getString("error")+" "+bundle.getString("in")+" "+bundle.getString("full")+" "+bundle.getString("backup")+" "+bundle.getString("All")+" "+sqlScript.substring(0,len) + ", "+e.getMessage(),""));

 }
	 return "backUp All done";

}




	public String  fullBackupTenant() {
      // to be used when incremental backup fails for any reason like corrupted data or record relations
      // 1-remove all rows from backup
      // 2-insert into backup if rows in main
      //use DatabaseMetaData, as in authenticator.java, to avoid harcoding here
      //using jdbc connection to get database metadata rather than entitymanager way to be ORM neutral
      DatabaseMetaData databaseMetaData=null;
      String productName="";
      String dbProductName="hsql";
      try(Connection conn = getConnection();){
       databaseMetaData = conn.getMetaData();
       productName = databaseMetaData.getDatabaseProductName();
      } catch (Exception e) {
       log.severe("No datasouce connection or databaseMetaData, Cannot continue");
       return null;
      }
      if(productName==null || productName.isEmpty()){
       log.severe("No datasouce setup yet, check tomee.xml or standalone.xml etc. Cannot continue");
       return null;
      }
      if(productName.contains("PostgreSQL")){
       dbProductName="psql";
      }

      schemaName="genapp";//hard code for now

     String sqlScript ="";
     int errorCount=0;
     String errMsg="";
     int deletedCount=0;
     int updatedCount=0;
     int insertedCount=0;
     int countp=0;
try{

     // follow deleteOrder.txt produced by schemaSpyGui which is in reverse order of insertionOrder.txt.

     countp=deletedCount;
     sqlScript="delete from "+schemaName+".serialnumbers_b a where  a.owner2=:owner2"  ;
     Query q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();
     FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
      FacesMessage.SEVERITY_INFO,bundle.getString("delete")+" "+bundle.getString("serialnumbers_b")+" "+bundle.getString("count")+" "+((deletedCount-countp)),""));
     countp=deletedCount;
} catch (Exception e) {
   errorCount=errorCount+1;
   if(errorCount>20){
    errMsg=" errors>20, ending";
   }
   int len=sqlScript.length();
   len=len>120?120:len;
   FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
    FacesMessage.SEVERITY_INFO,errMsg+" "+bundle.getString("error")+" "+bundle.getString("in")+" "+bundle.getString("backup")+" "+sqlScript.substring(0,len) + ", "+e.getMessage(),""));
}
try{
     sqlScript="delete from "+schemaName+".scandate_b a where  a.owner2=:owner2";
     Query q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();
     FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
      FacesMessage.SEVERITY_INFO,bundle.getString("delete")+" "+bundle.getString("scandate_b")+" "+bundle.getString("count")+" "+(deletedCount-countp),""));
     countp=deletedCount;
} catch (Exception e) {
   errorCount=errorCount+1;
   if(errorCount>20){
    errMsg=" errors>20, ending";
   }
   int len=sqlScript.length();
   len=len>120?120:len;
   FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
    FacesMessage.SEVERITY_INFO,errMsg+" "+bundle.getString("error")+" "+bundle.getString("in")+" "+bundle.getString("backup")+" "+sqlScript.substring(0,len) + ", "+e.getMessage(),""));
}
try{
     sqlScript="delete from "+schemaName+".rate1f_b a where  a.owner2=:owner2";
     Query q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();
     FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
      FacesMessage.SEVERITY_INFO,bundle.getString("delete")+" "+bundle.getString("scandate_b")+" "+bundle.getString("count")+" "+(deletedCount-countp),""));

     countp=deletedCount;
} catch (Exception e) {
   errorCount=errorCount+1;
   if(errorCount>20){
    errMsg=" errors>20, ending";
   }
   int len=sqlScript.length();
   len=len>120?120:len;
   FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
    FacesMessage.SEVERITY_INFO,errMsg+" "+bundle.getString("error")+" "+bundle.getString("in")+" "+bundle.getString("backup")+" "+sqlScript.substring(0,len) + ", "+e.getMessage(),""));
}


try{
     sqlScript="delete from "+schemaName+".options_b a where  a.owner2=:owner2";
     Query q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();
     FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
      FacesMessage.SEVERITY_INFO,bundle.getString("delete")+" "+bundle.getString("scandate_b")+" "+bundle.getString("count")+" "+(deletedCount-countp),""));

     countp=deletedCount;
     sqlScript="delete from "+schemaName+".nextserialno_b a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".journal_b a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".jjournal_b a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".hlogfile_b a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".genoptions_b a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".editlog_b a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".clobdata_b a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".cjournal_b a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".blobdata_b a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".arthatbl_b a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".arthahist_b a where   a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".acperiod_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".jobassignment_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".scheduledetails_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vshipmendetails_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vcontact_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".shipmentdetails_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".ccontact_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vendqdetails_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vendpdetails_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vendodetails_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vendidetails_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".resourcedetails_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".resourcedetails_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".processattributes_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".processdetails_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".emplodetails_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".cuqdetails_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".cuodetails_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".cuidetails_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".usagebyperiods_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".rgenfields_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".itembomdetails_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".holiday_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".gentriesdetails_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".cupdetails_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".activityjobdetails_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".wageearneraux_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".venartha_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".userprofl_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".resource_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     if(customIdentity.isMasterSite()){
     sqlScript="delete from "+schemaName+".resource_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", "SYSTEM");
     deletedCount = deletedCount +q.executeUpdate();
     }

     sqlScript="delete from "+schemaName+".controlusagebyperiods_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".acintegr_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".\"USER_b\" a where   a.owner2=:owner2";
     if(dbProductName.equals("psql")){
      sqlScript="delete from "+schemaName+".\"user_b\" a where   a.owner2=:owner2";
     }
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".emplorders_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vpayment_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".task_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".cpayment_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".glentries_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".controlusagebyperiods_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".activityjob_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".wageearner_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".rgentable_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".itemjob_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();
     FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
      FacesMessage.SEVERITY_INFO,bundle.getString("delete")+" "+bundle.getString("itemjob_b")+" "+bundle.getString("count")+" "+((deletedCount-countp)),""));
     countp=deletedCount;

     sqlScript="delete from "+schemaName+".schedule_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();
     FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
      FacesMessage.SEVERITY_INFO,bundle.getString("delete")+" "+bundle.getString("schedule_b")+" "+bundle.getString("count")+" "+((deletedCount-countp)),""));
     countp=deletedCount;

     sqlScript="delete from "+schemaName+".groupmembers_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vinvoice_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".shipment_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vshipmen_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();



     sqlScript="delete from "+schemaName+".vendorders_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".cuinvoice_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".cuorders_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".project_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".outline_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".venquote_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".cuquote_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".machine_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".activity_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".item_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".employee_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".customer_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vendor_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".location_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".account_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".rgendb_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".company_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".rollupgroup_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".rgenapp_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".resource_bundle_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     if(customIdentity.isMasterSite()){
      sqlScript="delete from "+schemaName+".resource_bundle_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", "SYSTEM");
      deletedCount = deletedCount +q.executeUpdate();
     }
     sqlScript="delete from "+schemaName+".perioddates_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".itembom_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".control_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".client_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".residency_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".membersgroup_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".division_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".department_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".address_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     // insert into backup if new rows in main
     // follow insertionOrder.txt produced by schemaSpyGui which is in reverse order of deleteOrder.txt.

      sqlScript="insert into "+schemaName+".address_b select * from "+schemaName+".address a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".address_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".department_b select * from "+schemaName+".department a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".department_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".division_b select * from "+schemaName+".division a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".division_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".membersgroup_b select * from "+schemaName+".membersgroup a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".membersgroup_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".residency_b select * from "+schemaName+".residency a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".residency_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".client_b select * from "+schemaName+".client a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".client_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".control_b select * from "+schemaName+".control a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".control_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".itembom_b select * from "+schemaName+".itembom a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".itembom_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();
//bundle
      sqlScript="insert into "+schemaName+".resource_bundle_b select * from "+schemaName+".resource_bundle a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".resource_bundle_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      if(customIdentity.isMasterSite()){
      sqlScript="insert into "+schemaName+".resource_bundle_b select * from "+schemaName+".resource_bundle a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".resource_bundle_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", "SYSTEM");
      insertedCount=insertedCount+q.executeUpdate();
      }

      sqlScript="insert into "+schemaName+".perioddates_b select * from "+schemaName+".perioddates a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".perioddates_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".rgenapp_b select * from "+schemaName+".rgenapp a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".rgenapp_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".rollupgroup_b select * from "+schemaName+".rollupgroup a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".rollupgroup_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".company_b select * from "+schemaName+".company a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".company_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".rgendb_b select * from "+schemaName+".rgendb a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".rgendb_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".account_b select * from "+schemaName+".account a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".account_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".location_b select * from "+schemaName+".location a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".location_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".vendor_b select * from "+schemaName+".vendor a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".vendor_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".customer_b select * from "+schemaName+".customer a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".customer_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".employee_b select * from "+schemaName+".employee a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".employee_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".item_b select * from "+schemaName+".item a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".item_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".activity_b select * from "+schemaName+".activity a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".activity_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".machine_b select * from "+schemaName+".machine a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".machine_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".cuquote_b select * from "+schemaName+".cuquote a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".cuquote_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".venquote_b select * from "+schemaName+".venquote a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".venquote_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".outline_b select * from "+schemaName+".outline a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".outline_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".project_b select * from "+schemaName+".project a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".project_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".cuorders_b select * from "+schemaName+".cuorders a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".cuorders_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".vendorders_b select * from "+schemaName+".vendorders a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".vendorders_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".vshipmen_b select * from "+schemaName+".vshipmen a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".vshipmen_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".cuinvoice_b select * from "+schemaName+".cuinvoice a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".cuinvoice_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".shipment_b select * from "+schemaName+".shipment a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".shipment_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".vinvoice_b select * from "+schemaName+".vinvoice a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".vinvoice_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".groupmembers_b select * from "+schemaName+".groupmembers a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".groupmembers_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".processdetails_b select * from "+schemaName+".processdetails a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".processdetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".itemjob_b select * from "+schemaName+".itemjob a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".itemjob_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".rgentable_b select * from "+schemaName+".rgentable a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".rgentable_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".wageearner_b select * from "+schemaName+".wageearner a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".wageearner_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".activityjob_b select * from "+schemaName+".activityjob a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".activityjob_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".glentries_b select * from "+schemaName+".glentries a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".glentries_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".cpayment_b select * from "+schemaName+".cpayment a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".cpayment_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".task_b select * from "+schemaName+".task a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".task_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".vpayment_b select * from "+schemaName+".vpayment a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".vpayment_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".emplorders_b select * from "+schemaName+".emplorders a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".emplorders_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


     sqlScript="insert into "+schemaName+".\"USER_b\" select * from "+schemaName+".\"USER\" a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".\"USER_b\" b where b.sid = a.sid and b.owner2=:owner2)";
     if(dbProductName.equals("psql")){
      sqlScript="insert into "+schemaName+".\"user_b\" select * from "+schemaName+".\"user\" a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".\"user_b\" b where b.sid = a.sid and b.owner2=:owner2)";
     }

      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".acintegr_b select * from "+schemaName+".acintegr a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".acintegr_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".controlusagebyperiods_b select * from "+schemaName+".controlusagebyperiods a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".controlusagebyperiods_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".processattributes_b select * from "+schemaName+".processattributes a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".processattributes_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".resource_b select * from "+schemaName+".resource a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".resource_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      if(customIdentity.isMasterSite()){
      sqlScript="insert into "+schemaName+".resource_b select * from "+schemaName+".resource a where  a.owner2='SYSTEM'  and  not exists (select sid from "+schemaName+".resource_b b where b.sid = a.sid and b.owner2='SYSTEM')";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      }

      sqlScript="insert into "+schemaName+".userprofl_b select * from "+schemaName+".userprofl a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".userprofl_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".venartha_b select * from "+schemaName+".venartha a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".venartha_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".wageearneraux_b select * from "+schemaName+".wageearneraux a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".wageearneraux_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".activityjobdetails_b select * from "+schemaName+".activityjobdetails a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".activityjobdetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".cupdetails_b select * from "+schemaName+".cupdetails a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".cupdetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".gentriesdetails_b select * from "+schemaName+".gentriesdetails a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".gentriesdetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".holiday_b select * from "+schemaName+".holiday a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".holiday_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".itembomdetails_b select * from "+schemaName+".itembomdetails a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".itembomdetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();




      sqlScript="insert into "+schemaName+".rgenfields_b select * from "+schemaName+".rgenfields a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".rgenfields_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".usagebyperiods_b select * from "+schemaName+".usagebyperiods a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".usagebyperiods_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".cuidetails_b select * from "+schemaName+".cuidetails a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".cuidetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".cuodetails_b select * from "+schemaName+".cuodetails a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".cuodetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".cuqdetails_b select * from "+schemaName+".cuqdetails a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".cuqdetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".emplodetails_b select * from "+schemaName+".emplodetails a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".emplodetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".resourcedetails_b select * from "+schemaName+".resourcedetails a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".resourcedetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".vendidetails_b select * from "+schemaName+".vendidetails a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".vendidetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".vendodetails_b select * from "+schemaName+".vendodetails a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".vendodetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".vendpdetails_b select * from "+schemaName+".vendpdetails a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".vendpdetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".vendqdetails_b select * from "+schemaName+".vendqdetails a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".vendqdetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".ccontact_b select * from "+schemaName+".ccontact a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".ccontact_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".shipmentdetails_b select * from "+schemaName+".shipmentdetails a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".shipmentdetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".vcontact_b select * from "+schemaName+".vcontact a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".vcontact_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".vshipmendetails_b select * from "+schemaName+".vshipmendetails a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".vshipmendetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".schedule_b select * from "+schemaName+".schedule a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".schedule_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="insert into "+schemaName+".jobassignment_b select * from "+schemaName+".jobassignment a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".jobassignment_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".acperiod_b select * from "+schemaName+".acperiod a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".acperiod_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".arthahist_b select * from "+schemaName+".arthahist a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".arthahist_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".arthatbl_b select * from "+schemaName+".arthatbl a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".arthatbl_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".holiday_b select * from "+schemaName+".holiday a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".holiday_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".blobdata_b select * from "+schemaName+".blobdata a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".blobdata_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      if(customIdentity.isMasterSite()){
      sqlScript="insert into "+schemaName+".blobdata_b select * from "+schemaName+".blobdata a where  a.owner2='SYSTEM'  and  not exists (select sid from "+schemaName+".blobdata_b b where b.sid = a.sid and b.owner2='SYSTEM')";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      }

      sqlScript="insert into "+schemaName+".cjournal_b select * from "+schemaName+".cjournal a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".cjournal_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".clobdata_b select * from "+schemaName+".clobdata a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".clobdata_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      /* raaspi only*/
      if(customIdentity.isMasterSite()){
      sqlScript="insert into "+schemaName+".clobdata_b select * from "+schemaName+".clobdata a where  a.owner2='SYSTEM'  and  not exists (select sid from "+schemaName+".clobdata_b b where b.sid = a.sid and b.owner2='SYSTEM')";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      }

      sqlScript="insert into "+schemaName+".editlog_b select * from "+schemaName+".editlog a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".editlog_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".genoptions_b select * from "+schemaName+".genoptions a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".genoptions_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".hlogfile_b select * from "+schemaName+".hlogfile a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".hlogfile_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".jjournal_b select * from "+schemaName+".jjournal a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".jjournal_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".journal_b select * from "+schemaName+".journal a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".journal_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".nextserialno_b select * from "+schemaName+".nextserialno a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".nextserialno_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".options_b select * from "+schemaName+".options a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".options_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".rate1f_b select * from "+schemaName+".rate1f a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".rate1f_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".scandate_b select * from "+schemaName+".scandate a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".scandate_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".serialnumbers_b select * from "+schemaName+".serialnumbers a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".serialnumbers_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();



      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
       FacesMessage.SEVERITY_INFO,bundle.getString("removed")+": "+deletedCount+" "+bundle.getString("inserted")+": "+insertedCount,""));

     // update client record field carcsize to show last backupdate as a varchar
     //postgresql UPDATE genapp.journal_b SET sid=a.sid,spostdate=a.spostdate,postdate=a.postdate,owner2=a.owner2 FROM  genapp.journal a  where(genapp.journal_b.sid=a.sid AND a.postdate<>genapp.journal_b.postdate AND a.owner2='localhost')
     //hsqldb or stanard UPDATE genapp.journal_b b SET (sid,spostdate,postdate,owner2)=(SELECT sid,spostdate,postdate,owner2 FROM  genapp.journal a where b.sid=a.sid AND a.postdate<>b.postdate AND a.owner2='localhost')
     sqlScript="UPDATE "+schemaName+".journal_b b SET(sid,spostdate,postdate,calendardt,jrnltype,jnlseqb,jnlseq,jnlseqs,period,account,debit,credit,xreference,descript,statusfl,owner,owner2)=(SELECT sid,spostdate,postdate,calendardt,jrnltype,jnlseqb,jnlseq,jnlseqs,period,account,debit,credit,xreference,descript,statusfl,owner,owner2 FROM "+schemaName+".journal a where a.sid=b.sid AND a.postdate<>b.postdate and a.owner2=:owner2)";
     if(dbProductName.equals("psql")){
      sqlScript="UPDATE "+schemaName+".journal_b SET sid=a.sid,a.spostdate=a.spostdate,postdate=a.postdate,calendardt=a.calendardt,jrnltype=a.jrnltype,jnlseqb=,jnlseq=a.jnlseq,jnlseqs=a.jnlseqs,period=a.period,account=a.account,debit=a.debit,credit=a.credit,xreference=a.xreference,descript=a.descript,statusfl=a.statusfl,owner=a.owner,owner2=a.owner2) FROM "+schemaName+".journal a where(genapp.journal_b.sid=a.sid AND a.postdate<>genapp.journal_b.postdate AND a.owner2=:owner2)";
     }

     sqlScript="update "+schemaName+".client set carcsize=:backupdts where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2Code", owner2Code).setParameter("backupdts", sdf.format(calendar.getTime()));
      q.executeUpdate();
 } catch (Exception e) {
      int len=sqlScript.length();
      len=len>120?120:len;
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
       FacesMessage.SEVERITY_INFO,bundle.getString("error")+" "+bundle.getString("in")+" "+bundle.getString("full")+" "+bundle.getString("backup")+" "+sqlScript.substring(0,len) + ", "+e.getMessage(),""));

 }
	 return "backUp done";

}




	public String  backupTenant() {
      // C:\schemaspygui\postgres_postgre_ has tables relation and dependency info like deletionOrder.txt
      // add a lock ??
      // to file not used since in cloud pl/sql does not seem to have access to files
      // this backUp is on demand and done by tenant
      // there is daily backup to tables for all tenants while app is up and also a separate sbnapshot daily backup when app is stopped
      // snapshot is on file and meant for disaster situation
      //
      // 1-remove rows from backup if not in main ie any old (ie not used) rows in backup will be removed
      // 2-insert into backup if new rows in main
      // 3-update backup if row in main has different change time  (relies on statusfldate change)
      // follow the deletion order list produced by schemaspygui C:\schemaspygui\postgres_postgre_\deletionOrder.txt ( future use the list as input to automate )
      // insertionOrder.txt for insert, for update order does not matter because we are not dropping or adding any relation but will follow
      // insertionOrder.txt
      // resource_bundle,resource,clob and blob have SYSTEM records which need extra logic
      // SYSTEM records should not be deleted from main or backup table but should be copied into backup if needed ??? revisit
      // SELECT * FROM information_schema.columns WHERE table_schema = 'genapp'  AND table_name   = 'client'
      //use DatabaseMetaData, as in authenticator.java, to avoid harcoding here
      //using jdbc connection to get database metadata rather than entitymanager way to be ORM neutral
      DatabaseMetaData databaseMetaData=null;
      String productName="";
      String dbProductName="hsql";
      try(Connection conn = getConnection();){
       databaseMetaData = conn.getMetaData();
       productName = databaseMetaData.getDatabaseProductName();
      } catch (Exception e) {
       log.severe("No datasouce connection or databaseMetaData, Cannot continue");
       return null;
      }
      if(productName==null || productName.isEmpty()){
       log.severe("No datasouce setup yet, check tomee.xml or standalone.xml etc. Cannot continue");
       return null;
      }
      if(productName.contains("PostgreSQL")){
       dbProductName="psql";
      }

      schemaName="genapp";//hard code for now

     String sqlScript ="";
try{
     int deletedCount=0;
     int updatedCount=0;
     int insertedCount=0;
     int countp=0;

     sqlScript="delete from "+schemaName+".serialnumbers_b b where   b.owner2=:owner2 and not exists  (select sid from "+schemaName+".serialnumbers a where  a.sid = b.sid and a.owner2=:owner2)";
     Query q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();
     FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
      FacesMessage.SEVERITY_INFO,bundle.getString("delete")+" "+bundle.getString("serialnumbers_b")+" "+bundle.getString("count")+" "+(deletedCount-countp),""));
     countp=deletedCount;

     sqlScript="delete from "+schemaName+".scandate_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".scandate a where  a.sid = b.sid and a.owner2=:owner2)";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();
     FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
      FacesMessage.SEVERITY_INFO,bundle.getString("delete")+" "+bundle.getString("scandate_b")+" "+bundle.getString("count")+" "+(deletedCount-countp),""));
     countp=deletedCount;

     sqlScript="delete from "+schemaName+".rate1f_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".rate1f a where  a.sid = b.sid and a.owner2=:owner2)";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();
     FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
      FacesMessage.SEVERITY_INFO,bundle.getString("delete")+" "+bundle.getString("rate1f_b")+" "+bundle.getString("count")+" "+(deletedCount-countp),""));
     countp=deletedCount;

     sqlScript="delete from "+schemaName+".options_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".options a where  a.sid = b.sid and a.owner2=:owner2)";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();
     FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
       FacesMessage.SEVERITY_INFO,bundle.getString("delete")+" "+bundle.getString("options_b")+" "+bundle.getString("count")+" "+(deletedCount-countp),""));
     countp=deletedCount;

     sqlScript="delete from "+schemaName+".nextserialno_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".nextserialno a where  a.sid = b.sid and a.owner2=:owner2)";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();
     FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
      FacesMessage.SEVERITY_INFO,bundle.getString("delete")+" "+bundle.getString("nextserialno_b")+" "+bundle.getString("count")+" "+(deletedCount-countp),""));
     countp=deletedCount;

     sqlScript="delete from "+schemaName+".journal_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".journal a where  a.sid = b.sid and a.owner2=:owner2)";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();
     FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
      FacesMessage.SEVERITY_INFO,bundle.getString("delete")+" "+bundle.getString("journal_b")+" "+bundle.getString("count")+" "+(deletedCount-countp),""));
     countp=deletedCount;

     sqlScript="delete from "+schemaName+".jjournal_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".jjournal a where  a.sid = b.sid and a.owner2=:owner2)";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".hlogfile_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".hlogfile a where  a.sid = b.sid and a.owner2=:owner2)";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".genoptions_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".genoptions a where  a.sid = b.sid and a.owner2=:owner2)";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".editlog_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".editlog a where  a.sid = b.sid and a.owner2=:owner2)";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".clobdata_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".clobdata a where  a.sid = b.sid and a.owner2=:owner2)";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".cjournal_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".cjournal a where  a.sid = b.sid and a.owner2=:owner2)";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".blobdata_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".blobdata a where  a.sid = b.sid and a.owner2=:owner2)";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".arthatbl_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".arthatbl a where  a.sid = b.sid and a.owner2=:owner2)";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".arthahist_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".arthahist a where  a.sid = b.sid and a.owner2=:owner2)";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".acperiod_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".acperiod a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".jobassignment_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".jobassignment a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     //feb 15 2019
     sqlScript="delete from "+schemaName+".scheduledetails_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".schedule a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vshipmendetails_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".vshipmendetails a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vcontact_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".vcontact a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".shipmentdetails_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".shipmentdetails a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".ccontact_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".ccontact a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vendqdetails_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".vendqdetails a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vendpdetails_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".vendpdetails a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vendodetails_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".vendodetails a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vendidetails_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".vendidetails a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".resourcedetails_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".resourcedetails a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     // order corrected
     sqlScript="delete from "+schemaName+".processattributes_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".processattributes a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".processdetails_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".processdetails a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".emplodetails_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".emplodetails a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".cuqdetails_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".cuqdetails a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".cuodetails_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".cuodetails a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".cuidetails_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".cuidetails a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".usagebyperiods_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".usagebyperiods a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".rgenfields_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".rgenfields a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".itembomdetails_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".itembomdetails a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".holiday_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".holiday a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".gentriesdetails_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".gentriesdetails a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".cupdetails_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".cupdetails a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".activityjobdetails_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".activityjobdetails a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".wageearneraux_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".wageearneraux a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".venartha_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".venartha a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".userprofl_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".userprofl a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".resource_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".resource a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".controlusagebyperiods_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".controlusagebyperiods a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".acintegr_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".acintegr a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();
     sqlScript="delete from "+schemaName+".\"USER_b\" b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".\"USER\" a where  a.sid = b.sid and a.owner2=:owner2)";
     if(dbProductName.equals("psql")){
      sqlScript="delete from "+schemaName+".\"user_b\" b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".\"user\" a where  a.sid = b.sid and a.owner2=:owner2)";
     }
     if(dbProductName.equals("psql")){
     }

      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".emplorders_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".emplorders a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vpayment_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".vpayment a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".task_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".task a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".cpayment_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".cpayment a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".glentries_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".glentries a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".controlusagebyperiods_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".controlusagebyperiods a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".activityjob_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".activityjob a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".wageearner_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".wageearner a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".rgentable_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".rgentable a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".itemjob_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".itemjob a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vshipmen_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".vshipmen a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".schedule_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".schedule a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".groupmembers_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".groupmembers a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vinvoice_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".vinvoice a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".shipment_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".shipment a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vendorders_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".vendorders a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".cuinvoice_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".cuinvoice a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".cuorders_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".cuorders a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".project_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".project a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".outline_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".outline a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".venquote_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".venquote a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".cuquote_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".cuquote a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".machine_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".machine a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".activity_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".activity a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".item_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".item a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".employee_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".employee a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".customer_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".customer a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vendor_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".vendor a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".location_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".location a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();
     FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("delete")+" "+bundle.getString("location_b")+" "+bundle.getString("count")+" "+(deletedCount-countp),""));
     countp=deletedCount;
     sqlScript="delete from "+schemaName+".account_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".account a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();
     FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("delete")+" "+bundle.getString("account_b")+" "+bundle.getString("count")+" "+(deletedCount-countp),""));
     countp=deletedCount;

     sqlScript="delete from "+schemaName+".rgendb_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".rgendb a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".company_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".company a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".rollupgroup_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".rollupgroup a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".rgenapp_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".rgenapp a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".resource_bundle_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".resource_bundle a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".perioddates_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".perioddates a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".itembom_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".itembom a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

      sqlScript="insert into "+schemaName+".resource_bundle_b select * from "+schemaName+".resource_bundle a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".resource_bundle_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      if(customIdentity.isMasterSite()){
      sqlScript="insert into "+schemaName+".resource_bundle_b select * from "+schemaName+".resource_bundle a where  a.owner2='SYSTEM'  and  not exists (select sid from "+schemaName+".resource_bundle_b b where b.sid = a.sid and b.owner2='SYSTEM')";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      }

     sqlScript="delete from "+schemaName+".control_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".control a where  a.sid = b.sid and a.owner2=:owner2 )";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".client_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".client a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".residency_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".residency a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".membersgroup_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".membersgroup a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".division_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".division a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".department_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".department a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".address_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".address a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();





     // insert into backup if new rows in main
     // follow insertionOrder.txt produced by schemaSpyGui which is in reverse order of deleteOrder.txt.

      sqlScript="insert into "+schemaName+".address_b select * from "+schemaName+".address a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".address_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".department_b select * from "+schemaName+".department a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".department_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".division_b select * from "+schemaName+".division a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".division_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".membersgroup_b select * from "+schemaName+".membersgroup a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".membersgroup_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".residency_b select * from "+schemaName+".residency a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".residency_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".client_b select * from "+schemaName+".client a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".client_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".control_b select * from "+schemaName+".control a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".control_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".itembom_b select * from "+schemaName+".itembom a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".itembom_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".resource_bundle_b select * from "+schemaName+".resource_bundle a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".resource_bundle_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      if(customIdentity.isMasterSite()){
      sqlScript="insert into "+schemaName+".resource_bundle_b select * from "+schemaName+".resource_bundle a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".resource_bundle_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", "SYSTEM");
      insertedCount=insertedCount+q.executeUpdate();
      }


      sqlScript="insert into "+schemaName+".perioddates_b select * from "+schemaName+".perioddates a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".perioddates_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".rgenapp_b select * from "+schemaName+".rgenapp a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".rgenapp_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".rollupgroup_b select * from "+schemaName+".rollupgroup a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".rollupgroup_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".company_b select * from "+schemaName+".company a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".company_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".rgendb_b select * from "+schemaName+".rgendb a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".rgendb_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("insert")+" "+bundle.getString("rgendb_b")+" "+bundle.getString("count")+" "+(insertedCount-countp),""));
      countp=insertedCount;

      sqlScript="insert into "+schemaName+".account_b select * from "+schemaName+".account a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".account_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("insert")+" "+bundle.getString("account_b")+" "+bundle.getString("count")+" "+(insertedCount-countp),""));
      countp=insertedCount;

      sqlScript="insert into "+schemaName+".location_b select * from "+schemaName+".location a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".location_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".vendor_b select * from "+schemaName+".vendor a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".vendor_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".customer_b select * from "+schemaName+".customer a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".customer_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".employee_b select * from "+schemaName+".employee a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".employee_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".item_b select * from "+schemaName+".item a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".item_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".activity_b select * from "+schemaName+".activity a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".activity_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".machine_b select * from "+schemaName+".machine a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".machine_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".cuquote_b select * from "+schemaName+".cuquote a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".cuquote_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".venquote_b select * from "+schemaName+".venquote a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".venquote_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".outline_b select * from "+schemaName+".outline a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".outline_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".project_b select * from "+schemaName+".project a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".project_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".cuorders_b select * from "+schemaName+".cuorders a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".cuorders_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".vendorders_b select * from "+schemaName+".vendorders a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".vendorders_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".vshipmen_b select * from "+schemaName+".vshipmen a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".vshipmen_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".cuinvoice_b select * from "+schemaName+".cuinvoice a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".cuinvoice_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".shipment_b select * from "+schemaName+".shipment a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".shipment_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".vinvoice_b select * from "+schemaName+".vinvoice a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".vinvoice_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".groupmembers_b select * from "+schemaName+".groupmembers a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".groupmembers_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".processdetails_b select * from "+schemaName+".processdetails a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".processdetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".itemjob_b select * from "+schemaName+".itemjob a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".itemjob_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".rgentable_b select * from "+schemaName+".rgentable a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".rgentable_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".wageearner_b select * from "+schemaName+".wageearner a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".wageearner_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".activityjob_b select * from "+schemaName+".activityjob a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".activityjob_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".glentries_b select * from "+schemaName+".glentries a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".glentries_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".cpayment_b select * from "+schemaName+".cpayment a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".cpayment_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".task_b select * from "+schemaName+".task a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".task_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".vpayment_b select * from "+schemaName+".vpayment a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".vpayment_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".emplorders_b select * from "+schemaName+".emplorders a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".emplorders_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".\"USER_b\" select * from "+schemaName+".\"USER\" a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".\"USER_b\" b where b.sid = a.sid and b.owner2=:owner2)";
      if(dbProductName.equals("psql")){
      sqlScript="insert into "+schemaName+".\"user_b\" select * from "+schemaName+".\"user\" a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".\"user_b\" b where b.sid = a.sid and b.owner2=:owner2)";
      }

      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".acintegr_b select * from "+schemaName+".acintegr a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".acintegr_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".controlusagebyperiods_b select * from "+schemaName+".controlusagebyperiods a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".controlusagebyperiods_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".processattributes_b select * from "+schemaName+".processattributes a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".processattributes_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".resource_b select * from "+schemaName+".resource a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".resource_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      if(customIdentity.isMasterSite()){
      sqlScript="insert into "+schemaName+".resource_b select * from "+schemaName+".resource a where  a.owner2='SYSTEM'  and  not exists (select sid from "+schemaName+".resource_b b where b.sid = a.sid and b.owner2='SYSTEM')";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      }

      sqlScript="insert into "+schemaName+".userprofl_b select * from "+schemaName+".userprofl a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".userprofl_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".venartha_b select * from "+schemaName+".venartha a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".venartha_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".wageearneraux_b select * from "+schemaName+".wageearneraux a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".wageearneraux_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".activityjobdetails_b select * from "+schemaName+".activityjobdetails a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".activityjobdetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".cupdetails_b select * from "+schemaName+".cupdetails a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".cupdetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".gentriesdetails_b select * from "+schemaName+".gentriesdetails a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".gentriesdetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".holiday_b select * from "+schemaName+".holiday a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".holiday_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".itembomdetails_b select * from "+schemaName+".itembomdetails a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".itembomdetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();




      sqlScript="insert into "+schemaName+".rgenfields_b select * from "+schemaName+".rgenfields a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".rgenfields_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".usagebyperiods_b select * from "+schemaName+".usagebyperiods a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".usagebyperiods_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".cuidetails_b select * from "+schemaName+".cuidetails a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".cuidetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".cuodetails_b select * from "+schemaName+".cuodetails a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".cuodetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".cuqdetails_b select * from "+schemaName+".cuqdetails a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".cuqdetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".emplodetails_b select * from "+schemaName+".emplodetails a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".emplodetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".resourcedetails_b select * from "+schemaName+".resourcedetails a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".resourcedetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".vendidetails_b select * from "+schemaName+".vendidetails a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".vendidetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".vendodetails_b select * from "+schemaName+".vendodetails a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".vendodetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".vendpdetails_b select * from "+schemaName+".vendpdetails a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".vendpdetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".vendqdetails_b select * from "+schemaName+".vendqdetails a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".vendqdetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".ccontact_b select * from "+schemaName+".ccontact a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".ccontact_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".shipmentdetails_b select * from "+schemaName+".shipmentdetails a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".shipmentdetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".vcontact_b select * from "+schemaName+".vcontact a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".vcontact_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".vshipmendetails_b select * from "+schemaName+".vshipmendetails a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".vshipmendetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".schedule_b select * from "+schemaName+".schedule a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".schedule_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".jobassignment_b select * from "+schemaName+".jobassignment a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".jobassignment_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".acperiod_b select * from "+schemaName+".acperiod a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".acperiod_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".arthahist_b select * from "+schemaName+".arthahist a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".arthahist_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".arthatbl_b select * from "+schemaName+".arthatbl a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".arthatbl_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".holiday_b select * from "+schemaName+".holiday a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".holiday_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".blobdata_b select * from "+schemaName+".blobdata a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".blobdata_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      if(customIdentity.isMasterSite()){
      sqlScript="insert into "+schemaName+".blobdata_b select * from "+schemaName+".blobdata a where  a.owner2='SYSTEM'  and  not exists (select sid from "+schemaName+".blobdata_b b where b.sid = a.sid and b.owner2='SYSTEM')";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      }

      sqlScript="insert into "+schemaName+".cjournal_b select * from "+schemaName+".cjournal a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".cjournal_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".clobdata_b select * from "+schemaName+".clobdata a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".clobdata_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      if(customIdentity.isMasterSite()){
      sqlScript="insert into "+schemaName+".clobdata_b select * from "+schemaName+".clobdata a where  a.owner2='SYSTEM'  and  not exists (select sid from "+schemaName+".clobdata_b b where b.sid = a.sid and b.owner2='SYSTEM')";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      }

      sqlScript="insert into "+schemaName+".editlog_b select * from "+schemaName+".editlog a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".editlog_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".genoptions_b select * from "+schemaName+".genoptions a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".genoptions_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".hlogfile_b select * from "+schemaName+".hlogfile a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".hlogfile_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".jjournal_b select * from "+schemaName+".jjournal a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".jjournal_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".journal_b select * from "+schemaName+".journal a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".journal_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".nextserialno_b select * from "+schemaName+".nextserialno a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".nextserialno_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".options_b select * from "+schemaName+".options a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".options_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".rate1f_b select * from "+schemaName+".rate1f a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".rate1f_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".scandate_b select * from "+schemaName+".scandate a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".scandate_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".serialnumbers_b select * from "+schemaName+".serialnumbers a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".serialnumbers_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();





      // update backup if row in main has changed (relies on statusfldate change)
      // jay whats about those not having statusfldt? either add field or rely on parent status fld
      // and group the updates together oct06 2018 posting date used for journal,glentries
      // order should not matter because all the foreign keys should exist but will follow insert order
      /**
       Update b  set (b.a  = a.a   ,b.b  = a.b   ,b.c  = a.c   ,b.d  = a.d   .......)
        from table1 b
        JOIN table2 a  ON b.id = a.id
        WHERE (.......)
      */
//?? update now done jay except for rate1f which now has statusfldt done now aug 05 2018 but check others which manually changed
//oct06 2018 included journal using postingdate and gl, gldetails using statusfldt.

//postgresql UPDATE genapp.journal_b SET sid=a.sid,spostdate=a.spostdate,postdate=a.postdate,owner2=a.owner2 FROM  genapp.journal a  where(genapp.journal_b.sid=a.sid AND a.postdate<>genapp.journal_b.postdate AND a.owner2='localhost')
//hsqldb or stanard UPDATE genapp.journal_b b SET (sid,spostdate,postdate,owner2)=(SELECT sid,spostdate,postdate,owner2 FROM  genapp.journal a where b.sid=a.sid AND a.postdate<>b.postdate AND a.owner2='localhost')
sqlScript="UPDATE "+schemaName+".journal_b b SET(sid,spostdate,postdate,calendardt,jrnltype,jnlseqb,jnlseq,jnlseqs,period,account,debit,credit,xreference,descript,statusfl,owner,owner2)=(SELECT sid,spostdate,postdate,calendardt,jrnltype,jnlseqb,jnlseq,jnlseqs,period,account,debit,credit,xreference,descript,statusfl,owner,owner2 FROM "+schemaName+".journal a where a.sid=b.sid AND a.postdate<>b.postdate and a.owner2=:owner2)";
if(dbProductName.equals("psql")){
 sqlScript="UPDATE "+schemaName+".journal_b SET sid=a.sid,spostdate=a.spostdate,postdate=a.postdate,calendardt=a.calendardt,jrnltype=a.jrnltype,jnlseqb=a.jnlseqb,jnlseq=a.jnlseq,jnlseqs=a.jnlseqs,period=a.period,account=a.account,debit=a.debit,credit=a.credit,xreference=a.xreference,descript=a.descript,statusfl=a.statusfl,owner=a.owner,owner2=a.owner2 FROM "+schemaName+".journal a where(genapp.journal_b.sid=a.sid AND a.postdate<>genapp.journal_b.postdate AND a.owner2=:owner2)";
}
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);
updatedCount=updatedCount+q.executeUpdate();
/*
sqlScript="UPDATE "+schemaName+".gentriesdetails_b b SET(SID,glentrysidno,line,depcode,divcode,account,debitamt,creditamt,linetotl,notes,STATUSFL,statusfldt,OWNER,OWNER2)=(a.SID,a.glentrysidno,a.line,a.depcode,a.divcode,a.account,a.debitamt,a.creditamt,a.linetotl,a.notes,a.STATUSFL,a.statusfldt,a.OWNER,a.OWNER2)FROM "+schemaName+".gentriesdetails a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);
updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE "+schemaName+".glentries_b b SET(SID,glentryno,descript,refcode,period,postdate,calendardt,depcode,divcode,account,tdebitamt,tcreditamt,notes,STATUSFL,statusfldt,OWNER,OWNER2)=(a.SID,a.glentryno,a.descript,a.refcode,a.period,a.postdate,a.calendardt,a.depcode,a.divcode,a.account,a.tdebitamt,a.tcreditamt,a.notes,a.STATUSFL,a.statusfldt,a.OWNER,a.OWNER2)FROM "+schemaName+".glentries a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);
updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE "+schemaName+".ADDRESS_b b SET(SID,ADDRESCODE,ADDRL1,ADDRL2,ADDRL3,CITY,PROVNSTATE,COUNTRY,PZCODE,DESCRIPT,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2,PRINTMSTAT,PRINMTFLDT)=(a.SID,a.ADDRESCODE,a.ADDRL1,a.ADDRL2,a.ADDRL3,a.CITY,a.PROVNSTATE,a.COUNTRY,a.PZCODE,a.DESCRIPT,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2,a.PRINTMSTAT,a.PRINMTFLDT)FROM "+schemaName+".address a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);
updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE "+schemaName+".OPTIONS_b b SET(SID,ROW,OPTIONS01,PURPOSE01,VALUE01,OPTIONS02,PURPOSE02,VALUE02,OPTIONS03,PURPOSE03,VALUE03,OPTIONS04,PURPOSE04,VALUE04,OPTIONS05,PURPOSE05,VALUE05,OPTIONS06,PURPOSE06,VALUE06,OPTIONS07,PURPOSE07,VALUE07,OPTIONS08,PURPOSE08,VALUE08,OPTIONS09,PURPOSE09,VALUE09,OPTIONS10,PURPOSE10,VALUE10,OPTIONS11,PURPOSE11,VALUE11,OPTIONS12,PURPOSE12,VALUE12,OPTIONS13,PURPOSE13,VALUE13,OPTIONS14,PURPOSE14,VALUE14,OPTIONS15,PURPOSE15,VALUE15,OPTIONS16,PURPOSE16,VALUE16,OPTIONS17,PURPOSE17,VALUE17,OPTIONS18,PURPOSE18,VALUE18,OPTIONS19,PURPOSE19,VALUE19,OPTIONS20,PURPOSE20,VALUE20,OPTIONS21,PURPOSE21,VALUE21,OPTIONS22,PURPOSE22,VALUE22,OPTIONS23,PURPOSE23,VALUE23,OPTIONS24,PURPOSE24,VALUE24,OPTIONS25,PURPOSE25,VALUE25,OPTIONS26,PURPOSE26,VALUE26,OPTIONS27,PURPOSE27,VALUE27,OPTIONS28,PURPOSE28,VALUE28,OPTIONS29,PURPOSE29,VALUE29,OPTIONS30,PURPOSE30,VALUE30,OPTIONS31,PURPOSE31,VALUE31,OPTIONS32,PURPOSE32,VALUE32,OPTIONS33,PURPOSE33,VALUE33,OPTIONS34,PURPOSE34,VALUE34,OPTIONS35,PURPOSE35,VALUE35,OPTIONS36,PURPOSE36,VALUE36,OPTIONS37,PURPOSE37,VALUE37,OPTIONS38,PURPOSE38,VALUE38,OPTIONS39,PURPOSE39,VALUE39,OPTIONS40,PURPOSE40,VALUE40,OPTIONS41,PURPOSE41,VALUE41,OPTIONS42,PURPOSE42,VALUE42,OPTIONS43,PURPOSE43,VALUE43,OPTIONS44,PURPOSE44,VALUE44,OPTIONS45,PURPOSE45,VALUE45,OPTIONS46,PURPOSE46,VALUE46,OPTIONS47,PURPOSE47,VALUE47,OPTIONS48,PURPOSE48,VALUE48,OPTIONS49,PURPOSE49,VALUE49,OPTIONS50,PURPOSE50,VALUE50,OPTIONS51,PURPOSE51,VALUE51,OPTIONS52,PURPOSE52,VALUE52,OPTIONS53,PURPOSE53,VALUE53,OPTIONS54,PURPOSE54,VALUE54,OPTIONS55,PURPOSE55,VALUE55,OPTIONS56,PURPOSE56,VALUE56,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(a.SID,a.ROW,a.OPTIONS01,a.PURPOSE01,a.VALUE01,a.OPTIONS02,a.PURPOSE02,a.VALUE02,a.OPTIONS03,a.PURPOSE03,a.VALUE03,a.OPTIONS04,a.PURPOSE04,a.VALUE04,a.OPTIONS05,a.PURPOSE05,a.VALUE05,a.OPTIONS06,a.PURPOSE06,a.VALUE06,a.OPTIONS07,a.PURPOSE07,a.VALUE07,a.OPTIONS08,a.PURPOSE08,a.VALUE08,a.OPTIONS09,a.PURPOSE09,a.VALUE09,a.OPTIONS10,a.PURPOSE10,a.VALUE10,a.OPTIONS11,a.PURPOSE11,a.VALUE11,a.OPTIONS12,a.PURPOSE12,a.VALUE12,a.OPTIONS13,a.PURPOSE13,a.VALUE13,a.OPTIONS14,a.PURPOSE14,a.VALUE14,a.OPTIONS15,a.PURPOSE15,a.VALUE15,a.OPTIONS16,a.PURPOSE16,a.VALUE16,a.OPTIONS17,a.PURPOSE17,a.VALUE17,a.OPTIONS18,a.PURPOSE18,a.VALUE18,a.OPTIONS19,a.PURPOSE19,a.VALUE19,a.OPTIONS20,a.PURPOSE20,a.VALUE20,a.OPTIONS21,a.PURPOSE21,a.VALUE21,a.OPTIONS22,a.PURPOSE22,a.VALUE22,a.OPTIONS23,a.PURPOSE23,a.VALUE23,a.OPTIONS24,a.PURPOSE24,a.VALUE24,a.OPTIONS25,a.PURPOSE25,a.VALUE25,a.OPTIONS26,a.PURPOSE26,a.VALUE26,a.OPTIONS27,a.PURPOSE27,a.VALUE27,a.OPTIONS28,a.PURPOSE28,a.VALUE28,a.OPTIONS29,a.PURPOSE29,a.VALUE29,a.OPTIONS30,a.PURPOSE30,a.VALUE30,a.OPTIONS31,a.PURPOSE31,a.VALUE31,a.OPTIONS32,a.PURPOSE32,a.VALUE32,a.OPTIONS33,a.PURPOSE33,a.VALUE33,a.OPTIONS34,a.PURPOSE34,a.VALUE34,a.OPTIONS35,a.PURPOSE35,a.VALUE35,a.OPTIONS36,a.PURPOSE36,a.VALUE36,a.OPTIONS37,a.PURPOSE37,a.VALUE37,a.OPTIONS38,a.PURPOSE38,a.VALUE38,a.OPTIONS39,a.PURPOSE39,a.VALUE39,a.OPTIONS40,a.PURPOSE40,a.VALUE40,a.OPTIONS41,a.PURPOSE41,a.VALUE41,a.OPTIONS42,a.PURPOSE42,a.VALUE42,a.OPTIONS43,a.PURPOSE43,a.VALUE43,a.OPTIONS44,a.PURPOSE44,a.VALUE44,a.OPTIONS45,a.PURPOSE45,a.VALUE45,a.OPTIONS46,a.PURPOSE46,a.VALUE46,a.OPTIONS47,a.PURPOSE47,a.VALUE47,a.OPTIONS48,a.PURPOSE48,a.VALUE48,a.OPTIONS49,a.PURPOSE49,a.VALUE49,a.OPTIONS50,a.PURPOSE50,a.VALUE50,a.OPTIONS51,a.PURPOSE51,a.VALUE51,a.OPTIONS52,a.PURPOSE52,a.VALUE52,a.OPTIONS53,a.PURPOSE53,a.VALUE53,a.OPTIONS54,a.PURPOSE54,a.VALUE54,a.OPTIONS55,a.PURPOSE55,a.VALUE55,a.OPTIONS56,a.PURPOSE56,a.VALUE56,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2)FROM "+schemaName+".OPTIONS a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);
updatedCount=updatedCount+q.executeUpdate();

String line1="UPDATE "+schemaName+".CLIENT_b b SET(SID,CLIENTVERSION,SERIALNUM,ENTERPRISECOMPANYNA,DESCRIPT,ADDRL1,ADDRL2,ADDRL3,CITY,PROVNSTATE,COUNTRYNAME,PZCODE,PHONEO,PHONEH,PHONEC,PHONEX,LANADDR,WANADDR,LMAILADDR,IMAILADDR,RMAILADDR,INTADDR,INRADDR,ENTERPRISECOMPCODE,ENTERPRISECOMPSIZE,BARCSIZE,LEVEL,POSKIPP,LOOSEIT,JOBSKIP,CARTONFL,PICKLIST,PRODDESC,PRODCODE,NJOB,NMATERIA,NACTIVITY,NBUTT,NCUSTOME,NCONTACT,NVENDOR,NEMPLOYEE,NSCHEDULE,NREJECT,NRETURN,NCODE,MANUFID,BARTYPE,CADTYPE,CARTYPE,SHITYPE,REPTYPE,LOCTYPE,BARCOL,CARCOL,CADCOL,SHICOL,REPCOL,LOCCOL,ALTSERIA,COUNTRYCODE,NALTSERI,SCRCOLOR,HILCOLOR,TEXTCOLOR,BACCOLOR,DATETYPE,CURRSYMB,CURRCODE,PRINBAR,BARPRINT,CARPRINT,CADPRINT,LOCPRINT,SHIPRINT,REPPRINT,BARPRTY,REPPRTY,CARPRTY,CADPRTY,SHIPRTY,LOCPRTY,ALTSELEN,CUSTOLEN,CARCSIZE,CADCSIZE,SHICSIZE,REPCSIZE,LOCCSIZE,CS,NCONFTYP,NLOCATIO,NDIVCODE,NDEPCODE,NADDCODE,NFLOOR,NROOM,NRACK,MENUTYPE,PADTYPE,NRATE1TA,NRATE2TA,DEFCONFT,BEEPSOU,CONFIRM,LINEFEED,REFBARADJ,SHIBARADJ,CUSBARADJ,LOCBARADJ,CARBARADJ,NCORDER,NSPERSON,PROMPTI,CUSTOMERQUOTENB,CUSTOMERQUOTEN,CUSTOMERQUOTENA,CUSTOMERORDERNB,CUSTOMERORDERN,CUSTOMERORDERNA,VENDORORDERNB,VENDORORDERN,VENDORORDERNA,EMPLOYEEORDERNB,EMPLOYEEORDERN,EMPLOYEEORDERNA,JOBNB,JOBN,JOBNA,CUSTOMERINVOICENB,CUSTOMERINVOICEN,CUSTOMERINVOICENA,VENDORINVOICENB,VENDORINVOICEN,VENDORINVOICENA,CUSTOMERPICKNB,CUSTOMERPICKN,CUSTOMERPICKNA,VENDORQUOTENB,VENDORQUOTEN,VENDORQUOTENA,CUSTOMERPAYMNTNB,CUSTOMERPAYMNTN,CUSTOMERPAYMNTNA,VENDORPAYMNTNB,VENDORPAYMNTN,VENDORPAYMNTNA,VENDORCHQNB,VENDORCHQN,VENDORCHQNA,TASKNB,TASKN,TASKNA,ARSEQB,ARSEQ,ARSEQA,APSEQB,APSEQ,APSEQA,GLSEQB,GLSEQ,GLSEQA,PASEQB,PASEQ,PASEQA,ICSEQB,ICSEQ,ICSEQA,JOSEQB,JOSEQ,JOSEQA,SGLENTRY,TAX1CODE,TAX2CODE,TAX3CODE,NDECIMAL,EDIPASSW,INTPASSW,INRPASSW,IMLPASSW,RMLPASSW,LMLPASSW,HOSPASSW,LANPASSW,WANPASSW,ASHOSTID,HDSTYLE,MTSTYLE,STSTYLE,DTSTYLE,FTSTYLE,DEFAULTR,DEFAULTC,DBNAME,ROOTDIR,KEYORDER,CURRBUSDAT,LASTBUSDAT,CURRCALDAT,LASTCALDAT,PREPROCESS,MARGIN,FOOTER,LASTUSER,LISTBUILDC,LISTBUILDV,LISTBUILDE,LISTBROWNC,LISTBROWNV,LISTBROWNE,SMTPSERVER,SMTPUSER,SMTPPASS,POP3SERVER,POP3USER,POP3PASS,SMATCODE,FYREND,FPERIODS,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2,licensetype,licensestart,licenseend)=(a.sid,a.CLIENTVERSION,a.SERIALNUM,a.ENTERPRISECOMPANYNA,a.DESCRIPT,a.ADDRL1,a.ADDRL2,a.ADDRL3,a.CITY,a.PROVNSTATE,a.COUNTRYNAME,a.PZCODE,a.PHONEO,a.PHONEH,a.PHONEC,a.PHONEX,a.LANADDR,a.WANADDR,a.LMAILADDR,a.IMAILADDR,a.RMAILADDR,a.INTADDR,a.INRADDR,a.ENTERPRISECOMPCODE,a.ENTERPRISECOMPSIZE,a.BARCSIZE,a.LEVEL,a.POSKIPP,a.LOOSEIT,a.JOBSKIP,a.CARTONFL,a.PICKLIST,a.PRODDESC,a.PRODCODE,a.NJOB,a.NMATERIA,a.NACTIVITY,a.NBUTT,a.NCUSTOME,a.NCONTACT,a.NVENDOR,a.NEMPLOYEE,a.NSCHEDULE,a.NREJECT,a.NRETURN,a.NCODE,a.MANUFID,a.BARTYPE,a.CADTYPE,a.CARTYPE,a.SHITYPE,a.REPTYPE,a.LOCTYPE,a.BARCOL,a.CARCOL,a.CADCOL,a.SHICOL,a.REPCOL,a.LOCCOL,a.ALTSERIA,a.COUNTRYCODE,a.NALTSERI,a.SCRCOLOR,a.HILCOLOR,";
sqlScript=line1+"a.TEXTCOLOR,a.BACCOLOR,a.DATETYPE,a.CURRSYMB,a.CURRCODE,a.PRINBAR,a.BARPRINT,a.CARPRINT,a.CADPRINT,a.LOCPRINT,a.SHIPRINT,a.REPPRINT,a.BARPRTY,a.REPPRTY,a.CARPRTY,a.CADPRTY,a.SHIPRTY,a.LOCPRTY,a.ALTSELEN,a.CUSTOLEN,a.CARCSIZE,a.CADCSIZE,a.SHICSIZE,a.REPCSIZE,a.LOCCSIZE,a.CS,a.NCONFTYP,a.NLOCATIO,a.NDIVCODE,a.NDEPCODE,a.NADDCODE,a.NFLOOR,a.NROOM,a.NRACK,a.MENUTYPE,a.PADTYPE,a.NRATE1TA,a.NRATE2TA,a.DEFCONFT,a.BEEPSOU,a.CONFIRM,a.LINEFEED,a.REFBARADJ,a.SHIBARADJ,a.CUSBARADJ,a.LOCBARADJ,a.CARBARADJ,a.NCORDER,a.NSPERSON,a.PROMPTI,a.CUSTOMERQUOTENB,a.CUSTOMERQUOTEN,a.CUSTOMERQUOTENA,a.CUSTOMERORDERNB,a.CUSTOMERORDERN,a.CUSTOMERORDERNA,a.VENDORORDERNB,a.VENDORORDERN,a.VENDORORDERNA,a.EMPLOYEEORDERNB,a.EMPLOYEEORDERN,a.EMPLOYEEORDERNA,a.JOBNB,a.JOBN,a.JOBNA,a.CUSTOMERINVOICENB,a.CUSTOMERINVOICEN,a.CUSTOMERINVOICENA,a.VENDORINVOICENB,a.VENDORINVOICEN,a.VENDORINVOICENA,a.CUSTOMERPICKNB,a.CUSTOMERPICKN,a.CUSTOMERPICKNA,a.VENDORQUOTENB,a.VENDORQUOTEN,a.VENDORQUOTENA,a.CUSTOMERPAYMNTNB,a.CUSTOMERPAYMNTN,a.CUSTOMERPAYMNTNA,a.VENDORPAYMNTNB,a.VENDORPAYMNTN,a.VENDORPAYMNTNA,a.VENDORCHQNB,a.VENDORCHQN,a.VENDORCHQNA,a.TASKNB,a.TASKN,a.TASKNA,a.ARSEQB,a.ARSEQ,a.ARSEQA,a.APSEQB,a.APSEQ,a.APSEQA,a.GLSEQB,a.GLSEQ,a.GLSEQA,a.PASEQB,a.PASEQ,a.PASEQA,a.ICSEQB,a.ICSEQ,a.ICSEQA,a.JOSEQB,a.JOSEQ,a.JOSEQA,a.SGLENTRY,a.TAX1CODE,a.TAX2CODE,a.TAX3CODE,a.NDECIMAL,a.EDIPASSW,a.INTPASSW,a.INRPASSW,a.IMLPASSW,a.RMLPASSW,a.LMLPASSW,a.HOSPASSW,a.LANPASSW,a.WANPASSW,a.ASHOSTID,a.HDSTYLE,a.MTSTYLE,a.STSTYLE,a.DTSTYLE,a.FTSTYLE,a.DEFAULTR,a.DEFAULTC,a.DBNAME,a.ROOTDIR,a.KEYORDER,a.CURRBUSDAT,a.LASTBUSDAT,a.CURRCALDAT,a.LASTCALDAT,a.PREPROCESS,a.MARGIN,a.FOOTER,a.LASTUSER,a.LISTBUILDC,a.LISTBUILDV,a.LISTBUILDE,a.LISTBROWNC,a.LISTBROWNV,a.LISTBROWNE,a.SMTPSERVER,a.SMTPUSER,a.SMTPPASS,a.POP3SERVER,a.POP3USER,a.POP3PASS,a.SMATCODE,a.FYREND,a.FPERIODS,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2,a.licensetype,a.licensestart,a.licenseend)FROM "+schemaName+".CLIENT a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);
updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE "+schemaName+".DEPARTMENT_b b SET(SID,DEPCODE,DESCRIPT,GLPREFIX,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(a.sid,a.DEPCODE,a.DESCRIPT,a.GLPREFIX,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2)FROM "+schemaName+".DEPARTMENT a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2);UPDATE "+schemaName+".COMPANY_b b SET(SID,COMPANYCODE,DESCRIPT,LEGALNAME,MAILTOCODE,GLPREFIX,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(a.sid,a.COMPANYCODE,a.DESCRIPT,a.LEGALNAME,a.MAILTOCODE,a.GLPREFIX,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2)FROM "+schemaName+".COMPANY a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);
updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE "+schemaName+".CONTROL_b b SET(SID,CONTROLCODE,DESCRIPT,TYPEOFCONTROL,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(a.sid,a.CONTROLCODE,a.DESCRIPT,a.TYPEOFCONTROL,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2)FROM "+schemaName+".CONTROL a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);
updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE "+schemaName+".DIVISION_b b SET(SID,DIVCODE,DESCRIPT,GLPREFIX,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(a.sid,a.DIVCODE,a.DESCRIPT,a.GLPREFIX,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2)FROM "+schemaName+".DIVISION a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);
updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE "+schemaName+".LOCATION_b b SET(SID,LOCATION,DESCRIPT,COMPANYCODE,ADDRESSCODE,FLOOR,ROOM,RACK,PRINTMSTAT,PRINMTFLDT,EXCLUDE,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(a.sid,a.LOCATION,a.DESCRIPT,a.COMPANYCODE,a.ADDRESSCODE,a.FLOOR,a.ROOM,a.RACK,a.PRINTMSTAT,a.PRINMTFLDT,a.EXCLUDE,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2)FROM "+schemaName+".LOCATION a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);
updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE "+schemaName+".RESIDENCY_b b SET(SID,RESIDENCY,DESCRIPT,MUNICIPALITY,PROVINCE,COUNTRYNAME,EXCLUDE,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(a.sid,a.RESIDENCY,a.DESCRIPT,a.MUNICIPALITY,a.PROVINCE,a.COUNTRYNAME,a.EXCLUDE,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2)FROM "+schemaName+".RESIDENCY a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);
updatedCount=updatedCount+q.executeUpdate();
FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("update")+" "+bundle.getString("residency_b")+" "+bundle.getString("count")+" "+(updatedCount-countp),""));
countp=updatedCount;

sqlScript="UPDATE "+schemaName+".ACCOUNT_b b SET(SID,ACCOUNT,DESCRIPT,CATEGORY,TYPE,BUDGET,ACTUAL,ACTUALN,PREVBUDG,PREVACT,SEQUENCE,CHILD,PARENT,ROLLUPQ,COMPANYCODE,DEPCODE,DIVCODE,STATUSFL,STATUSFLDT,CURRENCY,NOTES,OWNER,OWNER2,P0,P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P8T,P9T,P10T,P11T)=(a.SID,a.ACCOUNT,a.DESCRIPT,a.CATEGORY,a.TYPE,a.BUDGET,a.ACTUAL,a.ACTUALN,a.PREVBUDG,a.PREVACT,a.SEQUENCE,a.CHILD,a.PARENT,a.ROLLUPQ,a.COMPANYCODE,a.DEPCODE,a.DIVCODE,a.STATUSFL,a.STATUSFLDT,a.CURRENCY,a.NOTES,a.OWNER,a.OWNER2,a.P0,a.P1,a.P2,a.P3,a.P4,a.P5,a.P6,a.P7,a.P8,a.P9,a.P10,a.P11,a.P12,a.P13,a.P14,a.P8T,a.P9T,a.P10T,a.P11T)FROM "+schemaName+".ACCOUNT a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);
updatedCount=updatedCount+q.executeUpdate();
FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("update")+" "+bundle.getString("account_b")+" "+bundle.getString("count")+" "+(updatedCount-countp),""));
countp=updatedCount;

sqlScript="UPDATE "+schemaName+".CUSTOMER_b b SET(SID,CUSTOMER,DESCRIPT,TITLE,JOBTITLE,LASTNAME,FIRSTNAME,MIDDLENAM,CUSTOMERASCOMPANYNAME,CUSTTOTL,CUSTTQTY,COMPANYCODE,LOCATION,MAILTOCODE,SHIPTOCODE,TAX1,TAX2,TAX3,CUSTTAX1,CUSTTAX2,CUSTTAX3,PHONEO,PHONEH,PHONEC,PHONEX,LANADDR,WANADDR,LMAILADDR,IMAILADDR,RMAILADDR,INTADDR,INRADDR,DOB,PLACEOFBIRTH,SEX,AGE,CUSRTOTL,CUSRTQTY,CUSMTOTL,CUSDTOTL,LASTORDER,LASTINVOIC,LASTPAYMNQ,PRINTMSTAT,PRINMTFLDT,SHIPLABEL,TYPE,DEFAULTGLAC,INTEGRSET,STATUSFL,STATUSFLDT,TOTLPAID,CONTACTED,BYWHO,NXTCONTACT,VIA,KEYWORDS,NOTES,OWNER,OWNER2,DOCMNT)=(a.SID,a.CUSTOMER,a.DESCRIPT,a.TITLE,a.JOBTITLE,a.LASTNAME,a.FIRSTNAME,a.MIDDLENAM,a.CUSTOMERASCOMPANYNAME,a.CUSTTOTL,a.CUSTTQTY,a.COMPANYCODE,a.LOCATION,a.MAILTOCODE,a.SHIPTOCODE,a.TAX1,a.TAX2,a.TAX3,a.CUSTTAX1,a.CUSTTAX2,a.CUSTTAX3,a.PHONEO,a.PHONEH,a.PHONEC,a.PHONEX,a.LANADDR,a.WANADDR,a.LMAILADDR,a.IMAILADDR,a.RMAILADDR,a.INTADDR,a.INRADDR,a.DOB,a.PLACEOFBIRTH,a.SEX,a.AGE,a.CUSRTOTL,a.CUSRTQTY,a.CUSMTOTL,a.CUSDTOTL,a.LASTORDER,a.LASTINVOIC,a.LASTPAYMNQ,a.PRINTMSTAT,a.PRINMTFLDT,a.SHIPLABEL,a.TYPE,a.DEFAULTGLAC,a.INTEGRSET,a.STATUSFL,a.STATUSFLDT,a.TOTLPAID,a.CONTACTED,a.BYWHO,a.NXTCONTACT,a.VIA,a.KEYWORDS,a.NOTES,a.OWNER,a.OWNER2,a.DOCMNT)FROM "+schemaName+".CUSTOMER a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);
updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE "+schemaName+".VENDOR_b b SET(SID,VENDOR,DESCRIPT,TITLE,JOBTITLE,LASTNAME,FIRSTNAME,MIDDLENAM,VENDORASCOMPANYNAME,VENDTOTL,VENDTQTY,COMPANYCODE,LOCATION,MAILTOCODE,PHONEO,PHONEH,PHONEC,PHONEX,LANADDR,WANADDR,LMAILADDR,IMAILADDR,RMAILADDR,INTADDR,INRADDR,VENRTOTL,VENRTQTY,VENMTOTL,VENDDTOTL,LASTQUOTE,LASTORDER,LASTINVOIC,LASTPAYMQ,PRINTMSTAT,PRINMTFLDT,SHIPLABEL,TYPE,SHIPTOCODE,DEFAULTGLAC,INTEGRSET,STATUSFL,STATUSFLDT,TOTLPAID,CONTACTED,BYWHO,KEYWORDS,NOTES,OWNER,OWNER2,DOCMNT)=(a.SID,a.VENDOR,a.DESCRIPT,a.TITLE,a.JOBTITLE,a.LASTNAME,a.FIRSTNAME,a.MIDDLENAM,a.VENDORASCOMPANYNAME,a.VENDTOTL,a.VENDTQTY,a.COMPANYCODE,a.LOCATION,a.MAILTOCODE,a.PHONEO,a.PHONEH,a.PHONEC,a.PHONEX,a.LANADDR,a.WANADDR,a.LMAILADDR,a.IMAILADDR,a.RMAILADDR,a.INTADDR,a.INRADDR,a.VENRTOTL,a.VENRTQTY,a.VENMTOTL,a.VENDDTOTL,a.LASTQUOTE,a.LASTORDER,a.LASTINVOIC,a.LASTPAYMQ,a.PRINTMSTAT,a.PRINMTFLDT,a.SHIPLABEL,a.TYPE,a.SHIPTOCODE,a.DEFAULTGLAC,a.INTEGRSET,a.STATUSFL,a.STATUSFLDT,a.TOTLPAID,a.CONTACTED,a.BYWHO,a.KEYWORDS,a.NOTES,a.OWNER,a.OWNER2,a.DOCMNT)FROM "+schemaName+".VENDOR a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE "+schemaName+".EMPLOYEE_b b SET(SID,EMPLOYEE,DESCRIPT,TITLE,JOBTITLE,LASTNAME,FIRSTNAME,MIDDLENAM,COMPANYCODE,EMPLTOTL,EMPLTQTY,DIVCODE,DEPCODE,LOCATION,RESIDENCY,MAILTOCODE,TAX1,TAX2,TAX3,CUSTTAX1,CUSTTAX2,CUSTTAX3,PHONEO,PHONEH,PHONEC,PHONEX,LANADDR,WANADDR,LMAILADDR,IMAILADDR,RMAILADDR,INTADDR,INRADDR,EMPRTOTL,EMPRTQTY,EMPMTOTL,EMPDTOTL,LASTQUOTE,LASTORDER,LASTINVOIC,LASTPAYMQ,PRINTMSTAT,PRINMTFLDT,SHIPLABEL,SHIPTOCODE,TYPE,DEFAULTGLAC,INTEGRSET,STATUSFL,STATUSFLDT,CONTACTED,BYWHO,KEYWORDS,NOTES,OWNER,OWNER2,DOCMNT)=(a.SID,a.EMPLOYEE,a.DESCRIPT,a.TITLE,a.JOBTITLE,a.LASTNAME,a.FIRSTNAME,a.MIDDLENAM,a.COMPANYCODE,a.EMPLTOTL,a.EMPLTQTY,a.DIVCODE,a.DEPCODE,a.LOCATION,a.RESIDENCY,a.MAILTOCODE,a.TAX1,a.TAX2,a.TAX3,a.CUSTTAX1,a.CUSTTAX2,a.CUSTTAX3,a.PHONEO,a.PHONEH,a.PHONEC,a.PHONEX,a.LANADDR,a.WANADDR,a.LMAILADDR,a.IMAILADDR,a.RMAILADDR,a.INTADDR,a.INRADDR,a.EMPRTOTL,a.EMPRTQTY,a.EMPMTOTL,a.EMPDTOTL,a.LASTQUOTE,a.LASTORDER,a.LASTINVOIC,a.LASTPAYMQ,a.PRINTMSTAT,a.PRINMTFLDT,a.SHIPLABEL,a.SHIPTOCODE,a.TYPE,a.DEFAULTGLAC,a.INTEGRSET,a.STATUSFL,a.STATUSFLDT,a.CONTACTED,a.BYWHO,a.KEYWORDS,a.NOTES,a.OWNER,a.OWNER2,a.DOCMNT)FROM "+schemaName+".EMPLOYEE a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE "+schemaName+".VCONTACT_b b SET(SID,CONTACT,VENDOR,TITLE,JOBTITLE,LASTNAME,FIRSTNAME,MIDDLENAM,PHONEO,PHONEH,PHONEC,PHONEX,LANADDR,WANADDR,LMAILADDR,IMAILADDR,RMAILADDR,INTADDR,INRADDR,LOCATION,MAILTOCODE,SHIPTOCODE,PRINTSTA,SHIPLABEL,TYPE,STATUSFL,STATUSFLDT,KEYWORDS,NOTES,OWNER,OWNER2,DOCMNT)=(a.SID,a.CONTACT,a.VENDOR,a.TITLE,a.JOBTITLE,a.LASTNAME,a.FIRSTNAME,a.MIDDLENAM,a.PHONEO,a.PHONEH,a.PHONEC,a.PHONEX,a.LANADDR,a.WANADDR,a.LMAILADDR,a.IMAILADDR,a.RMAILADDR,a.INTADDR,a.INRADDR,a.LOCATION,a.MAILTOCODE,a.SHIPTOCODE,a.PRINTSTA,a.SHIPLABEL,a.TYPE,a.STATUSFL,a.STATUSFLDT,a.KEYWORDS,a.NOTES,a.OWNER,a.OWNER2,a.DOCMNT)FROM "+schemaName+".VCONTACT a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE "+schemaName+".CCONTACT_b b SET(SID,CONTACT,CUSTOMER,TITLE,JOBTITLE,LASTNAME,FIRSTNAME,MIDDLENAM,TAX1,TAX2,TAX3,CUSTTAX1,CUSTTAX2,CUSTTAX3,PHONEO,PHONEH,PHONEC,PHONEX,LANADDR,WANADDR,LMAILADDR,IMAILADDR,RMAILADDR,INTADDR,INRADDR,LOCATION,MAILTOCODE,SHIPTOCODE,PRINTMSTAT,PRINMTFLDT,SHIPLABEL,TYPE,STATUSFL,STATUSFLDT,KEYWORDS,NOTES,OWNER,OWNER2,DOCMNT)=(a.SID,a.CONTACT,a.CUSTOMER,a.TITLE,a.JOBTITLE,a.LASTNAME,a.FIRSTNAME,a.MIDDLENAM,a.TAX1,a.TAX2,a.TAX3,a.CUSTTAX1,a.CUSTTAX2,a.CUSTTAX3,a.PHONEO,a.PHONEH,a.PHONEC,a.PHONEX,a.LANADDR,a.WANADDR,a.LMAILADDR,a.IMAILADDR,a.RMAILADDR,a.INTADDR,a.INRADDR,a.LOCATION,a.MAILTOCODE,a.SHIPTOCODE,a.PRINTMSTAT,a.PRINMTFLDT,a.SHIPLABEL,a.TYPE,a.STATUSFL,a.STATUSFLDT,a.KEYWORDS,a.NOTES,a.OWNER,a.OWNER2,a.DOCMNT)FROM "+schemaName+".CCONTACT a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE "+schemaName+".PERIODDATES_b b SET(SID,PERIOD,DESCRIPT,STARTDATE,ENDDATE,STARTOFWEEK,STARTOFBWEEK,ENDOFBWEEK,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(a.SID,a.PERIOD,a.DESCRIPT,a.STARTDATE,a.ENDDATE,a.STARTOFWEEK,a.STARTOFBWEEK,a.ENDOFBWEEK,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2)FROM "+schemaName+".PERIODDATES a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2);UPDATE "+schemaName+".ACPERIOD_b b SET(SID,ROWID,CURRPERIOD,DESCRIPT,CURRBUSDATE,CURRCALDATE,CURRLOCALDATE,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(a.SID,a.ROWID,a.CURRPERIOD,a.DESCRIPT,a.CURRBUSDATE,a.CURRCALDATE,a.CURRLOCALDATE,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2)FROM "+schemaName+".ACPERIOD a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2);UPDATE "+schemaName+".WAGEEARNER_b b SET(SID,WAGEEARNERID,EMPLOYEE,SIN,BIRTHDT,FEDCLAIM,PROVCLAIM,PAYYRFREQ,PAYPERIOD,WCB,WCBYTD,EMPLINSUR,INSYTD,VACRETAIN,VACATONYT,WAGEUNIT,WAGERATE,OTIMEUNIT,OTIMERATE,WAGEUNITS,OTIMUNITS,WAGEOUT,OVTIMEOUT,SALARYOUT,COMMISSION,BENEFITS,VACATION,VACPAYOUT,ADVANCE,PENSION,AFTERTAX,UNIONDUES,MEDICAL,FINCOMETX,PINCOMETX,THISPAYA,LASTPAYA,PAYYTD,FPENSIYTD,PPENSIYTD,ITAXYTD,PTAXYTD,GRPAYYTD,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2,DOCMNT)=(a.SID,a.WAGEEARNERID,a.EMPLOYEE,a.SIN,a.BIRTHDT,a.FEDCLAIM,a.PROVCLAIM,a.PAYYRFREQ,a.PAYPERIOD,a.WCB,a.WCBYTD,a.EMPLINSUR,a.INSYTD,a.VACRETAIN,a.VACATONYT,a.WAGEUNIT,a.WAGERATE,a.OTIMEUNIT,a.OTIMERATE,a.WAGEUNITS,a.OTIMUNITS,a.WAGEOUT,a.OVTIMEOUT,a.SALARYOUT,a.COMMISSION,a.BENEFITS,a.VACATION,a.VACPAYOUT,a.ADVANCE,a.PENSION,a.AFTERTAX,a.UNIONDUES,a.MEDICAL,a.FINCOMETX,a.PINCOMETX,a.THISPAYA,a.LASTPAYA,a.PAYYTD,a.FPENSIYTD,a.PPENSIYTD,a.ITAXYTD,a.PTAXYTD,a.GRPAYYTD,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2,a.DOCMNT)FROM "+schemaName+".WAGEEARNER a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE "+schemaName+".ARTHATBL_b b SET(SID,USAGE,WCBPERCNT,INSFACTOR,VACATONRATE,PENSIONMAX,WCBMAX,INSMAX,ITAXLV0RATE,ITAXLV1RATE,ITAXLV2RATE,ITAXLV3RATE,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(a.SID,a.USAGE,a.WCBPERCNT,a.INSFACTOR,a.VACATONRATE,a.PENSIONMAX,a.WCBMAX,a.INSMAX,a.ITAXLV0RATE,a.ITAXLV1RATE,a.ITAXLV2RATE,a.ITAXLV3RATE,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2)FROM "+schemaName+".ARTHATBL a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE "+schemaName+".ROLLUPGROUP_b b SET(SID,GROUPID,DESCRIPT,TYPE,CURRPW,EXPIRY,CURRENCY,PERIOD0B,PERIOD0,PERIODTOTALSB,PERIODTOTALS,PERIOD1BUDGET,PERIOD1ACTUAL,PERIOD2B,PERIOD2,PERIOD3B,PERIOD3,PERIOD4B,PERIOD4,PERIOD5B,PERIOD5,PERIOD6B,PERIOD6,PERIOD7B,PERIOD7,PERIOD8B,PERIOD8,PERIOD9B,PERIOD9,PERIOD10B,PERIOD10,PERIOD11B,PERIOD11,PERIOD12B,PERIOD12,PERIODNB,PERIODN,NOTES,STATUSFL,STATUSFLDT,OWNER,OWNER2)=(a.SID,a.GROUPID,a.DESCRIPT,a.TYPE,a.CURRPW,a.EXPIRY,a.CURRENCY,a.PERIOD0B,a.PERIOD0,a.PERIODTOTALSB,a.PERIODTOTALS,a.PERIOD1BUDGET,a.PERIOD1ACTUAL,a.PERIOD2B,a.PERIOD2,a.PERIOD3B,a.PERIOD3,a.PERIOD4B,a.PERIOD4,a.PERIOD5B,a.PERIOD5,a.PERIOD6B,a.PERIOD6,a.PERIOD7B,a.PERIOD7,a.PERIOD8B,a.PERIOD8,a.PERIOD9B,a.PERIOD9,a.PERIOD10B,a.PERIOD10,a.PERIOD11B,a.PERIOD11,a.PERIOD12B,a.PERIOD12,a.PERIODNB,a.PERIODN,a.NOTES,a.STATUSFL,a.STATUSFLDT,a.OWNER,a.OWNER2)FROM "+schemaName+".ROLLUPGROUP a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE "+schemaName+".MEMBERSGROUP_b b SET(SID,GROUPID,DESCRIPT,QUANTITY,MODE,STATUSFL,STATUSFLDT,OWNER,OWNER2)=(a.SID,a.GROUPID,a.DESCRIPT,a.QUANTITY,a.MODE,a.STATUSFL,a.STATUSFLDT,a.OWNER,a.OWNER2)FROM "+schemaName+".MEMBERSGROUP a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE "+schemaName+".ARTHAHIST_b b SET(SID,WAGEEARNER,SIN,PERIOD,MONTH,CCYY,VACATION,WAGE,OVERTIME,SALARY,COMMISSION,BENEFIT,FINCOMETX,PINCOMETX,WCBOUT,EMPLINSUR,VACPAYOUT,ADVANCE,FPENSOBTX,FPENSOATX,UNIONDUES,MEDICAL,PAYAMT,NOTES,NOTES2,CHQNUMBER,STATUSFL,STATUSFLDT,OWNER,OWNER2)=(a.SID,a.WAGEEARNER,a.SIN,a.PERIOD,a.MONTH,a.CCYY,a.VACATION,a.WAGE,a.OVERTIME,a.SALARY,a.COMMISSION,a.BENEFIT,a.FINCOMETX,a.PINCOMETX,a.WCBOUT,a.EMPLINSUR,a.VACPAYOUT,a.ADVANCE,a.FPENSOBTX,a.FPENSOATX,a.UNIONDUES,a.MEDICAL,a.PAYAMT,a.NOTES,a.NOTES2,a.CHQNUMBER,a.STATUSFL,a.STATUSFLDT,a.OWNER,a.OWNER2)FROM "+schemaName+".ARTHAHIST a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE "+schemaName+".HOLIDAY_b b SET(SID,SHOLIDAY,HOLIDAY,DESCRIPT,TYPE,STATUSFL,STATUSFLDT,EMPLOYEE,RESIDENCY,OWNER,OWNER2)=(a.SID,a.SHOLIDAY,a.HOLIDAY,a.DESCRIPT,a.TYPE,a.STATUSFL,a.STATUSFLDT,a.EMPLOYEE,a.RESIDENCY,a.OWNER,a.OWNER2)FROM "+schemaName+".HOLIDAY a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE "+schemaName+".ITEM_b b SET(SID,MATCODE,QUANTITY,DESCRIPT,DATEADDED,DATEEXPIRY,DATETORENEW,SOURCE1,SOURCE2,UPCCODE,COST,REPLCOST,SELPRICE,SPRICOLD,SPRICNEW,SPRICEFFDT,SHIPCODE,PRINTMSTAT,PRINMTFLDT,MISCCODE1,MISCCODE2,QTYLEVEL1,UNIT,CASEQTY,TYPE,TAX1,TAX2,TAX3,ALIASCODE,PARENTCODE,AVGPRICE,AVGCOST,STATUSFL,STATUSFLDT,SUBCODESN,SUBCODESN2,SUBCODESN3,CUORDQTY,VENORQTY,CUPICQTY,VENPIQTY,CUINVQTY,CUSHIQTY,VENSHQTY,EFFDATE,INTEGRSET,NOTES,DOCMNT,OWNER,OWNER2,LOCATION,BARUPC)=(a.SID,a.MATCODE,a.QUANTITY,a.DESCRIPT,a.DATEADDED,a.DATEEXPIRY,a.DATETORENEW,a.SOURCE1,a.SOURCE2,a.UPCCODE,a.COST,a.REPLCOST,a.SELPRICE,a.SPRICOLD,a.SPRICNEW,a.SPRICEFFDT,a.SHIPCODE,a.PRINTMSTAT,a.PRINMTFLDT,a.MISCCODE1,a.MISCCODE2,a.QTYLEVEL1,a.UNIT,a.CASEQTY,a.TYPE,a.TAX1,a.TAX2,a.TAX3,a.ALIASCODE,a.PARENTCODE,a.AVGPRICE,a.AVGCOST,a.STATUSFL,a.STATUSFLDT,a.SUBCODESN,a.SUBCODESN2,a.SUBCODESN3,a.CUORDQTY,a.VENORQTY,a.CUPICQTY,a.VENPIQTY,a.CUINVQTY,a.CUSHIQTY,a.VENSHQTY,a.EFFDATE,a.INTEGRSET,a.NOTES,a.DOCMNT,a.OWNER,a.OWNER2,a.LOCATION,a.BARUPC)FROM "+schemaName+".ITEM a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE "+schemaName+".ACTIVITY_b b SET(SID,ACTIVITYCODE,QUANTITY,DESCRIPT,DATE,SOURCE1,SOURCE2,UPCCODE,COST,REPLCOST,SELPRICE,SPRICOLD,SPRICNEW,SPRICEFFDT,SHIPCODE,PRINTMSTAT,PRINMTFLDT,MISCCODE1,MISCCODE2,QTYLEVEL1,UNIT,CASEQTY,TYPE,TAX1,TAX2,TAX3,ALIASCODE,PARENTCODE,AVGPRICE,AVGCOST,STATUSFL,STATUSFLDT,SUBCODESN,SUBCODESN2,SUBCODESN3,CUORDQTY,VENORQTY,CUPICQTY,VENPIQTY,CUINVQTY,CUSHIQTY,VENSHQTY,EFFDATE,INTEGRSET,NOTES,DOCMNT,OWNER,OWNER2,BARUPC)=(a.SID,a.ACTIVITYCODE,a.QUANTITY,a.DESCRIPT,a.DATE,a.SOURCE1,a.SOURCE2,a.UPCCODE,a.COST,a.REPLCOST,a.SELPRICE,a.SPRICOLD,a.SPRICNEW,a.SPRICEFFDT,a.SHIPCODE,a.PRINTMSTAT,a.PRINMTFLDT,a.MISCCODE1,a.MISCCODE2,a.QTYLEVEL1,a.UNIT,a.CASEQTY,a.TYPE,a.TAX1,a.TAX2,a.TAX3,a.ALIASCODE,a.PARENTCODE,a.AVGPRICE,a.AVGCOST,a.STATUSFL,a.STATUSFLDT,a.SUBCODESN,a.SUBCODESN2,a.SUBCODESN3,a.CUORDQTY,a.VENORQTY,a.CUPICQTY,a.VENPIQTY,a.CUINVQTY,a.CUSHIQTY,a.VENSHQTY,a.EFFDATE,a.INTEGRSET,a.NOTES,a.DOCMNT,a.OWNER,a.OWNER2,a.BARUPC)FROM "+schemaName+".ACTIVITY a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE "+schemaName+".SCHEDULE_b b SET(SID,TODO,DESCRIPT,EMPLOYEE,SSDATET,ACTIVITYCODE,LOCATION,SDATET,DURATIONH,DURATIONM,STIMEH,STIMEM,STIMEAMPM,EDATET,PRIORITY,PERCNTDONE,VENDOR,VONTACT,CUSTOMER,TYPE,MAILTOCODE,OTHEREMPLO,REPEATF,STATUSFL,STATUSFLDT,PRIVATEIND,NOTES,OWNER,OWNER2,DOCMNT)=(a.SID,a.TODO,a.DESCRIPT,a.EMPLOYEE,a.SSDATET,a.ACTIVITYCODE,a.LOCATION,a.SDATET,a.DURATIONH,a.DURATIONM,a.STIMEH,a.STIMEM,a.STIMEAMPM,a.EDATET,a.PRIORITY,a.PERCNTDONE,a.VENDOR,a.VONTACT,a.CUSTOMER,a.TYPE,a.MAILTOCODE,a.OTHEREMPLO,a.REPEATF,a.STATUSFL,a.STATUSFLDT,a.PRIVATEIND,a.NOTES,a.OWNER,a.OWNER2,a.DOCMNT)FROM "+schemaName+".SCHEDULE a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE "+schemaName+".USERPROFL_b b SET(SID,LOGONID,ROW,OPTION,SELECTVALUE,SCRCOLOR,HILCOLOR,TEXTCOLOR,BACCOLOR,BEEPSOU,CONFIRM,PROMPTI,P1,P2,P3,P4,P5,P6,MTSTYLE,STSTYLE,DTSTYLE,FTSTYLE,DEFAULTR,DEFAULTC,DBNAME,ROOTDIR,KEYORDER,MARGIN,FOOTER,LISTBUILDC,LISTBUILDV,LISTBUILDE,LISTBROWNC,LISTBROWNV,LISTBROWNE,STATUSFL,STATUSFLDT,OWNER,OWNER2)=(a.SID,a.LOGONID,a.ROW,a.OPTION,a.SELECTVALUE,a.SCRCOLOR,a.HILCOLOR,a.TEXTCOLOR,a.BACCOLOR,a.BEEPSOU,a.CONFIRM,a.PROMPTI,a.P1,a.P2,a.P3,a.P4,a.P5,a.P6,a.MTSTYLE,a.STSTYLE,a.DTSTYLE,a.FTSTYLE,a.DEFAULTR,a.DEFAULTC,a.DBNAME,a.ROOTDIR,a.KEYORDER,a.MARGIN,a.FOOTER,a.LISTBUILDC,a.LISTBUILDV,a.LISTBUILDE,a.LISTBROWNC,a.LISTBROWNV,a.LISTBROWNE,a.STATUSFL,a.STATUSFLDT,a.OWNER,a.OWNER2)FROM "+schemaName+".USERPROFL a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE "+schemaName+".\"USER_b\" b SET(SID,ID,CLIENT,EMPLOYEE,VENDOR,CUSTOMER,OTHERID,ALEVEL,BLEVEL,CURRPW,EXPIRY,OLDPW,TEMPORARYPASSWORD,PASSWORDHASH,ACTIVATIONKEY,RESTRICT1,RESTRICT2,RESTRICT3,ALLOW1,ALLOW2,ALLOW3,MAXPROFLROW,CPROFLROW,STATUSFL,STATUSFLDT,UCURRCALDA,PREPROCESS,NOTES,DOCMNT,OWNER,OWNER2)=(a.SID,a.ID,a.CLIENT,a.EMPLOYEE,a.VENDOR,a.CUSTOMER,a.OTHERID,a.ALEVEL,a.BLEVEL,a.CURRPW,a.EXPIRY,a.OLDPW,a.TEMPORARYPASSWORD,a.PASSWORDHASH,a.ACTIVATIONKEY,a.RESTRICT1,a.RESTRICT2,a.RESTRICT3,a.ALLOW1,a.ALLOW2,a.ALLOW3,a.MAXPROFLROW,a.CPROFLROW,a.STATUSFL,a.STATUSFLDT,a.UCURRCALDA,a.PREPROCESS,a.NOTES,a.DOCMNT,a.OWNER,a.OWNER2)FROM "+schemaName+".\"USER\" a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
if(dbProductName.equals("psql")){
 sqlScript="UPDATE "+schemaName+".\"user_b\" b SET(SID,ID,CLIENT,EMPLOYEE,VENDOR,CUSTOMER,OTHERID,ALEVEL,BLEVEL,CURRPW,EXPIRY,OLDPW,TEMPORARYPASSWORD,PASSWORDHASH,ACTIVATIONKEY,RESTRICT1,RESTRICT2,RESTRICT3,ALLOW1,ALLOW2,ALLOW3,MAXPROFLROW,CPROFLROW,STATUSFL,STATUSFLDT,UCURRCALDA,PREPROCESS,NOTES,DOCMNT,OWNER,OWNER2)=(a.SID,a.ID,a.CLIENT,a.EMPLOYEE,a.VENDOR,a.CUSTOMER,a.OTHERID,a.ALEVEL,a.BLEVEL,a.CURRPW,a.EXPIRY,a.OLDPW,a.TEMPORARYPASSWORD,a.PASSWORDHASH,a.ACTIVATIONKEY,a.RESTRICT1,a.RESTRICT2,a.RESTRICT3,a.ALLOW1,a.ALLOW2,a.ALLOW3,a.MAXPROFLROW,a.CPROFLROW,a.STATUSFL,a.STATUSFLDT,a.UCURRCALDA,a.PREPROCESS,a.NOTES,a.DOCMNT,a.OWNER,a.OWNER2)FROM "+schemaName+".\"user\" a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
}

q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE "+schemaName+".VENARTHA_b b SET(SID,CHQNUMBER,RECONCILED,VENDORC,DATE,ADDRESCODE,CHQAMT,AMTVERBOS,NOTES,ADVISEL1,ADVISEL2,ADVISEL3,STATUSFL,STATUSFLDT,OWNER,OWNER2)=(a.SID,a.CHQNUMBER,a.RECONCILED,a.VENDORC,a.DATE,a.ADDRESCODE,a.CHQAMT,a.AMTVERBOS,a.NOTES,a.ADVISEL1,a.ADVISEL2,a.ADVISEL3,a.STATUSFL,a.STATUSFLDT,a.OWNER,a.OWNER2)FROM "+schemaName+".VENARTHA a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2);UPDATE "+schemaName+".ACINTEGR_b b SET(SID,MODULEID,USAGEDESCR,USAGECODE,SETSID,ACCOUNT,EXTRAINTFIELD,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(a.SID,a.MODULEID,a.USAGEDESCR,a.USAGECODE,a.SETSID,a.ACCOUNT,a.EXTRAINTFIELD,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2)FROM "+schemaName+".ACINTEGR a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE "+schemaName+".ITEMJOB_b b SET(SID,JOBNO,MATCODE,PRODDATET,QTYALLOC,PONO,QTYOSTND,QTYALSTK,QTYISSUD,JOBTOTL,STATUSFL,CUSTOMEJ,VENDOR,STATUSFLDT,PRINTMSTAT,PRINMTFLDT,PRINTMSTATJ,PRINMTFLDTJ,TYPE,MATCODEOUT,QTYOUT,NOTES,OWNER,OWNER2)=(a.SID,a.JOBNO,a.MATCODE,a.PRODDATET,a.QTYALLOC,a.PONO,a.QTYOSTND,a.QTYALSTK,a.QTYISSUD,a.JOBTOTL,a.STATUSFL,a.CUSTOMEJ,a.VENDOR,a.STATUSFLDT,a.PRINTMSTAT,a.PRINMTFLDT,a.PRINTMSTATJ,a.PRINMTFLDTJ,a.TYPE,a.MATCODEOUT,a.QTYOUT,a.NOTES,a.OWNER,a.OWNER2)FROM "+schemaName+".ITEMJOB a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2);UPDATE "+schemaName+".ACTIVITYJOB_b b SET(SID,JOBNO,ACTIVITYCODE,PRODDATET,QTYALLOC,PONO,QTYOSTND,QTYALSTK,QTYISSUD,JOBTOTL,STATUSFL,CUSTOMEJ,VENDOR,STATUSFLDT,PRINTMSTAT,PRINMTFLDT,PRINTMSTATJ,PRINMTFLDTJ,TYPE,MATCODEOUT,QTYOUT,NOTES,OWNER,OWNER2,DOCMNT)=(a.SID,a.JOBNO,a.ACTIVITYCODE,a.PRODDATET,a.QTYALLOC,a.PONO,a.QTYOSTND,a.QTYALSTK,a.QTYISSUD,a.JOBTOTL,a.STATUSFL,a.CUSTOMEJ,a.VENDOR,a.STATUSFLDT,a.PRINTMSTAT,a.PRINMTFLDT,a.PRINTMSTATJ,a.PRINMTFLDTJ,a.TYPE,a.MATCODEOUT,a.QTYOUT,a.NOTES,a.OWNER,a.OWNER2,a.DOCMNT)FROM "+schemaName+".ACTIVITYJOB a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE "+schemaName+".PROCESSATTRIBUTES_b b SET(SID,PDETAILS,NAME,VALUE,TYPE,RANGE,STEP,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(a.SID,a.PDETAILS,a.NAME,a.VALUE,a.TYPE,a.RANGE,a.STEP,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2)FROM "+schemaName+".PROCESSATTRIBUTES a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE "+schemaName+".PROCESSDETAILS_b b SET(SID,PROCESS,CPONO,MATCODE,CUSTOMER,SDATET,DURATIONH,DURATIONM,STIMEH,STIMEM,STIMEAMPM,EDATET,PRIORITY,PERCNTDONE,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(a.SID,a.PROCESS,a.CPONO,a.MATCODE,a.CUSTOMER,a.SDATET,a.DURATIONH,a.DURATIONM,a.STIMEH,a.STIMEM,a.STIMEAMPM,a.EDATET,a.PRIORITY,a.PERCNTDONE,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2)FROM "+schemaName+".PROCESSDETAILS a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE "+schemaName+".VENQUOTE_b b SET(SID,PURCHSNO,DELVDATET,VENDOR,MATCODE,REPLICATE,AMOUNTTOTAL,AMOUNTOSTNDT,QTYTOTAL,QTYOSTNDT,STATUSFL,CINVOICE,JOBNO,VPONO,RFPORD,STATUSFLDT,RCPONO,ODATET,TERMS,PRIORITY,PRINTMSTAT,PRINMTFLDT,TYPE,VINVOICE,ATTACH,SHIPCODE,AGENT,BASEAMOUNTT,DELIVCHRGT,MISCCHRGT,TAX1AMTT,TAX2AMTT,TAX3AMTT,STARTDATET,NOTES,OWNER,OWNER2,DOCMNT)=(a.SID,a.PURCHSNO,a.DELVDATET,a.VENDOR,a.MATCODE,a.REPLICATE,a.AMOUNTTOTAL,a.AMOUNTOSTNDT,a.QTYTOTAL,a.QTYOSTNDT,a.STATUSFL,a.CINVOICE,a.JOBNO,a.VPONO,a.RFPORD,a.STATUSFLDT,a.RCPONO,a.ODATET,a.TERMS,a.PRIORITY,a.PRINTMSTAT,a.PRINMTFLDT,a.TYPE,a.VINVOICE,a.ATTACH,a.SHIPCODE,a.AGENT,a.BASEAMOUNTT,a.DELIVCHRGT,a.MISCCHRGT,a.TAX1AMTT,a.TAX2AMTT,a.TAX3AMTT,a.STARTDATET,a.NOTES,a.OWNER,a.OWNER2,a.DOCMNT)FROM "+schemaName+".VENQUOTE a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2);UPDATE "+schemaName+".VENDORDERS_b b SET(SID,PURCHSNO,DELVDATET,VENDOR,MATCODE,AMOUNTTOTAL,AMOUNTOSTNDT,QTYTOTAL,QTYOSTNDT,STATUSFL,JOBNO,VENDQNO,RFPORD,STATUSFLDT,RCPONO,ODATET,TERMS,PRIORITY,PRINTMSTAT,PRINMTFLDT,TYPE,VINVOICE,ATTACH,SHIPCODE,AGENT,BASEAMOUNTT,DELIVCHRGT,MISCCHRGT,TAX1AMTT,TAX2AMTT,TAX3AMTT,STARTDATET,NOTES,OWNER,OWNER2,DOCMNT)=(a.SID,a.PURCHSNO,a.DELVDATET,a.VENDOR,a.MATCODE,a.AMOUNTTOTAL,a.AMOUNTOSTNDT,a.QTYTOTAL,a.QTYOSTNDT,a.STATUSFL,a.JOBNO,a.VENDQNO,a.RFPORD,a.STATUSFLDT,a.RCPONO,a.ODATET,a.TERMS,a.PRIORITY,a.PRINTMSTAT,a.PRINMTFLDT,a.TYPE,a.VINVOICE,a.ATTACH,a.SHIPCODE,a.AGENT,a.BASEAMOUNTT,a.DELIVCHRGT,a.MISCCHRGT,a.TAX1AMTT,a.TAX2AMTT,a.TAX3AMTT,a.STARTDATET,a.NOTES,a.OWNER,a.OWNER2,a.DOCMNT)FROM "+schemaName+".VENDORDERS a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2);UPDATE "+schemaName+".VSHIPMEN_b b SET(SID,SHIPCODE,MATCODE,SHIPPER,PONO,CPONO,INVOICE,AMOUNTTOTAL,AMOUNTOSTNDT,QTYTOTAL,QTYOSTNDT,CARRIER,TYPE,SHIPDATET,SHIPDATETA,TARENO,PACKNO,VENDOR,CUSTOMER,BILLTOCODE,BILLTOSAMEASSHIPTO,SHIPTOCODE,NOTES,STATUSFL,STATUSFLDT,SERIALNO,PRINTMSTAT,PRINMTFLDT,OWNER,OWNER2)=(a.SID,a.SHIPCODE,a.MATCODE,a.SHIPPER,a.PONO,a.CPONO,a.INVOICE,a.AMOUNTTOTAL,a.AMOUNTOSTNDT,a.QTYTOTAL,a.QTYOSTNDT,a.CARRIER,a.TYPE,a.SHIPDATET,a.SHIPDATETA,a.TARENO,a.PACKNO,a.VENDOR,a.CUSTOMER,a.BILLTOCODE,a.BILLTOSAMEASSHIPTO,a.SHIPTOCODE,a.NOTES,a.STATUSFL,a.STATUSFLDT,a.SERIALNO,a.PRINTMSTAT,a.PRINMTFLDT,a.OWNER,a.OWNER2)FROM "+schemaName+".VSHIPMEN a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE "+schemaName+".CUQUOTE_b b SET(SID,PURCHSNO,DELVDATET,VENDOR,AMOUNTTOTAL,AMOUNTOSTNDT,QTYTOTAL,QTYOSTNDT,STATUSFL,CUSTOMER,MATCODE,REPLICATE,CINVOICE,ORDPRICE,JOBNO,VPONO,QUOORDT,STATUSFLDT,PRINTMSTAT,PRINMTFLDT,TYPE,TERMS,PRIORITY,ODATET,SHIPCODE,ACTIVITYCODE,AGENT,BASEAMOUNTT,DELIVCHRGT,MISCCHRGT,TAX1AMTT,TAX2AMTT,TAX3AMTT,ATTACH,NOTES,OWNER,OWNER2,DOCMNT)=(a.SID,a.PURCHSNO,a.DELVDATET,a.VENDOR,a.AMOUNTTOTAL,a.AMOUNTOSTNDT,a.QTYTOTAL,a.QTYOSTNDT,a.STATUSFL,a.CUSTOMER,a.MATCODE,a.REPLICATE,a.CINVOICE,a.ORDPRICE,a.JOBNO,a.VPONO,a.QUOORDT,a.STATUSFLDT,a.PRINTMSTAT,a.PRINMTFLDT,a.TYPE,a.TERMS,a.PRIORITY,a.ODATET,a.SHIPCODE,a.ACTIVITYCODE,a.AGENT,a.BASEAMOUNTT,a.DELIVCHRGT,a.MISCCHRGT,a.TAX1AMTT,a.TAX2AMTT,a.TAX3AMTT,a.ATTACH,a.NOTES,a.OWNER,a.OWNER2,a.DOCMNT)FROM "+schemaName+".CUQUOTE a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2);UPDATE "+schemaName+".CUORDERS_b b SET(SID,PURCHSNO,DELVDATET,CUSTOMER,MATCODE,CUQUOTE,CINVOICE,JOBNO,AMOUNTTOTAL,AMOUNTOSTNDT,QTYTOTAL,QTYOSTNDT,VPONO,RFPORD,RCPONO,ODATET,TERMS,PRIORITY,PRINTMSTAT,PRINMTFLDT,TYPE,VINVOICE,ATTACH,AGENT,BASEAMOUNTT,DELIVCHRGT,MISCCHRGT,TAX1AMTT,TAX2AMTT,TAX3AMTT,STARTDATET,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2,DOCMNT,SHIPCODEFROMPAY,SHIPCODE,BARPO)=(a.SID,a.PURCHSNO,a.DELVDATET,a.CUSTOMER,a.MATCODE,a.CUQUOTE,a.CINVOICE,a.JOBNO,a.AMOUNTTOTAL,a.AMOUNTOSTNDT,a.QTYTOTAL,a.QTYOSTNDT,a.VPONO,a.RFPORD,a.RCPONO,a.ODATET,a.TERMS,a.PRIORITY,a.PRINTMSTAT,a.PRINMTFLDT,a.TYPE,a.VINVOICE,a.ATTACH,a.AGENT,a.BASEAMOUNTT,a.DELIVCHRGT,a.MISCCHRGT,a.TAX1AMTT,a.TAX2AMTT,a.TAX3AMTT,a.STARTDATET,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2,a.DOCMNT,a.SHIPCODEFROMPAY,a.SHIPCODE,a.BARPO)FROM "+schemaName+".CUORDERS a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE "+schemaName+".CUINVOICE_b b SET(SID,INVOICE,CUSTOMER,MATCODE,INVODATE,AMOUNTTOTAL,AMOUNTOSTNDT,QTYTOTAL,QTYOSTNDT,PONO,REF1TYP,REF1CODE,SHIPDATET,SHIPTYPE,SHIPCODE,TERMS,STATUSFL,STATUSFLDT,TERMSDAT,DISCOUNP,DISCOUDT,DISCOUDS,NETDDAT,NETDDYS,FOB,TYPE,INTEGRSET,ATTACH,BASEAMOUNTT,DELIVCHRGT,MISCCHRGT,TAX1AMTT,TAX2AMTT,TAX3AMTT,AGENT,NOTES,PRINTMSTAT,PRINMTFLDT,OWNER,OWNER2,DOCMNT,BARINVOICE)=(a.SID,a.INVOICE,a.CUSTOMER,a.MATCODE,a.INVODATE,a.AMOUNTTOTAL,a.AMOUNTOSTNDT,a.QTYTOTAL,a.QTYOSTNDT,a.PONO,a.REF1TYP,a.REF1CODE,a.SHIPDATET,a.SHIPTYPE,a.SHIPCODE,a.TERMS,a.STATUSFL,a.STATUSFLDT,a.TERMSDAT,a.DISCOUNP,a.DISCOUDT,a.DISCOUDS,a.NETDDAT,a.NETDDYS,a.FOB,a.TYPE,a.INTEGRSET,a.ATTACH,a.BASEAMOUNTT,a.DELIVCHRGT,a.MISCCHRGT,a.TAX1AMTT,a.TAX2AMTT,a.TAX3AMTT,a.AGENT,a.NOTES,a.PRINTMSTAT,a.PRINMTFLDT,a.OWNER,a.OWNER2,a.DOCMNT,a.BARINVOICE)FROM "+schemaName+".CUINVOICE a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2);UPDATE "+schemaName+".SHIPMENT_b b SET(SID,SHIPCODE,MATCODE,SHIPPER,PONO,CPONO,INVOICE,AMOUNTTOTAL,AMOUNTOSTNDT,QTYTOTAL,QTYOSTNDT,CARRIER,TYPE,SHIPDATET,SHIPDATETA,TARENO,PACKNO,CUSTOMER,BILLTOCODE,BILLTOSAMEASSHIPTO,SHIPTOCODE,NOTES,STATUSFL,STATUSFLDT,SERIALNO,PRINTMSTAT,PRINMTFLDT,OWNER,OWNER2,BARSHIPCOD)=(a.SID,a.SHIPCODE,a.MATCODE,a.SHIPPER,a.PONO,a.CPONO,a.INVOICE,a.AMOUNTTOTAL,a.AMOUNTOSTNDT,a.QTYTOTAL,a.QTYOSTNDT,a.CARRIER,a.TYPE,a.SHIPDATET,a.SHIPDATETA,a.TARENO,a.PACKNO,a.CUSTOMER,a.BILLTOCODE,a.BILLTOSAMEASSHIPTO,a.SHIPTOCODE,a.NOTES,a.STATUSFL,a.STATUSFLDT,a.SERIALNO,a.PRINTMSTAT,a.PRINMTFLDT,a.OWNER,a.OWNER2,a.BARSHIPCOD)FROM "+schemaName+".SHIPMENT a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE "+schemaName+".EMPLORDERS_b b SET(SID,PURCHSNO,DELVDATET,EMPLOYEE,MATCODE,AMOUNTTOTAL,AMOUNTOSTNDT,QTYTOTAL,QTYOSTNDT,STATUSFL,JOBNO,VPONO,RFPORD,STATUSFLDT,RCPONO,ODATET,TERMS,PRIORITY,PRINTMSTAT,PRINMTFLDT,TYPE,VINVOICE,ATTACH,SHIPCODE,AGENT,BASEAMOUNTT,DELIVCHRGT,MISCCHRGT,TAX1AMTT,TAX2AMTT,TAX3AMTT,STARTDATET,NOTES,OWNER,OWNER2,DOCMNT)=(a.SID,a.PURCHSNO,a.DELVDATET,a.EMPLOYEE,a.MATCODE,a.AMOUNTTOTAL,a.AMOUNTOSTNDT,a.QTYTOTAL,a.QTYOSTNDT,a.STATUSFL,a.JOBNO,a.VPONO,a.RFPORD,a.STATUSFLDT,a.RCPONO,a.ODATET,a.TERMS,a.PRIORITY,a.PRINTMSTAT,a.PRINMTFLDT,a.TYPE,a.VINVOICE,a.ATTACH,a.SHIPCODE,a.AGENT,a.BASEAMOUNTT,a.DELIVCHRGT,a.MISCCHRGT,a.TAX1AMTT,a.TAX2AMTT,a.TAX3AMTT,a.STARTDATET,a.NOTES,a.OWNER,a.OWNER2,a.DOCMNT)FROM "+schemaName+".EMPLORDERS a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2);UPDATE "+schemaName+".HLOGFILE_b b SET(SID,SERIALNO,MATCODE,QUANRECD,VENDOR,LOCATION,RECVRPT,INFLG,PHY,DATETIN,DATETOUT,JOBNO,PRINTMSTAT,PRINMTFLDT,PONO,SCANDATET,QUANISSD,BUTT,STATUSFL,QUANREJD,CUSTOMER,CPONO,CUSTOMEJ,ORGCOST,ORGPONO,ORGJOBNO,ALTSERNO,SELPRICE,PHYSQTY,SPERSON,CARTONID,CARTONPR,PACKCODE,TARECODE,SHIPCODE,TYPE,STATUSFLDT,OWNER,OWNER2)=(a.SID,a.SERIALNO,a.MATCODE,a.QUANRECD,a.VENDOR,a.LOCATION,a.RECVRPT,a.INFLG,a.PHY,a.DATETIN,a.DATETOUT,a.JOBNO,a.PRINTMSTAT,a.PRINMTFLDT,a.PONO,a.SCANDATET,a.QUANISSD,a.BUTT,a.STATUSFL,a.QUANREJD,a.CUSTOMER,a.CPONO,a.CUSTOMEJ,a.ORGCOST,a.ORGPONO,a.ORGJOBNO,a.ALTSERNO,a.SELPRICE,a.PHYSQTY,a.SPERSON,a.CARTONID,a.CARTONPR,a.PACKCODE,a.TARECODE,a.SHIPCODE,a.TYPE,a.STATUSFLDT,a.OWNER,a.OWNER2)FROM "+schemaName+".HLOGFILE a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE "+schemaName+".CPAYMENT_b b SET(SID,PAYMENT,CUSTOMER,CINVOICE,CHEQDATE,PAYMENTDUEDATE,POSTINGPERIOD,MATCODE,INTEGRSET,ACCOUNT,AMOUNTTOTAL,AMOUNTOSTNDT,AMOUNTIN,QTYTOTAL,QTYOSTNDT,DISCOUNT,BASEAMOUNTT,DELIVCHRGT,MISCCHRGT,TAX1AMTT,TAX2AMTT,TAX3AMTT,PAYTYPE,PAYBYID,PAYBYDATE,CURRENCY,CONVRATE,LOCAMOUNTT,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(a.SID,a.PAYMENT,a.CUSTOMER,a.CINVOICE,a.CHEQDATE,a.PAYMENTDUEDATE,a.POSTINGPERIOD,a.MATCODE,a.INTEGRSET,a.ACCOUNT,a.AMOUNTTOTAL,a.AMOUNTOSTNDT,a.AMOUNTIN,a.QTYTOTAL,a.QTYOSTNDT,a.DISCOUNT,a.BASEAMOUNTT,a.DELIVCHRGT,a.MISCCHRGT,a.TAX1AMTT,a.TAX2AMTT,a.TAX3AMTT,a.PAYTYPE,a.PAYBYID,a.PAYBYDATE,a.CURRENCY,a.CONVRATE,a.LOCAMOUNTT,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2)FROM "+schemaName+".CPAYMENT a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2);UPDATE "+schemaName+".MACHINE_b b SET(SID,MACHINECODE,QUANTITY,DESCRIPT,DATEADDED,SOURCE1,SOURCE2,UPCCODE,COST,REPLCOST,SELPRICE,SPRICOLD,SPRICNEW,SPRICEFFDT,SHIPCODE,PRINTMSTAT,PRINMTFLDT,MISCCODE1,MISCCODE2,QTYLEVEL1,UNIT,CASEQTY,TYPE,TAX1,TAX2,TAX3,ALIASCODE,PARENTCODE,AVGPRICE,AVGCOST,STATUSFL,STATUSFLDT,SUBCODESN,SUBCODESN2,SUBCODESN3,CUORDQTY,VENORQTY,CUPICQTY,VENPIQTY,CUINVQTY,CUSHIQTY,VENSHQTY,EFFDATE,INTEGRSET,NOTES,DOCMNT,OWNER,OWNER2,BARUPC)=(a.SID,a.MACHINECODE,a.QUANTITY,a.DESCRIPT,a.DATEADDED,a.SOURCE1,a.SOURCE2,a.UPCCODE,a.COST,a.REPLCOST,a.SELPRICE,a.SPRICOLD,a.SPRICNEW,a.SPRICEFFDT,a.SHIPCODE,a.PRINTMSTAT,a.PRINMTFLDT,a.MISCCODE1,a.MISCCODE2,a.QTYLEVEL1,a.UNIT,a.CASEQTY,a.TYPE,a.TAX1,a.TAX2,a.TAX3,a.ALIASCODE,a.PARENTCODE,a.AVGPRICE,a.AVGCOST,a.STATUSFL,a.STATUSFLDT,a.SUBCODESN,a.SUBCODESN2,a.SUBCODESN3,a.CUORDQTY,a.VENORQTY,a.CUPICQTY,a.VENPIQTY,a.CUINVQTY,a.CUSHIQTY,a.VENSHQTY,a.EFFDATE,a.INTEGRSET,a.NOTES,a.DOCMNT,a.OWNER,a.OWNER2,a.BARUPC)FROM "+schemaName+".MACHINE a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2);UPDATE "+schemaName+".GROUPMEMBERS_b b SET(SID,GROUPID,MEMBERID,DESCRIPT,SOURCETYPE,MEMBEREM,MEMBERCU,MEMBERVE,MEMBERIT,MEMBERAC,MEMBERMA,TYPE,CURRPW,EXPIRY,STATUSFL,STATUSFLDT,OWNER,OWNER2)=(a.SID,a.GROUPID,a.MEMBERID,a.DESCRIPT,a.SOURCETYPE,a.MEMBEREM,a.MEMBERCU,a.MEMBERVE,a.MEMBERIT,a.MEMBERAC,a.MEMBERMA,a.TYPE,a.CURRPW,a.EXPIRY,a.STATUSFL,a.STATUSFLDT,a.OWNER,a.OWNER2)FROM "+schemaName+".GROUPMEMBERS a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE "+schemaName+".ITEMBOM_b b SET(SID,BOMCODE,DESCRIPT,QUANTITY,MODE,STATUSFL,STATUSFLDT,OWNER,OWNER2)=(a.SID,a.BOMCODE,a.DESCRIPT,a.QUANTITY,a.MODE,a.STATUSFL,a.STATUSFLDT,a.OWNER,a.OWNER2)FROM "+schemaName+".ITEMBOM a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2);UPDATE "+schemaName+".ITEMBOMDETAILS_b b SET(SID,BOMCODE,MATCODE,MODE,SUBQTY,STATUSFL,STATUSFLDT,OWNER,OWNER2)=(a.SID,a.BOMCODE,a.MATCODE,a.MODE,a.SUBQTY,a.STATUSFL,a.STATUSFLDT,a.OWNER,a.OWNER2)FROM "+schemaName+".ITEMBOMDETAILS a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2);UPDATE "+schemaName+".TASK_b b SET(SID,TASKID,DESCRIPT,ACTIVITYCODE,PROJECTTEAM,RESOURCE,MODE,ESTSTART,CALCSTART,ACTLSTART,ESTEND,CALCEND,ACTLEND,SUBQTY,BOMCODE,LOCATION,STATUSFL,STATUSFLDT,OWNER,OWNER2)=(a.SID,a.TASKID,a.DESCRIPT,a.ACTIVITYCODE,a.PROJECTTEAM,a.RESOURCE,a.MODE,a.ESTSTART,a.CALCSTART,a.ACTLSTART,a.ESTEND,a.CALCEND,a.ACTLEND,a.SUBQTY,a.BOMCODE,a.LOCATION,a.STATUSFL,a.STATUSFLDT,a.OWNER,a.OWNER2)FROM "+schemaName+".TASK a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE "+schemaName+".VINVOICE_b b SET(SID,INVOICE,VENDOR,MATCODE,INTEGRSET,INVODATE,AMOUNTTOTAL,AMOUNTOSTNDT,QTYTOTAL,QTYOSTNDT,PONO,REF1TYP,REF1CODE,SHIPDATET,SHIPTYPE,SHIPCODE,TERMS,STATUSFL,STATUSFLDT,TERMSDAT,DISCOUNP,DISCOUDT,DISCOUDS,NETDDAT,NETDDYS,FOB,TYPE,ATTACH,BASEAMOUNTT,DELIVCHRGT,MISCCHRGT,TAX1AMTT,TAX2AMTT,TAX3AMTT,AGENT,NOTES,PRINTMSTAT,PRINMTFLDT,OWNER,OWNER2,DOCMNT)=(a.SID,a.INVOICE,a.VENDOR,a.MATCODE,a.INTEGRSET,a.INVODATE,a.AMOUNTTOTAL,a.AMOUNTOSTNDT,a.QTYTOTAL,a.QTYOSTNDT,a.PONO,a.REF1TYP,a.REF1CODE,a.SHIPDATET,a.SHIPTYPE,a.SHIPCODE,a.TERMS,a.STATUSFL,a.STATUSFLDT,a.TERMSDAT,a.DISCOUNP,a.DISCOUDT,a.DISCOUDS,a.NETDDAT,a.NETDDYS,a.FOB,a.TYPE,a.ATTACH,a.BASEAMOUNTT,a.DELIVCHRGT,a.MISCCHRGT,a.TAX1AMTT,a.TAX2AMTT,a.TAX3AMTT,a.AGENT,a.NOTES,a.PRINTMSTAT,a.PRINMTFLDT,a.OWNER,a.OWNER2,a.DOCMNT)FROM "+schemaName+".VINVOICE a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2);UPDATE "+schemaName+".VPAYMENT_b b SET(SID,PAYMENT,VENDOR,VINVOICE,CHEQDATE,PAYMENTDUEDATE,POSTINGPERIOD,MATCODE,INTEGRSET,ACCOUNT,AMOUNTTOTAL,AMOUNTOSTNDT,AMOUNTIN,QTYTOTAL,QTYOSTNDT,BASEAMOUNTT,DELIVCHRGT,MISCCHRGT,TAX1AMTT,TAX2AMTT,TAX3AMTT,DISCOUNT,PAYTYPE,PAYBYID,PAYBYDATE,CURRENCY,CONVRATE,LOCAMOUNT,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(a.SID,a.PAYMENT,a.VENDOR,a.VINVOICE,a.CHEQDATE,a.PAYMENTDUEDATE,a.POSTINGPERIOD,a.MATCODE,a.INTEGRSET,a.ACCOUNT,a.AMOUNTTOTAL,a.AMOUNTOSTNDT,a.AMOUNTIN,a.QTYTOTAL,a.QTYOSTNDT,a.BASEAMOUNTT,a.DELIVCHRGT,a.MISCCHRGT,a.TAX1AMTT,a.TAX2AMTT,a.TAX3AMTT,a.DISCOUNT,a.PAYTYPE,a.PAYBYID,a.PAYBYDATE,a.CURRENCY,a.CONVRATE,a.LOCAMOUNT,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2)FROM "+schemaName+".VPAYMENT a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE "+schemaName+".WAGEEARNERAUX_b b SET(SID,WAGEEARNERID,LINE,SIN,WCBYTDL,WCBYTDN,INSYTDL,INSYTDN,VACATONYL,VACATONYN,PAYYTDL,FPENSIYTL,PPENSIYTL,ITAXYTDL,PTAXYTDL,PAYYTDN,FPENSIYTN,PPENSIYTN,ITAXYTDN,PATXYTDN,GPAYYTDL,GPAYYTDN,STATUSFL,STATUSFLDT,OWNER,OWNER2)=(a.SID,a.WAGEEARNERID,a.LINE,a.SIN,a.WCBYTDL,a.WCBYTDN,a.INSYTDL,a.INSYTDN,a.VACATONYL,a.VACATONYN,a.PAYYTDL,a.FPENSIYTL,a.PPENSIYTL,a.ITAXYTDL,a.PTAXYTDL,a.PAYYTDN,a.FPENSIYTN,a.PPENSIYTN,a.ITAXYTDN,a.PATXYTDN,a.GPAYYTDL,a.GPAYYTDN,a.STATUSFL,a.STATUSFLDT,a.OWNER,a.OWNER2)FROM "+schemaName+".WAGEEARNERAUX a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2);UPDATE "+schemaName+".Rgenapp_b b SET(SID,APPNAME,DESCRIPT,APPTYPE,APPWACCOUNTING,APPWEMAIL,APPWJMSMQ,APPVENDOR,APPVERSION,APPPLATFORM,APPMODELPKG,APPACTIONPKG,APPSKIN,APPDEPLOYTYPE,CREATEFIDATA,REVENGDATA,INITIALIZEFIDATA,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(a.SID,a.APPNAME,a.DESCRIPT,a.APPTYPE,a.APPWACCOUNTING,a.APPWEMAIL,a.APPWJMSMQ,a.APPVENDOR,a.APPVERSION,a.APPPLATFORM,a.APPMODELPKG,a.APPACTIONPKG,a.APPSKIN,a.APPDEPLOYTYPE,a.CREATEFIDATA,a.REVENGDATA,a.INITIALIZEFIDATA,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2)FROM "+schemaName+".Rgenapp a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE "+schemaName+".RGENDB_b b SET(SID,DBNAME,DESCRIPT,DBTYPE,DBVENDOR,DBVERSION,DBPLATFORM,APPCODE,SQLDRIVER,SQLURL,SQLUSER,SQLPASSWORD,SQLCLASSPATH,SQLCREATEDBSCRIPT,SQLDROPDBSCRIPT,SQLCREATETBLSSCRIPT,SQLLOADTBLSSCRIPT,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(a.SID,a.DBNAME,a.DESCRIPT,a.DBTYPE,a.DBVENDOR,a.DBVERSION,a.DBPLATFORM,a.APPCODE,a.SQLDRIVER,a.SQLURL,a.SQLUSER,a.SQLPASSWORD,a.SQLCLASSPATH,a.SQLCREATEDBSCRIPT,a.SQLDROPDBSCRIPT,a.SQLCREATETBLSSCRIPT,a.SQLLOADTBLSSCRIPT,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2)FROM "+schemaName+".RGENDB a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE "+schemaName+".RGENTABLE_b b SET(SID,TABLENAME,DBCODE,INADDMENU,INLISTMENU,INTRANSACTIONMENU,INREPORTMENU,INGRAPHSMENU,INMAILINGMENU,INGENERATEMENU,INADMINMENU,INMAINTENANCEMENU,INLABELSMENU,INSKIPMENU,INCUSTOM1MENU,MENULEVEL,MENUROLE,MENULABELGROUP,SUBMENUSEQUENCE,USAGESCOPE,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(a.SID,a.TABLENAME,a.DBCODE,a.INADDMENU,a.INLISTMENU,a.INTRANSACTIONMENU,a.INREPORTMENU,a.INGRAPHSMENU,a.INMAILINGMENU,a.INGENERATEMENU,a.INADMINMENU,a.INMAINTENANCEMENU,a.INLABELSMENU,a.INSKIPMENU,a.INCUSTOM1MENU,a.MENULEVEL,a.MENUROLE,a.MENULABELGROUP,a.SUBMENUSEQUENCE,a.USAGESCOPE,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2)FROM "+schemaName+".RGENTABLE a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2);UPDATE "+schemaName+".RGENFIELDS_b b SET(SID,DBCODE,TABLENAME,FIELDNAME,FIELDTYPE,FIELDLENGTH,INGROUP,SEQWITHINGROUP,FOCUSSEQ,FUTURE1,INITIALVALUE,KEYORADDITIONAL,KEYORADDITIONAL2,KEYORADDITIONAL3,SHOWINMENU,SHOWINREPORT,PROCESSOPTION1,PROCESSOPTION2,FDBCODE,FTABLENAME,FFIELDKEYNAME1,FFIELDKEYNAME2,FFIELDKEYNAME3,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(a.SID,a.DBCODE,a.TABLENAME,a.FIELDNAME,a.FIELDTYPE,a.FIELDLENGTH,a.INGROUP,a.SEQWITHINGROUP,a.FOCUSSEQ,a.FUTURE1,a.INITIALVALUE,a.KEYORADDITIONAL,a.KEYORADDITIONAL2,a.KEYORADDITIONAL3,a.SHOWINMENU,a.SHOWINREPORT,a.PROCESSOPTION1,a.PROCESSOPTION2,a.FDBCODE,a.FTABLENAME,a.FFIELDKEYNAME1,a.FFIELDKEYNAME2,a.FFIELDKEYNAME3,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2)FROM "+schemaName+".RGENFIELDS a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE "+schemaName+".GENOPTIONS_b b SET(SID,ROW,GENOPTIONS01,GENPURPOSE01,GENVALUE01,GENOPTIONS02,GENPURPOSE02,GENVALUE02,GENOPTIONS03,GENPURPOSE03,GENVALUE03,GENOPTIONS04,GENPURPOSE04,GENVALUE04,GENOPTIONS05,GENPURPOSE05,GENVALUE05,GENOPTIONS06,GENPURPOSE06,GENVALUE06,GENOPTIONS07,GENPURPOSE07,GENVALUE07,GENOPTIONS08,GENPURPOSE08,GENVALUE08,GENOPTIONS09,GENPURPOSE09,GENVALUE09,GENOPTIONS10,GENPURPOSE10,GENVALUE10,GENOPTIONS11,GENPURPOSE11,GENVALUE11,GENOPTIONS12,GENPURPOSE12,GENVALUE12,GENOPTIONS13,GENPURPOSE13,GENVALUE13,GENOPTIONS14,GENPURPOSE14,GENVALUE14,GENOPTIONS15,GENPURPOSE15,GENVALUE15,GENOPTIONS16,GENPURPOSE16,GENVALUE16,GENOPTIONS17,GENPURPOSE17,GENVALUE17,GENOPTIONS18,GENPURPOSE18,GENVALUE18,GENOPTIONS19,GENPURPOSE19,GENVALUE19,GENOPTIONS20,GENPURPOSE20,GENVALUE20,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(a.SID,a.ROW,a.GENOPTIONS01,a.GENPURPOSE01,a.GENVALUE01,a.GENOPTIONS02,a.GENPURPOSE02,a.GENVALUE02,a.GENOPTIONS03,a.GENPURPOSE03,a.GENVALUE03,a.GENOPTIONS04,a.GENPURPOSE04,a.GENVALUE04,a.GENOPTIONS05,a.GENPURPOSE05,a.GENVALUE05,a.GENOPTIONS06,a.GENPURPOSE06,a.GENVALUE06,a.GENOPTIONS07,a.GENPURPOSE07,a.GENVALUE07,a.GENOPTIONS08,a.GENPURPOSE08,a.GENVALUE08,a.GENOPTIONS09,a.GENPURPOSE09,a.GENVALUE09,a.GENOPTIONS10,a.GENPURPOSE10,a.GENVALUE10,a.GENOPTIONS11,a.GENPURPOSE11,a.GENVALUE11,a.GENOPTIONS12,a.GENPURPOSE12,a.GENVALUE12,a.GENOPTIONS13,a.GENPURPOSE13,a.GENVALUE13,a.GENOPTIONS14,a.GENPURPOSE14,a.GENVALUE14,a.GENOPTIONS15,a.GENPURPOSE15,a.GENVALUE15,a.GENOPTIONS16,a.GENPURPOSE16,a.GENVALUE16,a.GENOPTIONS17,a.GENPURPOSE17,a.GENVALUE17,a.GENOPTIONS18,a.GENPURPOSE18,a.GENVALUE18,a.GENOPTIONS19,a.GENPURPOSE19,a.GENVALUE19,a.GENOPTIONS20,a.GENPURPOSE20,a.GENVALUE20,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2)FROM "+schemaName+".GENOPTIONS a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE "+schemaName+".BLOBDATA_b b SET(SID,FROMTABLE,FROMKEY,QUALIFIER,SEQUENCE,TYPE,DATA,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(a.SID,a.FROMTABLE,a.FROMKEY,a.QUALIFIER,a.SEQUENCE,a.TYPE,a.DATA,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2)FROM "+schemaName+".BLOBDATA a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE "+schemaName+".CLOBDATA_b b SET(SID,FROMTABLE,FROMKEY,QUALIFIER,SEQUENCE,TYPE,DATA,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(a.SID,a.FROMTABLE,a.FROMKEY,a.QUALIFIER,a.SEQUENCE,a.TYPE,a.DATA,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2)FROM "+schemaName+".CLOBDATA a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE "+schemaName+".CONTROLUSAGEBYPERIODS_b b SET(SID,CTLUSAGETRACKERID,DESCRIPT,CONTROLCODE,CURRENCY,PERIOD0LABEL,PERIOD0B,PERIOD0,PERIODTOTALSLABEL,PERIODTOTALSB,PERIODTOTALS,PERIOD1LABEL,PERIOD1BUDGET,PERIOD1ACTUAL,PERIOD2LABEL,PERIOD2B,PERIOD2,PERIOD3LABEL,PERIOD3B,PERIOD3,PERIOD4LABEL,PERIOD4B,PERIOD4,PERIOD5LABEL,PERIOD5B,PERIOD5,PERIOD6LABEL,PERIOD6B,PERIOD6,PERIOD7LABEL,PERIOD7B,PERIOD7,PERIOD8LABEL,PERIOD8B,PERIOD8,PERIOD9LABEL,PERIOD9B,PERIOD9,PERIOD10LABEL,PERIOD10B,PERIOD10,PERIOD11LABEL,PERIOD11B,PERIOD11,PERIOD12LABEL,PERIOD12B,PERIOD12,PERIODNLABEL,PERIODNB,PERIODN,NOTES,STATUSFL,STATUSFLDT,OWNER,OWNER2)=(a.SID,a.CTLUSAGETRACKERID,a.DESCRIPT,a.CONTROLCODE,a.CURRENCY,a.PERIOD0LABEL,a.PERIOD0B,a.PERIOD0,a.PERIODTOTALSLABEL,a.PERIODTOTALSB,a.PERIODTOTALS,a.PERIOD1LABEL,a.PERIOD1BUDGET,a.PERIOD1ACTUAL,a.PERIOD2LABEL,a.PERIOD2B,a.PERIOD2,a.PERIOD3LABEL,a.PERIOD3B,a.PERIOD3,a.PERIOD4LABEL,a.PERIOD4B,a.PERIOD4,a.PERIOD5LABEL,a.PERIOD5B,a.PERIOD5,a.PERIOD6LABEL,a.PERIOD6B,a.PERIOD6,a.PERIOD7LABEL,a.PERIOD7B,a.PERIOD7,a.PERIOD8LABEL,a.PERIOD8B,a.PERIOD8,a.PERIOD9LABEL,a.PERIOD9B,a.PERIOD9,a.PERIOD10LABEL,a.PERIOD10B,a.PERIOD10,a.PERIOD11LABEL,a.PERIOD11B,a.PERIOD11,a.PERIOD12LABEL,a.PERIOD12B,a.PERIOD12,a.PERIODNLABEL,a.PERIODNB,a.PERIODN,a.NOTES,a.STATUSFL,a.STATUSFLDT,a.OWNER,a.OWNER2)FROM "+schemaName+".CONTROLUSAGEBYPERIODS a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE "+schemaName+".RESOURCE_BUNDLE_b b SET(SID,NAME,LANGUAGE,COUNTRY,VARIANT,STATUSFL,STATUSFLDT,OWNER,OWNER2)=(a.SID,a.NAME,a.LANGUAGE,a.COUNTRY,a.VARIANT,a.STATUSFL,a.STATUSFLDT,a.OWNER,a.OWNER2)FROM "+schemaName+".RESOURCE_BUNDLE a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE "+schemaName+".RESOURCE_b b SET(SID,_KEY,_VALUE,RESOURCEBUNDLE,STATUSFL,STATUSFLDT,OWNER,OWNER2)=(a.SID,a._KEY,a._VALUE,a.RESOURCEBUNDLE,a.STATUSFL,a.STATUSFLDT,a.OWNER,a.OWNER2)FROM "+schemaName+".RESOURCE a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE "+schemaName+".TRUEFALSE_b b SET(SID,TABLENAME,QUALIFIER,SHOW001,SHOW002,SHOW003,SHOW004,SHOW005,SHOW006,SHOW007,SHOW008,SHOW009,SHOW010,SHOW011,SHOW012,SHOW013,SHOW014,SHOW015,SHOW016,SHOW017,SHOW018,SHOW019,SHOW020,SHOW021,SHOW022,SHOW023,SHOW024,SHOW025,SHOW026,SHOW027,SHOW028,SHOW029,SHOW030,SHOW031,SHOW032,SHOW033,SHOW034,SHOW035,SHOW036,SHOW037,SHOW038,SHOW039,SHOW040,SHOW041,SHOW042,SHOW043,SHOW044,SHOW045,SHOW046,SHOW047,SHOW048,SHOW049,SHOW050,SHOW051,SHOW052,SHOW053,SHOW054,SHOW055,SHOW056,SHOW057,SHOW058,SHOW059,SHOW060,SHOW061,SHOW062,SHOW063,SHOW064,SHOW065,SHOW066,SHOW067,SHOW068,SHOW069,SHOW070,SHOW071,SHOW072,SHOW073,SHOW074,SHOW075,SHOW076,SHOW077,SHOW078,SHOW079,SHOW080,SHOW081,SHOW082,SHOW083,SHOW084,SHOW085,SHOW086,SHOW087,SHOW088,SHOW089,SHOW090,SHOW091,SHOW092,SHOW093,SHOW094,SHOW095,SHOW096,SHOW097,SHOW098,SHOW099,SHOW100,SHOW101,SHOW102,SHOW103,SHOW104,SHOW105,SHOW106,SHOW107,SHOW108,SHOW109,SHOW110,SHOW111,SHOW112,SHOW113,SHOW114,SHOW115,SHOW116,SHOW117,SHOW118,SHOW119,SHOW120,SHOW121,SHOW122,SHOW123,SHOW124,SHOW125,SHOW126,SHOW127,SHOW128,SHOW129,SHOW130,SHOW131,SHOW132,SHOW133,SHOW134,SHOW135,SHOW136,SHOW137,SHOW138,STATUSFL,STATUSFLDT,OWNER,OWNER2)=(a.SID,a.TABLENAME,a.QUALIFIER,a.SHOW001,a.SHOW002,a.SHOW003,a.SHOW004,a.SHOW005,a.SHOW006,a.SHOW007,a.SHOW008,a.SHOW009,a.SHOW010,a.SHOW011,a.SHOW012,a.SHOW013,a.SHOW014,a.SHOW015,a.SHOW016,a.SHOW017,a.SHOW018,a.SHOW019,a.SHOW020,a.SHOW021,a.SHOW022,a.SHOW023,a.SHOW024,a.SHOW025,a.SHOW026,a.SHOW027,a.SHOW028,a.SHOW029,a.SHOW030,a.SHOW031,a.SHOW032,a.SHOW033,a.SHOW034,a.SHOW035,a.SHOW036,a.SHOW037,a.SHOW038,a.SHOW039,a.SHOW040,a.SHOW041,a.SHOW042,a.SHOW043,a.SHOW044,a.SHOW045,a.SHOW046,a.SHOW047,a.SHOW048,a.SHOW049,a.SHOW050,a.SHOW051,a.SHOW052,a.SHOW053,a.SHOW054,a.SHOW055,a.SHOW056,a.SHOW057,a.SHOW058,a.SHOW059,a.SHOW060,a.SHOW061,a.SHOW062,a.SHOW063,a.SHOW064,a.SHOW065,a.SHOW066,a.SHOW067,a.SHOW068,a.SHOW069,a.SHOW070,a.SHOW071,a.SHOW072,a.SHOW073,a.SHOW074,a.SHOW075,a.SHOW076,a.SHOW077,a.SHOW078,a.SHOW079,a.SHOW080,a.SHOW081,a.SHOW082,a.SHOW083,a.SHOW084,a.SHOW085,a.SHOW086,a.SHOW087,a.SHOW088,a.SHOW089,a.SHOW090,a.SHOW091,a.SHOW092,a.SHOW093,a.SHOW094,a.SHOW095,a.SHOW096,a.SHOW097,a.SHOW098,a.SHOW099,a.SHOW100,a.SHOW101,a.SHOW102,a.SHOW103,a.SHOW104,a.SHOW105,a.SHOW106,a.SHOW107,a.SHOW108,a.SHOW109,a.SHOW110,a.SHOW111,a.SHOW112,a.SHOW113,a.SHOW114,a.SHOW115,a.SHOW116,a.SHOW117,a.SHOW118,a.SHOW119,a.SHOW120,a.SHOW121,a.SHOW122,a.SHOW123,a.SHOW124,a.SHOW125,a.SHOW126,a.SHOW127,a.SHOW128,a.SHOW129,a.SHOW130,a.SHOW131,a.SHOW132,a.SHOW133,a.SHOW134,a.SHOW135,a.SHOW136,a.SHOW137,a.SHOW138,a.STATUSFL,a.STATUSFLDT,a.OWNER,a.OWNER2)FROM "+schemaName+".TRUEFALSE a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
//dec18 2018 column value was missing
sqlScript="UPDATE "+schemaName+".RATE1F_b b SET(SID,USERTYPE,PRODTYPE,STEPNAME,STEP,VALUE,EFFDATE,ENDDATE,INCENTIVE,IEFFDATE,IENDDATE,STATUSFL,STATUSFLDT,OWNER,OWNER2)=(a.SID,a.USERTYPE,a.PRODTYPE,a.STEPNAME,a.STEP,a.VALUE,a.EFFDATE,a.ENDDATE,a.INCENTIVE,a.IEFFDATE,a.IENDDATE,a.STATUSFL,a.STATUSFLDT,a.OWNER,a.OWNER2)FROM "+schemaName+".RATE1F a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
*/
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
       FacesMessage.SEVERITY_INFO,bundle.getString("removed")+": "+deletedCount+" "+ bundle.getString("updated")+": "+updatedCount+" "+bundle.getString("inserted")+": "+insertedCount,""));



// update client record field carcsize to show last backupdate as a varchar
     sqlScript="update "+schemaName+".client set carcsize=:backupdts where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2Code", owner2Code).setParameter("backupdts", sdf.format(calendar.getTime()));
      q.executeUpdate();
} catch (Exception e) {
      int len=sqlScript.length();
      len=len>120?120:len;
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
       FacesMessage.SEVERITY_INFO,bundle.getString("error")+" "+bundle.getString("in")+" "+bundle.getString("backup")+" "+sqlScript.substring(0,len) + ", "+e.getMessage(),""));

}

	 return "backUp done";
}

	public String  restoreTenant() {
      //use DatabaseMetaData, as in authenticator.java, to avoid harcoding here
      //use DatabaseMetaData, as in authenticator.java, to avoid harcoding here
      //using jdbc connection to get database metadata rather than entitymanager way to be ORM neutral
      DatabaseMetaData databaseMetaData=null;
      String productName="";
      String dbProductName="hsql";
      try(Connection conn = getConnection();){
       databaseMetaData = conn.getMetaData();
       productName = databaseMetaData.getDatabaseProductName();
      } catch (Exception e) {
       log.severe("No datasouce connection or databaseMetaData, Cannot continue");
       return null;
      }
      if(productName==null || productName.isEmpty()){
       log.severe("No datasouce setup yet, check tomee.xml or standalone.xml etc. Cannot continue");
       return null;
      }
      if(productName.contains("PostgreSQL")){
       dbProductName="psql";
      }

      schemaName="genapp";//hard code for now

     String sqlScript ="";
     int deletedCount=0;
     int updatedCount=0;
     int insertedCount=0;
     int errorCount=0;
     String errMsg="";
     // 1-remove rows from main if not in backup ie any new rows in main will be removed
     // 2-insert into main if old rows in backUp
     // 3-update main if row in backup has different change time  (relies on statusfldate change)
      // follow the deletion order list produced by schemaspygui C:\schemaspygui\postgres_postgre_\deletionOrder.txt ( future use the list as input to automate )
      // insertionOrder.txt for insert, for update order does not matter because we are not dropping or adding any relation but will follow
      // insertionOrder.txt

     // remove rows from main if not in backup ie any new rows in main will be removed
      // resource_bundle,resource,clob and blob have SYSTEM records which need extra logic
      // SYSTEM records should not be deleted from main or backup table but should be copied into backup if needed ?? revisit
      // give warning before restore that any new users/passwords since last back up will be lost. We cannot exclude user table
      // because other tables are related to user
      // jay add logic to exit if backup count is below ? for resource, clobdata , client etc
      // prevent running after truncate

try{
     sqlScript="select count(*) from "+schemaName+".client_b a where  a.owner2=:owner2 ";
     Query q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     ((BigInteger) q.getSingleResult()).intValue();
     deletedCount = deletedCount +((BigInteger) q.getSingleResult()).intValue();
} catch (Exception e) {
   errorCount=errorCount+1;
   if(errorCount>20){
    errMsg=" errors>20, ending";
   }
   int len=sqlScript.length();
   len=len>120?120:len;
   FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
    FacesMessage.SEVERITY_INFO,errMsg+" "+bundle.getString("error")+" "+bundle.getString("in")+" "+bundle.getString("restore")+" "+sqlScript.substring(0,len) + ", "+e.getMessage(),""));
}

try{
     sqlScript="select count(*) from "+schemaName+".blobdata_b a where  a.owner2=:owner2 ";
     Query q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +((BigInteger) q.getSingleResult()).intValue();

     if(deletedCount == 0){
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
       FacesMessage.SEVERITY_INFO,bundle.getString("error")+" "+bundle.getString("backup")+" "+bundle.getString("empty"),""));
      return "";
     }
} catch (Exception e) {
   errorCount=errorCount+1;
   if(errorCount>20){
    errMsg=" errors>20, ending";
   }
   int len=sqlScript.length();
   len=len>120?120:len;
   FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
    FacesMessage.SEVERITY_INFO,errMsg+" "+bundle.getString("error")+" "+bundle.getString("in")+" "+bundle.getString("restore")+" "+sqlScript.substring(0,len) + ", "+e.getMessage(),""));
     deletedCount=0;
}
try{
     sqlScript="delete from "+schemaName+".serialnumbers a where  a.owner2=:owner2  and  not exists  (select sid from "+schemaName+".serialnumbers_b b where a.sid = b.sid and b.owner2=:owner2)";
     Query q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();
} catch (Exception e) {
   errorCount=errorCount+1;
   if(errorCount>20){
    errMsg=" errors>20, ending";
   }
   int len=sqlScript.length();
   len=len>120?120:len;
   FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
    FacesMessage.SEVERITY_INFO,errMsg+" "+bundle.getString("error")+" "+bundle.getString("in")+" "+bundle.getString("restore")+" "+sqlScript.substring(0,len) + ", "+e.getMessage(),""));
}
try{
     sqlScript="delete from "+schemaName+".scandate a where  a.owner2=:owner2  and  not exists  (select sid from "+schemaName+".scandate_b b where a.sid = b.sid and b.owner2=:owner2)";
     Query q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();
} catch (Exception e) {
   errorCount=errorCount+1;
   if(errorCount>20){
    errMsg=" errors>20, ending";
   }
   int len=sqlScript.length();
   len=len>120?120:len;
   FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
    FacesMessage.SEVERITY_INFO,errMsg+" "+bundle.getString("error")+" "+bundle.getString("in")+" "+bundle.getString("restore")+" "+sqlScript.substring(0,len) + ", "+e.getMessage(),""));
}
try{
     sqlScript="delete from "+schemaName+".rate1f a where  a.owner2=:owner2  and  not exists  (select sid from "+schemaName+".rate1f_b b where a.sid = b.sid and b.owner2=:owner2)";
     Query q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();
} catch (Exception e) {
   errorCount=errorCount+1;
   if(errorCount>20){
    errMsg=" errors>20, ending";
   }
   int len=sqlScript.length();
   len=len>120?120:len;
   FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
    FacesMessage.SEVERITY_INFO,errMsg+" "+bundle.getString("error")+" "+bundle.getString("in")+" "+bundle.getString("restore")+" "+sqlScript.substring(0,len) + ", "+e.getMessage(),""));
}


try{
     sqlScript="delete from "+schemaName+".options a where  a.owner2=:owner2  and  not exists  (select sid from "+schemaName+".options_b b where a.sid = b.sid and b.owner2=:owner2)";
     Query q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".nextserialno a where  a.owner2=:owner2  and  not exists  (select sid from "+schemaName+".nextserialno_b b where a.sid = b.sid and b.owner2=:owner2)";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".journal a where  a.owner2=:owner2  and  not exists  (select sid from "+schemaName+".journal_b b where a.sid = b.sid and b.owner2=:owner2)";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".jjournal a where  a.owner2=:owner2  and  not exists  (select sid from "+schemaName+".jjournal_b b where a.sid = b.sid and b.owner2=:owner2)";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".hlogfile a where  a.owner2=:owner2  and  not exists  (select sid from "+schemaName+".hlogfile_b b where a.sid = b.sid and b.owner2=:owner2)";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".genoptions a where  a.owner2=:owner2  and  not exists  (select sid from "+schemaName+".genoptions_b b where a.sid = b.sid and b.owner2=:owner2)";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".editlog a where  a.owner2=:owner2  and  not exists  (select sid from "+schemaName+".editlog_b b where a.sid = b.sid and b.owner2=:owner2)";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".clobdata a where  a.owner2=:owner2  and  not exists  (select sid from "+schemaName+".clobdata_b b where a.sid = b.sid and b.owner2=:owner2)";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     if(customIdentity.isMasterSite()){
     sqlScript="delete from "+schemaName+".clobdata a where  a.owner2='SYSTEM'  and  not exists  (select sid from "+schemaName+".clobdata_b b where a.sid = b.sid and b.owner2='SYSTEM')";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();
     }
     sqlScript="delete from "+schemaName+".cjournal a where  a.owner2=:owner2  and  not exists  (select sid from "+schemaName+".cjournal_b b where a.sid = b.sid and b.owner2=:owner2)";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".blobdata a where  a.owner2=:owner2  and  not exists  (select sid from "+schemaName+".blobdata_b b where a.sid = b.sid and b.owner2=:owner2)";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     if(customIdentity.isMasterSite()){
     sqlScript="delete from "+schemaName+".blobdata a where  a.owner2='SYSTEM'  and  not exists  (select sid from "+schemaName+".blobdata_b b where a.sid = b.sid and b.owner2='SYSTEM')";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();
     }
     sqlScript="delete from "+schemaName+".arthatbl a where  a.owner2=:owner2  and  not exists  (select sid from "+schemaName+".arthatbl_b b where a.sid = b.sid and b.owner2=:owner2)";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".arthahist a where   a.owner2=:owner2  and  not exists  (select sid from "+schemaName+".arthahist_b b where  a.sid = b.sid and b.owner2=:owner2)";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".acperiod a where   a.owner2=:owner2  and  not exists  (select sid from "+schemaName+".acperiod_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".jobassignment a where   a.owner2=:owner2  and  not exists  (select sid from "+schemaName+".jobassignment_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".schedule a where   a.owner2=:owner2  and  not exists  (select sid from "+schemaName+".schedule_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vshipmendetails a where   a.owner2=:owner2  and  not exists  (select sid from "+schemaName+".vshipmendetails_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vcontact a where   a.owner2=:owner2  and  not exists  (select sid from "+schemaName+".vcontact_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".shipmentdetails a where   a.owner2=:owner2  and  not exists  (select sid from "+schemaName+".shipmentdetails_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".ccontact a where   a.owner2=:owner2  and  not exists  (select sid from "+schemaName+".ccontact_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vendqdetails a where   a.owner2=:owner2  and  not exists  (select sid from "+schemaName+".vendqdetails_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vendpdetails a where   a.owner2=:owner2  and  not exists  (select sid from "+schemaName+".vendpdetails_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vendodetails a where   a.owner2=:owner2  and  not exists  (select sid from "+schemaName+".vendodetails_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vendidetails a where   a.owner2=:owner2  and  not exists  (select sid from "+schemaName+".vendidetails_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".resourcedetails a where   a.owner2=:owner2  and  not exists  (select sid from "+schemaName+".resourcedetails_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".emplodetails a where   a.owner2=:owner2  and  not exists  (select sid from "+schemaName+".emplodetails_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".cuqdetails a where   a.owner2=:owner2  and  not exists  (select sid from "+schemaName+".cuqdetails_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".cuodetails a where   a.owner2=:owner2  and  not exists  (select sid from "+schemaName+".cuodetails_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".cuidetails a where   a.owner2=:owner2  and  not exists  (select sid from "+schemaName+".cuidetails_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".usagebyperiods a where   a.owner2=:owner2  and  not exists  (select sid from "+schemaName+".usagebyperiods_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".rgenfields a where   a.owner2=:owner2  and  not exists  (select sid from "+schemaName+".rgenfields_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".itembomdetails a where   a.owner2=:owner2  and  not exists  (select sid from "+schemaName+".itembomdetails_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".holiday a where   a.owner2=:owner2  and  not exists  (select sid from "+schemaName+".holiday_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".gentriesdetails a where   a.owner2=:owner2  and  not exists  (select sid from "+schemaName+".gentriesdetails_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".cupdetails a where   a.owner2=:owner2  and  not exists  (select sid from "+schemaName+".cupdetails_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".activityjobdetails a where   a.owner2=:owner2  and  not exists  (select sid from "+schemaName+".activityjobdetails_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".wageearneraux a where   a.owner2=:owner2  and  not exists  (select sid from "+schemaName+".wageearneraux_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".venartha a where   a.owner2=:owner2  and  not exists  (select sid from "+schemaName+".venartha_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".userprofl a where   a.owner2=:owner2  and  not exists  (select sid from "+schemaName+".userprofl_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".resource a where   a.owner2=:owner2  and  not exists  (select sid from "+schemaName+".resource_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     if(customIdentity.isMasterSite()){
     sqlScript="delete from "+schemaName+".resource a where   a.owner2='SYSTEM'  and  not exists  (select sid from "+schemaName+".resource_b b where  a.sid = b.sid and b.owner2='SYSTEM')";
      q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();
     }

     sqlScript="delete from "+schemaName+".controlusagebyperiods a where   a.owner2=:owner2  and  not exists  (select sid from "+schemaName+".controlusagebyperiods_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".acintegr a where   a.owner2=:owner2  and  not exists  (select sid from "+schemaName+".acintegr_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".\"USER\" a where   a.owner2=:owner2  and  not exists  (select sid from "+schemaName+".\"USER_b\" b where  a.sid = b.sid and b.owner2=:owner2)";
     if(dbProductName.equals("psql")){
      sqlScript="delete from "+schemaName+".\"user\" a where   a.owner2=:owner2  and  not exists  (select sid from "+schemaName+".\"user_b\" b where  a.sid = b.sid and b.owner2=:owner2)";
     }

      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".emplorders a where   a.owner2=:owner2  and  not exists  (select sid from "+schemaName+".emplorders_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vpayment a where   a.owner2=:owner2  and  not exists  (select sid from "+schemaName+".vpayment_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".task a where   a.owner2=:owner2  and  not exists  (select sid from "+schemaName+".task_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".cpayment a where   a.owner2=:owner2  and  not exists  (select sid from "+schemaName+".cpayment_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".glentries a where   a.owner2=:owner2  and  not exists  (select sid from "+schemaName+".glentries_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".controlusagebyperiods a where   a.owner2=:owner2  and  not exists  (select sid from "+schemaName+".controlusagebyperiods_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".activityjob a where   a.owner2=:owner2  and  not exists  (select sid from "+schemaName+".activityjob_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".wageearner a where   a.owner2=:owner2  and  not exists  (select sid from "+schemaName+".wageearner_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".rgentable a where   a.owner2=:owner2  and  not exists  (select sid from "+schemaName+".rgentable_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".itemjob a where   a.owner2=:owner2  and  not exists  (select sid from "+schemaName+".itemjob_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vshipmen a where   a.owner2=:owner2  and  not exists  (select sid from "+schemaName+".vshipmen_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".groupmembers a where   a.owner2=:owner2  and  not exists  (select sid from "+schemaName+".groupmembers_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vinvoice a where   a.owner2=:owner2  and  not exists  (select sid from "+schemaName+".vinvoice_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".shipment a where   a.owner2=:owner2  and  not exists  (select sid from "+schemaName+".shipment_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vendorders a where   a.owner2=:owner2  and  not exists  (select sid from "+schemaName+".vendorders_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".cuinvoice a where   a.owner2=:owner2  and  not exists  (select sid from "+schemaName+".cuinvoice_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".cuorders a where   a.owner2=:owner2  and  not exists  (select sid from "+schemaName+".cuorders_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".project a where   a.owner2=:owner2  and  not exists  (select sid from "+schemaName+".project_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".outline a where   a.owner2=:owner2  and  not exists  (select sid from "+schemaName+".outline_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".venquote a where   a.owner2=:owner2  and  not exists  (select sid from "+schemaName+".venquote_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".cuquote a where   a.owner2=:owner2  and  not exists  (select sid from "+schemaName+".cuquote_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".machine a where   a.owner2=:owner2  and  not exists  (select sid from "+schemaName+".machine_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".activity a where   a.owner2=:owner2  and  not exists  (select sid from "+schemaName+".activity_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".item a where   a.owner2=:owner2  and  not exists  (select sid from "+schemaName+".item_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".employee a where   a.owner2=:owner2  and  not exists  (select sid from "+schemaName+".employee_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".customer a where   a.owner2=:owner2  and  not exists  (select sid from "+schemaName+".customer_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vendor a where   a.owner2=:owner2  and  not exists  (select sid from "+schemaName+".vendor_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".location a where   a.owner2=:owner2  and  not exists  (select sid from "+schemaName+".location_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".account a where   a.owner2=:owner2  and  not exists  (select sid from "+schemaName+".account_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".rgendb a where   a.owner2=:owner2  and  not exists  (select sid from "+schemaName+".rgendb_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".company a where   a.owner2=:owner2  and  not exists  (select sid from "+schemaName+".company_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".rollupgroup a where   a.owner2=:owner2  and  not exists  (select sid from "+schemaName+".rollupgroup_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".rgenapp a where   a.owner2=:owner2  and  not exists  (select sid from "+schemaName+".rgenapp_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".resource_bundle a where   a.owner2=:owner2  and  not exists  (select sid from "+schemaName+".resource_bundle_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     if(customIdentity.isMasterSite()){
     sqlScript="delete from "+schemaName+".resource_bundle a where   a.owner2=:owner2  and  not exists  (select sid from "+schemaName+".resource_bundle_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", "SYSTEM");
     deletedCount = deletedCount +q.executeUpdate();
     }

     sqlScript="delete from "+schemaName+".perioddates a where   a.owner2=:owner2  and  not exists  (select sid from "+schemaName+".perioddates_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".itembom a where   a.owner2=:owner2  and  not exists  (select sid from "+schemaName+".itembom_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".control a where   a.owner2=:owner2  and  not exists  (select sid from "+schemaName+".control_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".client a where   a.owner2=:owner2  and  not exists  (select sid from "+schemaName+".client_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".residency a where   a.owner2=:owner2  and  not exists  (select sid from "+schemaName+".residency_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".membersgroup a where   a.owner2=:owner2  and  not exists  (select sid from "+schemaName+".membersgroup_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".division a where   a.owner2=:owner2  and  not exists  (select sid from "+schemaName+".division_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".department a where   a.owner2=:owner2  and  not exists  (select sid from "+schemaName+".department_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".address a where   a.owner2=:owner2  and  not exists  (select sid from "+schemaName+".address_b b where  a.sid = b.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();




     // insert into main if old rows in backUp

      sqlScript="insert into "+schemaName+".address select * from "+schemaName+".address_b b where  b.owner2=:owner2  and  not exists (select sid from "+schemaName+".address  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".department select * from "+schemaName+".department_b b where  b.owner2=:owner2  and  not exists (select sid from "+schemaName+".department  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".division select * from "+schemaName+".division_b b where  b.owner2=:owner2  and  not exists (select sid from "+schemaName+".division  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".membersgroup select * from "+schemaName+".membersgroup_b b where  b.owner2=:owner2  and  not exists (select sid from "+schemaName+".membersgroup  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".residency select * from "+schemaName+".residency_b b where  b.owner2=:owner2  and  not exists (select sid from "+schemaName+".residency  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".client select * from "+schemaName+".client_b b where  b.owner2=:owner2  and  not exists (select sid from "+schemaName+".client  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".control select * from "+schemaName+".control_b b where  b.owner2=:owner2  and  not exists (select sid from "+schemaName+".control  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".itembom select * from "+schemaName+".itembom_b b where  b.owner2=:owner2  and  not exists (select sid from "+schemaName+".itembom  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".perioddates select * from "+schemaName+".perioddates_b b where  b.owner2=:owner2  and  not exists (select sid from "+schemaName+".perioddates  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".resource_bundle select * from "+schemaName+".resource_bundle_b b where  b.owner2=:owner2  and  not exists (select sid from "+schemaName+".resource_bundle  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      if(customIdentity.isMasterSite()){
      sqlScript="insert into "+schemaName+".resource_bundle select * from "+schemaName+".resource_bundle_b b where  b.owner2='SYSTEM'  and  not exists (select sid from "+schemaName+".resource_bundle  a where b.sid = a.sid and a.owner2='SYSTEM')";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      }

      sqlScript="insert into "+schemaName+".rgenapp select * from "+schemaName+".rgenapp_b b where  b.owner2=:owner2  and  not exists (select sid from "+schemaName+".rgenapp  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".rollupgroup select * from "+schemaName+".rollupgroup_b b where  b.owner2=:owner2  and  not exists (select sid from "+schemaName+".rollupgroup  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".company select * from "+schemaName+".company_b b where  b.owner2=:owner2  and  not exists (select sid from "+schemaName+".company  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".rgendb select * from "+schemaName+".rgendb_b b where  b.owner2=:owner2  and  not exists (select sid from "+schemaName+".rgendb  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".account select * from "+schemaName+".account_b b where  b.owner2=:owner2  and  not exists (select sid from "+schemaName+".account  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".location select * from "+schemaName+".location_b b where  b.owner2=:owner2  and  not exists (select sid from "+schemaName+".location  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".vendor select * from "+schemaName+".vendor_b b where  b.owner2=:owner2  and  not exists (select sid from "+schemaName+".vendor  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".customer select * from "+schemaName+".customer_b b where  b.owner2=:owner2  and  not exists (select sid from "+schemaName+".customer  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".employee select * from "+schemaName+".employee_b b where  b.owner2=:owner2  and  not exists (select sid from "+schemaName+".employee  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".item select * from "+schemaName+".item_b b where  b.owner2=:owner2  and  not exists (select sid from "+schemaName+".item  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".activity select * from "+schemaName+".activity_b b where  b.owner2=:owner2  and  not exists (select sid from "+schemaName+".activity  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".machine select * from "+schemaName+".machine_b b where  b.owner2=:owner2  and  not exists (select sid from "+schemaName+".machine  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".cuquote select * from "+schemaName+".cuquote_b b where  b.owner2=:owner2  and  not exists (select sid from "+schemaName+".cuquote  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".venquote select * from "+schemaName+".venquote_b b where  b.owner2=:owner2  and  not exists (select sid from "+schemaName+".venquote  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".outline select * from "+schemaName+".outline_b b where  b.owner2=:owner2  and  not exists (select sid from "+schemaName+".outline  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".project select * from "+schemaName+".project_b b where  b.owner2=:owner2  and  not exists (select sid from "+schemaName+".project  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".cuorders select * from "+schemaName+".cuorders_b b where  b.owner2=:owner2  and  not exists (select sid from "+schemaName+".cuorders  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".cuinvoice select * from "+schemaName+".cuinvoice_b b where  b.owner2=:owner2  and  not exists (select sid from "+schemaName+".cuinvoice  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".vendorders select * from "+schemaName+".vendorders_b b where  b.owner2=:owner2  and  not exists (select sid from "+schemaName+".vendorders  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".shipment select * from "+schemaName+".shipment_b b where  b.owner2=:owner2  and  not exists (select sid from "+schemaName+".shipment  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".vinvoice select * from "+schemaName+".vinvoice_b b where  b.owner2=:owner2  and  not exists (select sid from "+schemaName+".vinvoice  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".groupmembers select * from "+schemaName+".groupmembers_b b where  b.owner2=:owner2  and  not exists (select sid from "+schemaName+".groupmembers  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".vshipmen select * from "+schemaName+".vshipmen_b b where  b.owner2=:owner2  and  not exists (select sid from "+schemaName+".vshipmen  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".itemjob select * from "+schemaName+".itemjob_b b where  b.owner2=:owner2  and  not exists (select sid from "+schemaName+".itemjob  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".rgentable select * from "+schemaName+".rgentable_b b where  b.owner2=:owner2  and  not exists (select sid from "+schemaName+".rgentable  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".wageearner select * from "+schemaName+".wageearner_b b where  b.owner2=:owner2  and  not exists (select sid from "+schemaName+".wageearner  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".activityjob select * from "+schemaName+".activityjob_b b where  b.owner2=:owner2  and  not exists (select sid from "+schemaName+".activityjob  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".glentries select * from "+schemaName+".glentries_b b where  b.owner2=:owner2  and  not exists (select sid from "+schemaName+".glentries  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".cpayment select * from "+schemaName+".cpayment_b b where  b.owner2=:owner2  and  not exists (select sid from "+schemaName+".cpayment  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".task select * from "+schemaName+".task_b b where  b.owner2=:owner2  and  not exists (select sid from "+schemaName+".task  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".vpayment select * from "+schemaName+".vpayment_b b where  b.owner2=:owner2  and  not exists (select sid from "+schemaName+".vpayment  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".emplorders select * from "+schemaName+".emplorders_b b where  b.owner2=:owner2  and  not exists (select sid from "+schemaName+".emplorders  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".\"USER\" select * from "+schemaName+".\"USER_b\" b where  b.owner2=:owner2  and  not exists (select sid from "+schemaName+".\"USER\" a where b.sid = a.sid and a.owner2=:owner2)";
      if(dbProductName.equals("psql")){
       sqlScript="insert into "+schemaName+".\"user\" select * from "+schemaName+".\"user_b\" b where  b.owner2=:owner2  and  not exists (select sid from "+schemaName+".\"user\" a where b.sid = a.sid and a.owner2=:owner2)";
      }

      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".acintegr select * from "+schemaName+".acintegr_b b where  b.owner2=:owner2  and  not exists (select sid from "+schemaName+".acintegr  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".controlusagebyperiods select * from "+schemaName+".controlusagebyperiods_b b where  b.owner2=:owner2  and  not exists (select sid from "+schemaName+".controlusagebyperiods  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".resource select * from "+schemaName+".resource_b b where  b.owner2=:owner2  and  not exists (select sid from "+schemaName+".resource  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      if(customIdentity.isMasterSite()){
      sqlScript="insert into "+schemaName+".resource select * from "+schemaName+".resource_b b where  b.owner2='SYSTEM'  and  not exists (select sid from "+schemaName+".resource  a where b.sid = a.sid and a.owner2='SYSTEM')";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      }

      sqlScript="insert into "+schemaName+".userprofl select * from "+schemaName+".userprofl_b b where  b.owner2=:owner2  and  not exists (select sid from "+schemaName+".userprofl  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".venartha select * from "+schemaName+".venartha_b b where  b.owner2=:owner2  and  not exists (select sid from "+schemaName+".venartha  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".wageearneraux select * from "+schemaName+".wageearneraux_b b where  b.owner2=:owner2  and  not exists (select sid from "+schemaName+".wageearneraux  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".activityjobdetails select * from "+schemaName+".activityjobdetails_b b where  b.owner2=:owner2  and  not exists (select sid from "+schemaName+".activityjobdetails  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".cupdetails select * from "+schemaName+".cupdetails_b b where  b.owner2=:owner2  and  not exists (select sid from "+schemaName+".cupdetails  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".gentriesdetails select * from "+schemaName+".gentriesdetails_b b where  b.owner2=:owner2  and  not exists (select sid from "+schemaName+".gentriesdetails  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".holiday select * from "+schemaName+".holiday_b b where  b.owner2=:owner2  and  not exists (select sid from "+schemaName+".holiday  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".itembomdetails select * from "+schemaName+".itembomdetails_b b where  b.owner2=:owner2  and  not exists (select sid from "+schemaName+".itembomdetails  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();



      sqlScript="insert into "+schemaName+".rgenfields select * from "+schemaName+".rgenfields_b b where  b.owner2=:owner2  and  not exists (select sid from "+schemaName+".rgenfields  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".usagebyperiods select * from "+schemaName+".usagebyperiods_b b where  b.owner2=:owner2  and  not exists (select sid from "+schemaName+".usagebyperiods  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".cuidetails select * from "+schemaName+".cuidetails_b b where  b.owner2=:owner2  and  not exists (select sid from "+schemaName+".cuidetails  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".cuodetails select * from "+schemaName+".cuodetails_b b where  b.owner2=:owner2  and  not exists (select sid from "+schemaName+".cuodetails  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".cuqdetails select * from "+schemaName+".cuqdetails_b b where  b.owner2=:owner2  and  not exists (select sid from "+schemaName+".cuqdetails  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".emplodetails select * from "+schemaName+".emplodetails_b b where  b.owner2=:owner2  and  not exists (select sid from "+schemaName+".emplodetails  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".resourcedetails select * from "+schemaName+".resourcedetails_b b where  b.owner2=:owner2  and  not exists (select sid from "+schemaName+".resourcedetails  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".vendidetails select * from "+schemaName+".vendidetails_b b where  b.owner2=:owner2  and  not exists (select sid from "+schemaName+".vendidetails  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".vendodetails select * from "+schemaName+".vendodetails_b b where  b.owner2=:owner2  and  not exists (select sid from "+schemaName+".vendodetails  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".vendpdetails select * from "+schemaName+".vendpdetails_b b where  b.owner2=:owner2  and  not exists (select sid from "+schemaName+".vendpdetails  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".vendqdetails select * from "+schemaName+".vendqdetails_b b where  b.owner2=:owner2  and  not exists (select sid from "+schemaName+".vendqdetails  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".ccontact select * from "+schemaName+".ccontact_b b where  b.owner2=:owner2  and  not exists (select sid from "+schemaName+".ccontact  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".shipmentdetails select * from "+schemaName+".shipmentdetails_b b where  b.owner2=:owner2  and  not exists (select sid from "+schemaName+".shipmentdetails  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".vcontact select * from "+schemaName+".vcontact_b b where  b.owner2=:owner2  and  not exists (select sid from "+schemaName+".vcontact  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".vshipmendetails select * from "+schemaName+".vshipmendetails_b b where  b.owner2=:owner2  and  not exists (select sid from "+schemaName+".vshipmendetails  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".schedule select * from "+schemaName+".schedule_b b where  b.owner2=:owner2  and  not exists (select sid from "+schemaName+".schedule  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".jobassignment select * from "+schemaName+".jobassignment_b b where  b.owner2=:owner2  and  not exists (select sid from "+schemaName+".jobassignment  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".acperiod select * from "+schemaName+".acperiod_b b where  b.owner2=:owner2  and  not exists (select sid from "+schemaName+".acperiod  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".arthahist select * from "+schemaName+".arthahist_b b where  b.owner2=:owner2  and  not exists (select sid from "+schemaName+".arthahist  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".arthatbl select * from "+schemaName+".arthatbl_b b where  b.owner2=:owner2  and  not exists (select sid from "+schemaName+".arthatbl  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".holiday select * from "+schemaName+".holiday_b b where  b.owner2=:owner2  and  not exists (select sid from "+schemaName+".holiday  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      if(customIdentity.isMasterSite()){
      sqlScript="insert into "+schemaName+".blobdata select * from "+schemaName+".blobdata_b b where  b.owner2='SYSTEM'  and  not exists (select sid from "+schemaName+".blobdata  a where b.sid = a.sid and a.owner2='SYSTEM')";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      }

      sqlScript="insert into "+schemaName+".blobdata select * from "+schemaName+".blobdata_b b where  b.owner2=:owner2  and  not exists (select sid from "+schemaName+".blobdata  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".cjournal select * from "+schemaName+".cjournal_b b where  b.owner2=:owner2  and  not exists (select sid from "+schemaName+".cjournal  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".clobdata select * from "+schemaName+".clobdata_b b where  b.owner2=:owner2  and  not exists (select sid from "+schemaName+".clobdata  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      if(customIdentity.isMasterSite()){
      sqlScript="insert into "+schemaName+".clobdata select * from "+schemaName+".clobdata_b b where  b.owner2='SYSTEM'  and  not exists (select sid from "+schemaName+".clobdata  a where b.sid = a.sid and a.owner2='SYSTEM')";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      }

      sqlScript="insert into "+schemaName+".editlog select * from "+schemaName+".editlog_b b where  b.owner2=:owner2  and  not exists (select sid from "+schemaName+".editlog  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".genoptions select * from "+schemaName+".genoptions_b b where  b.owner2=:owner2  and  not exists (select sid from "+schemaName+".genoptions  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".hlogfile select * from "+schemaName+".hlogfile_b b where  b.owner2=:owner2  and  not exists (select sid from "+schemaName+".hlogfile  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".jjournal select * from "+schemaName+".jjournal_b b where  b.owner2=:owner2  and  not exists (select sid from "+schemaName+".jjournal  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".journal select * from "+schemaName+".journal_b b where  b.owner2=:owner2  and  not exists (select sid from "+schemaName+".journal  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".nextserialno select * from "+schemaName+".nextserialno_b b where  b.owner2=:owner2  and  not exists (select sid from "+schemaName+".nextserialno  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".options select * from "+schemaName+".options_b b where  b.owner2=:owner2  and  not exists (select sid from "+schemaName+".options  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".rate1f select * from "+schemaName+".rate1f_b b where  b.owner2=:owner2  and  not exists (select sid from "+schemaName+".rate1f  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".scandate select * from "+schemaName+".scandate_b b where  b.owner2=:owner2  and  not exists (select sid from "+schemaName+".scandate  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".serialnumbers select * from "+schemaName+".serialnumbers_b b where  b.owner2=:owner2  and  not exists (select sid from "+schemaName+".serialnumbers  a where b.sid = a.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();






      // update main if row in backup has different change time (relies on statusfldate change)
      //oct04 2018 use postingdate instead of statusdt
      // journals,glentries,details do not get updated so are not included in updates jay add logic to prevent updating glentries ??
      // oct06 2018, they are included now, can get updated by repair
//postgresql UPDATE genapp.journal_b SET sid=a.sid,spostdate=a.spostdate,postdate=a.postdate,owner2=a.owner2 FROM  genapp.journal a  where(genapp.journal_b.sid=a.sid AND a.postdate<>genapp.journal_b.postdate AND a.owner2='localhost')
//hsqldb or stanard UPDATE genapp.journal_b b SET (sid,spostdate,postdate,owner2)=(SELECT sid,spostdate,postdate,owner2 FROM  genapp.journal a where b.sid=a.sid AND a.postdate<>b.postdate AND a.owner2='localhost')
sqlScript="UPDATE "+schemaName+".journal_b b SET(sid,spostdate,postdate,calendardt,jrnltype,jnlseqb,jnlseq,jnlseqs,period,account,debit,credit,xreference,descript,statusfl,owner,owner2)=(SELECT sid,spostdate,postdate,calendardt,jrnltype,jnlseqb,jnlseq,jnlseqs,period,account,debit,credit,xreference,descript,statusfl,owner,owner2 FROM "+schemaName+".journal a where a.sid=b.sid AND a.postdate<>b.postdate and a.owner2=:owner2)";
if(dbProductName.equals("psql")){
 sqlScript="UPDATE "+schemaName+".journal_b SET sid=a.sid,a.spostdate=a.spostdate,postdate=a.postdate,calendardt=a.calendardt,jrnltype=a.jrnltype,jnlseqb=,jnlseq=a.jnlseq,jnlseqs=a.jnlseqs,period=a.period,account=a.account,debit=a.debit,credit=a.credit,xreference=a.xreference,descript=a.descript,statusfl=a.statusfl,owner=a.owner,owner2=a.owner2) FROM "+schemaName+".journal a where(genapp.journal_b.sid=a.sid AND a.postdate<>genapp.journal_b.postdate AND a.owner2=:owner2)";
}
/*
sqlScript="UPDATE "+schemaName+".JOURNAL a SET(SID,spostdate,postdate,calendardt,jrnltype,jnlseqb,jnlseq,jnlseqs,period,account,debit,credit,xreference,descript,STATUSFL,OWNER,OWNER2)=(b.SID,b.spostdate,b.postdate,b.calendardt,b.jrnltype,b.jnlseqb,b.jnlseq,b.jnlseqs,b.period,b.account,b.debit,b.credit,b.xreference,b.descript,b.STATUSFL,b.OWNER,b.OWNER2)FROM "+schemaName+".journal_b b where((b.sid=a.sid) AND (a.postdate<>b.postdate) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);
updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE "+schemaName+".gentriesdetails a SET(SID,glentrysidno,line,depcode,divcode,account,debitamt,creditamt,linetotl,notes,STATUSFL,statusfldt,OWNER,OWNER2)=(b.SID,b.glentrysidno,b.line,b.depcode,b.divcode,b.account,b.debitamt,b.creditamt,b.linetotl,b.notes,b.STATUSFL,b.statusfldt,b.OWNER,b.OWNER2)FROM "+schemaName+".gentriesdetails_b b where((b.sid=a.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);
updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE "+schemaName+".glentries a SET(SID,glentryno,descript,refcode,period,postdate,calendardt,depcode,divcode,account,tdebitamt,tcreditamt,notes,STATUSFL,statusfldt,OWNER,OWNER2)=(b.SID,b.glentryno,b.descript,b.refcode,b.period,b.postdate,b.calendardt,b.depcode,b.divcode,b.account,b.tdebitamt,b.tcreditamt,b.notes,b.STATUSFL,b.statusfldt,b.OWNER,b.OWNER2)FROM "+schemaName+".glentries_b b where((b.sid=a.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);
updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE "+schemaName+".ADDRESS a SET(SID,ADDRESCODE,ADDRL1,ADDRL2,ADDRL3,CITY,PROVNSTATE,COUNTRY,PZCODE,DESCRIPT,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2,PRINTMSTAT,PRINMTFLDT)=(b.SID,b.ADDRESCODE,b.ADDRL1,b.ADDRL2,b.ADDRL3,b.CITY,b.PROVNSTATE,b.COUNTRY,b.PZCODE,b.DESCRIPT,b.STATUSFL,b.STATUSFLDT,b.NOTES,b.OWNER,b.OWNER2,b.PRINTMSTAT,b.PRINMTFLDT)FROM "+schemaName+".address_b b where((b.sid=a.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);
updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE "+schemaName+".OPTIONS a SET(SID,ROW,OPTIONS01,PURPOSE01,VALUE01,OPTIONS02,PURPOSE02,VALUE02,OPTIONS03,PURPOSE03,VALUE03,OPTIONS04,PURPOSE04,VALUE04,OPTIONS05,PURPOSE05,VALUE05,OPTIONS06,PURPOSE06,VALUE06,OPTIONS07,PURPOSE07,VALUE07,OPTIONS08,PURPOSE08,VALUE08,OPTIONS09,PURPOSE09,VALUE09,OPTIONS10,PURPOSE10,VALUE10,OPTIONS11,PURPOSE11,VALUE11,OPTIONS12,PURPOSE12,VALUE12,OPTIONS13,PURPOSE13,VALUE13,OPTIONS14,PURPOSE14,VALUE14,OPTIONS15,PURPOSE15,VALUE15,OPTIONS16,PURPOSE16,VALUE16,OPTIONS17,PURPOSE17,VALUE17,OPTIONS18,PURPOSE18,VALUE18,OPTIONS19,PURPOSE19,VALUE19,OPTIONS20,PURPOSE20,VALUE20,OPTIONS21,PURPOSE21,VALUE21,OPTIONS22,PURPOSE22,VALUE22,OPTIONS23,PURPOSE23,VALUE23,OPTIONS24,PURPOSE24,VALUE24,OPTIONS25,PURPOSE25,VALUE25,OPTIONS26,PURPOSE26,VALUE26,OPTIONS27,PURPOSE27,VALUE27,OPTIONS28,PURPOSE28,VALUE28,OPTIONS29,PURPOSE29,VALUE29,OPTIONS30,PURPOSE30,VALUE30,OPTIONS31,PURPOSE31,VALUE31,OPTIONS32,PURPOSE32,VALUE32,OPTIONS33,PURPOSE33,VALUE33,OPTIONS34,PURPOSE34,VALUE34,OPTIONS35,PURPOSE35,VALUE35,OPTIONS36,PURPOSE36,VALUE36,OPTIONS37,PURPOSE37,VALUE37,OPTIONS38,PURPOSE38,VALUE38,OPTIONS39,PURPOSE39,VALUE39,OPTIONS40,PURPOSE40,VALUE40,OPTIONS41,PURPOSE41,VALUE41,OPTIONS42,PURPOSE42,VALUE42,OPTIONS43,PURPOSE43,VALUE43,OPTIONS44,PURPOSE44,VALUE44,OPTIONS45,PURPOSE45,VALUE45,OPTIONS46,PURPOSE46,VALUE46,OPTIONS47,PURPOSE47,VALUE47,OPTIONS48,PURPOSE48,VALUE48,OPTIONS49,PURPOSE49,VALUE49,OPTIONS50,PURPOSE50,VALUE50,OPTIONS51,PURPOSE51,VALUE51,OPTIONS52,PURPOSE52,VALUE52,OPTIONS53,PURPOSE53,VALUE53,OPTIONS54,PURPOSE54,VALUE54,OPTIONS55,PURPOSE55,VALUE55,OPTIONS56,PURPOSE56,VALUE56,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(b.SID,b.ROW,b.OPTIONS01,b.PURPOSE01,b.VALUE01,b.OPTIONS02,b.PURPOSE02,b.VALUE02,b.OPTIONS03,b.PURPOSE03,b.VALUE03,b.OPTIONS04,b.PURPOSE04,a.VALUE04,b.OPTIONS05,b.PURPOSE05,b.VALUE05,b.OPTIONS06,b.PURPOSE06,b.VALUE06,b.OPTIONS07,b.PURPOSE07,b.VALUE07,b.OPTIONS08,b.PURPOSE08,b.VALUE08,b.OPTIONS09,b.PURPOSE09,b.VALUE09,b.OPTIONS10,b.PURPOSE10,b.VALUE10,b.OPTIONS11,b.PURPOSE11,b.VALUE11,b.OPTIONS12,b.PURPOSE12,b.VALUE12,b.OPTIONS13,b.PURPOSE13,b.VALUE13,b.OPTIONS14,b.PURPOSE14,b.VALUE14,b.OPTIONS15,b.PURPOSE15,b.VALUE15,b.OPTIONS16,b.PURPOSE16,b.VALUE16,b.OPTIONS17,b.PURPOSE17,b.VALUE17,b.OPTIONS18,b.PURPOSE18,b.VALUE18,b.OPTIONS19,b.PURPOSE19,b.VALUE19,b.OPTIONS20,b.PURPOSE20,b.VALUE20,b.OPTIONS21,b.PURPOSE21,b.VALUE21,b.OPTIONS22,b.PURPOSE22,b.VALUE22,b.OPTIONS23,b.PURPOSE23,b.VALUE23,b.OPTIONS24,b.PURPOSE24,b.VALUE24,b.OPTIONS25,b.PURPOSE25,b.VALUE25,b.OPTIONS26,b.PURPOSE26,b.VALUE26,b.OPTIONS27,b.PURPOSE27,b.VALUE27,b.OPTIONS28,b.PURPOSE28,b.VALUE28,b.OPTIONS29,b.PURPOSE29,b.VALUE29,b.OPTIONS30,b.PURPOSE30,b.VALUE30,b.OPTIONS31,b.PURPOSE31,b.VALUE31,b.OPTIONS32,b.PURPOSE32,b.VALUE32,b.OPTIONS33,b.PURPOSE33,b.VALUE33,b.OPTIONS34,b.PURPOSE34,b.VALUE34,b.OPTIONS35,b.PURPOSE35,b.VALUE35,b.OPTIONS36,b.PURPOSE36,b.VALUE36,b.OPTIONS37,b.PURPOSE37,b.VALUE37,b.OPTIONS38,b.PURPOSE38,b.VALUE38,b.OPTIONS39,b.PURPOSE39,b.VALUE39,b.OPTIONS40,b.PURPOSE40,b.VALUE40,b.OPTIONS41,b.PURPOSE41,b.VALUE41,b.OPTIONS42,b.PURPOSE42,b.VALUE42,b.OPTIONS43,b.PURPOSE43,b.VALUE43,b.OPTIONS44,b.PURPOSE44,b.VALUE44,b.OPTIONS45,b.PURPOSE45,b.VALUE45,b.OPTIONS46,b.PURPOSE46,b.VALUE46,b.OPTIONS47,b.PURPOSE47,b.VALUE47,b.OPTIONS48,b.PURPOSE48,b.VALUE48,b.OPTIONS49,b.PURPOSE49,b.VALUE49,b.OPTIONS50,b.PURPOSE50,b.VALUE50,b.OPTIONS51,b.PURPOSE51,b.VALUE51,b.OPTIONS52,b.PURPOSE52,b.VALUE52,b.OPTIONS53,b.PURPOSE53,b.VALUE53,b.OPTIONS54,b.PURPOSE54,b.VALUE54,b.OPTIONS55,b.PURPOSE55,b.VALUE55,b.OPTIONS56,b.PURPOSE56,b.VALUE56,b.STATUSFL,b.STATUSFLDT,b.NOTES,b.OWNER,b.OWNER2)FROM "+schemaName+".OPTIONS_b b where((b.sid=a.sid) AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);
updatedCount=updatedCount+q.executeUpdate();
String line1="UPDATE "+schemaName+".CLIENT a SET(SID,CLIENTVERSION,SERIALNUM,ENTERPRISECOMPANYNA,DESCRIPT,ADDRL1,ADDRL2,ADDRL3,CITY,PROVNSTATE,COUNTRYNAME,PZCODE,PHONEO,PHONEH,PHONEC,PHONEX,LANADDR,WANADDR,LMAILADDR,IMAILADDR,RMAILADDR,INTADDR,INRADDR,ENTERPRISECOMPCODE,ENTERPRISECOMPSIZE,BARCSIZE,LEVEL,POSKIPP,LOOSEIT,JOBSKIP,CARTONFL,PICKLIST,PRODDESC,PRODCODE,NJOB,NMATERIA,NACTIVITY,NBUTT,NCUSTOME,NCONTACT,NVENDOR,NEMPLOYEE,NSCHEDULE,NREJECT,NRETURN,NCODE,MANUFID,BARTYPE,CADTYPE,CARTYPE,SHITYPE,REPTYPE,LOCTYPE,BARCOL,CARCOL,CADCOL,SHICOL,REPCOL,LOCCOL,ALTSERIA,COUNTRYCODE,NALTSERI,SCRCOLOR,HILCOLOR,TEXTCOLOR,BACCOLOR,DATETYPE,CURRSYMB,CURRCODE,PRINBAR,BARPRINT,CARPRINT,CADPRINT,LOCPRINT,SHIPRINT,REPPRINT,BARPRTY,REPPRTY,CARPRTY,CADPRTY,SHIPRTY,LOCPRTY,ALTSELEN,CUSTOLEN,CARCSIZE,CADCSIZE,SHICSIZE,REPCSIZE,LOCCSIZE,CS,NCONFTYP,NLOCATIO,NDIVCODE,NDEPCODE,NADDCODE,NFLOOR,NROOM,NRACK,MENUTYPE,PADTYPE,NRATE1TA,NRATE2TA,DEFCONFT,BEEPSOU,CONFIRM,LINEFEED,REFBARADJ,SHIBARADJ,CUSBARADJ,LOCBARADJ,CARBARADJ,NCORDER,NSPERSON,PROMPTI,CUSTOMERQUOTENB,CUSTOMERQUOTEN,CUSTOMERQUOTENA,CUSTOMERORDERNB,CUSTOMERORDERN,CUSTOMERORDERNA,VENDORORDERNB,VENDORORDERN,VENDORORDERNA,EMPLOYEEORDERNB,EMPLOYEEORDERN,EMPLOYEEORDERNA,JOBNB,JOBN,JOBNA,CUSTOMERINVOICENB,CUSTOMERINVOICEN,CUSTOMERINVOICENA,VENDORINVOICENB,VENDORINVOICEN,VENDORINVOICENA,CUSTOMERPICKNB,CUSTOMERPICKN,CUSTOMERPICKNA,VENDORQUOTENB,VENDORQUOTEN,VENDORQUOTENA,CUSTOMERPAYMNTNB,CUSTOMERPAYMNTN,CUSTOMERPAYMNTNA,VENDORPAYMNTNB,VENDORPAYMNTN,VENDORPAYMNTNA,VENDORCHQNB,VENDORCHQN,VENDORCHQNA,TASKNB,TASKN,TASKNA,ARSEQB,ARSEQ,ARSEQA,APSEQB,APSEQ,APSEQA,GLSEQB,GLSEQ,GLSEQA,PASEQB,PASEQ,PASEQA,ICSEQB,ICSEQ,ICSEQA,JOSEQB,JOSEQ,JOSEQA,SGLENTRY,TAX1CODE,TAX2CODE,TAX3CODE,NDECIMAL,EDIPASSW,INTPASSW,INRPASSW,IMLPASSW,RMLPASSW,LMLPASSW,HOSPASSW,LANPASSW,WANPASSW,ASHOSTID,HDSTYLE,MTSTYLE,STSTYLE,DTSTYLE,FTSTYLE,DEFAULTR,DEFAULTC,DBNAME,ROOTDIR,KEYORDER,CURRBUSDAT,LASTBUSDAT,CURRCALDAT,LASTCALDAT,PREPROCESS,MARGIN,FOOTER,LASTUSER,LISTBUILDC,LISTBUILDV,LISTBUILDE,LISTBROWNC,LISTBROWNV,LISTBROWNE,SMTPSERVER,SMTPUSER,SMTPPASS,POP3SERVER,POP3USER,POP3PASS,SMATCODE,FYREND,FPERIODS,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2,licensetype,licensestart,licenseend)=(b.sid,b.CLIENTVERSION,b.SERIALNUM,b.ENTERPRISECOMPANYNA,b.DESCRIPT,b.ADDRL1,b.ADDRL2,b.ADDRL3,b.CITY,b.PROVNSTATE,b.COUNTRYNAME,b.PZCODE,b.PHONEO,b.PHONEH,b.PHONEC,b.PHONEX,b.LANADDR,b.WANADDR,b.LMAILADDR,b.IMAILADDR,b.RMAILADDR,b.INTADDR,b.INRADDR,b.ENTERPRISECOMPCODE,b.ENTERPRISECOMPSIZE,b.BARCSIZE,b.LEVEL,b.POSKIPP,b.LOOSEIT,b.JOBSKIP,b.CARTONFL,b.PICKLIST,b.PRODDESC,b.PRODCODE,b.NJOB,b.NMATERIA,b.NACTIVITY,b.NBUTT,b.NCUSTOME,b.NCONTACT,b.NVENDOR,b.NEMPLOYEE,b.NSCHEDULE,b.NREJECT,b.NRETURN,b.NCODE,b.MANUFID,b.BARTYPE,b.CADTYPE,b.CARTYPE,b.SHITYPE,b.REPTYPE,b.LOCTYPE,b.BARCOL,b.CARCOL,b.CADCOL,b.SHICOL,b.REPCOL,b.LOCCOL,b.ALTSERIA,b.COUNTRYCODE,b.NALTSERI,b.SCRCOLOR,b.HILCOLOR,";
sqlScript=line1+"a.TEXTCOLOR,b.BACCOLOR,b.DATETYPE,b.CURRSYMB,b.CURRCODE,b.PRINBAR,b.BARPRINT,b.CARPRINT,b.CADPRINT,b.LOCPRINT,b.SHIPRINT,b.REPPRINT,b.BARPRTY,b.REPPRTY,b.CARPRTY,b.CADPRTY,b.SHIPRTY,b.LOCPRTY,b.ALTSELEN,b.CUSTOLEN,b.CARCSIZE,b.CADCSIZE,b.SHICSIZE,b.REPCSIZE,b.LOCCSIZE,b.CS,b.NCONFTYP,b.NLOCATIO,b.NDIVCODE,b.NDEPCODE,b.NADDCODE,b.NFLOOR,b.NROOM,b.NRACK,b.MENUTYPE,b.PADTYPE,b.NRATE1TA,b.NRATE2TA,b.DEFCONFT,b.BEEPSOU,b.CONFIRM,b.LINEFEED,b.REFBARADJ,b.SHIBARADJ,b.CUSBARADJ,b.LOCBARADJ,b.CARBARADJ,b.NCORDER,b.NSPERSON,b.PROMPTI,b.CUSTOMERQUOTENB,b.CUSTOMERQUOTEN,b.CUSTOMERQUOTENA,b.CUSTOMERORDERNB,b.CUSTOMERORDERN,b.CUSTOMERORDERNA,b.VENDORORDERNB,b.VENDORORDERN,b.VENDORORDERNA,b.EMPLOYEEORDERNB,b.EMPLOYEEORDERN,b.EMPLOYEEORDERNA,b.JOBNB,b.JOBN,b.JOBNA,b.CUSTOMERINVOICENB,b.CUSTOMERINVOICEN,b.CUSTOMERINVOICENA,b.VENDORINVOICENB,b.VENDORINVOICEN,b.VENDORINVOICENA,b.CUSTOMERPICKNB,b.CUSTOMERPICKN,b.CUSTOMERPICKNA,b.VENDORQUOTENB,b.VENDORQUOTEN,b.VENDORQUOTENA,b.CUSTOMERPAYMNTNB,b.CUSTOMERPAYMNTN,b.CUSTOMERPAYMNTNA,b.VENDORPAYMNTNB,b.VENDORPAYMNTN,b.VENDORPAYMNTNA,b.VENDORCHQNB,b.VENDORCHQN,b.VENDORCHQNA,b.TASKNB,b.TASKN,b.TASKNA,b.ARSEQB,b.ARSEQ,b.ARSEQA,b.APSEQB,b.APSEQ,b.APSEQA,b.GLSEQB,b.GLSEQ,b.GLSEQA,b.PASEQB,b.PASEQ,b.PASEQA,b.ICSEQB,b.ICSEQ,b.ICSEQA,b.JOSEQB,b.JOSEQ,b.JOSEQA,b.SGLENTRY,b.TAX1CODE,b.TAX2CODE,b.TAX3CODE,b.NDECIMAL,b.EDIPASSW,b.INTPASSW,b.INRPASSW,b.IMLPASSW,b.RMLPASSW,b.LMLPASSW,b.HOSPASSW,b.LANPASSW,b.WANPASSW,b.ASHOSTID,b.HDSTYLE,b.MTSTYLE,b.STSTYLE,b.DTSTYLE,b.FTSTYLE,b.DEFAULTR,b.DEFAULTC,b.DBNAME,b.ROOTDIR,b.KEYORDER,b.CURRBUSDAT,b.LASTBUSDAT,b.CURRCALDAT,b.LASTCALDAT,b.PREPROCESS,b.MARGIN,b.FOOTER,b.LASTUSER,b.LISTBUILDC,b.LISTBUILDV,b.LISTBUILDE,b.LISTBROWNC,b.LISTBROWNV,b.LISTBROWNE,b.SMTPSERVER,b.SMTPUSER,b.SMTPPASS,b.POP3SERVER,b.POP3USER,b.POP3PASS,b.SMATCODE,b.FYREND,b.FPERIODS,b.STATUSFL,b.STATUSFLDT,b.NOTES,b.OWNER,b.OWNER2,b.licensetype,b.licensestart,b.licenseend)FROM "+schemaName+".CLIENT_b b where((b.sid=a.sid) AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);
updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE "+schemaName+".DEPARTMENT a SET(SID,DEPCODE,DESCRIPT,GLPREFIX,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(b.sid,b.DEPCODE,b.DESCRIPT,b.GLPREFIX,b.STATUSFL,b.STATUSFLDT,b.NOTES,b.OWNER,b.OWNER2)FROM "+schemaName+".DEPARTMENT_b b where((b.sid=a.sid) AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2);UPDATE "+schemaName+".COMPANY a SET(SID,COMPANYCODE,DESCRIPT,LEGALNAME,MAILTOCODE,GLPREFIX,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(b.sid,b.COMPANYCODE,b.DESCRIPT,b.LEGALNAME,b.MAILTOCODE,b.GLPREFIX,b.STATUSFL,b.STATUSFLDT,b.NOTES,b.OWNER,b.OWNER2)FROM "+schemaName+".COMPANY_b b where((b.sid=a.sid) AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);
updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE "+schemaName+".CONTROL a SET(SID,CONTROLCODE,DESCRIPT,TYPEOFCONTROL,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(b.sid,b.CONTROLCODE,b.DESCRIPT,b.TYPEOFCONTROL,b.STATUSFL,b.STATUSFLDT,b.NOTES,b.OWNER,b.OWNER2)FROM "+schemaName+".CONTROL_b b where((b.sid=a.sid) AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);
updatedCount=updatedCount+q.executeUpdate();



sqlScript="UPDATE "+schemaName+".DIVISION a SET(SID,DIVCODE,DESCRIPT,GLPREFIX,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(b.sid,b.DIVCODE,b.DESCRIPT,b.GLPREFIX,b.STATUSFL,b.STATUSFLDT,b.NOTES,b.OWNER,b.OWNER2)FROM "+schemaName+".DIVISION_b b where((b.sid=a.sid) AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);
updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE "+schemaName+".LOCATION a SET(SID,LOCATION,DESCRIPT,COMPANYCODE,ADDRESSCODE,FLOOR,ROOM,RACK,PRINTMSTAT,PRINMTFLDT,EXCLUDE,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(b.sid,b.LOCATION,b.DESCRIPT,b.COMPANYCODE,b.ADDRESSCODE,b.FLOOR,b.ROOM,b.RACK,b.PRINTMSTAT,b.PRINMTFLDT,b.EXCLUDE,b.STATUSFL,b.STATUSFLDT,b.NOTES,b.OWNER,b.OWNER2)FROM "+schemaName+".LOCATION_b b where((b.sid=a.sid) AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);
updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE "+schemaName+".RESIDENCY a SET(SID,RESIDENCY,DESCRIPT,MUNICIPALITY,PROVINCE,COUNTRYNAME,EXCLUDE,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(b.sid,b.RESIDENCY,b.DESCRIPT,b.MUNICIPALITY,b.PROVINCE,b.COUNTRYNAME,b.EXCLUDE,b.STATUSFL,b.STATUSFLDT,b.NOTES,b.OWNER,b.OWNER2)FROM "+schemaName+".RESIDENCY_b b where((b.sid=a.sid) AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);
updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE "+schemaName+".ACCOUNT a SET(SID,ACCOUNT,DESCRIPT,CATEGORY,TYPE,BUDGET,ACTUAL,ACTUALN,PREVBUDG,PREVACT,SEQUENCE,CHILD,PARENT,ROLLUPQ,COMPANYCODE,DEPCODE,DIVCODE,STATUSFL,STATUSFLDT,CURRENCY,NOTES,OWNER,OWNER2,P0,P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P8T,P9T,P10T,P11T)=(b.SID,b.ACCOUNT,b.DESCRIPT,b.CATEGORY,b.TYPE,b.BUDGET,b.ACTUAL,b.ACTUALN,b.PREVBUDG,b.PREVACT,b.SEQUENCE,b.CHILD,b.PARENT,b.ROLLUPQ,b.COMPANYCODE,b.DEPCODE,b.DIVCODE,b.STATUSFL,b.STATUSFLDT,b.CURRENCY,b.NOTES,b.OWNER,b.OWNER2,b.P0,b.P1,b.P2,b.P3,b.P4,b.P5,b.P6,b.P7,b.P8,b.P9,b.P10,b.P11,b.P12,b.P13,b.P14,b.P8T,b.P9T,b.P10T,b.P11T)FROM "+schemaName+".ACCOUNT_b b where((b.sid=a.sid) AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);
updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE "+schemaName+".CUSTOMER a SET(SID,CUSTOMER,DESCRIPT,TITLE,JOBTITLE,LASTNAME,FIRSTNAME,MIDDLENAM,CUSTOMERASCOMPANYNAME,CUSTTOTL,CUSTTQTY,COMPANYCODE,LOCATION,MAILTOCODE,SHIPTOCODE,TAX1,TAX2,TAX3,CUSTTAX1,CUSTTAX2,CUSTTAX3,PHONEO,PHONEH,PHONEC,PHONEX,LANADDR,WANADDR,LMAILADDR,IMAILADDR,RMAILADDR,INTADDR,INRADDR,DOB,PLACEOFBIRTH,SEX,AGE,CUSRTOTL,CUSRTQTY,CUSMTOTL,CUSDTOTL,LASTORDER,LASTINVOIC,LASTPAYMNQ,PRINTMSTAT,PRINMTFLDT,SHIPLABEL,TYPE,DEFAULTGLAC,INTEGRSET,STATUSFL,STATUSFLDT,TOTLPAID,CONTACTED,BYWHO,NXTCONTACT,VIA,KEYWORDS,NOTES,OWNER,OWNER2,DOCMNT)=(b.SID,b.CUSTOMER,b.DESCRIPT,b.TITLE,b.JOBTITLE,b.LASTNAME,b.FIRSTNAME,b.MIDDLENAM,b.CUSTOMERASCOMPANYNAME,b.CUSTTOTL,b.CUSTTQTY,b.COMPANYCODE,b.LOCATION,b.MAILTOCODE,b.SHIPTOCODE,b.TAX1,b.TAX2,b.TAX3,b.CUSTTAX1,b.CUSTTAX2,b.CUSTTAX3,b.PHONEO,b.PHONEH,b.PHONEC,b.PHONEX,b.LANADDR,b.WANADDR,b.LMAILADDR,b.IMAILADDR,b.RMAILADDR,b.INTADDR,b.INRADDR,b.DOB,b.PLACEOFBIRTH,b.SEX,b.AGE,b.CUSRTOTL,b.CUSRTQTY,b.CUSMTOTL,b.CUSDTOTL,b.LASTORDER,b.LASTINVOIC,b.LASTPAYMNQ,b.PRINTMSTAT,b.PRINMTFLDT,b.SHIPLABEL,b.TYPE,b.DEFAULTGLAC,b.INTEGRSET,b.STATUSFL,b.STATUSFLDT,b.TOTLPAID,b.CONTACTED,b.BYWHO,b.NXTCONTACT,b.VIA,b.KEYWORDS,b.NOTES,b.OWNER,b.OWNER2,b.DOCMNT)FROM "+schemaName+".CUSTOMER_b b where((b.sid=a.sid) AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);
updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE "+schemaName+".VENDOR a SET(SID,VENDOR,DESCRIPT,TITLE,JOBTITLE,LASTNAME,FIRSTNAME,MIDDLENAM,VENDORASCOMPANYNAME,VENDTOTL,VENDTQTY,COMPANYCODE,LOCATION,MAILTOCODE,PHONEO,PHONEH,PHONEC,PHONEX,LANADDR,WANADDR,LMAILADDR,IMAILADDR,RMAILADDR,INTADDR,INRADDR,VENRTOTL,VENRTQTY,VENMTOTL,VENDDTOTL,LASTQUOTE,LASTORDER,LASTINVOIC,LASTPAYMQ,PRINTMSTAT,PRINMTFLDT,SHIPLABEL,TYPE,SHIPTOCODE,DEFAULTGLAC,INTEGRSET,STATUSFL,STATUSFLDT,TOTLPAID,CONTACTED,BYWHO,KEYWORDS,NOTES,OWNER,OWNER2,DOCMNT)=(b.SID,b.VENDOR,b.DESCRIPT,b.TITLE,b.JOBTITLE,b.LASTNAME,b.FIRSTNAME,b.MIDDLENAM,b.VENDORASCOMPANYNAME,b.VENDTOTL,b.VENDTQTY,b.COMPANYCODE,b.LOCATION,b.MAILTOCODE,b.PHONEO,b.PHONEH,b.PHONEC,b.PHONEX,b.LANADDR,b.WANADDR,b.LMAILADDR,b.IMAILADDR,b.RMAILADDR,b.INTADDR,b.INRADDR,b.VENRTOTL,b.VENRTQTY,b.VENMTOTL,b.VENDDTOTL,b.LASTQUOTE,b.LASTORDER,b.LASTINVOIC,b.LASTPAYMQ,b.PRINTMSTAT,b.PRINMTFLDT,b.SHIPLABEL,b.TYPE,b.SHIPTOCODE,b.DEFAULTGLAC,b.INTEGRSET,b.STATUSFL,b.STATUSFLDT,b.TOTLPAID,b.CONTACTED,b.BYWHO,b.KEYWORDS,b.NOTES,b.OWNER,b.OWNER2,b.DOCMNT)FROM "+schemaName+".VENDOR_b b where((b.sid=a.sid) AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE "+schemaName+".EMPLOYEE a SET(SID,EMPLOYEE,DESCRIPT,TITLE,JOBTITLE,LASTNAME,FIRSTNAME,MIDDLENAM,COMPANYCODE,EMPLTOTL,EMPLTQTY,DIVCODE,DEPCODE,LOCATION,RESIDENCY,MAILTOCODE,TAX1,TAX2,TAX3,CUSTTAX1,CUSTTAX2,CUSTTAX3,PHONEO,PHONEH,PHONEC,PHONEX,LANADDR,WANADDR,LMAILADDR,IMAILADDR,RMAILADDR,INTADDR,INRADDR,EMPRTOTL,EMPRTQTY,EMPMTOTL,EMPDTOTL,LASTQUOTE,LASTORDER,LASTINVOIC,LASTPAYMQ,PRINTMSTAT,PRINMTFLDT,SHIPLABEL,SHIPTOCODE,TYPE,DEFAULTGLAC,INTEGRSET,STATUSFL,STATUSFLDT,CONTACTED,BYWHO,KEYWORDS,NOTES,OWNER,OWNER2,DOCMNT)=(b.SID,b.EMPLOYEE,b.DESCRIPT,b.TITLE,b.JOBTITLE,b.LASTNAME,b.FIRSTNAME,b.MIDDLENAM,b.COMPANYCODE,b.EMPLTOTL,b.EMPLTQTY,b.DIVCODE,b.DEPCODE,b.LOCATION,b.RESIDENCY,b.MAILTOCODE,b.TAX1,b.TAX2,b.TAX3,b.CUSTTAX1,b.CUSTTAX2,b.CUSTTAX3,b.PHONEO,b.PHONEH,b.PHONEC,b.PHONEX,b.LANADDR,b.WANADDR,b.LMAILADDR,b.IMAILADDR,b.RMAILADDR,b.INTADDR,b.INRADDR,b.EMPRTOTL,b.EMPRTQTY,b.EMPMTOTL,b.EMPDTOTL,b.LASTQUOTE,b.LASTORDER,b.LASTINVOIC,b.LASTPAYMQ,b.PRINTMSTAT,b.PRINMTFLDT,b.SHIPLABEL,b.SHIPTOCODE,b.TYPE,b.DEFAULTGLAC,b.INTEGRSET,b.STATUSFL,b.STATUSFLDT,b.CONTACTED,b.BYWHO,b.KEYWORDS,b.NOTES,b.OWNER,b.OWNER2,b.DOCMNT)FROM "+schemaName+".EMPLOYEE_b b where((b.sid=a.sid) AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE "+schemaName+".VCONTACT a SET(SID,CONTACT,VENDOR,TITLE,JOBTITLE,LASTNAME,FIRSTNAME,MIDDLENAM,PHONEO,PHONEH,PHONEC,PHONEX,LANADDR,WANADDR,LMAILADDR,IMAILADDR,RMAILADDR,INTADDR,INRADDR,LOCATION,MAILTOCODE,SHIPTOCODE,PRINTSTA,SHIPLABEL,TYPE,STATUSFL,STATUSFLDT,KEYWORDS,NOTES,OWNER,OWNER2,DOCMNT)=(b.SID,b.CONTACT,b.VENDOR,b.TITLE,b.JOBTITLE,b.LASTNAME,b.FIRSTNAME,b.MIDDLENAM,b.PHONEO,b.PHONEH,b.PHONEC,b.PHONEX,b.LANADDR,b.WANADDR,b.LMAILADDR,b.IMAILADDR,b.RMAILADDR,b.INTADDR,b.INRADDR,b.LOCATION,b.MAILTOCODE,b.SHIPTOCODE,b.PRINTSTA,b.SHIPLABEL,b.TYPE,b.STATUSFL,b.STATUSFLDT,b.KEYWORDS,b.NOTES,b.OWNER,b.OWNER2,b.DOCMNT)FROM "+schemaName+".VCONTACT_b b where((b.sid=a.sid) AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE "+schemaName+".CCONTACT a SET(SID,CONTACT,CUSTOMER,TITLE,JOBTITLE,LASTNAME,FIRSTNAME,MIDDLENAM,TAX1,TAX2,TAX3,CUSTTAX1,CUSTTAX2,CUSTTAX3,PHONEO,PHONEH,PHONEC,PHONEX,LANADDR,WANADDR,LMAILADDR,IMAILADDR,RMAILADDR,INTADDR,INRADDR,LOCATION,MAILTOCODE,SHIPTOCODE,PRINTMSTAT,PRINMTFLDT,SHIPLABEL,TYPE,STATUSFL,STATUSFLDT,KEYWORDS,NOTES,OWNER,OWNER2,DOCMNT)=(b.SID,b.CONTACT,b.CUSTOMER,b.TITLE,b.JOBTITLE,b.LASTNAME,b.FIRSTNAME,b.MIDDLENAM,b.TAX1,b.TAX2,b.TAX3,b.CUSTTAX1,b.CUSTTAX2,b.CUSTTAX3,b.PHONEO,b.PHONEH,b.PHONEC,b.PHONEX,b.LANADDR,b.WANADDR,b.LMAILADDR,b.IMAILADDR,b.RMAILADDR,b.INTADDR,b.INRADDR,b.LOCATION,b.MAILTOCODE,b.SHIPTOCODE,b.PRINTMSTAT,b.PRINMTFLDT,b.SHIPLABEL,b.TYPE,b.STATUSFL,b.STATUSFLDT,b.KEYWORDS,b.NOTES,b.OWNER,b.OWNER2,b.DOCMNT)FROM "+schemaName+".CCONTACT_b b where((b.sid=a.sid) AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE "+schemaName+".PERIODDATES a SET(SID,PERIOD,DESCRIPT,STARTDATE,ENDDATE,STARTOFWEEK,STARTOFBWEEK,ENDOFBWEEK,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(b.SID,b.PERIOD,b.DESCRIPT,b.STARTDATE,b.ENDDATE,b.STARTOFWEEK,b.STARTOFBWEEK,b.ENDOFBWEEK,b.STATUSFL,b.STATUSFLDT,b.NOTES,b.OWNER,b.OWNER2)FROM "+schemaName+".PERIODDATES_b b where((b.sid=a.sid) AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2);UPDATE "+schemaName+".ACPERIOD a SET(SID,ROWID,CURRPERIOD,DESCRIPT,CURRBUSDATE,CURRCALDATE,CURRLOCALDATE,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(b.SID,b.ROWID,b.CURRPERIOD,b.DESCRIPT,b.CURRBUSDATE,b.CURRCALDATE,b.CURRLOCALDATE,b.STATUSFL,b.STATUSFLDT,b.NOTES,b.OWNER,b.OWNER2)FROM "+schemaName+".ACPERIOD_b b where((b.sid=a.sid) AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2);UPDATE "+schemaName+".WAGEEARNER a SET(SID,WAGEEARNERID,EMPLOYEE,SIN,BIRTHDT,FEDCLAIM,PROVCLAIM,PAYYRFREQ,PAYPERIOD,WCB,WCBYTD,EMPLINSUR,INSYTD,VACRETAIN,VACATONYT,WAGEUNIT,WAGERATE,OTIMEUNIT,OTIMERATE,WAGEUNITS,OTIMUNITS,WAGEOUT,OVTIMEOUT,SALARYOUT,COMMISSION,BENEFITS,VACATION,VACPAYOUT,ADVANCE,PENSION,AFTERTAX,UNIONDUES,MEDICAL,FINCOMETX,PINCOMETX,THISPAYA,LASTPAYA,PAYYTD,FPENSIYTD,PPENSIYTD,ITAXYTD,PTAXYTD,GRPAYYTD,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2,DOCMNT)=(b.SID,b.WAGEEARNERID,b.EMPLOYEE,b.SIN,b.BIRTHDT,b.FEDCLAIM,b.PROVCLAIM,b.PAYYRFREQ,b.PAYPERIOD,b.WCB,b.WCBYTD,b.EMPLINSUR,b.INSYTD,b.VACRETAIN,b.VACATONYT,b.WAGEUNIT,b.WAGERATE,b.OTIMEUNIT,b.OTIMERATE,b.WAGEUNITS,b.OTIMUNITS,b.WAGEOUT,b.OVTIMEOUT,b.SALARYOUT,b.COMMISSION,b.BENEFITS,b.VACATION,b.VACPAYOUT,b.ADVANCE,b.PENSION,b.AFTERTAX,b.UNIONDUES,b.MEDICAL,b.FINCOMETX,b.PINCOMETX,b.THISPAYA,b.LASTPAYA,b.PAYYTD,b.FPENSIYTD,b.PPENSIYTD,b.ITAXYTD,b.PTAXYTD,b.GRPAYYTD,b.STATUSFL,b.STATUSFLDT,b.NOTES,b.OWNER,b.OWNER2,b.DOCMNT)FROM "+schemaName+".WAGEEARNER_b b where((b.sid=a.sid) AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE "+schemaName+".ARTHATBL a SET(SID,USAGE,WCBPERCNT,INSFACTOR,VACATONRATE,PENSIONMAX,WCBMAX,INSMAX,ITAXLV0RATE,ITAXLV1RATE,ITAXLV2RATE,ITAXLV3RATE,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(b.SID,b.USAGE,b.WCBPERCNT,b.INSFACTOR,b.VACATONRATE,b.PENSIONMAX,b.WCBMAX,b.INSMAX,b.ITAXLV0RATE,b.ITAXLV1RATE,b.ITAXLV2RATE,b.ITAXLV3RATE,b.STATUSFL,b.STATUSFLDT,b.NOTES,b.OWNER,b.OWNER2)FROM "+schemaName+".ARTHATBL_b b where((b.sid=a.sid) AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE "+schemaName+".ROLLUPGROUP a SET(SID,GROUPID,DESCRIPT,TYPE,CURRPW,EXPIRY,CURRENCY,PERIOD0B,PERIOD0,PERIODTOTALSB,PERIODTOTALS,PERIOD1BUDGET,PERIOD1ACTUAL,PERIOD2B,PERIOD2,PERIOD3B,PERIOD3,PERIOD4B,PERIOD4,PERIOD5B,PERIOD5,PERIOD6B,PERIOD6,PERIOD7B,PERIOD7,PERIOD8B,PERIOD8,PERIOD9B,PERIOD9,PERIOD10B,PERIOD10,PERIOD11B,PERIOD11,PERIOD12B,PERIOD12,PERIODNB,PERIODN,NOTES,STATUSFL,STATUSFLDT,OWNER,OWNER2)=(b.SID,b.GROUPID,b.DESCRIPT,b.TYPE,b.CURRPW,b.EXPIRY,b.CURRENCY,b.PERIOD0B,b.PERIOD0,b.PERIODTOTALSB,b.PERIODTOTALS,b.PERIOD1BUDGET,b.PERIOD1ACTUAL,b.PERIOD2B,b.PERIOD2,b.PERIOD3B,b.PERIOD3,b.PERIOD4B,b.PERIOD4,b.PERIOD5B,b.PERIOD5,b.PERIOD6B,b.PERIOD6,b.PERIOD7B,b.PERIOD7,b.PERIOD8B,b.PERIOD8,b.PERIOD9B,b.PERIOD9,b.PERIOD10B,b.PERIOD10,b.PERIOD11B,b.PERIOD11,b.PERIOD12B,b.PERIOD12,b.PERIODNB,b.PERIODN,b.NOTES,b.STATUSFL,b.STATUSFLDT,b.OWNER,b.OWNER2)FROM "+schemaName+".ROLLUPGROUP_b b where((b.sid=a.sid) AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE "+schemaName+".MEMBERSGROUP a SET(SID,GROUPID,DESCRIPT,QUANTITY,MODE,STATUSFL,STATUSFLDT,OWNER,OWNER2)=(b.SID,b.GROUPID,b.DESCRIPT,b.QUANTITY,b.MODE,b.STATUSFL,b.STATUSFLDT,b.OWNER,b.OWNER2)FROM "+schemaName+".MEMBERSGROUP_b b where((b.sid=a.sid) AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE "+schemaName+".ARTHAHIST a SET(SID,WAGEEARNER,SIN,PERIOD,MONTH,CCYY,VACATION,WAGE,OVERTIME,SALARY,COMMISSION,BENEFIT,FINCOMETX,PINCOMETX,WCBOUT,EMPLINSUR,VACPAYOUT,ADVANCE,FPENSOBTX,FPENSOATX,UNIONDUES,MEDICAL,PAYAMT,NOTES,NOTES2,CHQNUMBER,STATUSFL,STATUSFLDT,OWNER,OWNER2)=(b.SID,b.WAGEEARNER,b.SIN,b.PERIOD,b.MONTH,b.CCYY,b.VACATION,b.WAGE,b.OVERTIME,b.SALARY,b.COMMISSION,b.BENEFIT,b.FINCOMETX,b.PINCOMETX,b.WCBOUT,b.EMPLINSUR,b.VACPAYOUT,b.ADVANCE,b.FPENSOBTX,b.FPENSOATX,b.UNIONDUES,b.MEDICAL,b.PAYAMT,b.NOTES,b.NOTES2,b.CHQNUMBER,b.STATUSFL,b.STATUSFLDT,b.OWNER,b.OWNER2)FROM "+schemaName+".ARTHAHIST_b b where((b.sid=a.sid) AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE "+schemaName+".HOLIDAY a SET(SID,SHOLIDAY,HOLIDAY,DESCRIPT,TYPE,STATUSFL,STATUSFLDT,EMPLOYEE,RESIDENCY,OWNER,OWNER2)=(b.SID,b.SHOLIDAY,b.HOLIDAY,b.DESCRIPT,b.TYPE,b.STATUSFL,b.STATUSFLDT,b.EMPLOYEE,b.RESIDENCY,b.OWNER,b.OWNER2)FROM "+schemaName+".HOLIDAY_b b where((b.sid=a.sid) AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE "+schemaName+".ITEM a SET(SID,MATCODE,QUANTITY,DESCRIPT,DATEADDED,DATEEXPIRY,DATETORENEW,SOURCE1,SOURCE2,UPCCODE,COST,REPLCOST,SELPRICE,SPRICOLD,SPRICNEW,SPRICEFFDT,SHIPCODE,PRINTMSTAT,PRINMTFLDT,MISCCODE1,MISCCODE2,QTYLEVEL1,UNIT,CASEQTY,TYPE,TAX1,TAX2,TAX3,ALIASCODE,PARENTCODE,AVGPRICE,AVGCOST,STATUSFL,STATUSFLDT,SUBCODESN,SUBCODESN2,SUBCODESN3,CUORDQTY,VENORQTY,CUPICQTY,VENPIQTY,CUINVQTY,CUSHIQTY,VENSHQTY,EFFDATE,INTEGRSET,NOTES,DOCMNT,OWNER,OWNER2,LOCATION,BARUPC)=(b.SID,b.MATCODE,b.QUANTITY,b.DESCRIPT,b.DATEADDED,b.DATEEXPIRY,b.DATETORENEW,b.SOURCE1,b.SOURCE2,b.UPCCODE,b.COST,b.REPLCOST,b.SELPRICE,b.SPRICOLD,b.SPRICNEW,b.SPRICEFFDT,b.SHIPCODE,b.PRINTMSTAT,b.PRINMTFLDT,b.MISCCODE1,b.MISCCODE2,b.QTYLEVEL1,b.UNIT,b.CASEQTY,b.TYPE,b.TAX1,b.TAX2,b.TAX3,b.ALIASCODE,b.PARENTCODE,b.AVGPRICE,b.AVGCOST,b.STATUSFL,b.STATUSFLDT,b.SUBCODESN,b.SUBCODESN2,b.SUBCODESN3,b.CUORDQTY,b.VENORQTY,b.CUPICQTY,b.VENPIQTY,b.CUINVQTY,b.CUSHIQTY,b.VENSHQTY,b.EFFDATE,b.INTEGRSET,b.NOTES,b.DOCMNT,b.OWNER,b.OWNER2,b.LOCATION,b.BARUPC)FROM "+schemaName+".ITEM_b b where((b.sid=a.sid) AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE "+schemaName+".ACTIVITY a SET(SID,ACTIVITYCODE,QUANTITY,DESCRIPT,DATE,SOURCE1,SOURCE2,UPCCODE,COST,REPLCOST,SELPRICE,SPRICOLD,SPRICNEW,SPRICEFFDT,SHIPCODE,PRINTMSTAT,PRINMTFLDT,MISCCODE1,MISCCODE2,QTYLEVEL1,UNIT,CASEQTY,TYPE,TAX1,TAX2,TAX3,ALIASCODE,PARENTCODE,AVGPRICE,AVGCOST,STATUSFL,STATUSFLDT,SUBCODESN,SUBCODESN2,SUBCODESN3,CUORDQTY,VENORQTY,CUPICQTY,VENPIQTY,CUINVQTY,CUSHIQTY,VENSHQTY,EFFDATE,INTEGRSET,NOTES,DOCMNT,OWNER,OWNER2,BARUPC)=(b.SID,b.ACTIVITYCODE,b.QUANTITY,b.DESCRIPT,b.DATE,b.SOURCE1,b.SOURCE2,b.UPCCODE,b.COST,b.REPLCOST,b.SELPRICE,b.SPRICOLD,b.SPRICNEW,b.SPRICEFFDT,b.SHIPCODE,b.PRINTMSTAT,b.PRINMTFLDT,b.MISCCODE1,b.MISCCODE2,b.QTYLEVEL1,b.UNIT,b.CASEQTY,b.TYPE,b.TAX1,b.TAX2,b.TAX3,b.ALIASCODE,b.PARENTCODE,b.AVGPRICE,b.AVGCOST,b.STATUSFL,b.STATUSFLDT,b.SUBCODESN,b.SUBCODESN2,b.SUBCODESN3,b.CUORDQTY,b.VENORQTY,b.CUPICQTY,b.VENPIQTY,b.CUINVQTY,b.CUSHIQTY,b.VENSHQTY,b.EFFDATE,b.INTEGRSET,b.NOTES,b.DOCMNT,b.OWNER,b.OWNER2,b.BARUPC)FROM "+schemaName+".ACTIVITY_b b where((b.sid=a.sid) AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE "+schemaName+".SCHEDULE a SET(SID,TODO,DESCRIPT,EMPLOYEE,SSDATET,ACTIVITYCODE,LOCATION,SDATET,DURATIONH,DURATIONM,STIMEH,STIMEM,STIMEAMPM,EDATET,PRIORITY,PERCNTDONE,VENDOR,VONTACT,CUSTOMER,TYPE,MAILTOCODE,OTHEREMPLO,REPEATF,STATUSFL,STATUSFLDT,PRIVATEIND,NOTES,OWNER,OWNER2,DOCMNT)=(b.SID,b.TODO,b.DESCRIPT,b.EMPLOYEE,b.SSDATET,b.ACTIVITYCODE,b.LOCATION,b.SDATET,b.DURATIONH,b.DURATIONM,b.STIMEH,b.STIMEM,b.STIMEAMPM,b.EDATET,b.PRIORITY,b.PERCNTDONE,b.VENDOR,b.VONTACT,b.CUSTOMER,b.TYPE,b.MAILTOCODE,b.OTHEREMPLO,b.REPEATF,b.STATUSFL,b.STATUSFLDT,b.PRIVATEIND,b.NOTES,b.OWNER,b.OWNER2,b.DOCMNT)FROM "+schemaName+".SCHEDULE_b b where((b.sid=a.sid) AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE "+schemaName+".\"USER\" a SET(SID,ID,CLIENT,EMPLOYEE,VENDOR,CUSTOMER,OTHERID,ALEVEL,BLEVEL,CURRPW,EXPIRY,OLDPW,TEMPORARYPASSWORD,PASSWORDHASH,ACTIVATIONKEY,RESTRICT1,RESTRICT2,RESTRICT3,ALLOW1,ALLOW2,ALLOW3,MAXPROFLROW,CPROFLROW,STATUSFL,STATUSFLDT,UCURRCALDA,PREPROCESS,NOTES,DOCMNT,OWNER,OWNER2)=(b.SID,b.ID,b.CLIENT,b.EMPLOYEE,b.VENDOR,b.CUSTOMER,b.OTHERID,b.ALEVEL,b.BLEVEL,b.CURRPW,b.EXPIRY,b.OLDPW,b.TEMPORARYPASSWORD,b.PASSWORDHASH,b.ACTIVATIONKEY,b.RESTRICT1,b.RESTRICT2,b.RESTRICT3,b.ALLOW1,b.ALLOW2,b.ALLOW3,b.MAXPROFLROW,b.CPROFLROW,b.STATUSFL,b.STATUSFLDT,b.UCURRCALDA,b.PREPROCESS,b.NOTES,b.DOCMNT,b.OWNER,b.OWNER2)FROM "+schemaName+".\"USER_b\" b where((b.sid=a.sid) AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2)";
if(dbProductName.equals("psql")){
 sqlScript="UPDATE "+schemaName+".\"user\" a SET(SID,ID,CLIENT,EMPLOYEE,VENDOR,CUSTOMER,OTHERID,ALEVEL,BLEVEL,CURRPW,EXPIRY,OLDPW,TEMPORARYPASSWORD,PASSWORDHASH,ACTIVATIONKEY,RESTRICT1,RESTRICT2,RESTRICT3,ALLOW1,ALLOW2,ALLOW3,MAXPROFLROW,CPROFLROW,STATUSFL,STATUSFLDT,UCURRCALDA,PREPROCESS,NOTES,DOCMNT,OWNER,OWNER2)=(b.SID,b.ID,b.CLIENT,b.EMPLOYEE,b.VENDOR,b.CUSTOMER,b.OTHERID,b.ALEVEL,b.BLEVEL,b.CURRPW,b.EXPIRY,b.OLDPW,b.TEMPORARYPASSWORD,b.PASSWORDHASH,b.ACTIVATIONKEY,b.RESTRICT1,b.RESTRICT2,b.RESTRICT3,b.ALLOW1,b.ALLOW2,b.ALLOW3,b.MAXPROFLROW,b.CPROFLROW,b.STATUSFL,b.STATUSFLDT,b.UCURRCALDA,b.PREPROCESS,b.NOTES,b.DOCMNT,b.OWNER,b.OWNER2)FROM "+schemaName+".\"user_b\" b where((b.sid=a.sid) AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2)";
}

//check for psql to adjusr lowercase for USER
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE "+schemaName+".USERPROFL a SET(SID,LOGONID,ROW,OPTION,SELECTVALUE,SCRCOLOR,HILCOLOR,TEXTCOLOR,BACCOLOR,BEEPSOU,CONFIRM,PROMPTI,P1,P2,P3,P4,P5,P6,MTSTYLE,STSTYLE,DTSTYLE,FTSTYLE,DEFAULTR,DEFAULTC,DBNAME,ROOTDIR,KEYORDER,MARGIN,FOOTER,LISTBUILDC,LISTBUILDV,LISTBUILDE,LISTBROWNC,LISTBROWNV,LISTBROWNE,STATUSFL,STATUSFLDT,OWNER,OWNER2)=(b.SID,b.LOGONID,b.ROW,b.OPTION,b.SELECTVALUE,b.SCRCOLOR,b.HILCOLOR,b.TEXTCOLOR,b.BACCOLOR,b.BEEPSOU,b.CONFIRM,b.PROMPTI,b.P1,b.P2,b.P3,b.P4,b.P5,b.P6,b.MTSTYLE,b.STSTYLE,b.DTSTYLE,b.FTSTYLE,b.DEFAULTR,b.DEFAULTC,b.DBNAME,b.ROOTDIR,b.KEYORDER,b.MARGIN,b.FOOTER,b.LISTBUILDC,b.LISTBUILDV,b.LISTBUILDE,b.LISTBROWNC,b.LISTBROWNV,b.LISTBROWNE,b.STATUSFL,b.STATUSFLDT,b.OWNER,b.OWNER2)FROM "+schemaName+".USERPROFL_b b where((b.sid=a.sid) AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE "+schemaName+".VENARTHA a SET(SID,CHQNUMBER,RECONCILED,VENDORC,DATE,ADDRESCODE,CHQAMT,AMTVERBOS,NOTES,ADVISEL1,ADVISEL2,ADVISEL3,STATUSFL,STATUSFLDT,OWNER,OWNER2)=(b.SID,b.CHQNUMBER,b.RECONCILED,b.VENDORC,b.DATE,b.ADDRESCODE,b.CHQAMT,b.AMTVERBOS,b.NOTES,b.ADVISEL1,b.ADVISEL2,b.ADVISEL3,b.STATUSFL,b.STATUSFLDT,b.OWNER,b.OWNER2)FROM "+schemaName+".VENARTHA_b b where((b.sid=a.sid) AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2);UPDATE "+schemaName+".ACINTEGR a SET(SID,MODULEID,USAGEDESCR,USAGECODE,SETSID,ACCOUNT,EXTRAINTFIELD,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(b.SID,b.MODULEID,b.USAGEDESCR,b.USAGECODE,b.SETSID,b.ACCOUNT,b.EXTRAINTFIELD,b.STATUSFL,b.STATUSFLDT,b.NOTES,b.OWNER,b.OWNER2)FROM "+schemaName+".ACINTEGR_b b where((b.sid=a.sid) AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE "+schemaName+".ITEMJOB a SET(SID,JOBNO,MATCODE,PRODDATET,QTYALLOC,PONO,QTYOSTND,QTYALSTK,QTYISSUD,JOBTOTL,STATUSFL,CUSTOMEJ,VENDOR,STATUSFLDT,PRINTMSTAT,PRINMTFLDT,PRINTMSTATJ,PRINMTFLDTJ,TYPE,MATCODEOUT,QTYOUT,NOTES,OWNER,OWNER2)=(b.SID,b.JOBNO,b.MATCODE,b.PRODDATET,b.QTYALLOC,b.PONO,b.QTYOSTND,b.QTYALSTK,b.QTYISSUD,b.JOBTOTL,b.STATUSFL,b.CUSTOMEJ,b.VENDOR,b.STATUSFLDT,b.PRINTMSTAT,b.PRINMTFLDT,b.PRINTMSTATJ,b.PRINMTFLDTJ,b.TYPE,b.MATCODEOUT,b.QTYOUT,b.NOTES,b.OWNER,b.OWNER2)FROM "+schemaName+".ITEMJOB_b b where((b.sid=a.sid) AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2);UPDATE "+schemaName+".ACTIVITYJOB a SET(SID,JOBNO,ACTIVITYCODE,PRODDATET,QTYALLOC,PONO,QTYOSTND,QTYALSTK,QTYISSUD,JOBTOTL,STATUSFL,CUSTOMEJ,VENDOR,STATUSFLDT,PRINTMSTAT,PRINMTFLDT,PRINTMSTATJ,PRINMTFLDTJ,TYPE,MATCODEOUT,QTYOUT,NOTES,OWNER,OWNER2,DOCMNT)=(b.SID,b.JOBNO,b.ACTIVITYCODE,b.PRODDATET,b.QTYALLOC,b.PONO,b.QTYOSTND,b.QTYALSTK,b.QTYISSUD,b.JOBTOTL,b.STATUSFL,b.CUSTOMEJ,b.VENDOR,b.STATUSFLDT,b.PRINTMSTAT,b.PRINMTFLDT,b.PRINTMSTATJ,b.PRINMTFLDTJ,b.TYPE,b.MATCODEOUT,b.QTYOUT,b.NOTES,b.OWNER,b.OWNER2,b.DOCMNT)FROM "+schemaName+".ACTIVITYJOB_b b where((b.sid=a.sid) AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE "+schemaName+".VENQUOTE a SET(SID,PURCHSNO,DELVDATET,VENDOR,MATCODE,REPLICATE,AMOUNTTOTAL,AMOUNTOSTNDT,QTYTOTAL,QTYOSTNDT,STATUSFL,CINVOICE,JOBNO,VPONO,RFPORD,STATUSFLDT,RCPONO,ODATET,TERMS,PRIORITY,PRINTMSTAT,PRINMTFLDT,TYPE,VINVOICE,ATTACH,SHIPCODE,AGENT,BASEAMOUNTT,DELIVCHRGT,MISCCHRGT,TAX1AMTT,TAX2AMTT,TAX3AMTT,STARTDATET,NOTES,OWNER,OWNER2,DOCMNT)=(b.SID,b.PURCHSNO,b.DELVDATET,b.VENDOR,b.MATCODE,b.REPLICATE,b.AMOUNTTOTAL,b.AMOUNTOSTNDT,b.QTYTOTAL,b.QTYOSTNDT,b.STATUSFL,b.CINVOICE,b.JOBNO,b.VPONO,b.RFPORD,b.STATUSFLDT,b.RCPONO,b.ODATET,b.TERMS,b.PRIORITY,b.PRINTMSTAT,b.PRINMTFLDT,b.TYPE,b.VINVOICE,b.ATTACH,b.SHIPCODE,b.AGENT,b.BASEAMOUNTT,b.DELIVCHRGT,b.MISCCHRGT,b.TAX1AMTT,b.TAX2AMTT,b.TAX3AMTT,b.STARTDATET,b.NOTES,b.OWNER,b.OWNER2,b.DOCMNT)FROM "+schemaName+".VENQUOTE_b b where((b.sid=a.sid) AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2);UPDATE "+schemaName+".VENDORDERS a SET(SID,PURCHSNO,DELVDATET,VENDOR,MATCODE,AMOUNTTOTAL,AMOUNTOSTNDT,QTYTOTAL,QTYOSTNDT,STATUSFL,JOBNO,VENDQNO,RFPORD,STATUSFLDT,RCPONO,ODATET,TERMS,PRIORITY,PRINTMSTAT,PRINMTFLDT,TYPE,VINVOICE,ATTACH,SHIPCODE,AGENT,BASEAMOUNTT,DELIVCHRGT,MISCCHRGT,TAX1AMTT,TAX2AMTT,TAX3AMTT,STARTDATET,NOTES,OWNER,OWNER2,DOCMNT)=(b.SID,b.PURCHSNO,b.DELVDATET,b.VENDOR,b.MATCODE,b.AMOUNTTOTAL,b.AMOUNTOSTNDT,b.QTYTOTAL,b.QTYOSTNDT,b.STATUSFL,b.JOBNO,b.VENDQNO,b.RFPORD,b.STATUSFLDT,b.RCPONO,b.ODATET,b.TERMS,b.PRIORITY,b.PRINTMSTAT,b.PRINMTFLDT,b.TYPE,b.VINVOICE,b.ATTACH,b.SHIPCODE,b.AGENT,b.BASEAMOUNTT,b.DELIVCHRGT,b.MISCCHRGT,b.TAX1AMTT,b.TAX2AMTT,b.TAX3AMTT,b.STARTDATET,b.NOTES,b.OWNER,b.OWNER2,b.DOCMNT)FROM "+schemaName+".VENDORDERS_b b where((b.sid=a.sid) AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2);UPDATE "+schemaName+".VSHIPMEN a SET(SID,SHIPCODE,MATCODE,SHIPPER,PONO,CPONO,INVOICE,AMOUNTTOTAL,AMOUNTOSTNDT,QTYTOTAL,QTYOSTNDT,CARRIER,TYPE,SHIPDATET,SHIPDATETA,TARENO,PACKNO,VENDOR,CUSTOMER,BILLTOCODE,BILLTOSAMEASSHIPTO,SHIPTOCODE,NOTES,STATUSFL,STATUSFLDT,SERIALNO,PRINTMSTAT,PRINMTFLDT,OWNER,OWNER2)=(b.SID,b.SHIPCODE,b.MATCODE,b.SHIPPER,b.PONO,b.CPONO,b.INVOICE,b.AMOUNTTOTAL,b.AMOUNTOSTNDT,b.QTYTOTAL,b.QTYOSTNDT,b.CARRIER,b.TYPE,b.SHIPDATET,b.SHIPDATETA,b.TARENO,b.PACKNO,b.VENDOR,b.CUSTOMER,b.BILLTOCODE,b.BILLTOSAMEASSHIPTO,b.SHIPTOCODE,b.NOTES,b.STATUSFL,b.STATUSFLDT,b.SERIALNO,b.PRINTMSTAT,b.PRINMTFLDT,b.OWNER,b.OWNER2)FROM "+schemaName+".VSHIPMEN_b b where((b.sid=a.sid) AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE "+schemaName+".CUQUOTE a SET(SID,PURCHSNO,DELVDATET,VENDOR,AMOUNTTOTAL,AMOUNTOSTNDT,QTYTOTAL,QTYOSTNDT,STATUSFL,CUSTOMER,MATCODE,REPLICATE,CINVOICE,ORDPRICE,JOBNO,VPONO,QUOORDT,STATUSFLDT,PRINTMSTAT,PRINMTFLDT,TYPE,TERMS,PRIORITY,ODATET,SHIPCODE,ACTIVITYCODE,AGENT,BASEAMOUNTT,DELIVCHRGT,MISCCHRGT,TAX1AMTT,TAX2AMTT,TAX3AMTT,ATTACH,NOTES,OWNER,OWNER2,DOCMNT)=(b.SID,b.PURCHSNO,b.DELVDATET,b.VENDOR,b.AMOUNTTOTAL,b.AMOUNTOSTNDT,b.QTYTOTAL,b.QTYOSTNDT,b.STATUSFL,b.CUSTOMER,b.MATCODE,b.REPLICATE,b.CINVOICE,b.ORDPRICE,b.JOBNO,b.VPONO,b.QUOORDT,b.STATUSFLDT,b.PRINTMSTAT,b.PRINMTFLDT,b.TYPE,b.TERMS,b.PRIORITY,b.ODATET,b.SHIPCODE,b.ACTIVITYCODE,b.AGENT,b.BASEAMOUNTT,b.DELIVCHRGT,b.MISCCHRGT,b.TAX1AMTT,b.TAX2AMTT,b.TAX3AMTT,b.ATTACH,b.NOTES,b.OWNER,b.OWNER2,b.DOCMNT)FROM "+schemaName+".CUQUOTE_b b where((b.sid=a.sid) AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2);UPDATE "+schemaName+".CUORDERS a SET(SID,PURCHSNO,DELVDATET,CUSTOMER,MATCODE,CUQUOTE,CINVOICE,JOBNO,AMOUNTTOTAL,AMOUNTOSTNDT,QTYTOTAL,QTYOSTNDT,VPONO,RFPORD,RCPONO,ODATET,TERMS,PRIORITY,PRINTMSTAT,PRINMTFLDT,TYPE,VINVOICE,ATTACH,AGENT,BASEAMOUNTT,DELIVCHRGT,MISCCHRGT,TAX1AMTT,TAX2AMTT,TAX3AMTT,STARTDATET,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2,DOCMNT,SHIPCODEFROMPAY,SHIPCODE,BARPO)=(b.SID,b.PURCHSNO,b.DELVDATET,b.CUSTOMER,b.MATCODE,b.CUQUOTE,b.CINVOICE,b.JOBNO,b.AMOUNTTOTAL,b.AMOUNTOSTNDT,b.QTYTOTAL,b.QTYOSTNDT,b.VPONO,b.RFPORD,b.RCPONO,b.ODATET,b.TERMS,b.PRIORITY,b.PRINTMSTAT,b.PRINMTFLDT,b.TYPE,b.VINVOICE,b.ATTACH,b.AGENT,b.BASEAMOUNTT,b.DELIVCHRGT,b.MISCCHRGT,b.TAX1AMTT,b.TAX2AMTT,b.TAX3AMTT,b.STARTDATET,b.STATUSFL,b.STATUSFLDT,b.NOTES,b.OWNER,b.OWNER2,b.DOCMNT,b.SHIPCODEFROMPAY,b.SHIPCODE,b.BARPO)FROM "+schemaName+".CUORDERS_b b where((b.sid=a.sid) AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE "+schemaName+".CUINVOICE a SET(SID,INVOICE,CUSTOMER,MATCODE,INVODATE,AMOUNTTOTAL,AMOUNTOSTNDT,QTYTOTAL,QTYOSTNDT,PONO,REF1TYP,REF1CODE,SHIPDATET,SHIPTYPE,SHIPCODE,TERMS,STATUSFL,STATUSFLDT,TERMSDAT,DISCOUNP,DISCOUDT,DISCOUDS,NETDDAT,NETDDYS,FOB,TYPE,INTEGRSET,ATTACH,BASEAMOUNTT,DELIVCHRGT,MISCCHRGT,TAX1AMTT,TAX2AMTT,TAX3AMTT,AGENT,NOTES,PRINTMSTAT,PRINMTFLDT,OWNER,OWNER2,DOCMNT,BARINVOICE)=(b.SID,b.INVOICE,b.CUSTOMER,b.MATCODE,b.INVODATE,b.AMOUNTTOTAL,b.AMOUNTOSTNDT,b.QTYTOTAL,b.QTYOSTNDT,b.PONO,b.REF1TYP,b.REF1CODE,b.SHIPDATET,b.SHIPTYPE,b.SHIPCODE,b.TERMS,b.STATUSFL,b.STATUSFLDT,b.TERMSDAT,b.DISCOUNP,b.DISCOUDT,b.DISCOUDS,b.NETDDAT,b.NETDDYS,b.FOB,b.TYPE,b.INTEGRSET,b.ATTACH,b.BASEAMOUNTT,b.DELIVCHRGT,b.MISCCHRGT,b.TAX1AMTT,b.TAX2AMTT,b.TAX3AMTT,b.AGENT,b.NOTES,b.PRINTMSTAT,b.PRINMTFLDT,b.OWNER,b.OWNER2,b.DOCMNT,b.BARINVOICE)FROM "+schemaName+".CUINVOICE_b b where((b.sid=a.sid) AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2);UPDATE "+schemaName+".SHIPMENT a SET(SID,SHIPCODE,MATCODE,SHIPPER,PONO,CPONO,INVOICE,AMOUNTTOTAL,AMOUNTOSTNDT,QTYTOTAL,QTYOSTNDT,CARRIER,TYPE,SHIPDATET,SHIPDATETA,TARENO,PACKNO,CUSTOMER,BILLTOCODE,BILLTOSAMEASSHIPTO,SHIPTOCODE,NOTES,STATUSFL,STATUSFLDT,SERIALNO,PRINTMSTAT,PRINMTFLDT,OWNER,OWNER2,BARSHIPCOD)=(b.SID,b.SHIPCODE,b.MATCODE,b.SHIPPER,b.PONO,b.CPONO,b.INVOICE,b.AMOUNTTOTAL,b.AMOUNTOSTNDT,b.QTYTOTAL,b.QTYOSTNDT,b.CARRIER,b.TYPE,b.SHIPDATET,b.SHIPDATETA,b.TARENO,b.PACKNO,b.CUSTOMER,b.BILLTOCODE,b.BILLTOSAMEASSHIPTO,b.SHIPTOCODE,b.NOTES,b.STATUSFL,b.STATUSFLDT,b.SERIALNO,b.PRINTMSTAT,b.PRINMTFLDT,b.OWNER,b.OWNER2,b.BARSHIPCOD)FROM "+schemaName+".SHIPMENT_b b where((b.sid=a.sid) AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE "+schemaName+".EMPLORDERS a SET(SID,PURCHSNO,DELVDATET,EMPLOYEE,MATCODE,AMOUNTTOTAL,AMOUNTOSTNDT,QTYTOTAL,QTYOSTNDT,STATUSFL,JOBNO,VPONO,RFPORD,STATUSFLDT,RCPONO,ODATET,TERMS,PRIORITY,PRINTMSTAT,PRINMTFLDT,TYPE,VINVOICE,ATTACH,SHIPCODE,AGENT,BASEAMOUNTT,DELIVCHRGT,MISCCHRGT,TAX1AMTT,TAX2AMTT,TAX3AMTT,STARTDATET,NOTES,OWNER,OWNER2,DOCMNT)=(b.SID,b.PURCHSNO,b.DELVDATET,b.EMPLOYEE,b.MATCODE,b.AMOUNTTOTAL,b.AMOUNTOSTNDT,b.QTYTOTAL,b.QTYOSTNDT,b.STATUSFL,b.JOBNO,b.VPONO,b.RFPORD,b.STATUSFLDT,b.RCPONO,b.ODATET,b.TERMS,b.PRIORITY,b.PRINTMSTAT,b.PRINMTFLDT,b.TYPE,b.VINVOICE,b.ATTACH,b.SHIPCODE,b.AGENT,b.BASEAMOUNTT,b.DELIVCHRGT,b.MISCCHRGT,b.TAX1AMTT,b.TAX2AMTT,b.TAX3AMTT,b.STARTDATET,b.NOTES,b.OWNER,b.OWNER2,b.DOCMNT)FROM "+schemaName+".EMPLORDERS_b b where((b.sid=a.sid) AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2);UPDATE "+schemaName+".HLOGFILE a SET(SID,SERIALNO,MATCODE,QUANRECD,VENDOR,LOCATION,RECVRPT,INFLG,PHY,DATETIN,DATETOUT,JOBNO,PRINTMSTAT,PRINMTFLDT,PONO,SCANDATET,QUANISSD,BUTT,STATUSFL,QUANREJD,CUSTOMER,CPONO,CUSTOMEJ,ORGCOST,ORGPONO,ORGJOBNO,ALTSERNO,SELPRICE,PHYSQTY,SPERSON,CARTONID,CARTONPR,PACKCODE,TARECODE,SHIPCODE,TYPE,STATUSFLDT,OWNER,OWNER2)=(b.SID,b.SERIALNO,b.MATCODE,b.QUANRECD,b.VENDOR,b.LOCATION,b.RECVRPT,b.INFLG,b.PHY,b.DATETIN,b.DATETOUT,b.JOBNO,b.PRINTMSTAT,b.PRINMTFLDT,b.PONO,b.SCANDATET,b.QUANISSD,b.BUTT,b.STATUSFL,b.QUANREJD,b.CUSTOMER,b.CPONO,b.CUSTOMEJ,b.ORGCOST,b.ORGPONO,b.ORGJOBNO,b.ALTSERNO,b.SELPRICE,b.PHYSQTY,b.SPERSON,b.CARTONID,b.CARTONPR,b.PACKCODE,b.TARECODE,b.SHIPCODE,b.TYPE,b.STATUSFLDT,b.OWNER,b.OWNER2)FROM "+schemaName+".HLOGFILE_b b where((b.sid=a.sid) AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE "+schemaName+".CPAYMENT a SET(SID,PAYMENT,CUSTOMER,CINVOICE,CHEQDATE,PAYMENTDUEDATE,POSTINGPERIOD,MATCODE,INTEGRSET,ACCOUNT,AMOUNTTOTAL,AMOUNTOSTNDT,AMOUNTIN,QTYTOTAL,QTYOSTNDT,DISCOUNT,BASEAMOUNTT,DELIVCHRGT,MISCCHRGT,TAX1AMTT,TAX2AMTT,TAX3AMTT,PAYTYPE,PAYBYID,PAYBYDATE,CURRENCY,CONVRATE,LOCAMOUNTT,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(b.SID,b.PAYMENT,b.CUSTOMER,b.CINVOICE,b.CHEQDATE,b.PAYMENTDUEDATE,b.POSTINGPERIOD,b.MATCODE,b.INTEGRSET,b.ACCOUNT,b.AMOUNTTOTAL,b.AMOUNTOSTNDT,b.AMOUNTIN,b.QTYTOTAL,b.QTYOSTNDT,b.DISCOUNT,b.BASEAMOUNTT,b.DELIVCHRGT,b.MISCCHRGT,b.TAX1AMTT,b.TAX2AMTT,b.TAX3AMTT,b.PAYTYPE,b.PAYBYID,b.PAYBYDATE,b.CURRENCY,b.CONVRATE,b.LOCAMOUNTT,b.STATUSFL,b.STATUSFLDT,b.NOTES,b.OWNER,b.OWNER2)FROM "+schemaName+".CPAYMENT_b b where((b.sid=a.sid) AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2);UPDATE "+schemaName+".MACHINE a SET(SID,MACHINECODE,QUANTITY,DESCRIPT,DATEADDED,SOURCE1,SOURCE2,UPCCODE,COST,REPLCOST,SELPRICE,SPRICOLD,SPRICNEW,SPRICEFFDT,SHIPCODE,PRINTMSTAT,PRINMTFLDT,MISCCODE1,MISCCODE2,QTYLEVEL1,UNIT,CASEQTY,TYPE,TAX1,TAX2,TAX3,ALIASCODE,PARENTCODE,AVGPRICE,AVGCOST,STATUSFL,STATUSFLDT,SUBCODESN,SUBCODESN2,SUBCODESN3,CUORDQTY,VENORQTY,CUPICQTY,VENPIQTY,CUINVQTY,CUSHIQTY,VENSHQTY,EFFDATE,INTEGRSET,NOTES,DOCMNT,OWNER,OWNER2,BARUPC)=(b.SID,b.MACHINECODE,b.QUANTITY,b.DESCRIPT,b.DATEADDED,b.SOURCE1,b.SOURCE2,b.UPCCODE,b.COST,b.REPLCOST,b.SELPRICE,b.SPRICOLD,b.SPRICNEW,b.SPRICEFFDT,b.SHIPCODE,b.PRINTMSTAT,b.PRINMTFLDT,b.MISCCODE1,b.MISCCODE2,b.QTYLEVEL1,b.UNIT,b.CASEQTY,b.TYPE,b.TAX1,b.TAX2,b.TAX3,b.ALIASCODE,b.PARENTCODE,b.AVGPRICE,b.AVGCOST,b.STATUSFL,b.STATUSFLDT,b.SUBCODESN,b.SUBCODESN2,b.SUBCODESN3,b.CUORDQTY,b.VENORQTY,b.CUPICQTY,b.VENPIQTY,b.CUINVQTY,b.CUSHIQTY,b.VENSHQTY,b.EFFDATE,b.INTEGRSET,b.NOTES,b.DOCMNT,b.OWNER,b.OWNER2,b.BARUPC)FROM "+schemaName+".MACHINE_b b where((b.sid=a.sid) AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2);UPDATE "+schemaName+".GROUPMEMBERS a SET(SID,GROUPID,MEMBERID,DESCRIPT,SOURCETYPE,MEMBEREM,MEMBERCU,MEMBERVE,MEMBERIT,MEMBERAC,MEMBERMA,TYPE,CURRPW,EXPIRY,STATUSFL,STATUSFLDT,OWNER,OWNER2)=(b.SID,b.GROUPID,b.MEMBERID,b.DESCRIPT,b.SOURCETYPE,b.MEMBEREM,b.MEMBERCU,b.MEMBERVE,b.MEMBERIT,b.MEMBERAC,b.MEMBERMA,b.TYPE,b.CURRPW,b.EXPIRY,b.STATUSFL,b.STATUSFLDT,b.OWNER,b.OWNER2)FROM "+schemaName+".GROUPMEMBERS_b b where((b.sid=a.sid) AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE "+schemaName+".ITEMBOM a SET(SID,BOMCODE,DESCRIPT,QUANTITY,MODE,STATUSFL,STATUSFLDT,OWNER,OWNER2)=(b.SID,b.BOMCODE,b.DESCRIPT,b.QUANTITY,b.MODE,b.STATUSFL,b.STATUSFLDT,b.OWNER,b.OWNER2)FROM "+schemaName+".ITEMBOM_b b where((b.sid=a.sid) AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2);UPDATE "+schemaName+".ITEMBOMDETAILS a SET(SID,BOMCODE,MATCODE,MODE,SUBQTY,STATUSFL,STATUSFLDT,OWNER,OWNER2)=(b.SID,b.BOMCODE,b.MATCODE,b.MODE,b.SUBQTY,b.STATUSFL,b.STATUSFLDT,b.OWNER,b.OWNER2)FROM "+schemaName+".ITEMBOMDETAILS_b b where((b.sid=a.sid) AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2);UPDATE "+schemaName+".TASK a SET(SID,TASKID,DESCRIPT,ACTIVITYCODE,PROJECTTEAM,RESOURCE,MODE,ESTSTART,CALCSTART,ACTLSTART,ESTEND,CALCEND,ACTLEND,SUBQTY,BOMCODE,LOCATION,STATUSFL,STATUSFLDT,OWNER,OWNER2)=(b.SID,b.TASKID,b.DESCRIPT,b.ACTIVITYCODE,b.PROJECTTEAM,b.RESOURCE,b.MODE,b.ESTSTART,b.CALCSTART,b.ACTLSTART,b.ESTEND,b.CALCEND,b.ACTLEND,b.SUBQTY,b.BOMCODE,b.LOCATION,b.STATUSFL,b.STATUSFLDT,b.OWNER,b.OWNER2)FROM "+schemaName+".TASK_b b where((b.sid=a.sid) AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE "+schemaName+".VINVOICE a SET(SID,INVOICE,VENDOR,MATCODE,INTEGRSET,INVODATE,AMOUNTTOTAL,AMOUNTOSTNDT,QTYTOTAL,QTYOSTNDT,PONO,REF1TYP,REF1CODE,SHIPDATET,SHIPTYPE,SHIPCODE,TERMS,STATUSFL,STATUSFLDT,TERMSDAT,DISCOUNP,DISCOUDT,DISCOUDS,NETDDAT,NETDDYS,FOB,TYPE,ATTACH,BASEAMOUNTT,DELIVCHRGT,MISCCHRGT,TAX1AMTT,TAX2AMTT,TAX3AMTT,AGENT,NOTES,PRINTMSTAT,PRINMTFLDT,OWNER,OWNER2,DOCMNT)=(b.SID,b.INVOICE,b.VENDOR,b.MATCODE,b.INTEGRSET,b.INVODATE,b.AMOUNTTOTAL,b.AMOUNTOSTNDT,b.QTYTOTAL,b.QTYOSTNDT,b.PONO,b.REF1TYP,b.REF1CODE,b.SHIPDATET,b.SHIPTYPE,b.SHIPCODE,b.TERMS,b.STATUSFL,b.STATUSFLDT,b.TERMSDAT,b.DISCOUNP,b.DISCOUDT,b.DISCOUDS,b.NETDDAT,b.NETDDYS,b.FOB,b.TYPE,b.ATTACH,b.BASEAMOUNTT,b.DELIVCHRGT,b.MISCCHRGT,b.TAX1AMTT,b.TAX2AMTT,b.TAX3AMTT,b.AGENT,b.NOTES,b.PRINTMSTAT,b.PRINMTFLDT,b.OWNER,b.OWNER2,b.DOCMNT)FROM "+schemaName+".VINVOICE_b b where((b.sid=a.sid) AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2);UPDATE "+schemaName+".VPAYMENT a SET(SID,PAYMENT,VENDOR,VINVOICE,CHEQDATE,PAYMENTDUEDATE,POSTINGPERIOD,MATCODE,INTEGRSET,ACCOUNT,AMOUNTTOTAL,AMOUNTOSTNDT,AMOUNTIN,QTYTOTAL,QTYOSTNDT,BASEAMOUNTT,DELIVCHRGT,MISCCHRGT,TAX1AMTT,TAX2AMTT,TAX3AMTT,DISCOUNT,PAYTYPE,PAYBYID,PAYBYDATE,CURRENCY,CONVRATE,LOCAMOUNT,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(b.SID,b.PAYMENT,b.VENDOR,b.VINVOICE,b.CHEQDATE,b.PAYMENTDUEDATE,b.POSTINGPERIOD,b.MATCODE,b.INTEGRSET,b.ACCOUNT,b.AMOUNTTOTAL,b.AMOUNTOSTNDT,b.AMOUNTIN,b.QTYTOTAL,b.QTYOSTNDT,b.BASEAMOUNTT,b.DELIVCHRGT,b.MISCCHRGT,b.TAX1AMTT,b.TAX2AMTT,b.TAX3AMTT,b.DISCOUNT,b.PAYTYPE,b.PAYBYID,b.PAYBYDATE,b.CURRENCY,b.CONVRATE,b.LOCAMOUNT,b.STATUSFL,b.STATUSFLDT,b.NOTES,b.OWNER,b.OWNER2)FROM "+schemaName+".VPAYMENT_b b where((b.sid=a.sid) AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE "+schemaName+".WAGEEARNERAUX a SET(SID,WAGEEARNERID,LINE,SIN,WCBYTDL,WCBYTDN,INSYTDL,INSYTDN,VACATONYL,VACATONYN,PAYYTDL,FPENSIYTL,PPENSIYTL,ITAXYTDL,PTAXYTDL,PAYYTDN,FPENSIYTN,PPENSIYTN,ITAXYTDN,PATXYTDN,GPAYYTDL,GPAYYTDN,STATUSFL,STATUSFLDT,OWNER,OWNER2)=(b.SID,b.WAGEEARNERID,b.LINE,b.SIN,b.WCBYTDL,b.WCBYTDN,b.INSYTDL,b.INSYTDN,b.VACATONYL,b.VACATONYN,b.PAYYTDL,b.FPENSIYTL,b.PPENSIYTL,b.ITAXYTDL,b.PTAXYTDL,b.PAYYTDN,b.FPENSIYTN,b.PPENSIYTN,b.ITAXYTDN,b.PATXYTDN,b.GPAYYTDL,b.GPAYYTDN,b.STATUSFL,b.STATUSFLDT,b.OWNER,b.OWNER2)FROM "+schemaName+".WAGEEARNERAUX_b b where((b.sid=a.sid) AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2);UPDATE "+schemaName+".Rgenapp a SET(SID,APPNAME,DESCRIPT,APPTYPE,APPWACCOUNTING,APPWEMAIL,APPWJMSMQ,APPVENDOR,APPVERSION,APPPLATFORM,APPMODELPKG,APPACTIONPKG,APPSKIN,APPDEPLOYTYPE,CREATEFIDATA,REVENGDATA,INITIALIZEFIDATA,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(b.SID,b.APPNAME,b.DESCRIPT,b.APPTYPE,b.APPWACCOUNTING,b.APPWEMAIL,b.APPWJMSMQ,b.APPVENDOR,b.APPVERSION,b.APPPLATFORM,b.APPMODELPKG,b.APPACTIONPKG,b.APPSKIN,b.APPDEPLOYTYPE,b.CREATEFIDATA,b.REVENGDATA,b.INITIALIZEFIDATA,b.STATUSFL,b.STATUSFLDT,b.NOTES,b.OWNER,b.OWNER2)FROM "+schemaName+".Rgenapp_b b where((b.sid=a.sid) AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE "+schemaName+".RGENDB a SET(SID,DBNAME,DESCRIPT,DBTYPE,DBVENDOR,DBVERSION,DBPLATFORM,APPCODE,SQLDRIVER,SQLURL,SQLUSER,SQLPASSWORD,SQLCLASSPATH,SQLCREATEDBSCRIPT,SQLDROPDBSCRIPT,SQLCREATETBLSSCRIPT,SQLLOADTBLSSCRIPT,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(b.SID,b.DBNAME,b.DESCRIPT,b.DBTYPE,b.DBVENDOR,b.DBVERSION,b.DBPLATFORM,b.APPCODE,b.SQLDRIVER,b.SQLURL,b.SQLUSER,b.SQLPASSWORD,b.SQLCLASSPATH,b.SQLCREATEDBSCRIPT,b.SQLDROPDBSCRIPT,b.SQLCREATETBLSSCRIPT,b.SQLLOADTBLSSCRIPT,b.STATUSFL,b.STATUSFLDT,b.NOTES,b.OWNER,b.OWNER2)FROM "+schemaName+".RGENDB_b b where((b.sid=a.sid) AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE "+schemaName+".RGENTABLE a SET(SID,TABLENAME,DBCODE,INADDMENU,INLISTMENU,INTRANSACTIONMENU,INREPORTMENU,INGRAPHSMENU,INMAILINGMENU,INGENERATEMENU,INADMINMENU,INMAINTENANCEMENU,INLABELSMENU,INSKIPMENU,INCUSTOM1MENU,MENULEVEL,MENUROLE,MENULABELGROUP,SUBMENUSEQUENCE,USAGESCOPE,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(b.SID,b.TABLENAME,b.DBCODE,b.INADDMENU,b.INLISTMENU,b.INTRANSACTIONMENU,b.INREPORTMENU,b.INGRAPHSMENU,b.INMAILINGMENU,b.INGENERATEMENU,b.INADMINMENU,b.INMAINTENANCEMENU,b.INLABELSMENU,b.INSKIPMENU,b.INCUSTOM1MENU,b.MENULEVEL,b.MENUROLE,b.MENULABELGROUP,b.SUBMENUSEQUENCE,b.USAGESCOPE,b.STATUSFL,b.STATUSFLDT,b.NOTES,b.OWNER,b.OWNER2)FROM "+schemaName+".RGENTABLE_b b where((b.sid=a.sid) AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2);UPDATE "+schemaName+".RGENFIELDS a SET(SID,DBCODE,TABLENAME,FIELDNAME,FIELDTYPE,FIELDLENGTH,INGROUP,SEQWITHINGROUP,FOCUSSEQ,FUTURE1,INITIALVALUE,KEYORADDITIONAL,KEYORADDITIONAL2,KEYORADDITIONAL3,SHOWINMENU,SHOWINREPORT,PROCESSOPTION1,PROCESSOPTION2,FDBCODE,FTABLENAME,FFIELDKEYNAME1,FFIELDKEYNAME2,FFIELDKEYNAME3,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(b.SID,b.DBCODE,b.TABLENAME,b.FIELDNAME,b.FIELDTYPE,b.FIELDLENGTH,b.INGROUP,b.SEQWITHINGROUP,b.FOCUSSEQ,b.FUTURE1,b.INITIALVALUE,b.KEYORADDITIONAL,b.KEYORADDITIONAL2,b.KEYORADDITIONAL3,b.SHOWINMENU,b.SHOWINREPORT,b.PROCESSOPTION1,b.PROCESSOPTION2,b.FDBCODE,b.FTABLENAME,b.FFIELDKEYNAME1,b.FFIELDKEYNAME2,b.FFIELDKEYNAME3,b.STATUSFL,b.STATUSFLDT,b.NOTES,b.OWNER,b.OWNER2)FROM "+schemaName+".RGENFIELDS_b b where((b.sid=a.sid) AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE "+schemaName+".GENOPTIONS a SET(SID,ROW,GENOPTIONS01,GENPURPOSE01,GENVALUE01,GENOPTIONS02,GENPURPOSE02,GENVALUE02,GENOPTIONS03,GENPURPOSE03,GENVALUE03,GENOPTIONS04,GENPURPOSE04,GENVALUE04,GENOPTIONS05,GENPURPOSE05,GENVALUE05,GENOPTIONS06,GENPURPOSE06,GENVALUE06,GENOPTIONS07,GENPURPOSE07,GENVALUE07,GENOPTIONS08,GENPURPOSE08,GENVALUE08,GENOPTIONS09,GENPURPOSE09,GENVALUE09,GENOPTIONS10,GENPURPOSE10,GENVALUE10,GENOPTIONS11,GENPURPOSE11,GENVALUE11,GENOPTIONS12,GENPURPOSE12,GENVALUE12,GENOPTIONS13,GENPURPOSE13,GENVALUE13,GENOPTIONS14,GENPURPOSE14,GENVALUE14,GENOPTIONS15,GENPURPOSE15,GENVALUE15,GENOPTIONS16,GENPURPOSE16,GENVALUE16,GENOPTIONS17,GENPURPOSE17,GENVALUE17,GENOPTIONS18,GENPURPOSE18,GENVALUE18,GENOPTIONS19,GENPURPOSE19,GENVALUE19,GENOPTIONS20,GENPURPOSE20,GENVALUE20,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(b.SID,b.ROW,b.GENOPTIONS01,b.GENPURPOSE01,b.GENVALUE01,b.GENOPTIONS02,b.GENPURPOSE02,b.GENVALUE02,b.GENOPTIONS03,b.GENPURPOSE03,b.GENVALUE03,b.GENOPTIONS04,b.GENPURPOSE04,b.GENVALUE04,b.GENOPTIONS05,b.GENPURPOSE05,b.GENVALUE05,b.GENOPTIONS06,b.GENPURPOSE06,b.GENVALUE06,b.GENOPTIONS07,b.GENPURPOSE07,b.GENVALUE07,b.GENOPTIONS08,b.GENPURPOSE08,b.GENVALUE08,b.GENOPTIONS09,b.GENPURPOSE09,b.GENVALUE09,b.GENOPTIONS10,b.GENPURPOSE10,b.GENVALUE10,b.GENOPTIONS11,b.GENPURPOSE11,b.GENVALUE11,b.GENOPTIONS12,b.GENPURPOSE12,b.GENVALUE12,b.GENOPTIONS13,b.GENPURPOSE13,b.GENVALUE13,b.GENOPTIONS14,b.GENPURPOSE14,b.GENVALUE14,b.GENOPTIONS15,b.GENPURPOSE15,b.GENVALUE15,b.GENOPTIONS16,b.GENPURPOSE16,b.GENVALUE16,b.GENOPTIONS17,b.GENPURPOSE17,b.GENVALUE17,b.GENOPTIONS18,b.GENPURPOSE18,b.GENVALUE18,b.GENOPTIONS19,b.GENPURPOSE19,b.GENVALUE19,b.GENOPTIONS20,b.GENPURPOSE20,b.GENVALUE20,b.STATUSFL,b.STATUSFLDT,b.NOTES,b.OWNER,b.OWNER2)FROM "+schemaName+".GENOPTIONS_b b where((b.sid=a.sid) AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE "+schemaName+".BLOBDATA a SET(SID,FROMTABLE,FROMKEY,QUALIFIER,SEQUENCE,TYPE,DATA,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(b.SID,b.FROMTABLE,b.FROMKEY,b.QUALIFIER,b.SEQUENCE,b.TYPE,b.DATA,b.STATUSFL,b.STATUSFLDT,b.NOTES,b.OWNER,b.OWNER2)FROM "+schemaName+".BLOBDATA_b b where((b.sid=a.sid) AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE "+schemaName+".CLOBDATA a SET(SID,FROMTABLE,FROMKEY,QUALIFIER,SEQUENCE,TYPE,DATA,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(b.SID,b.FROMTABLE,b.FROMKEY,b.QUALIFIER,b.SEQUENCE,b.TYPE,b.DATA,b.STATUSFL,b.STATUSFLDT,b.NOTES,b.OWNER,b.OWNER2)FROM "+schemaName+".CLOBDATA_b b where((b.sid=a.sid) AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE "+schemaName+".CONTROLUSAGEBYPERIODS a SET(SID,CTLUSAGETRACKERID,DESCRIPT,CONTROLCODE,CURRENCY,PERIOD0LABEL,PERIOD0B,PERIOD0,PERIODTOTALSLABEL,PERIODTOTALSB,PERIODTOTALS,PERIOD1LABEL,PERIOD1BUDGET,PERIOD1ACTUAL,PERIOD2LABEL,PERIOD2B,PERIOD2,PERIOD3LABEL,PERIOD3B,PERIOD3,PERIOD4LABEL,PERIOD4B,PERIOD4,PERIOD5LABEL,PERIOD5B,PERIOD5,PERIOD6LABEL,PERIOD6B,PERIOD6,PERIOD7LABEL,PERIOD7B,PERIOD7,PERIOD8LABEL,PERIOD8B,PERIOD8,PERIOD9LABEL,PERIOD9B,PERIOD9,PERIOD10LABEL,PERIOD10B,PERIOD10,PERIOD11LABEL,PERIOD11B,PERIOD11,PERIOD12LABEL,PERIOD12B,PERIOD12,PERIODNLABEL,PERIODNB,PERIODN,NOTES,STATUSFL,STATUSFLDT,OWNER,OWNER2)=(b.SID,b.CTLUSAGETRACKERID,b.DESCRIPT,b.CONTROLCODE,b.CURRENCY,b.PERIOD0LABEL,b.PERIOD0B,b.PERIOD0,b.PERIODTOTALSLABEL,b.PERIODTOTALSB,b.PERIODTOTALS,b.PERIOD1LABEL,b.PERIOD1BUDGET,b.PERIOD1ACTUAL,b.PERIOD2LABEL,b.PERIOD2B,b.PERIOD2,b.PERIOD3LABEL,b.PERIOD3B,b.PERIOD3,b.PERIOD4LABEL,b.PERIOD4B,b.PERIOD4,b.PERIOD5LABEL,b.PERIOD5B,b.PERIOD5,b.PERIOD6LABEL,b.PERIOD6B,b.PERIOD6,b.PERIOD7LABEL,b.PERIOD7B,b.PERIOD7,b.PERIOD8LABEL,b.PERIOD8B,b.PERIOD8,b.PERIOD9LABEL,b.PERIOD9B,b.PERIOD9,b.PERIOD10LABEL,b.PERIOD10B,b.PERIOD10,b.PERIOD11LABEL,b.PERIOD11B,b.PERIOD11,b.PERIOD12LABEL,b.PERIOD12B,b.PERIOD12,b.PERIODNLABEL,b.PERIODNB,b.PERIODN,b.NOTES,b.STATUSFL,b.STATUSFLDT,b.OWNER,b.OWNER2)FROM "+schemaName+".CONTROLUSAGEBYPERIODS_b b where((b.sid=a.sid) AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE "+schemaName+".RESOURCE_BUNDLE a SET(SID,NAME,LANGUAGE,COUNTRY,VARIANT,STATUSFL,STATUSFLDT,OWNER,OWNER2)=(b.SID,b.NAME,b.LANGUAGE,b.COUNTRY,b.VARIANT,b.STATUSFL,b.STATUSFLDT,b.OWNER,b.OWNER2)FROM "+schemaName+".RESOURCE_BUNDLE_b b where((b.sid=a.sid) AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE "+schemaName+".RESOURCE a SET(SID,_KEY,_VALUE,RESOURCEBUNDLE,STATUSFL,STATUSFLDT,OWNER,OWNER2)=(b.SID,b._KEY,b._VALUE,b.RESOURCEBUNDLE,b.STATUSFL,b.STATUSFLDT,b.OWNER,b.OWNER2)FROM "+schemaName+".RESOURCE_b b where((b.sid=a.sid) AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE "+schemaName+".TRUEFALSE a SET(SID,TABLENAME,QUALIFIER,SHOW001,SHOW002,SHOW003,SHOW004,SHOW005,SHOW006,SHOW007,SHOW008,SHOW009,SHOW010,SHOW011,SHOW012,SHOW013,SHOW014,SHOW015,SHOW016,SHOW017,SHOW018,SHOW019,SHOW020,SHOW021,SHOW022,SHOW023,SHOW024,SHOW025,SHOW026,SHOW027,SHOW028,SHOW029,SHOW030,SHOW031,SHOW032,SHOW033,SHOW034,SHOW035,SHOW036,SHOW037,SHOW038,SHOW039,SHOW040,SHOW041,SHOW042,SHOW043,SHOW044,SHOW045,SHOW046,SHOW047,SHOW048,SHOW049,SHOW050,SHOW051,SHOW052,SHOW053,SHOW054,SHOW055,SHOW056,SHOW057,SHOW058,SHOW059,SHOW060,SHOW061,SHOW062,SHOW063,SHOW064,SHOW065,SHOW066,SHOW067,SHOW068,SHOW069,SHOW070,SHOW071,SHOW072,SHOW073,SHOW074,SHOW075,SHOW076,SHOW077,SHOW078,SHOW079,SHOW080,SHOW081,SHOW082,SHOW083,SHOW084,SHOW085,SHOW086,SHOW087,SHOW088,SHOW089,SHOW090,SHOW091,SHOW092,SHOW093,SHOW094,SHOW095,SHOW096,SHOW097,SHOW098,SHOW099,SHOW100,SHOW101,SHOW102,SHOW103,SHOW104,SHOW105,SHOW106,SHOW107,SHOW108,SHOW109,SHOW110,SHOW111,SHOW112,SHOW113,SHOW114,SHOW115,SHOW116,SHOW117,SHOW118,SHOW119,SHOW120,SHOW121,SHOW122,SHOW123,SHOW124,SHOW125,SHOW126,SHOW127,SHOW128,SHOW129,SHOW130,SHOW131,SHOW132,SHOW133,SHOW134,SHOW135,SHOW136,SHOW137,SHOW138,STATUSFL,STATUSFLDT,OWNER,OWNER2)=(b.SID,b.TABLENAME,b.QUALIFIER,b.SHOW001,b.SHOW002,b.SHOW003,b.SHOW004,b.SHOW005,b.SHOW006,b.SHOW007,b.SHOW008,b.SHOW009,b.SHOW010,b.SHOW011,b.SHOW012,b.SHOW013,b.SHOW014,b.SHOW015,b.SHOW016,b.SHOW017,b.SHOW018,b.SHOW019,b.SHOW020,b.SHOW021,b.SHOW022,b.SHOW023,b.SHOW024,b.SHOW025,b.SHOW026,b.SHOW027,b.SHOW028,b.SHOW029,b.SHOW030,b.SHOW031,b.SHOW032,b.SHOW033,b.SHOW034,b.SHOW035,b.SHOW036,b.SHOW037,b.SHOW038,b.SHOW039,b.SHOW040,b.SHOW041,b.SHOW042,b.SHOW043,b.SHOW044,b.SHOW045,b.SHOW046,b.SHOW047,b.SHOW048,b.SHOW049,b.SHOW050,b.SHOW051,b.SHOW052,b.SHOW053,b.SHOW054,b.SHOW055,b.SHOW056,b.SHOW057,b.SHOW058,b.SHOW059,b.SHOW060,b.SHOW061,b.SHOW062,b.SHOW063,b.SHOW064,b.SHOW065,b.SHOW066,b.SHOW067,b.SHOW068,b.SHOW069,b.SHOW070,b.SHOW071,b.SHOW072,b.SHOW073,b.SHOW074,b.SHOW075,b.SHOW076,b.SHOW077,b.SHOW078,b.SHOW079,b.SHOW080,b.SHOW081,b.SHOW082,b.SHOW083,b.SHOW084,b.SHOW085,b.SHOW086,b.SHOW087,b.SHOW088,b.SHOW089,b.SHOW090,b.SHOW091,b.SHOW092,b.SHOW093,b.SHOW094,b.SHOW095,b.SHOW096,b.SHOW097,b.SHOW098,b.SHOW099,b.SHOW100,b.SHOW101,b.SHOW102,b.SHOW103,b.SHOW104,b.SHOW105,b.SHOW106,b.SHOW107,b.SHOW108,b.SHOW109,b.SHOW110,b.SHOW111,b.SHOW112,b.SHOW113,b.SHOW114,b.SHOW115,b.SHOW116,b.SHOW117,b.SHOW118,b.SHOW119,b.SHOW120,b.SHOW121,b.SHOW122,b.SHOW123,b.SHOW124,b.SHOW125,b.SHOW126,b.SHOW127,b.SHOW128,b.SHOW129,b.SHOW130,b.SHOW131,b.SHOW132,b.SHOW133,b.SHOW134,b.SHOW135,b.SHOW136,b.SHOW137,b.SHOW138,b.STATUSFL,b.STATUSFLDT,b.OWNER,b.OWNER2)FROM "+schemaName+".TRUEFALSE_b b where((b.sid=a.sid) AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
  FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
   FacesMessage.SEVERITY_INFO,bundle.getString("removed")+": "+deletedCount+" "+ bundle.getString("updated")+": "+updatedCount+" "+bundle.getString("inserted")+": "+insertedCount,""));
*/
// update client record field cadcsize to show last restoredate as a varchar
     sqlScript="update "+schemaName+".client set cadcsize=:restoredts where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2Code", owner2Code).setParameter("restoredts", sdf.format(calendar.getTime()));
      q.executeUpdate();

} catch (Exception e) {
   int len=sqlScript.length();
   len=len>120?120:len;
   FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
    FacesMessage.SEVERITY_INFO,bundle.getString("error")+" "+bundle.getString("in")+" "+bundle.getString("restore")+" "+sqlScript.substring(0,len) + ", "+e.getMessage(),""));
}
    FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
     FacesMessage.SEVERITY_INFO,bundle.getString("restore-")+" "+bundle.getString("removed")+": "+deletedCount+" "+bundle.getString("inserted")+": "+insertedCount,""));


	 return "restore done";
     }


	public String  restoreTenant2() {
      //use DatabaseMetaData, as in authenticator.java, to avoid harcoding here
      //use DatabaseMetaData, as in authenticator.java, to avoid harcoding here
      //using jdbc connection to get database metadata rather than entitymanager way to be ORM neutral
      DatabaseMetaData databaseMetaData=null;
      String productName="";
      String dbProductName="hsql";
      try(Connection conn = getConnection();){
       databaseMetaData = conn.getMetaData();
       productName = databaseMetaData.getDatabaseProductName();
      } catch (Exception e) {
       log.severe("No datasouce connection or databaseMetaData, Cannot continue");
       return null;
      }
      if(productName==null || productName.isEmpty()){
       log.severe("No datasouce setup yet, check tomee.xml or standalone.xml etc. Cannot continue");
       return null;
      }
      if(productName.contains("PostgreSQL")){
       dbProductName="psql";
      }

      schemaName="genapp";//hard code for now


     String sqlScript ="";
try{
     int deletedCount=0;
     int updatedCount=0;
     int insertedCount=0;
     // 1-remove rows from main if not in backup ie any new rows in main will be removed
     // 2-insert into main if old rows in backUp
     // 3-update main if row in backup has different change time  (relies on statusfldate change)
      // follow the deletion order list produced by schemaspygui C:\schemaspygui\postgres_postgre_\deletionOrder.txt ( future use the list as input to automate )
      // insertionOrder.txt for insert, for update order does not matter because we are not dropping or adding any relation but will follow
      // insertionOrder.txt

     // remove rows from main if not in backup ie any new rows in main will be removed
      // resource_bundle,resource,clob and blob have SYSTEM records which need extra logic
      // SYSTEM records should not be deleted from main or backup table but should be copied into backup if needed ?? revisit
      // may be some tables like user need to be handled as restore 2 since all new users and passwords will be dropped/changed
     sqlScript="delete from "+schemaName+".\"USER\" a where   a.owner2=:owner2  and  not exists  (select sid from "+schemaName+".\"USER_b\" b where  a.sid = b.sid and b.owner2=:owner2)";
     if(dbProductName.equals("psql")){
      sqlScript="delete from "+schemaName+".\"user\" a where   a.owner2=:owner2  and  not exists  (select sid from "+schemaName+".\"user_b\" b where  a.sid = b.sid and b.owner2=:owner2)";
     }

      Query q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="insert into "+schemaName+".\"USER\" select * from "+schemaName+".\"USER_b\" b where  b.owner2=:owner2  and  not exists (select sid from "+schemaName+".\"USER\"  a where b.sid = a.sid and a.owner2=:owner2)";
     if(dbProductName.equals("psql")){
      sqlScript="insert into "+schemaName+".\"user\" select * from "+schemaName+".\"user_b\" b where  b.owner2=:owner2  and  not exists (select sid from "+schemaName+".\"user\"  a where b.sid = a.sid and a.owner2=:owner2)";
     }

      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();
//postgresql UPDATE genapp.journal_b SET sid=a.sid,spostdate=a.spostdate,postdate=a.postdate,owner2=a.owner2 FROM  genapp.journal a  where(genapp.journal_b.sid=a.sid AND a.postdate<>genapp.journal_b.postdate AND a.owner2='localhost')
//hsqldb or stanard UPDATE genapp.journal_b b SET (sid,spostdate,postdate,owner2)=(SELECT sid,spostdate,postdate,owner2 FROM  genapp.journal a where b.sid=a.sid AND a.postdate<>b.postdate AND a.owner2='localhost')
sqlScript="UPDATE "+schemaName+".journal_b b SET(sid,spostdate,postdate,calendardt,jrnltype,jnlseqb,jnlseq,jnlseqs,period,account,debit,credit,xreference,descript,statusfl,owner,owner2)=(SELECT sid,spostdate,postdate,calendardt,jrnltype,jnlseqb,jnlseq,jnlseqs,period,account,debit,credit,xreference,descript,statusfl,owner,owner2 FROM "+schemaName+".journal a where a.sid=b.sid AND a.postdate<>b.postdate and a.owner2=:owner2)";
if(dbProductName.equals("psql")){
 sqlScript="UPDATE "+schemaName+".journal_b SET sid=a.sid,a.spostdate=a.spostdate,postdate=a.postdate,calendardt=a.calendardt,jrnltype=a.jrnltype,jnlseqb=,jnlseq=a.jnlseq,jnlseqs=a.jnlseqs,period=a.period,account=a.account,debit=a.debit,credit=a.credit,xreference=a.xreference,descript=a.descript,statusfl=a.statusfl,owner=a.owner,owner2=a.owner2) FROM "+schemaName+".journal a where(genapp.journal_b.sid=a.sid AND a.postdate<>genapp.journal_b.postdate AND a.owner2=:owner2)";
}
/*
     sqlScript="UPDATE "+schemaName+".\"USER\" a SET(SID,ID,CLIENT,EMPLOYEE,VENDOR,CUSTOMER,OTHERID,ALEVEL,BLEVEL,CURRPW,EXPIRY,OLDPW,TEMPORARYPASSWORD,PASSWORDHASH,ACTIVATIONKEY,RESTRICT1,RESTRICT2,RESTRICT3,ALLOW1,ALLOW2,ALLOW3,MAXPROFLROW,CPROFLROW,STATUSFL,STATUSFLDT,UCURRCALDA,PREPROCESS,NOTES,DOCMNT,OWNER,OWNER2)=(b.SID,b.ID,b.CLIENT,b.EMPLOYEE,b.VENDOR,b.CUSTOMER,b.OTHERID,b.ALEVEL,b.BLEVEL,b.CURRPW,b.EXPIRY,b.OLDPW,b.TEMPORARYPASSWORD,b.PASSWORDHASH,b.ACTIVATIONKEY,b.RESTRICT1,b.RESTRICT2,b.RESTRICT3,b.ALLOW1,b.ALLOW2,b.ALLOW3,b.MAXPROFLROW,b.CPROFLROW,b.STATUSFL,b.STATUSFLDT,b.UCURRCALDA,b.PREPROCESS,b.NOTES,b.DOCMNT,b.OWNER,b.OWNER2)FROM "+schemaName+".\"USER_b\" b where((b.sid=a.sid) AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2)";
     if(dbProductName.equals("psql")){
      sqlScript="UPDATE "+schemaName+".\"user\" a SET(SID,ID,CLIENT,EMPLOYEE,VENDOR,CUSTOMER,OTHERID,ALEVEL,BLEVEL,CURRPW,EXPIRY,OLDPW,TEMPORARYPASSWORD,PASSWORDHASH,ACTIVATIONKEY,RESTRICT1,RESTRICT2,RESTRICT3,ALLOW1,ALLOW2,ALLOW3,MAXPROFLROW,CPROFLROW,STATUSFL,STATUSFLDT,UCURRCALDA,PREPROCESS,NOTES,DOCMNT,OWNER,OWNER2)=(b.SID,b.ID,b.CLIENT,b.EMPLOYEE,b.VENDOR,b.CUSTOMER,b.OTHERID,b.ALEVEL,b.BLEVEL,b.CURRPW,b.EXPIRY,b.OLDPW,b.TEMPORARYPASSWORD,b.PASSWORDHASH,b.ACTIVATIONKEY,b.RESTRICT1,b.RESTRICT2,b.RESTRICT3,b.ALLOW1,b.ALLOW2,b.ALLOW3,b.MAXPROFLROW,b.CPROFLROW,b.STATUSFL,b.STATUSFLDT,b.UCURRCALDA,b.PREPROCESS,b.NOTES,b.DOCMNT,b.OWNER,b.OWNER2)FROM "+schemaName+".\"user_b\" b where((b.sid=a.sid) AND (b.STATUSFLDT<>a.STATUSFLDT) and b.owner2=:owner2)";
     }

q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
*/




} catch (Exception e) {
                        int len=sqlScript.length();
                        len=len>120?120:len;
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("error")+" "+bundle.getString("in")+" "+bundle.getString("restore2")+" "+sqlScript.substring(0,len) + ", "+e.getMessage(),""));


}

	 return "restore2 done";

     }

	public String  oneTimeCleanUp() {
      //use DatabaseMetaData, as in authenticator.java, to avoid harcoding here
      schemaName="genapp";//hard code for now
     String sqlScript ="";
     int deletedCount=0;
     int updatedCount=0;
     int insertedCount=0;
try{

     // restricted to run from raaspi only but removes rows from all tables  if its owner2 is not in client as a record
     // can happen during creating a new site and not completing and involves account,acintegr,acperiod,divisondates,options,artha?,control?
     // not done also include if not in primary but exists in bup if remove data failed
     // odd links first
     // keep latest resource and bundles
     sqlScript="delete from "+schemaName+".resource b where b.owner2 = 'SYSTEM' and  b.resourcebundle < 113  ";
     Query q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();
     FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("delete")+" "+bundle.getString("SYSTEM")+" "+bundle.getString("resource")+" <2017 "+bundle.getString("count")+" "+deletedCount,""));
     deletedCount = 0;

     //message labels owner2 using SYSTEM resource_bundle, should use own bundle
     sqlScript="delete from "+schemaName+".resource b where b.owner2 <>'SYSTEM' and  exists  (select 1 from "+schemaName+".resource_bundle a where  a.owner2 = 'SYSTEM' and a.sid=b.resourcebundle ) ";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();
     FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("delete")+" "+bundle.getString("resource")+" "+bundle.getString("using")+" "+bundle.getString("SYSTEM")+" "+bundle.getString("bundle")+" "+bundle.getString("count")+" "+((deletedCount)),""));
     deletedCount = 0;

     // below will fail if step 2 not done
     sqlScript="delete from "+schemaName+".resource_bundle b where b.owner2 = 'SYSTEM' and  b.sid < 113  ";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();
     FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("delete")+" "+bundle.getString("SYSTEM")+" "+bundle.getString("resource_bundle")+" <2017 "+bundle.getString("count")+" "+deletedCount,""));
     deletedCount = 0;
} catch (Exception e) {
                        int len=sqlScript.length();
                        len=len>120?120:len;
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("error")+" "+bundle.getString("in")+" "+owner2Code+" "+bundle.getString("backup")+" "+bundle.getString("ownership")+" "+bundle.getString("check")+" "+sqlScript.substring(0,len) + ", "+e.getMessage(),""));
       //need a method to force delete any sid, specially from backup

}
 return "";

}



	public String  cleanUpUnlinked() {
      //use DatabaseMetaData, as in authenticator.java, to avoid harcoding here
      //using jdbc connection to get database metadata rather than entitymanager way to be ORM neutral
      DatabaseMetaData databaseMetaData=null;
      String productName="";
      String dbProductName="hsql";
      try(Connection conn = getConnection();){
       databaseMetaData = conn.getMetaData();
       productName = databaseMetaData.getDatabaseProductName();
      } catch (Exception e) {
       log.severe("No datasouce connection or databaseMetaData, Cannot continue");
       return null;
      }
      if(productName==null || productName.isEmpty()){
       log.severe("No datasouce setup yet, check tomee.xml or standalone.xml etc. Cannot continue");
       return null;
      }
      if(productName.contains("PostgreSQL")){
       dbProductName="psql";
      }
      schemaName="genapp";//hard code for now

     String sqlScript ="";
     int deletedCount=0;
     int updatedCount=0;
     int insertedCount=0;
try{

     // restricted to run from raaspi only but removes rows from all tables  if its owner2 is not in client as a record
     // can happen during creating a new site and not completing and involves account,acintegr,acperiod,divisondates,options,artha?,control?
     // not done also include if not in primary but exists in bup if remove data failed
     // odd links first
     // keep latest resource and bundles


     //cross owner2 check
     sqlScript="delete from "+schemaName+".serialnumbers b where   not exists  (select sid from "+schemaName+".client a where  a.owner2 = b.owner2 )";
     Query q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();
     FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
      FacesMessage.SEVERITY_INFO,bundle.getString("serialnumbers")+" "+bundle.getString("unsubscribed")+" "+bundle.getString("data")+" "+bundle.getString("removed")+": "+deletedCount+" ",""));
     deletedCount = 0;

     sqlScript="delete from "+schemaName+".scandate b where   not exists  (select sid from "+schemaName+".client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".rate1f b where   not exists  (select sid from "+schemaName+".client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".options b where   not exists  (select sid from "+schemaName+".client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".nextserialno b where   not exists  (select sid from "+schemaName+".client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".journal b where   not exists  (select sid from "+schemaName+".client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".jjournal b where   not exists  (select sid from "+schemaName+".client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".hlogfile b where   not exists  (select sid from "+schemaName+".client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".genoptions b where   not exists  (select sid from "+schemaName+".client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".editlog b where   not exists  (select sid from "+schemaName+".client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".clobdata b where   b.owner2 <> 'SYSTEM' and not exists  (select sid from "+schemaName+".client a where  (a.owner2 <> 'SYSTEM' and a.owner2 = b.owner2) )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     //SYSTEM clob is handled by Raaspi admin,

     sqlScript="delete from "+schemaName+".cjournal b where   not exists  (select sid from "+schemaName+".client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".blobdata b where   b.owner2 <> 'SYSTEM' and not exists  (select sid from "+schemaName+".client a where  (a.owner2 <> 'SYSTEM' and a.owner2 = b.owner2) )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     //SYSTEM blobdata handled by Raaspi admin

     sqlScript="delete from "+schemaName+".arthatbl b where   not exists  (select sid from "+schemaName+".client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".arthahist b where   not exists  (select sid from "+schemaName+".client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".acperiod b where   not exists  (select sid from "+schemaName+".client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".jobassignment b where   not exists  (select sid from "+schemaName+".client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".schedule b where   not exists  (select sid from "+schemaName+".client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vshipmendetails b where   not exists  (select sid from "+schemaName+".client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vcontact b where   not exists  (select sid from "+schemaName+".client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".shipmentdetails b where   not exists  (select sid from "+schemaName+".client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".ccontact b where   not exists  (select sid from "+schemaName+".client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vendqdetails b where   not exists  (select sid from "+schemaName+".client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vendpdetails b where   not exists  (select sid from "+schemaName+".client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vendodetails b where   not exists  (select sid from "+schemaName+".client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vendidetails b where   not exists  (select sid from "+schemaName+".client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".resourcedetails b where   not exists  (select sid from "+schemaName+".client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".emplodetails b where   not exists  (select sid from "+schemaName+".client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".cuqdetails b where   not exists  (select sid from "+schemaName+".client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".cuodetails b where   not exists  (select sid from "+schemaName+".client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".cuidetails b where   not exists  (select sid from "+schemaName+".client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".usagebyperiods b where   not exists  (select sid from "+schemaName+".client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".rgenfields b where   not exists  (select sid from "+schemaName+".client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".itembomdetails b where   not exists  (select sid from "+schemaName+".client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".holiday b where   not exists  (select sid from "+schemaName+".client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".gentriesdetails b where   not exists  (select sid from "+schemaName+".client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".cupdetails b where   not exists  (select sid from "+schemaName+".client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".activityjobdetails b where   not exists  (select sid from "+schemaName+".client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".wageearneraux b where   not exists  (select sid from "+schemaName+".client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".venartha b where   not exists  (select sid from "+schemaName+".client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".userprofl b where   not exists  (select sid from "+schemaName+".client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".resource b where   b.owner2 <> 'SYSTEM' and not exists  (select sid from "+schemaName+".client a where  (a.owner2 <> 'SYSTEM' and a.owner2 = b.owner2) )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".controlusagebyperiods b where   not exists  (select sid from "+schemaName+".client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".acintegr b where   not exists  (select sid from "+schemaName+".client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".\"USER_b\" where   not exists  (select sid from "+schemaName+".client a where  a.owner2 = b.owner2 )";
     if(dbProductName.equals("psql")){
      sqlScript="delete from "+schemaName+".\"user_b\" b where   not exists  (select sid from "+schemaName+".client a where  a.owner2 = b.owner2 )";
     }
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".emplorders b where   not exists  (select sid from "+schemaName+".client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vpayment b where   not exists  (select sid from "+schemaName+".client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".task b where   not exists  (select sid from "+schemaName+".client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".cpayment b where   not exists  (select sid from "+schemaName+".client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".glentries b where   not exists  (select sid from "+schemaName+".client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".controlusagebyperiods b where   not exists  (select sid from "+schemaName+".client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".activityjob b where   not exists  (select sid from "+schemaName+".client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".wageearner b where   not exists  (select sid from "+schemaName+".client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".rgentable b where   not exists  (select sid from "+schemaName+".client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".itemjob b where   not exists  (select sid from "+schemaName+".client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vshipmen b where   not exists  (select sid from "+schemaName+".client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".groupmembers b where   not exists  (select sid from "+schemaName+".client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vinvoice b where   not exists  (select sid from "+schemaName+".client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".shipment b where   not exists  (select sid from "+schemaName+".client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vendorders b where   not exists  (select sid from "+schemaName+".client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".cuinvoice b where   not exists  (select sid from "+schemaName+".client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".cuorders b where   not exists  (select sid from "+schemaName+".client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".project b where   not exists  (select sid from "+schemaName+".client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".outline b where   not exists  (select sid from "+schemaName+".client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".venquote b where   not exists  (select sid from "+schemaName+".client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".cuquote b where   not exists  (select sid from "+schemaName+".client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".machine b where   not exists  (select sid from "+schemaName+".client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".activity b where   not exists  (select sid from "+schemaName+".client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".item b where   not exists  (select sid from "+schemaName+".client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".employee b where   not exists  (select sid from "+schemaName+".client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".customer b where   not exists  (select sid from "+schemaName+".client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vendor b where   not exists  (select sid from "+schemaName+".client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".location b where   not exists  (select sid from "+schemaName+".client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".account b where   not exists  (select sid from "+schemaName+".client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".rgendb b where   not exists  (select sid from "+schemaName+".client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".company b where   not exists  (select sid from "+schemaName+".client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".rollupgroup b where   not exists  (select sid from "+schemaName+".client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".rgenapp b where   not exists  (select sid from "+schemaName+".client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".resource_bundle b where   b.owner2 <> 'SYSTEM' and not exists  (select sid from "+schemaName+".client a where  (a.owner2 <> 'SYSTEM' and a.owner2 = b.owner2) )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".perioddates b where   not exists  (select sid from "+schemaName+".client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".itembom b where   not exists  (select sid from "+schemaName+".client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".control b where   not exists  (select sid from "+schemaName+".client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".client b where   not exists  (select sid from "+schemaName+".client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".residency b where   not exists  (select sid from "+schemaName+".client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".membersgroup b where   not exists  (select sid from "+schemaName+".client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".division b where   not exists  (select sid from "+schemaName+".client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".department b where   not exists  (select sid from "+schemaName+".client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".address b where   not exists  (select sid from "+schemaName+".client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();



      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
       FacesMessage.SEVERITY_INFO,bundle.getString("primary")+" "+bundle.getString("unsubscribed")+" "+bundle.getString("data")+" "+bundle.getString("removed")+": "+deletedCount+" "+ bundle.getString("updated")+": "+updatedCount+" "+bundle.getString("inserted")+": "+insertedCount,""));
} catch (Exception e) {
                        int len=sqlScript.length();
                        len=len>120?120:len;
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
       FacesMessage.SEVERITY_INFO,bundle.getString("error")+" "+bundle.getString("in")+" "+owner2Code+" "+bundle.getString("primary")+" "+bundle.getString("ownership")+" "+bundle.getString("check")+" "+sqlScript.substring(0,len) + ", "+e.getMessage(),""));


}


     deletedCount=0;
     updatedCount=0;
     insertedCount=0;
try{
     sqlScript="delete from "+schemaName+".resource_b b where b.owner2 <>'SYSTEM' and  exists  (select 1 from "+schemaName+".resource_bundle_b a where  a.owner2 = 'SYSTEM' and a.sid=b.resourcebundle ) ";
     Query q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".serialnumbers_b  b where   not exists  (select sid from "+schemaName+".client_b a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".scandate_b  b where   not exists  (select sid from "+schemaName+".client_b a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".rate1f_b  b where   not exists  (select sid from "+schemaName+".client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".options_b  b where   not exists  (select sid from "+schemaName+".client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".nextserialno_b  b where   not exists  (select sid from "+schemaName+".client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".journal_b  b where   not exists  (select sid from "+schemaName+".client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".jjournal_b  b where   not exists  (select sid from "+schemaName+".client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".hlogfile_b  b where   not exists  (select sid from "+schemaName+".client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".genoptions_b  b where   not exists  (select sid from "+schemaName+".client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".editlog_b  b where   not exists  (select sid from "+schemaName+".client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".clobdata_b  b where   not exists  (select sid from "+schemaName+".client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     //SYSTEM clob discrepencies manually handled by Raaspi admin,

     sqlScript="delete from "+schemaName+".cjournal_b  b where   not exists  (select sid from "+schemaName+".client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".blobdata_b  b where   not exists  (select sid from "+schemaName+".client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     //SYSTEM blobdata discrepencies handled by Raaspi admin

     sqlScript="delete from "+schemaName+".arthatbl_b  b where   not exists  (select sid from "+schemaName+".client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".arthahist_b  b where   not exists  (select sid from "+schemaName+".client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".acperiod_b  b where   not exists  (select sid from "+schemaName+".client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".jobassignment_b  b where   not exists  (select sid from "+schemaName+".client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".schedule_b  b where   not exists  (select sid from "+schemaName+".client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vshipmendetails_b  b where   not exists  (select sid from "+schemaName+".client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vcontact_b  b where   not exists  (select sid from "+schemaName+".client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".shipmentdetails_b  b where   not exists  (select sid from "+schemaName+".client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".ccontact_b  b where   not exists  (select sid from "+schemaName+".client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vendqdetails_b  b where   not exists  (select sid from "+schemaName+".client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vendpdetails_b  b where   not exists  (select sid from "+schemaName+".client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vendodetails_b  b where   not exists  (select sid from "+schemaName+".client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vendidetails_b  b where   not exists  (select sid from "+schemaName+".client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".resourcedetails_b  b where   not exists  (select sid from "+schemaName+".client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".emplodetails_b  b where   not exists  (select sid from "+schemaName+".client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".cuqdetails_b  b where   not exists  (select sid from "+schemaName+".client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".cuodetails_b  b where   not exists  (select sid from "+schemaName+".client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".cuidetails_b  b where   not exists  (select sid from "+schemaName+".client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".usagebyperiods_b  b where   not exists  (select sid from "+schemaName+".client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".rgenfields_b  b where   not exists  (select sid from "+schemaName+".client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".itembomdetails_b  b where   not exists  (select sid from "+schemaName+".client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".holiday_b  b where   not exists  (select sid from "+schemaName+".client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".gentriesdetails_b  b where   not exists  (select sid from "+schemaName+".client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".cupdetails_b  b where   not exists  (select sid from "+schemaName+".client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".activityjobdetails_b  b where   not exists  (select sid from "+schemaName+".client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".wageearneraux_b  b where   not exists  (select sid from "+schemaName+".client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".venartha_b  b where   not exists  (select sid from "+schemaName+".client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".userprofl_b  b where   not exists  (select sid from "+schemaName+".client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".resource_b  b where   not exists  (select sid from "+schemaName+".client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".controlusagebyperiods_b  b where   not exists  (select sid from "+schemaName+".client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".acintegr_b  b where   not exists  (select sid from "+schemaName+".client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".\"USER_b\"  b where   not exists  (select sid from "+schemaName+".client_b  a where  a.owner2 = b.owner2 )";
     if(dbProductName.equals("psql")){
      sqlScript="delete from "+schemaName+".\"user_b\"  b where   not exists  (select sid from "+schemaName+".client_b  a where  a.owner2 = b.owner2 )";
     }

     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".emplorders_b  b where   not exists  (select sid from "+schemaName+".client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vpayment_b  b where   not exists  (select sid from "+schemaName+".client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".task_b  b where   not exists  (select sid from "+schemaName+".client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".cpayment_b  b where   not exists  (select sid from "+schemaName+".client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".glentries_b  b where   not exists  (select sid from "+schemaName+".client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".controlusagebyperiods_b  b where   not exists  (select sid from "+schemaName+".client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".activityjob_b  b where   not exists  (select sid from "+schemaName+".client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".wageearner_b  b where   not exists  (select sid from "+schemaName+".client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".rgentable_b  b where   not exists  (select sid from "+schemaName+".client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".itemjob_b  b where   not exists  (select sid from "+schemaName+".client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vshipmen_b  b where   not exists  (select sid from "+schemaName+".client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".groupmembers_b  b where   not exists  (select sid from "+schemaName+".client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vinvoice_b  b where   not exists  (select sid from "+schemaName+".client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".shipment_b  b where   not exists  (select sid from "+schemaName+".client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vendorders_b  b where   not exists  (select sid from "+schemaName+".client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".cuinvoice_b  b where   not exists  (select sid from "+schemaName+".client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".cuorders_b  b where   not exists  (select sid from "+schemaName+".client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".project_b  b where   not exists  (select sid from "+schemaName+".client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".outline_b  b where   not exists  (select sid from "+schemaName+".client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".venquote_b  b where   not exists  (select sid from "+schemaName+".client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".cuquote_b  b where   not exists  (select sid from "+schemaName+".client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".machine_b  b where   not exists  (select sid from "+schemaName+".client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".activity_b  b where   not exists  (select sid from "+schemaName+".client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".item_b  b where   not exists  (select sid from "+schemaName+".client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".employee_b  b where   not exists  (select sid from "+schemaName+".client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".customer_b  b where   not exists  (select sid from "+schemaName+".client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vendor_b  b where   not exists  (select sid from "+schemaName+".client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".location_b  b where   not exists  (select sid from "+schemaName+".client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".account_b  b where   not exists  (select sid from "+schemaName+".client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".rgendb_b  b where   not exists  (select sid from "+schemaName+".client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".company_b  b where   not exists  (select sid from "+schemaName+".client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".rollupgroup_b  b where   not exists  (select sid from "+schemaName+".client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".rgenapp_b  b where   not exists  (select sid from "+schemaName+".client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".resource_bundle_b  b where   not exists  (select sid from "+schemaName+".client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     //resource and resourcebundle SYSTEM is for raaspi only and not applicable here, see top of this for diff checking

     sqlScript="delete from "+schemaName+".perioddates_b  b where   not exists  (select sid from "+schemaName+".client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".itembom_b  b where   not exists  (select sid from "+schemaName+".client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".control_b  b where   not exists  (select sid from "+schemaName+".client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".client_b  b where   not exists  (select sid from "+schemaName+".client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".residency_b  b where   not exists  (select sid from "+schemaName+".client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".membersgroup_b  b where   not exists  (select sid from "+schemaName+".client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".division_b  b where   not exists  (select sid from "+schemaName+".client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".department_b  b where   not exists  (select sid from "+schemaName+".client_b  a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".address_b b where   not exists  (select sid from "+schemaName+".client a where  a.owner2 = b.owner2 )";
     q = entityManager.createNativeQuery(sqlScript);
     deletedCount = deletedCount +q.executeUpdate();



      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
       FacesMessage.SEVERITY_INFO,bundle.getString("backup")+" "+bundle.getString("unsubscribed")+" "+bundle.getString("data")+" "+bundle.getString("removed")+": "+deletedCount+" "+ bundle.getString("updated")+": "+updatedCount+" "+bundle.getString("inserted")+": "+insertedCount,""));

} catch (Exception e) {
                        int len=sqlScript.length();
                        len=len>120?120:len;
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
       FacesMessage.SEVERITY_INFO,bundle.getString("error")+" "+bundle.getString("in")+" "+owner2Code+" "+bundle.getString("backup")+" "+bundle.getString("ownership")+" "+bundle.getString("check")+" "+sqlScript.substring(0,len) + ", "+e.getMessage(),""));
       //need a method to force delete any sid, specially from backup

}




      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
       FacesMessage.SEVERITY_INFO,bundle.getString("refresh")+" "+bundle.getString("message")+" "+bundle.getString("bundle")+", "+bundle.getString("if")+" "+ bundle.getString("updated"),""));

	 return "cleanUpUnlinked done";
     }

    public String  removeData(String owner2Code) {
      //use DatabaseMetaData, as in authenticator.java, to avoid harcoding here
      //using jdbc connection to get database metadata rather than entitymanager way to be ORM neutral
      DatabaseMetaData databaseMetaData=null;
      String productName="";
      String dbProductName="hsql";
      try(Connection conn = getConnection();){
       databaseMetaData = conn.getMetaData();
       productName = databaseMetaData.getDatabaseProductName();
      } catch (Exception e) {
       log.severe("No datasouce connection or databaseMetaData, Cannot continue");
       return null;
      }
      if(productName==null || productName.isEmpty()){
       log.severe("No datasouce setup yet, check tomee.xml or standalone.xml etc. Cannot continue");
       return null;
      }
      if(productName.contains("PostgreSQL")){
       dbProductName="psql";
      }
      schemaName="genapp";//hard code for now

     String sqlScript ="";
try {
     int deletedCount=0;
     int updatedCount=0;
     int insertedCount=0;

     // first read client record and check status, also do not allow removing myflowp since sqladmin wont run any more
     // if needed it has to be done manually in production
     // in dev we can create from scratch if needed
     // jay need to delete _b records as well done done but will calling backup be faster and failprrof
     sqlScript="select * from "+schemaName+".client a where  a.clientversion='01' and a.owner2=:owner2 and a.statusfl = 8"  ;
     Query q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     if(q.getResultList().isEmpty()){
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
       FacesMessage.SEVERITY_ERROR,bundle.getString("error")+" "+owner2Code+" "+bundle.getString("client")+" "+bundle.getString("record")+" "+bundle.getString("not")+" "+bundle.getString("in")+" "+bundle.getString("closed")+" "+bundle.getString("status"),""));
      return "not closed status";
     }
     if(q.getResultList().size()>1){
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
       FacesMessage.SEVERITY_ERROR,bundle.getString("warning")+" "+owner2Code+" "+bundle.getString("multiple")+" "+bundle.getString("version")+" "+bundle.getString("01")+" "+bundle.getString("client")+" "+bundle.getString("records"),""));
      //return "multiple status";
     }

     sqlScript="delete from "+schemaName+".serialnumbers a where  a.owner2=:owner2"  ;
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".scandate a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".rate1f a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".options a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".nextserialno a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".journal a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".jjournal a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".hlogfile a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".genoptions a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".editlog a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".clobdata a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".cjournal a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".blobdata a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".arthatbl a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".arthahist a where   a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".acperiod a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".jobassignment a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".scheduledetails a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vshipmendetails a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vcontact a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".shipmentdetails a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".ccontact a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vendqdetails a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vendpdetails a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vendodetails a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vendidetails a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".resourcedetails a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".emplodetails a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".cuqdetails a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".cuodetails a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".cuidetails a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".usagebyperiods a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".rgenfields a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".itembomdetails a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".itembom a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".holiday a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".gentriesdetails a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".cupdetails a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".activityjobdetails a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".wageearneraux a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".venartha a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".userprofl a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".resource a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".controlusagebyperiods a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".acintegr a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".\"USER\" a where   a.owner2=:owner2";
     if(dbProductName.equals("psql")){
      sqlScript="delete from "+schemaName+".\"user\" a where   a.owner2=:owner2";
     }
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".emplorders a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vpayment a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".task a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".cpayment a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".glentries a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".controlusagebyperiods a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".activityjob a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".wageearner a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".rgentable a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".processdetails a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".itemjob a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".schedule a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".groupmembers a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vinvoice a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".shipment a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vshipmen a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".vendorders a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".cuinvoice a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".cuorders a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".project a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".outline a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".venquote a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".cuquote a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".machine a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".activity a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".item a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".employee a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".customer a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vendor a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".location a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".account a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".rgendb a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".company a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".rollupgroup a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".rgenapp a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".resource_bundle a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".processattributes a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     // do not remove SYSTEM data here

     sqlScript="delete from "+schemaName+".perioddates a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".control a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".client a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".residency a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".membersgroup a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".division a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".department a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".address a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
        FacesMessage.SEVERITY_ERROR,bundle.getString("removed")+" "+deletedCount+" "+bundle.getString("records")+" "+bundle.getString("from")+" "+owner2Code+" "+bundle.getString("primary"),""));
     log.info(bundle.getString("SqlAdmin")+" "+bundle.getString("removed")+" "+deletedCount+" "+bundle.getString("records")+" "+bundle.getString("from")+" "+owner2Code+" "+bundle.getString("primary"));




     // now delete the backup tables
     // jay change to calling backup ie if not in main , it will delete from backup as well
     // need test processd and attr not added
      deletedCount=0;
      updatedCount=0;
      insertedCount=0;


     sqlScript="delete from "+schemaName+".serialnumbers_b a where  a.owner2=:owner2"  ;
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".scandate_b a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".rate1f_b a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".options_b a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".nextserialno_b a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".journal_b a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".jjournal_b a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".hlogfile_b a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".genoptions_b a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".editlog_b a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".clobdata_b a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".cjournal_b a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".blobdata_b a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".arthatbl_b a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".arthahist_b a where   a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".acperiod_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".jobassignment_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".scheduledetails_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vshipmendetails_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vcontact_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".shipmentdetails_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".ccontact_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vendqdetails_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vendpdetails_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vendodetails_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vendidetails_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".resourcedetails_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".emplodetails_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".cuqdetails_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".cuodetails_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".cuidetails_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".usagebyperiods_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".rgenfields_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".itembomdetails_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".itembom_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".holiday_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".gentriesdetails_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".cupdetails_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".activityjobdetails_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".wageearneraux_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".venartha_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".userprofl_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".resource_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".controlusagebyperiods_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".acintegr_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".\"USER_b\" a where   a.owner2=:owner2";
     if(dbProductName.equals("psql")){
      sqlScript="delete from "+schemaName+".\"user_b\" a where   a.owner2=:owner2";
     }

      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".emplorders_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vpayment_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".task_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".cpayment_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".glentries_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".controlusagebyperiods_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".activityjob_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".wageearner_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".rgentable_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".itemjob_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".schedule_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".groupmembers_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vinvoice_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".shipment_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vshipmen_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();



     sqlScript="delete from "+schemaName+".vendorders_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".cuinvoice_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".cuorders_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".project_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".outline_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".venquote_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".cuquote_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".machine_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".activity_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".item_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".employee_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".customer_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vendor_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".location_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".account_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".rgendb_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".company_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".rollupgroup_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".rgenapp_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".resource_bundle_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".perioddates_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();




     sqlScript="delete from "+schemaName+".control_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".client_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".residency_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".membersgroup_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".division_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".department_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".address_b a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_ERROR,bundle.getString("removed")+" "+deletedCount+" "+bundle.getString("records")+" "+bundle.getString("from")+" "+bundle.getString("backup"),""));

     // now delete the daily backup tables
     // jay change to calling backup ie if not in main , it will delete from backup as well
     // need test processd and attr not added
      deletedCount=0;
      updatedCount=0;
      insertedCount=0;


     sqlScript="delete from "+schemaName+".serialnumbers_c a where  a.owner2=:owner2"  ;
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".scandate_c a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".rate1f_c a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".options_c a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".nextserialno_c a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".journal_c a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".jjournal_c a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".hlogfile_c a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".genoptions_c a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".editlog_c a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".clobdata_c a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".cjournal_c a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".blobdata_c a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".arthatbl_c a where  a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".arthahist_c a where   a.owner2=:owner2";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".acperiod_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".jobassignment_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".scheduledetails_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vshipmendetails_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vcontact_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".shipmentdetails_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".ccontact_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vendqdetails_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vendpdetails_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vendodetails_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vendidetails_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".resourcedetails_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".emplodetails_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".cuqdetails_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".cuodetails_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".cuidetails_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".usagebyperiods_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".rgenfields_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".itembomdetails_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".itembom_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".holiday_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".gentriesdetails_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".cupdetails_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".activityjobdetails_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".wageearneraux_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".venartha_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".userprofl_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".resource_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".controlusagebyperiods_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".acintegr_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".\"USER_c\" a where   a.owner2=:owner2";
     if(dbProductName.equals("psql")){
      sqlScript="delete from "+schemaName+".\"user_c\" a where   a.owner2=:owner2";
     }

      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".emplorders_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vpayment_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".task_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".cpayment_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".glentries_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".controlusagebyperiods_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".activityjob_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".wageearner_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".rgentable_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".itemjob_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".schedule_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".groupmembers_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vinvoice_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".shipment_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vshipmen_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();



     sqlScript="delete from "+schemaName+".vendorders_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".cuinvoice_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".cuorders_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".project_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".outline_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".venquote_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".cuquote_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".machine_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".activity_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".item_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".employee_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".customer_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vendor_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".location_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".account_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".rgendb_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".company_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".rollupgroup_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".rgenapp_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".resource_bundle_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".perioddates_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();




     sqlScript="delete from "+schemaName+".control_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".client_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".residency_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".membersgroup_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".division_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".department_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".address_c a where   a.owner2=:owner2";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_ERROR,bundle.getString("removed")+" "+deletedCount+" "+bundle.getString("records")+" "+bundle.getString("from")+" "+bundle.getString("backup"),""));





} catch (Exception e) {
                        int len=sqlScript.length();
                        len=len>120?120:len;
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("error")+" "+bundle.getString("in")+" "+bundle.getString("remove")+" "+bundle.getString("records")+" "+sqlScript.substring(0,len) + ", "+e.getMessage(),""));


}


	 return "data removed for "+owner2Code;

     }

     public String  AlterAppName(String owner2Code,String owner2New) {
     // client has to change client record field hdstyle to new name first
     // in dev, can use squirrel client to change
      //use DatabaseMetaData, as in authenticator.java, to avoid harcoding here
      //using jdbc connection to get database metadata rather than entitymanager way to be ORM neutral
      DatabaseMetaData databaseMetaData=null;
      String productName="";
      String dbProductName="hsql";
      try(Connection conn = getConnection();){
       databaseMetaData = conn.getMetaData();
       productName = databaseMetaData.getDatabaseProductName();
      } catch (Exception e) {
       log.severe("No datasouce connection or databaseMetaData, Cannot continue");
       return null;
      }
      if(productName==null || productName.isEmpty()){
       log.severe("No datasouce setup yet, check tomee.xml or standalone.xml etc. Cannot continue");
       return null;
      }
      if(productName.contains("PostgreSQL")){
       dbProductName="psql";
      }
      schemaName="genapp";//hard code for now

     String sqlScript ="";
try{
     int deletedCount=0;
     int updatedCount=0;
     int insertedCount=0;

     // first read client record and check status, also do not allow removing myflowp since sqladmin wont run any more
     // if needed it has to be done manually in production
     // in dev we can create from scratch if needed
     // client record x2xxuxxxbvxxxxxxxxxxhdstyle is changed and holds new app name
     // after alter is done here x3xxuxxxbvxxxxxxxxxxmtstyle holds the old app name and is used for alterappnameinbackup
     // client record needs to be in closed state and client record field accessCode/w1xxuxxxbvxxxxxxxxxxedipassw needs to have
    // some non empty value to prevent method to run without client control or by mistake.
     sqlScript="select * from "+schemaName+".client a where  a.clientversion='01' and a.owner2=:owner2 and a.statusfl = 8"  ;
     Query q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     if(q.getResultList().isEmpty()){
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
        FacesMessage.SEVERITY_ERROR,bundle.getString("error")+" "+owner2Code+" "+bundle.getString("client")+" "+bundle.getString("record")+" "+bundle.getString("not")+" "+bundle.getString("in")+" "+bundle.getString("closed")+" "+bundle.getString("status"),""));
      return "not closed status";
     }
     sqlScript="select * from "+schemaName+".client a where  a.clientversion='01' and a.owner2=:owner2 and (a.edipassw is null or a.edipassw ='') "  ;
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     if(!q.getResultList().isEmpty()){
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
        FacesMessage.SEVERITY_ERROR,bundle.getString("error")+" "+owner2Code+" "+bundle.getString("client")+" "+bundle.getString("record")+" "+bundle.getString("AccessCode")+" "+bundle.getString("is")+" "+bundle.getString("empty"),""));
      return "no Access Code";
     }
     sqlScript="select * from "+schemaName+".client a where  a.clientversion='01' and a.owner2=:owner2"  ;
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2New);
     if(!q.getResultList().isEmpty()){
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
       FacesMessage.SEVERITY_ERROR,bundle.getString("error")+" "+owner2Code+" "+bundle.getString("client")+" "+bundle.getString("record")+" "+bundle.getString("already")+" "+bundle.getString("exists"),""));

      return "exists";
     }
     if(owner2New ==null || owner2New.isEmpty()){
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
        FacesMessage.SEVERITY_ERROR,bundle.getString("blank")+" "+bundle.getString("new")+" "+bundle.getString("name")+" "+owner2New,""));


      return "";
     }
     //
//postgresql UPDATE genapp.journal_b SET sid=a.sid,spostdate=a.spostdate,postdate=a.postdate,owner2=a.owner2 FROM  genapp.journal a  where(genapp.journal_b.sid=a.sid AND a.postdate<>genapp.journal_b.postdate AND a.owner2='localhost')
//hsqldb or stanard UPDATE genapp.journal_b b SET (sid,spostdate,postdate,owner2)=(SELECT sid,spostdate,postdate,owner2 FROM  genapp.journal a where b.sid=a.sid AND a.postdate<>b.postdate AND a.owner2='localhost')
sqlScript="UPDATE "+schemaName+".journal_b b SET(sid,spostdate,postdate,calendardt,jrnltype,jnlseqb,jnlseq,jnlseqs,period,account,debit,credit,xreference,descript,statusfl,owner,owner2)=(SELECT sid,spostdate,postdate,calendardt,jrnltype,jnlseqb,jnlseq,jnlseqs,period,account,debit,credit,xreference,descript,statusfl,owner,owner2 FROM "+schemaName+".journal a where a.sid=b.sid AND a.postdate<>b.postdate and a.owner2=:owner2)";
if(!dbProductName.equals("psql")){
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
        FacesMessage.SEVERITY_ERROR,bundle.getString("Only")+" "+bundle.getString("Postgresql")+" "+bundle.getString("supported"),""));
      return "";
}

     sqlScript="update "+schemaName+".serialnumbers set owner2=:owner2New where owner2=:owner2Code"  ;
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".scandate set owner2=:owner2New where owner2=:owner2Code";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".rate1f set owner2=:owner2New where owner2=:owner2Code";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".options set owner2=:owner2New where owner2=:owner2Code";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".nextserialno set owner2=:owner2New where owner2=:owner2Code";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".journal set owner2=:owner2New where owner2=:owner2Code";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".jjournal set owner2=:owner2New where owner2=:owner2Code";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".hlogfile set owner2=:owner2New where owner2=:owner2Code";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".genoptions set owner2=:owner2New where owner2=:owner2Code";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".editlog set owner2=:owner2New where owner2=:owner2Code";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".clobdata set owner2=:owner2New where owner2=:owner2Code";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".cjournal set owner2=:owner2New where owner2=:owner2Code";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".blobdata set owner2=:owner2New where owner2=:owner2Code";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".arthatbl set owner2=:owner2New where owner2=:owner2Code";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".arthahist set owner2=:owner2New where owner2=:owner2Code";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".acperiod set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".jobassignment set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".scheduledetails set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".vshipmendetails set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".vcontact set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".shipmentdetails set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".ccontact set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".vendqdetails set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".vendpdetails set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".vendodetails set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".vendidetails set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".resourcedetails set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".emplodetails set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".cuqdetails set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".cuodetails set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".cuidetails set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".usagebyperiods set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".rgenfields set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".itembomdetails set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".holiday set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".gentriesdetails set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".cupdetails set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".activityjobdetails set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".wageearneraux set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".venartha set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".userprofl set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".resource set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".controlusagebyperiods set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".acintegr set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".\"USER\" set owner2=:owner2New where owner2=:owner2Code";
     if(dbProductName.equals("psql")){
      sqlScript="update "+schemaName+".\"user\" set owner2=:owner2New where owner2=:owner2Code";
     }
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".emplorders set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".vpayment set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".task set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".cpayment set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".glentries set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".controlusagebyperiods set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".activityjob set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".wageearner set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".rgentable set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".itemjob set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".schedule set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();


     sqlScript="update "+schemaName+".groupmembers set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".vinvoice set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".shipment set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".vshipmen set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();


     sqlScript="update "+schemaName+".vendorders set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".cuinvoice set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".cuorders set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".project set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".outline set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".venquote set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".cuquote set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".machine set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".activity set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".item set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".employee set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".customer set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".vendor set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".location set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".account set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".rgendb set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();


     sqlScript="update "+schemaName+".company set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();


     sqlScript="update "+schemaName+".rollupgroup set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();


     sqlScript="update "+schemaName+".rgenapp set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();


     sqlScript="update "+schemaName+".resource_bundle set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();


     sqlScript="update "+schemaName+".perioddates set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();


     sqlScript="update "+schemaName+".itembom set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();


     sqlScript="update "+schemaName+".control set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     String clDescript="";
     sqlScript="select descript from "+schemaName+".client a where  a.clientversion='01' and a.owner2=:owner2 and a.statusfl = 8"  ;
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     if(!q.getResultList().isEmpty()){
      clDescript=q.getResultList().toString();
       clDescript=clDescript.replace(owner2Code,owner2New);
     }
     //change all client records owner2 and mtstyle field to hold old appname
     sqlScript="update "+schemaName+".client set owner2=:owner2New,mtstyle=:owner2Code where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();
     // client record 01 fields descript,intaddr,enterprisecompcode also contains old ownerCode and should change
     sqlScript="update "+schemaName+".client set descript=:clDescript,intaddr=:owner2New ,enterprisecompcode=:owner2New where clientversion='01' and owner2=:owner2New";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("clDescript", clDescript).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".residency set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();


     sqlScript="update "+schemaName+".membersgroup set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();


     sqlScript="update "+schemaName+".division set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();


     sqlScript="update "+schemaName+".department set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();


     sqlScript="update "+schemaName+".address set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
       FacesMessage.SEVERITY_INFO,bundle.getString("update")+" "+bundle.getString("for")+" "+bundle.getString("primary")+" "+bundle.getString("done")+", "+bundle.getString("count")+" "+updatedCount,""));



      //FacesMessages.instance().add("To fall back restore from back up or if works then back up once stable" );
     //fall back wont work since logic relies on ownercode and backup tables all have old ownercode
     // so use manual sql for fallback until a restore routine is done and if no fallback needed, use alterBackup (new button) to have it ready for backup/restore for new name
} catch (Exception e) {
                        int len=sqlScript.length();
                        len=len>120?120:len;
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
        FacesMessage.SEVERITY_INFO,bundle.getString("error")+" "+bundle.getString("in")+" "+bundle.getString("site")+" "+bundle.getString("name")+" "+bundle.getString("change")+" "+sqlScript.substring(0,len) + ", "+e.getMessage(),""));



}


	 return "changed "+owner2Code+" to "+owner2New;

}

     public String  AlterAppNameInBackUp(String owner2Code,String owner2New) {
     // owner2Code (mtstyle) has oldName say 3rcomputerp and owner2New has new name say 3rcomputer
      //use DatabaseMetaData, as in authenticator.java, to avoid harcoding here
      //using jdbc connection to get database metadata rather than entitymanager way to be ORM neutral
      DatabaseMetaData databaseMetaData=null;
      String productName="";
      String dbProductName="hsql";
      try(Connection conn = getConnection();){
       databaseMetaData = conn.getMetaData();
       productName = databaseMetaData.getDatabaseProductName();
      } catch (Exception e) {
       log.severe("No datasouce connection or databaseMetaData, Cannot continue");
       return null;
      }
      if(productName==null || productName.isEmpty()){
       log.severe("No datasouce setup yet, check tomee.xml or standalone.xml etc. Cannot continue");
       return null;
      }
      if(productName.contains("PostgreSQL")){
       dbProductName="psql";
      }
      schemaName="genapp";//hard code for now

     String sqlScript ="";
try{
     int deletedCount=0;
     int updatedCount=0;
     int insertedCount=0;

     // first read client record and check status, also do not allow removing myflowp since sqladmin wont run any more
     // if needed it has to be done manually in production
     // in dev we can create from scratch if needed
     // jay need to delete _b records as well done
     sqlScript="select * from "+schemaName+".client a where  a.clientversion='01' and a.owner2=:owner2 and a.statusfl = 8"  ;
     Query q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2New);
     if(q.getResultList().isEmpty()){
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
        FacesMessage.SEVERITY_ERROR,bundle.getString("error")+" "+owner2Code+" "+bundle.getString("client")+" "+bundle.getString("record")+" "+bundle.getString("not")+" "+bundle.getString("in")+" "+bundle.getString("closed")+" "+bundle.getString("status"),""));


      return "not closed status";
     }
     sqlScript="select * from "+schemaName+".client_b a where  a.owner2=:owner2"  ;
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     if(!q.getResultList().isEmpty()){
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
         FacesMessage.SEVERITY_ERROR,bundle.getString("error")+" "+owner2Code+" "+bundle.getString("client")+" "+bundle.getString("record")+" "+bundle.getString("not")+" "+bundle.getString("already")+" "+bundle.getString("exists")+" "+bundle.getString("in")+" "+bundle.getString("backup"),""));


      return "exists";
     }
     if(owner2New ==null || owner2New.isEmpty()){
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
          FacesMessage.SEVERITY_ERROR,bundle.getString("blank")+" "+bundle.getString("new")+" "+bundle.getString("name")+" "+owner2New,""));


      return "";
     }
//postgresql UPDATE genapp.journal_b SET sid=a.sid,spostdate=a.spostdate,postdate=a.postdate,owner2=a.owner2 FROM  genapp.journal a  where(genapp.journal_b.sid=a.sid AND a.postdate<>genapp.journal_b.postdate AND a.owner2='localhost')
//hsqldb or stanard UPDATE genapp.journal_b b SET (sid,spostdate,postdate,owner2)=(SELECT sid,spostdate,postdate,owner2 FROM  genapp.journal a where b.sid=a.sid AND a.postdate<>b.postdate AND a.owner2='localhost')
//sqlScript="UPDATE "+schemaName+".journal_b b SET(sid,spostdate,postdate,calendardt,jrnltype,jnlseqb,jnlseq,jnlseqs,period,account,debit,credit,xreference,descript,statusfl,owner,owner2)=(SELECT sid,spostdate,postdate,calendardt,jrnltype,jnlseqb,jnlseq,jnlseqs,period,account,debit,credit,xreference,descript,statusfl,owner,owner2 FROM "+schemaName+".journal a where a.sid=b.sid AND a.postdate<>b.postdate and a.owner2=:owner2)";
if(!dbProductName.equals("psql")){
       FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
          FacesMessage.SEVERITY_ERROR,bundle.getString("non")+" "+bundle.getString("PostgreSql")+" "+bundle.getString("db")+" "+bundle.getString("not")+" "+bundle.getString("supprted"),""));
      return "";
}

     sqlScript="update "+schemaName+".serialnumbers_b set owner2=:owner2New where owner2=:owner2Code"  ;
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".scandate_b set owner2=:owner2New where owner2=:owner2Code";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".rate1f_b set owner2=:owner2New where owner2=:owner2Code";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".options_b set owner2=:owner2New where owner2=:owner2Code";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".nextserialno_b set owner2=:owner2New where owner2=:owner2Code";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".journal_b set owner2=:owner2New where owner2=:owner2Code";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".jjournal_b set owner2=:owner2New where owner2=:owner2Code";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".hlogfile_b set owner2=:owner2New where owner2=:owner2Code";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".genoptions_b set owner2=:owner2New where owner2=:owner2Code";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".editlog_b set owner2=:owner2New where owner2=:owner2Code";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".clobdata_b set owner2=:owner2New where owner2=:owner2Code";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".cjournal_b set owner2=:owner2New where owner2=:owner2Code";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".blobdata_b set owner2=:owner2New where owner2=:owner2Code";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".arthatbl_b set owner2=:owner2New where owner2=:owner2Code";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".arthahist_b set owner2=:owner2New where owner2=:owner2Code";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".acperiod_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".jobassignment_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".scheduledetails_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".vshipmendetails_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".vcontact_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".shipmentdetails_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".ccontact_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".vendqdetails_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".vendpdetails_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".vendodetails_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".vendidetails_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".resourcedetails_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".emplodetails_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".cuqdetails_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".cuodetails_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".cuidetails_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".usagebyperiods_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".rgenfields_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".itembomdetails_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".holiday_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".gentriesdetails_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".cupdetails_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".activityjobdetails_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".wageearneraux_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".venartha_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".userprofl_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".resource_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".controlusagebyperiods_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".acintegr_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".\"USER_b\" set owner2=:owner2New where owner2=:owner2Code";
     if(dbProductName.equals("psql")){
      sqlScript="update "+schemaName+".\"user_b\" set owner2=:owner2New where owner2=:owner2Code";
     }

      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".emplorders_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".vpayment_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".task_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".cpayment_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".glentries_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".controlusagebyperiods_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".activityjob_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".wageearner_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".rgentable_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".itemjob_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".schedule_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();


     sqlScript="update "+schemaName+".groupmembers_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".vinvoice_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".shipment_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".vshipmen_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();


     sqlScript="update "+schemaName+".vendorders_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".cuinvoice_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".cuorders_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".project_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".outline_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".venquote_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".cuquote_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".machine_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".activity_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".item_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".employee_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".customer_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".vendor_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".location_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".account_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();

     sqlScript="update "+schemaName+".rgendb_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();


     sqlScript="update "+schemaName+".company_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();


     sqlScript="update "+schemaName+".rollupgroup_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();


     sqlScript="update "+schemaName+".rgenapp_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();


     sqlScript="update "+schemaName+".resource_bundle_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();


     sqlScript="update "+schemaName+".perioddates_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();


     sqlScript="update "+schemaName+".itembom_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();


     sqlScript="update "+schemaName+".control_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();


     sqlScript="update "+schemaName+".client_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();


     sqlScript="update "+schemaName+".residency_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();


     sqlScript="update "+schemaName+".membersgroup_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();


     sqlScript="update "+schemaName+".division_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();


     sqlScript="update "+schemaName+".department_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();


     sqlScript="update "+schemaName+".address_b set owner2=:owner2New where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2Code", owner2Code).setParameter("owner2New", owner2New);
     updatedCount = updatedCount +q.executeUpdate();
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("update")+" "+bundle.getString("done")+" "+bundle.getString("on")+" "+bundle.getString("backup")+", "+bundle.getString("ready")+" "+bundle.getString("for")+" "+bundle.getString("regular")+" "+bundle.getString("backup")+" / "+bundle.getString("restore")+" "+bundle.getString("update")+" "+bundle.getString("count")+" "+updatedCount,""));


} catch (Exception e) {
                        int len=sqlScript.length();
                        len=len>120?120:len;
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
       FacesMessage.SEVERITY_INFO,bundle.getString("error")+" "+bundle.getString("in")+" "+bundle.getString("site")+" "+bundle.getString("name")+" "+bundle.getString("change")+" "+bundle.getString("in")+" "+bundle.getString("backup")+" "+bundle.getString("tables")+" "+sqlScript.substring(0,len) + ", "+e.getMessage(),""));



}

	 return "changed "+owner2Code+" to "+owner2New;

}

	public String  backupTenantToLocal(String tableName,String suffix) {
   /**
    * Called by SqlAdminSupport.xhtml
    * The following method copies each record from a backup table to a temp directory as csv
    * and then creates a zip file
    * @param args two. tableName like item,customer etc suffix like null for current or -b for backup and -c daily backup
    * @return whether backup done or failed.
    * @exception sql errors.
    * @see
    *
    */
      //use DatabaseMetaData, as in authenticator.java, to avoid harcoding here
      //using jdbc connection to get database metadata rather than entitymanager way to be ORM neutral
      DatabaseMetaData databaseMetaData=null;
      String productName="";
      String dbProductName="hsql";
      try(Connection conn = getConnection();){
       databaseMetaData = conn.getMetaData();
       productName = databaseMetaData.getDatabaseProductName();
      } catch (Exception e) {
       log.severe("No datasouce connection or databaseMetaData, Cannot continue");
       return null;
      }
      if(productName==null || productName.isEmpty()){
       log.severe("No datasouce setup yet, check tomee.xml or standalone.xml etc. Cannot continue");
       return null;
      }
      if(productName.contains("PostgreSQL")){
       dbProductName="psql";
      }
      schemaName="genapp";//hard code for now

     String sqlScript ="";
     String path="";
     String fileName="";
     int deletedCount=0;
     int updatedCount=0;
     int insertedCount=0;
try{
     if(tableName.isEmpty()){
      tableName="item";//add tableName as input in sqlAdmin.xhtml
     }
     String serverName=context.getServerInfo();
     int urlPort=((javax.servlet.http.HttpServletRequest) externalContext.getRequest()).getServerPort();
     if(urlPort ==8080 && !serverName.contains("omcat") ){
      path="C:/wildfly-10.1.0.Final/standalone/tmp/";//c drive
     }else{
      path="/tmp/";//openshift data test whether we need environment variable
     }
     fileName=path+tableName+".csv";
     File csvFile = new File(fileName);
     if (csvFile.createNewFile()){
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
       FacesMessage.SEVERITY_INFO,bundle.getString("created")+", "+bundle.getString("file")+" "+fileName,""));
      System.out.println("File is created!");
     }else{
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
       FacesMessage.SEVERITY_ERROR,bundle.getString("error")+" "+bundle.getString("in")+" "+bundle.getString("creating")+", "+bundle.getString("file")+" "+fileName,""));
     }
} catch (Exception e) {
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
       FacesMessage.SEVERITY_ERROR,bundle.getString("error")+" "+bundle.getString("in")+" "+bundle.getString("backup")+", "+bundle.getString("cause")+" "+e.getMessage(),""));
      return null;
}

try{

     FileOutputStream fos=null;
     //skips create if already exists and overwrites
     fos = new FileOutputStream(path+"localbkup.zip");
     ZipOutputStream zos = new ZipOutputStream(fos);
      sqlScript="copy (select * from "+schemaName+"."+tableName+suffix+"  where owner2='"+owner2Code+"')  to 'path"+tableName+".csv' with CSV ";
      Query q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      addToZipFile(path+tableName+".csv", zos);
      zos.close();
      fos.close();
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
        FacesMessage.SEVERITY_INFO,bundle.getString("backup")+" "+bundle.getString("on")+" "+bundle.getString("local")+" "+bundle.getString("directory")+" /tmp/ "+bundle.getString("done"),""));


} catch (FileNotFoundException e) {
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
        FacesMessage.SEVERITY_ERROR,bundle.getString("error")+" "+bundle.getString("in")+" "+bundle.getString("backup")+", "+bundle.getString("file")+" "+bundle.getString("not")+" "+bundle.getString("found")+", "+bundle.getString("cause")+" "+e.getMessage(),""));


} catch (IOException e) {
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
        FacesMessage.SEVERITY_ERROR,bundle.getString("error")+" "+bundle.getString("in")+" "+bundle.getString("backup")+", "+bundle.getString("io")+" "+bundle.getString("exception")+", "+bundle.getString("cause")+" "+e.getMessage(),""));

} catch (Exception e) {
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
       FacesMessage.SEVERITY_ERROR,bundle.getString("error")+" "+bundle.getString("in")+" "+bundle.getString("backup")+", "+bundle.getString("cause")+" "+e.getMessage(),""));

}

	 return "backUp To Local done";
}

public static void addToZipFile(String fileName, ZipOutputStream zos) throws FileNotFoundException, IOException {

		System.out.println("Writing '" + fileName + "' to zip file");

		File file = new File(fileName);
		FileInputStream fis = new FileInputStream(file);
		ZipEntry zipEntry = new ZipEntry(fileName);
		zos.putNextEntry(zipEntry);

		byte[] bytes = new byte[1024];
		int length;
		while ((length = fis.read(bytes)) >= 0) {
			zos.write(bytes, 0, length);
		}

		zos.closeEntry();
		fis.close();
	}

  public  String restoreOwner(String owner2Code){
  // in case owner2Code gets corrupted we need a way to resore from backup using its sid as matching and replacing owner2Code   //with value from backup
   return "";
  }



  public  String getLastBupDate(){
  // client field carcsize(bupdate) and cadcsize(restoredate) holds the dates in String,record 01
      //use DatabaseMetaData, as in authenticator.java, to avoid harcoding here
      //using jdbc connection to get database metadata rather than entitymanager way to be ORM neutral
      DatabaseMetaData databaseMetaData=null;
      String productName="";
      String dbProductName="hsql";
      try(Connection conn = getConnection();){
       databaseMetaData = conn.getMetaData();
       productName = databaseMetaData.getDatabaseProductName();
      } catch (Exception e) {
       log.severe("No datasouce connection or databaseMetaData, Cannot continue");
       return null;
      }
      if(productName==null || productName.isEmpty()){
       log.severe("No datasouce setup yet, check tomee.xml or standalone.xml etc. Cannot continue");
       return null;
      }
      if(productName.contains("PostgreSQL")){
       dbProductName="psql";
      }
      schemaName="genapp";//hard code for now

   String sqlScript="";
   try{
     sqlScript="select carcsize from "+schemaName+".client a where  owner2=:owner2 and clientversion=:clientversion"  ;
     Query q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code).setParameter("clientversion", "01");
     Object result = (Object)q.getSingleResult();
     if(result !=null){
      String carcsize = (String)result;
      return carcsize;
     }else{
      return null;
     }
   } catch (Exception e) {
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
       FacesMessage.SEVERITY_ERROR,bundle.getString("error")+" "+bundle.getString("in")+" "+bundle.getString("get")+" "+bundle.getString("last")+" "+bundle.getString("backup")+" "+bundle.getString("date")+", "+bundle.getString("cause")+" "+e.getMessage(),""));


              return null;
   }

  }

  public  String getLastArcDate(){
  // client field carcsize(bupdate) and cadcsize(restoredate) holds the dates in String,record 01
  // add archive data method, look into running a csv report which can be downloaded locally or stay as clobdata
  // and optionally as zipped csv blobdata
      //use DatabaseMetaData, as in authenticator.java, to avoid harcoding here
      //using jdbc connection to get database metadata rather than entitymanager way to be ORM neutral
      DatabaseMetaData databaseMetaData=null;
      String productName="";
      String dbProductName="hsql";
      try(Connection conn = getConnection();){
       databaseMetaData = conn.getMetaData();
       productName = databaseMetaData.getDatabaseProductName();
      } catch (Exception e) {
       log.severe("No datasouce connection or databaseMetaData, Cannot continue");
       return null;
      }
      if(productName==null || productName.isEmpty()){
       log.severe("No datasouce setup yet, check tomee.xml or standalone.xml etc. Cannot continue");
       return null;
      }
      if(productName.contains("PostgreSQL")){
       dbProductName="psql";
      }
      schemaName="genapp";//hard code for now

   String sqlScript="";
   try{
     sqlScript="select carcsize from "+schemaName+".client a where  a.owner2=:owner2 and a.clientversion=:clientversion"  ;
     Query q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code).setParameter("clientversion", "01");
     Object result = (Object)q.getSingleResult();
     if(result !=null){
      String carcsize = (String)result;
      return carcsize;
     }else{
      return null;
     }
   } catch (Exception e) {
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
       FacesMessage.SEVERITY_ERROR,bundle.getString("error")+" "+bundle.getString("in")+" "+bundle.getString("get")+" "+bundle.getString("last")+" "+bundle.getString("backup")+" "+bundle.getString("date")+", "+bundle.getString("cause")+" "+e.getMessage(),""));


              return null;
   }

  }



  public  String getSystemLastBupDate(){
  // client field carcsize(bupdate) and cadcsize(restoredate) holds the dates in String, record 02
      //use DatabaseMetaData, as in authenticator.java, to avoid harcoding here
      //using jdbc connection to get database metadata rather than entitymanager way to be ORM neutral
      DatabaseMetaData databaseMetaData=null;
      String productName="";
      String dbProductName="hsql";
      try(Connection conn = getConnection();){
       databaseMetaData = conn.getMetaData();
       productName = databaseMetaData.getDatabaseProductName();
      } catch (Exception e) {
       log.severe("No datasouce connection or databaseMetaData, Cannot continue");
       return null;
      }
      if(productName==null || productName.isEmpty()){
       log.severe("No datasouce setup yet, check tomee.xml or standalone.xml etc. Cannot continue");
       return null;
      }
      if(productName.contains("PostgreSQL")){
       dbProductName="psql";
      }
      schemaName="genapp";//hard code for now

   String sqlScript="";
   try{
     sqlScript="select shicsize from "+schemaName+".client a where  a.owner2=:owner2 and a.clientversion=:clientversion"  ;
     Query q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code).setParameter("clientversion", "01");
     Object result = (Object)q.getSingleResult();
     if(result !=null){
      String shicsize = (String)result;
      return shicsize;
     }else{
      return null;
     }
   } catch (Exception e) {
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
       FacesMessage.SEVERITY_ERROR,bundle.getString("error")+" "+bundle.getString("in")+" "+bundle.getString("get")+" "+bundle.getString("last")+" "+bundle.getString("daily")+" / "+bundle.getString("secondary")+" "+bundle.getString("backup")+" "+bundle.getString("date")+", "+bundle.getString("cause")+" "+e.getMessage(),""));


              return null;
   }

  }


  public  String putComments(){
      //use DatabaseMetaData, as in authenticator.java, to avoid harcoding here
      schemaName="genapp";//hard code for now

   String sqlScript="";
   try{
      int insertedCount=0;
      // existing comments get overwritten??
      //table address
      sqlScript="comment on table "+schemaName+".address is 'Mailing or Shipping Address for Customer, Vendor or Employee'";
      Query q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      // columns
      sqlScript="comment on column "+schemaName+".address.sid is 'primary key, system generated unique identifier'";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column "+schemaName+".address.ADDRESCODE is 'natural key, application generated and end part time based hashed'";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      //table location
      sqlScript="comment on table "+schemaName+".location is 'Location related to an address or by itself.'";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      // columns
      sqlScript="comment on column "+schemaName+".location.sid is 'primary key, system generated unique identifier'";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column "+schemaName+".location.Location is 'natural key, application generated and based on description,'";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column "+schemaName+".location.Rack is 'refers to specific rack or in case of seat entity it refers to max seats per row.'";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();

      //table client
      sqlScript="comment on table "+schemaName+".CLIENT is 'Cloud Tenants profile information for each web site'";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      // columns
      sqlScript="comment on column "+schemaName+".CLIENT.sid is 'primary key, system generated unique identifier'";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column "+schemaName+".CLIENT.clientversion is 'natural key, used for versioning, currently only 01 is used, but version 02 etc could be used for more apiclientid etc ie 01 for paypal but 02 for shopify api, 03 for square, 04 for paytm (IN), 05 for EBS(IN) '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column "+schemaName+".CLIENT.serialnum is 'serial number assigned to client, not used '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column "+schemaName+".CLIENT.altselen is 'used as SMTP port number '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column "+schemaName+".CLIENT.baccolor is 'used as dropdown menu bar css style '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column "+schemaName+".CLIENT.beepsou is 'used as SMTP auth(authentication)  '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column "+schemaName+".CLIENT.cadtype is 'used to indicate app server features like openshift router support or '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column "+schemaName+".CLIENT.confirm is 'used as SMTP mailRelay or not '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column "+schemaName+".CLIENT.currcode is ' merchant/bank currency code CAD, USD '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column "+schemaName+".CLIENT.currsymb is ' merchant currency symbol C$ U$ '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column "+schemaName+".CLIENT.defaultc is ' item currency Code '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column "+schemaName+".CLIENT.descript is 'used as title for home page and should be SEO friendly ie describe what special and of interest about the site '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column "+schemaName+".CLIENT.hdstyle is 'used to set as new APPNAME by the site admin '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column "+schemaName+".CLIENT.hilcolor is 'used as dropdown menu bar label style for both size and font '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column "+schemaName+".CLIENT.ashostid is 'reseller support web url  , also used in supported by msg '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column "+schemaName+".CLIENT.intaddr is 'last visitor internet ip '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column "+schemaName+".CLIENT.intpassw is 'last visitor internet ip '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column "+schemaName+".CLIENT.inrpassw is 'last visitor date string '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column "+schemaName+".CLIENT.keyorder is ' item currency Symbol '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column "+schemaName+".CLIENT.lastuser is 'last user (logged in visitor) to the site '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column "+schemaName+".CLIENT.level is 'used as flag for debug messages or logging '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="comment on column "+schemaName+".CLIENT.linefeed is 'used as SMTP tls  '";//ssl not supported
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column "+schemaName+".CLIENT.listbuildc is 'used as flag to turn off show jsocial panel in footer '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column "+schemaName+".CLIENT.listbuildv is 'used as flag to show reseller supported by in footer '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="comment on column "+schemaName+".CLIENT.listbuilde is 'used as flag to show system blog in menu'";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column "+schemaName+".CLIENT.locbaradj is ' site visits via authenticator homepagevisit'";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column "+schemaName+".CLIENT.looseit is ' master site indicator flag'";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="comment on column "+schemaName+".CLIENT.shibaradj is ' item currency to merchant/bank currency conv rate. 130 means 1.30 '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column "+schemaName+".CLIENT.NMATERIA is ' override code for item price and others'";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column "+schemaName+".CLIENT.mtstyle is ' used to hold old appname and used in alter backup tables'";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column "+schemaName+".CLIENT.nrate1ta is 'used for bootsrap 4 card background color can be red or #f0f0f0 '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column "+schemaName+".CLIENT.nrate2ta is 'used for bootsrap 4 tbd color '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column "+schemaName+".CLIENT.rootdir is ' used to hold smtp email send fromname (default owner2)'";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column "+schemaName+".CLIENT.custolen is ' counter to hold customer orders,used for billing and read only'";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column "+schemaName+".CLIENT.shicol is ' flag to indicate send order confirmation email to customer  '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column "+schemaName+".CLIENT.cadcol is ' flag to indicate send order confirmation email to employee agent or as in client '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column "+schemaName+".CLIENT.loccsize is ' home page visit count for the site,displayed in dashboard '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column "+schemaName+".CLIENT.carcsize is ' backup(on request on -b) date for the site,displayed in dashboard '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column "+schemaName+".CLIENT.pop3server is ' place holder for client site alert/error msg, displayed in site dashboard and in raaspi dashboard  '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column "+schemaName+".CLIENT.pop3pass is ' place holder for client site temp redirect url, used for paypal local test using ngrok proxy  '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column "+schemaName+".CLIENT.inraddr is ' place holder for intra address like shopify shop url  '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column "+schemaName+".CLIENT.cartonfl is ' cart payment final (sale) not Authorize  '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column "+schemaName+".CLIENT.refbaradj is 'used as counter for migration, can be reused  '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column "+schemaName+".CLIENT.Repcsize is 'used as mobile dropdown menu bar css style  '";
      q = entityManager.createNativeQuery(sqlScript);
      //sqlScript="comment on column "+schemaName+".CLIENT.rmlpassw is 'Site config rrsssfffff,r front end back end release s shopping cart version  '";
      sqlScript="comment on column "+schemaName+".CLIENT.rmlpassw is 'Site menu config 2 if static visitor pages and static menu  '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column "+schemaName+".CLIENT.scrcolor is 'used as current site skin color '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column "+schemaName+".CLIENT.shicsize is ' backup(daily on -c) date for the site,displayed in dashboard '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column "+schemaName+".CLIENT.smatcode is 'payment related info like Location if version 03'";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column "+schemaName+".CLIENT.tax1code is 'HST/Federal/GST/VAT registration #, non empty means collect if sale and pay if buy,item/customer/vendor level flag can override  '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column "+schemaName+".CLIENT.tax2code is 'State/PST registration #, non empty means collect if sale and pay if buy , '";
      q = entityManager.createNativeQuery(sqlScript);
      sqlScript="comment on column "+schemaName+".CLIENT.tax3code is '3rd Tax Food/Municipal/XXX registration #, non empty means collect if sale and pay if buy  '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column "+schemaName+".CLIENT.textcolor is 'used as mobile dropdown menu bar font size in px or em etc '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();

      //table item
      sqlScript="comment on table "+schemaName+".ITEM is 'Item '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      // columns
      sqlScript="comment on column "+schemaName+".ITEM.aliascode holds Item SKU Stock Keeping Unit value. Made of matcode and size and color '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column "+schemaName+".ITEM.sid is 'primary key, system generated unique identifier'";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column "+schemaName+".ITEM.misccode1 is 'either challenge in blogs(BI-D) etc or theme vendor if items SI-D '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column "+schemaName+".ITEM.misccode2 is 'either theme name in SI-D or actual answer for others'";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column "+schemaName+".ITEM.source2 is 'either answer holder to challenge in blogs etc or '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column "+schemaName+".ITEM.subcodesn is 'vendor Theme TH for SI-D and used for sort order'";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column "+schemaName+".ITEM.subcodesn2 is ' item variant value 8 ch each size,colour,material,brand for SI-Detls etc and used for sort order'";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column "+schemaName+".ITEM.subcodesn3 is ' item variant labels 8 ch each size,colour,material,brand for SI-Detls etc and used for sort order'";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column "+schemaName+".ITEM.type is 'SI- shopping cart, IX inventory, IQ for quote,CI-D case, BI- blogs, PI- pictures, IB- Issue bugs,FI- apply Fees,TI- tasks '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      //table options
      sqlScript="comment on table "+schemaName+".options is 'to hold various options and their purpose and values' ";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      // columns
      sqlScript="comment on column "+schemaName+".options.row is 'holds different value or is left empty, some cases a row number can be used as context like row2 Tax3 will have Liquor tax'";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();

      //table rate1f
      sqlScript="comment on table "+schemaName+".rate1f is 'rate table for shippng (CS) and LabTest (LT) '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      // columns
      sqlScript="comment on column "+schemaName+".rate1f.usertype is 'used for Customer Shipping ie CS or for type of lab test ie LT-CBC (value not used)'";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column "+schemaName+".rate1f.prodtype is 'If shipping P for production, can be vendor code like F for Fedex ? , if Lab Test  '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column "+schemaName+".rate1f.stepname is 'If shipping XY X shipment type S(standard)/E/P Y item size , if Lab Test detail test attribute ie Total WBC Count,HAEMOGLOBIN  '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column "+schemaName+".rate1f.step is 'If shipping 0 not used, if Lab Test value range identifier 0,1,3   '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column "+schemaName+".rate1f.value is 'If shipping actual cost in currency per box may have more than 1 items , if Lab Test highest value in range  '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      //table seat
      sqlScript="comment on table "+schemaName+".seat is 'Seat allocation for event/tickets for product type o ie organization'";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      // columns
      sqlScript="comment on column "+schemaName+".seat.row is 'seat rows could A,B,C etc or row1,row2 etc'";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column "+schemaName+".seat.seat001status is '1st ch null/o/h/a/r ie available/occupied/on hold/available/reserved,next 16 ch ticket # if used,next 32 ch order number if applicable'";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column "+schemaName+".seat.location is 'venue where event will take place'";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      //table scandate
      sqlScript="comment on table "+schemaName+".scandate is 'scandate table to control item physical count taking  '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      // columns
      sqlScript="comment on column "+schemaName+".scandate.datetimeofscan is 'used to allow scanning after and including this date'";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column "+schemaName+".scandate.lastdate is 'used to allow scanning before and including this date'";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column "+schemaName+".scandate.bkupdate is 'used to hold date when baseline system stock count copied'";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      //table serialnumbers
      sqlScript="comment on table "+schemaName+".serialnumbers is 'serialnumbers records physical count and baseline system count for each item  '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      // columns
      sqlScript="comment on column "+schemaName+".serialnumbers.barserial is 'barcode value and for serialized inventory control in ERP'";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column "+schemaName+".serialnumbers.serialno is 'used to map to item by holding items sid which is short enough for barcode as well'";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column "+schemaName+".serialnumbers.quanrecd is 'used to record in item receive from supplier in ERP product and/or baseline qty for inventory'";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column "+schemaName+".serialnumbers.quanissd is 'used in material and job allocation management'";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column "+schemaName+".serialnumbers.physqty is 'used to record scanned /entered physical qty'";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      //table userprofl
      sqlScript="comment on table "+schemaName+".USERPROFL is 'Userprofl '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      // columns
      sqlScript="comment on column "+schemaName+".USERPROFL.margin is 'amount for FI-D items'";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column "+schemaName+".USERPROFL.footer is 'allow limit for cuistomer prepay'";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column "+schemaName+".USERPROFL.mtstyle is 'criteria for FI-D'";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column "+schemaName+".USERPROFL.ststyle is 'type for FI-D search'";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      //table usagebyperiods
      sqlScript="comment on table "+schemaName+".usagebyperiods is 'Usagebyperiods '";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      // columns
      sqlScript="comment on column "+schemaName+".usagebyperiods.period0formulae is 'IP address if key is visitstats3r'";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      sqlScript="comment on column "+schemaName+".usagebyperiods.periodtotalslabel is 'usage date if key is periodtotalslabel'";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();


      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
       FacesMessage.SEVERITY_ERROR,bundle.getString("added")+" "+bundle.getString("in")+" "+bundle.getString("data")+" "+bundle.getString("dictionary")+" "+insertedCount,""));

      return null;
   } catch (Exception e) {
      if(sqlScript.length() > 80){
       sqlScript=sqlScript.substring(0,80);
      }
       FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
        FacesMessage.SEVERITY_ERROR,bundle.getString("error")+" "+bundle.getString("in")+" "+bundle.getString("put")+" "+bundle.getString("data")+" "+bundle.getString("dictionary")+" "+bundle.getString("comment")+" "+sqlScript+", "+bundle.getString("cause")+" "+e.getMessage(),""));


              return null;
   }
  }


	public String  backupAllTenants() {
      // C:\schemaspygui\postgres_postgre_ has tables relation and dependency info like deletionOrder.txt
      // add a lock ??
      // to file not used since in cloud pl/sql does not seem to have access to files
      // this backUp is on demand and done by tenant
      // there is daily backup to tables for all tenants while app is up and also a separate sbnapshot daily backup when app is stopped
      // snapshot is on file and meant for disaster situation
      //
      // 1-remove rows from backup if not in main ie any old (ie not used) rows in backup will be removed
      // 2-insert into backup if new rows in main
      // 3-update backup if row in main has different change time  (relies on statusfldate change)
      // follow the deletion order list produced by schemaspygui C:\schemaspygui\postgres_postgre_\deletionOrder.txt ( future use the list as input to automate )
      // insertionOrder.txt for insert, for update order does not matter because we are not dropping or adding any relation but will follow
      // insertionOrder.txt
      // resource_bundle,resource,clob and blob have SYSTEM records which need extra logic
      // SYSTEM records should not be deleted from main or backup table but should be copied into backup if needed ??? revisit
      // SELECT * FROM information_schema.columns WHERE table_schema = 'genapp'  AND table_name   = 'client'
      //use DatabaseMetaData, as in authenticator.java, to avoid harcoding here
      //using jdbc connection to get database metadata rather than entitymanager way to be ORM neutral
      DatabaseMetaData databaseMetaData=null;
      String productName="";
      String dbProductName="hsql";
      try(Connection conn = getConnection();){
       databaseMetaData = conn.getMetaData();
       productName = databaseMetaData.getDatabaseProductName();
      } catch (Exception e) {
       log.severe("No datasouce connection or databaseMetaData, Cannot continue");
       return null;
      }
      if(productName==null || productName.isEmpty()){
       log.severe("No datasouce setup yet, check tomee.xml or standalone.xml etc. Cannot continue");
       return null;
      }
      if(productName.contains("PostgreSQL")){
       dbProductName="psql";
      }
      schemaName="genapp";//hard code for now

     String sqlScript ="";
try{
     int deletedCount=0;
     int updatedCount=0;
     int insertedCount=0;
     int countp=0;

     sqlScript="delete from "+schemaName+".serialnumbers_b b where   b.owner2=:owner2 and not exists  (select sid from "+schemaName+".serialnumbers a where  a.sid = b.sid and a.owner2=:owner2)";
     Query q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();
     FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
      FacesMessage.SEVERITY_INFO,bundle.getString("delete")+" "+bundle.getString("serialnumbers_b")+" "+bundle.getString("count")+" "+(deletedCount-countp),""));
     countp=deletedCount;

     sqlScript="delete from "+schemaName+".scandate_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".scandate a where  a.sid = b.sid and a.owner2=:owner2)";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();
     FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
      FacesMessage.SEVERITY_INFO,bundle.getString("delete")+" "+bundle.getString("scandate_b")+" "+bundle.getString("count")+" "+(deletedCount-countp),""));
     countp=deletedCount;

     sqlScript="delete from "+schemaName+".rate1f_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".rate1f a where  a.sid = b.sid and a.owner2=:owner2)";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();
     FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("delete")+" "+bundle.getString("rate1f_b")+" "+bundle.getString("count")+" "+(deletedCount-countp),""));
     countp=deletedCount;

     sqlScript="delete from "+schemaName+".options_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".options a where  a.sid = b.sid and a.owner2=:owner2)";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();
     FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("delete")+" "+bundle.getString("options_b")+" "+bundle.getString("count")+" "+(deletedCount-countp),""));
     countp=deletedCount;

     sqlScript="delete from "+schemaName+".nextserialno_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".nextserialno a where  a.sid = b.sid and a.owner2=:owner2)";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();
     FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("delete")+" "+bundle.getString("nextserialno_b")+" "+bundle.getString("count")+" "+(deletedCount-countp),""));
     countp=deletedCount;

     sqlScript="delete from "+schemaName+".journal_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".journal a where  a.sid = b.sid and a.owner2=:owner2)";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();
     FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("delete")+" "+bundle.getString("journal_b")+" "+bundle.getString("count")+" "+(deletedCount-countp),""));
     countp=deletedCount;

     sqlScript="delete from "+schemaName+".jjournal_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".jjournal a where  a.sid = b.sid and a.owner2=:owner2)";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".hlogfile_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".hlogfile a where  a.sid = b.sid and a.owner2=:owner2)";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".genoptions_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".genoptions a where  a.sid = b.sid and a.owner2=:owner2)";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".editlog_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".editlog a where  a.sid = b.sid and a.owner2=:owner2)";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".clobdata_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".clobdata a where  a.sid = b.sid and a.owner2=:owner2)";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".cjournal_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".cjournal a where  a.sid = b.sid and a.owner2=:owner2)";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".blobdata_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".blobdata a where  a.sid = b.sid and a.owner2=:owner2)";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".arthatbl_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".arthatbl a where  a.sid = b.sid and a.owner2=:owner2)";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".arthahist_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".arthahist a where  a.sid = b.sid and a.owner2=:owner2)";
     q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".acperiod_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".acperiod a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".jobassignment_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".jobassignment a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".schedule_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".schedule a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vshipmendetails_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".vshipmendetails a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vcontact_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".vcontact a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".shipmentdetails_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".shipmentdetails a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".ccontact_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".ccontact a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vendqdetails_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".vendqdetails a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vendpdetails_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".vendpdetails a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vendodetails_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".vendodetails a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vendidetails_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".vendidetails a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".resourcedetails_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".resourcedetails a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".processdetails_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".processdetails a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".emplodetails_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".emplodetails a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".cuqdetails_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".cuqdetails a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".cuodetails_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".cuodetails a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".cuidetails_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".cuidetails a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".usagebyperiods_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".usagebyperiods a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".rgenfields_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".rgenfields a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".itembomdetails_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".itembomdetails a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".holiday_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".holiday a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".gentriesdetails_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".gentriesdetails a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".cupdetails_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".cupdetails a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".activityjobdetails_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".activityjobdetails a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".wageearneraux_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".wageearneraux a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".venartha_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".venartha a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".userprofl_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".userprofl a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".resource_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".resource a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".processattributes_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".processattributes a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".controlusagebyperiods_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".controlusagebyperiods a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".acintegr_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".acintegr a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".\"USER_b\" b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".\"USER\" a where  a.sid = b.sid and a.owner2=:owner2)";
     if(dbProductName.equals("psql")){
      sqlScript="delete from "+schemaName+".\"user_b\" b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".\"user\" a where  a.sid = b.sid and a.owner2=:owner2)";
     }

      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".emplorders_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".emplorders a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vpayment_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".vpayment a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".task_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".task a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".cpayment_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".cpayment a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".glentries_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".glentries a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".controlusagebyperiods_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".controlusagebyperiods a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".activityjob_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".activityjob a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".wageearner_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".wageearner a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".rgentable_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".rgentable a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".itemjob_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".itemjob a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vshipmen_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".vshipmen a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".groupmembers_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".groupmembers a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vinvoice_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".vinvoice a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".shipment_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".shipment a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vendorders_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".vendorders a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".cuinvoice_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".cuinvoice a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".cuorders_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".cuorders a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".project_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".project a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".outline_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".outline a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".venquote_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".venquote a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".cuquote_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".cuquote a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".machine_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".machine a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".activity_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".activity a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".item_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".item a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".employee_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".employee a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".customer_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".customer a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".vendor_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".vendor a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

     sqlScript="delete from "+schemaName+".location_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".location a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();
     FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("delete")+" "+bundle.getString("location_b")+" "+bundle.getString("count")+" "+(deletedCount-countp),""));
     countp=deletedCount;
     sqlScript="delete from "+schemaName+".account_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".account a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();
     FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("delete")+" "+bundle.getString("account_b")+" "+bundle.getString("count")+" "+(deletedCount-countp),""));
     countp=deletedCount;

     sqlScript="delete from "+schemaName+".rgendb_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".rgendb a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".company_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".company a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".rollupgroup_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".rollupgroup a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".rgenapp_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".rgenapp a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".resource_bundle_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".resource_bundle a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".perioddates_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".perioddates a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".itembom_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".itembom a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();

      sqlScript="insert into "+schemaName+".resource_bundle_b select * from "+schemaName+".resource_bundle a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".resource_bundle_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      if(customIdentity.isMasterSite()){
      sqlScript="insert into "+schemaName+".resource_bundle_b select * from "+schemaName+".resource_bundle a where  a.owner2='SYSTEM'  and  not exists (select sid from "+schemaName+".resource_bundle_b b where b.sid = a.sid and b.owner2='SYSTEM')";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      }

     sqlScript="delete from "+schemaName+".control_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".control a where  a.sid = b.sid and a.owner2=:owner2 )";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".client_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".client a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".residency_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".residency a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".membersgroup_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".membersgroup a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".division_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".division a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".department_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".department a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();


     sqlScript="delete from "+schemaName+".address_b b where   b.owner2=:owner2  and  not exists  (select sid from "+schemaName+".address a where  a.sid = b.sid and a.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
     q.setParameter("owner2", owner2Code);
     deletedCount = deletedCount +q.executeUpdate();





     // insert into backup if new rows in main
     // follow insertionOrder.txt produced by schemaSpyGui which is in reverse order of deleteOrder.txt.

      sqlScript="insert into "+schemaName+".address_b select * from "+schemaName+".address a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".address_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".department_b select * from "+schemaName+".department a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".department_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".division_b select * from "+schemaName+".division a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".division_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".membersgroup_b select * from "+schemaName+".membersgroup a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".membersgroup_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".residency_b select * from "+schemaName+".residency a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".residency_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".client_b select * from "+schemaName+".client a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".client_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".control_b select * from "+schemaName+".control a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".control_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".itembom_b select * from "+schemaName+".itembom a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".itembom_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".resource_bundle_b select * from "+schemaName+".resource_bundle a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".resource_bundle_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      if(customIdentity.isMasterSite()){
      sqlScript="insert into "+schemaName+".resource_bundle_b select * from "+schemaName+".resource_bundle a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".resource_bundle_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", "SYSTEM");
      insertedCount=insertedCount+q.executeUpdate();
      }


      sqlScript="insert into "+schemaName+".perioddates_b select * from "+schemaName+".perioddates a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".perioddates_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".rgenapp_b select * from "+schemaName+".rgenapp a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".rgenapp_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".rollupgroup_b select * from "+schemaName+".rollupgroup a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".rollupgroup_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".company_b select * from "+schemaName+".company a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".company_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".rgendb_b select * from "+schemaName+".rgendb a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".rgendb_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("insert")+" "+bundle.getString("rgendb_b")+" "+bundle.getString("count")+" "+(insertedCount-countp),""));
      countp=insertedCount;

      sqlScript="insert into "+schemaName+".account_b select * from "+schemaName+".account a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".account_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("insert")+" "+bundle.getString("account_b")+" "+bundle.getString("count")+" "+(insertedCount-countp),""));
      countp=insertedCount;

      sqlScript="insert into "+schemaName+".location_b select * from "+schemaName+".location a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".location_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".vendor_b select * from "+schemaName+".vendor a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".vendor_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".customer_b select * from "+schemaName+".customer a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".customer_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".employee_b select * from "+schemaName+".employee a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".employee_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".item_b select * from "+schemaName+".item a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".item_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".activity_b select * from "+schemaName+".activity a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".activity_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".machine_b select * from "+schemaName+".machine a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".machine_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".cuquote_b select * from "+schemaName+".cuquote a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".cuquote_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".venquote_b select * from "+schemaName+".venquote a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".venquote_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".outline_b select * from "+schemaName+".outline a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".outline_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".project_b select * from "+schemaName+".project a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".project_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".cuorders_b select * from "+schemaName+".cuorders a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".cuorders_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".vendorders_b select * from "+schemaName+".vendorders a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".vendorders_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".vshipmen_b select * from "+schemaName+".vshipmen a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".vshipmen_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".cuinvoice_b select * from "+schemaName+".cuinvoice a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".cuinvoice_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".shipment_b select * from "+schemaName+".shipment a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".shipment_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".vinvoice_b select * from "+schemaName+".vinvoice a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".vinvoice_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".groupmembers_b select * from "+schemaName+".groupmembers a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".groupmembers_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".processdetails_b select * from "+schemaName+".processdetails a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".processdetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".itemjob_b select * from "+schemaName+".itemjob a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".itemjob_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".rgentable_b select * from "+schemaName+".rgentable a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".rgentable_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".wageearner_b select * from "+schemaName+".wageearner a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".wageearner_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".activityjob_b select * from "+schemaName+".activityjob a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".activityjob_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".glentries_b select * from "+schemaName+".glentries a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".glentries_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".cpayment_b select * from "+schemaName+".cpayment a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".cpayment_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".task_b select * from "+schemaName+".task a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".task_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".vpayment_b select * from "+schemaName+".vpayment a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".vpayment_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".emplorders_b select * from "+schemaName+".emplorders a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".emplorders_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".\"USER_b\" select * from "+schemaName+".\"USER\" a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".\"USER_b\" b where b.sid = a.sid and b.owner2=:owner2)";
      if(dbProductName.equals("psql")){
       sqlScript="insert into "+schemaName+".\"user_b\" select * from "+schemaName+".\"user\" a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".\"user_b\" b where b.sid = a.sid and b.owner2=:owner2)";
      }
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".acintegr_b select * from "+schemaName+".acintegr a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".acintegr_b b where b.sid = a.sid and b.owner2=:owner2)";
     if(dbProductName.equals("psql")){
     }

      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".controlusagebyperiods_b select * from "+schemaName+".controlusagebyperiods a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".controlusagebyperiods_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".processattributes_b select * from "+schemaName+".processattributes a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".processattributes_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".resource_b select * from "+schemaName+".resource a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".resource_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      if(customIdentity.isMasterSite()){
      sqlScript="insert into "+schemaName+".resource_b select * from "+schemaName+".resource a where  a.owner2='SYSTEM'  and  not exists (select sid from "+schemaName+".resource_b b where b.sid = a.sid and b.owner2='SYSTEM')";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      }

      sqlScript="insert into "+schemaName+".userprofl_b select * from "+schemaName+".userprofl a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".userprofl_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".venartha_b select * from "+schemaName+".venartha a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".venartha_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".wageearneraux_b select * from "+schemaName+".wageearneraux a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".wageearneraux_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".activityjobdetails_b select * from "+schemaName+".activityjobdetails a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".activityjobdetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".cupdetails_b select * from "+schemaName+".cupdetails a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".cupdetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".gentriesdetails_b select * from "+schemaName+".gentriesdetails a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".gentriesdetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".holiday_b select * from "+schemaName+".holiday a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".holiday_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      sqlScript="insert into "+schemaName+".itembomdetails_b select * from "+schemaName+".itembomdetails a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".itembomdetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();




      sqlScript="insert into "+schemaName+".rgenfields_b select * from "+schemaName+".rgenfields a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".rgenfields_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".usagebyperiods_b select * from "+schemaName+".usagebyperiods a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".usagebyperiods_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".cuidetails_b select * from "+schemaName+".cuidetails a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".cuidetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".cuodetails_b select * from "+schemaName+".cuodetails a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".cuodetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".cuqdetails_b select * from "+schemaName+".cuqdetails a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".cuqdetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".emplodetails_b select * from "+schemaName+".emplodetails a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".emplodetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".resourcedetails_b select * from "+schemaName+".resourcedetails a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".resourcedetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".vendidetails_b select * from "+schemaName+".vendidetails a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".vendidetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".vendodetails_b select * from "+schemaName+".vendodetails a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".vendodetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".vendpdetails_b select * from "+schemaName+".vendpdetails a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".vendpdetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".vendqdetails_b select * from "+schemaName+".vendqdetails a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".vendqdetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".ccontact_b select * from "+schemaName+".ccontact a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".ccontact_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".shipmentdetails_b select * from "+schemaName+".shipmentdetails a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".shipmentdetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".vcontact_b select * from "+schemaName+".vcontact a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".vcontact_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".vshipmendetails_b select * from "+schemaName+".vshipmendetails a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".vshipmendetails_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".schedule_b select * from "+schemaName+".schedule a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".schedule_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".jobassignment_b select * from "+schemaName+".jobassignment a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".jobassignment_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".acperiod_b select * from "+schemaName+".acperiod a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".acperiod_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".arthahist_b select * from "+schemaName+".arthahist a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".arthahist_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".arthatbl_b select * from "+schemaName+".arthatbl a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".arthatbl_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".holiday_b select * from "+schemaName+".holiday a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".holiday_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".blobdata_b select * from "+schemaName+".blobdata a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".blobdata_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      if(customIdentity.isMasterSite()){
      sqlScript="insert into "+schemaName+".blobdata_b select * from "+schemaName+".blobdata a where  a.owner2='SYSTEM'  and  not exists (select sid from "+schemaName+".blobdata_b b where b.sid = a.sid and b.owner2='SYSTEM')";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      }

      sqlScript="insert into "+schemaName+".cjournal_b select * from "+schemaName+".cjournal a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".cjournal_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".clobdata_b select * from "+schemaName+".clobdata a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".clobdata_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();

      if(customIdentity.isMasterSite()){
      sqlScript="insert into "+schemaName+".clobdata_b select * from "+schemaName+".clobdata a where  a.owner2='SYSTEM'  and  not exists (select sid from "+schemaName+".clobdata_b b where b.sid = a.sid and b.owner2='SYSTEM')";
      q = entityManager.createNativeQuery(sqlScript);
      insertedCount=insertedCount+q.executeUpdate();
      }

      sqlScript="insert into "+schemaName+".editlog_b select * from "+schemaName+".editlog a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".editlog_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".genoptions_b select * from "+schemaName+".genoptions a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".genoptions_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".hlogfile_b select * from "+schemaName+".hlogfile a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".hlogfile_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".jjournal_b select * from "+schemaName+".jjournal a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".jjournal_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".journal_b select * from "+schemaName+".journal a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".journal_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".nextserialno_b select * from "+schemaName+".nextserialno a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".nextserialno_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".options_b select * from "+schemaName+".options a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".options_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".rate1f_b select * from "+schemaName+".rate1f a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".rate1f_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".scandate_b select * from "+schemaName+".scandate a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".scandate_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();


      sqlScript="insert into "+schemaName+".serialnumbers_b select * from "+schemaName+".serialnumbers a where  a.owner2=:owner2  and  not exists (select sid from "+schemaName+".serialnumbers_b b where b.sid = a.sid and b.owner2=:owner2)";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2", owner2Code);
      insertedCount=insertedCount+q.executeUpdate();





      // update backup if row in main has changed (relies on statusfldate change)
      // jay whats about those not having statusfldt? either add field or rely on parent status fld
      // and group the updates together
      // order should not matter because all the foreign keys should exist but will follow insert order
//postgresql UPDATE genapp.journal_b SET sid=a.sid,spostdate=a.spostdate,postdate=a.postdate,owner2=a.owner2 FROM  genapp.journal a  where(genapp.journal_b.sid=a.sid AND a.postdate<>genapp.journal_b.postdate AND a.owner2='localhost')
//hsqldb or stanard UPDATE genapp.journal_b b SET (sid,spostdate,postdate,owner2)=(SELECT sid,spostdate,postdate,owner2 FROM  genapp.journal a where b.sid=a.sid AND a.postdate<>b.postdate AND a.owner2='localhost')
sqlScript="UPDATE "+schemaName+".journal_b b SET(sid,spostdate,postdate,calendardt,jrnltype,jnlseqb,jnlseq,jnlseqs,period,account,debit,credit,xreference,descript,statusfl,owner,owner2)=(SELECT sid,spostdate,postdate,calendardt,jrnltype,jnlseqb,jnlseq,jnlseqs,period,account,debit,credit,xreference,descript,statusfl,owner,owner2 FROM "+schemaName+".journal a where a.sid=b.sid AND a.postdate<>b.postdate and a.owner2=:owner2)";
if(dbProductName.equals("psql")){
 sqlScript="UPDATE "+schemaName+".journal_b SET sid=a.sid,a.spostdate=a.spostdate,postdate=a.postdate,calendardt=a.calendardt,jrnltype=a.jrnltype,jnlseqb=,jnlseq=a.jnlseq,jnlseqs=a.jnlseqs,period=a.period,account=a.account,debit=a.debit,credit=a.credit,xreference=a.xreference,descript=a.descript,statusfl=a.statusfl,owner=a.owner,owner2=a.owner2) FROM "+schemaName+".journal a where(genapp.journal_b.sid=a.sid AND a.postdate<>genapp.journal_b.postdate AND a.owner2=:owner2)";
}
/*
//?? update now done jay except for rate1f which now has statusfldt done now aug 05 2018 but check others which manually changed

sqlScript="UPDATE "+schemaName+".ADDRESS_b b SET(SID,ADDRESCODE,ADDRL1,ADDRL2,ADDRL3,CITY,PROVNSTATE,COUNTRY,PZCODE,DESCRIPT,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2,PRINTMSTAT,PRINMTFLDT)=(a.SID,a.ADDRESCODE,a.ADDRL1,a.ADDRL2,a.ADDRL3,a.CITY,a.PROVNSTATE,a.COUNTRY,a.PZCODE,a.DESCRIPT,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2,a.PRINTMSTAT,a.PRINMTFLDT)FROM "+schemaName+".address a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);
updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE "+schemaName+".OPTIONS_b b SET(SID,ROW,OPTIONS01,PURPOSE01,VALUE01,OPTIONS02,PURPOSE02,VALUE02,OPTIONS03,PURPOSE03,VALUE03,OPTIONS04,PURPOSE04,VALUE04,OPTIONS05,PURPOSE05,VALUE05,OPTIONS06,PURPOSE06,VALUE06,OPTIONS07,PURPOSE07,VALUE07,OPTIONS08,PURPOSE08,VALUE08,OPTIONS09,PURPOSE09,VALUE09,OPTIONS10,PURPOSE10,VALUE10,OPTIONS11,PURPOSE11,VALUE11,OPTIONS12,PURPOSE12,VALUE12,OPTIONS13,PURPOSE13,VALUE13,OPTIONS14,PURPOSE14,VALUE14,OPTIONS15,PURPOSE15,VALUE15,OPTIONS16,PURPOSE16,VALUE16,OPTIONS17,PURPOSE17,VALUE17,OPTIONS18,PURPOSE18,VALUE18,OPTIONS19,PURPOSE19,VALUE19,OPTIONS20,PURPOSE20,VALUE20,OPTIONS21,PURPOSE21,VALUE21,OPTIONS22,PURPOSE22,VALUE22,OPTIONS23,PURPOSE23,VALUE23,OPTIONS24,PURPOSE24,VALUE24,OPTIONS25,PURPOSE25,VALUE25,OPTIONS26,PURPOSE26,VALUE26,OPTIONS27,PURPOSE27,VALUE27,OPTIONS28,PURPOSE28,VALUE28,OPTIONS29,PURPOSE29,VALUE29,OPTIONS30,PURPOSE30,VALUE30,OPTIONS31,PURPOSE31,VALUE31,OPTIONS32,PURPOSE32,VALUE32,OPTIONS33,PURPOSE33,VALUE33,OPTIONS34,PURPOSE34,VALUE34,OPTIONS35,PURPOSE35,VALUE35,OPTIONS36,PURPOSE36,VALUE36,OPTIONS37,PURPOSE37,VALUE37,OPTIONS38,PURPOSE38,VALUE38,OPTIONS39,PURPOSE39,VALUE39,OPTIONS40,PURPOSE40,VALUE40,OPTIONS41,PURPOSE41,VALUE41,OPTIONS42,PURPOSE42,VALUE42,OPTIONS43,PURPOSE43,VALUE43,OPTIONS44,PURPOSE44,VALUE44,OPTIONS45,PURPOSE45,VALUE45,OPTIONS46,PURPOSE46,VALUE46,OPTIONS47,PURPOSE47,VALUE47,OPTIONS48,PURPOSE48,VALUE48,OPTIONS49,PURPOSE49,VALUE49,OPTIONS50,PURPOSE50,VALUE50,OPTIONS51,PURPOSE51,VALUE51,OPTIONS52,PURPOSE52,VALUE52,OPTIONS53,PURPOSE53,VALUE53,OPTIONS54,PURPOSE54,VALUE54,OPTIONS55,PURPOSE55,VALUE55,OPTIONS56,PURPOSE56,VALUE56,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(a.SID,a.ROW,a.OPTIONS01,a.PURPOSE01,a.VALUE01,a.OPTIONS02,a.PURPOSE02,a.VALUE02,a.OPTIONS03,a.PURPOSE03,a.VALUE03,a.OPTIONS04,a.PURPOSE04,a.VALUE04,a.OPTIONS05,a.PURPOSE05,a.VALUE05,a.OPTIONS06,a.PURPOSE06,a.VALUE06,a.OPTIONS07,a.PURPOSE07,a.VALUE07,a.OPTIONS08,a.PURPOSE08,a.VALUE08,a.OPTIONS09,a.PURPOSE09,a.VALUE09,a.OPTIONS10,a.PURPOSE10,a.VALUE10,a.OPTIONS11,a.PURPOSE11,a.VALUE11,a.OPTIONS12,a.PURPOSE12,a.VALUE12,a.OPTIONS13,a.PURPOSE13,a.VALUE13,a.OPTIONS14,a.PURPOSE14,a.VALUE14,a.OPTIONS15,a.PURPOSE15,a.VALUE15,a.OPTIONS16,a.PURPOSE16,a.VALUE16,a.OPTIONS17,a.PURPOSE17,a.VALUE17,a.OPTIONS18,a.PURPOSE18,a.VALUE18,a.OPTIONS19,a.PURPOSE19,a.VALUE19,a.OPTIONS20,a.PURPOSE20,a.VALUE20,a.OPTIONS21,a.PURPOSE21,a.VALUE21,a.OPTIONS22,a.PURPOSE22,a.VALUE22,a.OPTIONS23,a.PURPOSE23,a.VALUE23,a.OPTIONS24,a.PURPOSE24,a.VALUE24,a.OPTIONS25,a.PURPOSE25,a.VALUE25,a.OPTIONS26,a.PURPOSE26,a.VALUE26,a.OPTIONS27,a.PURPOSE27,a.VALUE27,a.OPTIONS28,a.PURPOSE28,a.VALUE28,a.OPTIONS29,a.PURPOSE29,a.VALUE29,a.OPTIONS30,a.PURPOSE30,a.VALUE30,a.OPTIONS31,a.PURPOSE31,a.VALUE31,a.OPTIONS32,a.PURPOSE32,a.VALUE32,a.OPTIONS33,a.PURPOSE33,a.VALUE33,a.OPTIONS34,a.PURPOSE34,a.VALUE34,a.OPTIONS35,a.PURPOSE35,a.VALUE35,a.OPTIONS36,a.PURPOSE36,a.VALUE36,a.OPTIONS37,a.PURPOSE37,a.VALUE37,a.OPTIONS38,a.PURPOSE38,a.VALUE38,a.OPTIONS39,a.PURPOSE39,a.VALUE39,a.OPTIONS40,a.PURPOSE40,a.VALUE40,a.OPTIONS41,a.PURPOSE41,a.VALUE41,a.OPTIONS42,a.PURPOSE42,a.VALUE42,a.OPTIONS43,a.PURPOSE43,a.VALUE43,a.OPTIONS44,a.PURPOSE44,a.VALUE44,a.OPTIONS45,a.PURPOSE45,a.VALUE45,a.OPTIONS46,a.PURPOSE46,a.VALUE46,a.OPTIONS47,a.PURPOSE47,a.VALUE47,a.OPTIONS48,a.PURPOSE48,a.VALUE48,a.OPTIONS49,a.PURPOSE49,a.VALUE49,a.OPTIONS50,a.PURPOSE50,a.VALUE50,a.OPTIONS51,a.PURPOSE51,a.VALUE51,a.OPTIONS52,a.PURPOSE52,a.VALUE52,a.OPTIONS53,a.PURPOSE53,a.VALUE53,a.OPTIONS54,a.PURPOSE54,a.VALUE54,a.OPTIONS55,a.PURPOSE55,a.VALUE55,a.OPTIONS56,a.PURPOSE56,a.VALUE56,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2)FROM "+schemaName+".OPTIONS a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);
updatedCount=updatedCount+q.executeUpdate();

String line1="UPDATE "+schemaName+".CLIENT_b b SET(SID,CLIENTVERSION,SERIALNUM,ENTERPRISECOMPANYNA,DESCRIPT,ADDRL1,ADDRL2,ADDRL3,CITY,PROVNSTATE,COUNTRYNAME,PZCODE,PHONEO,PHONEH,PHONEC,PHONEX,LANADDR,WANADDR,LMAILADDR,IMAILADDR,RMAILADDR,INTADDR,INRADDR,ENTERPRISECOMPCODE,ENTERPRISECOMPSIZE,BARCSIZE,LEVEL,POSKIPP,LOOSEIT,JOBSKIP,CARTONFL,PICKLIST,PRODDESC,PRODCODE,NJOB,NMATERIA,NACTIVITY,NBUTT,NCUSTOME,NCONTACT,NVENDOR,NEMPLOYEE,NSCHEDULE,NREJECT,NRETURN,NCODE,MANUFID,BARTYPE,CADTYPE,CARTYPE,SHITYPE,REPTYPE,LOCTYPE,BARCOL,CARCOL,CADCOL,SHICOL,REPCOL,LOCCOL,ALTSERIA,COUNTRYCODE,NALTSERI,SCRCOLOR,HILCOLOR,TEXTCOLOR,BACCOLOR,DATETYPE,CURRSYMB,CURRCODE,PRINBAR,BARPRINT,CARPRINT,CADPRINT,LOCPRINT,SHIPRINT,REPPRINT,BARPRTY,REPPRTY,CARPRTY,CADPRTY,SHIPRTY,LOCPRTY,ALTSELEN,CUSTOLEN,CARCSIZE,CADCSIZE,SHICSIZE,REPCSIZE,LOCCSIZE,CS,NCONFTYP,NLOCATIO,NDIVCODE,NDEPCODE,NADDCODE,NFLOOR,NROOM,NRACK,MENUTYPE,PADTYPE,NRATE1TA,NRATE2TA,DEFCONFT,BEEPSOU,CONFIRM,LINEFEED,REFBARADJ,SHIBARADJ,CUSBARADJ,LOCBARADJ,CARBARADJ,NCORDER,NSPERSON,PROMPTI,CUSTOMERQUOTENB,CUSTOMERQUOTEN,CUSTOMERQUOTENA,CUSTOMERORDERNB,CUSTOMERORDERN,CUSTOMERORDERNA,VENDORORDERNB,VENDORORDERN,VENDORORDERNA,EMPLOYEEORDERNB,EMPLOYEEORDERN,EMPLOYEEORDERNA,JOBNB,JOBN,JOBNA,CUSTOMERINVOICENB,CUSTOMERINVOICEN,CUSTOMERINVOICENA,VENDORINVOICENB,VENDORINVOICEN,VENDORINVOICENA,CUSTOMERPICKNB,CUSTOMERPICKN,CUSTOMERPICKNA,VENDORQUOTENB,VENDORQUOTEN,VENDORQUOTENA,CUSTOMERPAYMNTNB,CUSTOMERPAYMNTN,CUSTOMERPAYMNTNA,VENDORPAYMNTNB,VENDORPAYMNTN,VENDORPAYMNTNA,VENDORCHQNB,VENDORCHQN,VENDORCHQNA,TASKNB,TASKN,TASKNA,ARSEQB,ARSEQ,ARSEQA,APSEQB,APSEQ,APSEQA,GLSEQB,GLSEQ,GLSEQA,PASEQB,PASEQ,PASEQA,ICSEQB,ICSEQ,ICSEQA,JOSEQB,JOSEQ,JOSEQA,SGLENTRY,TAX1CODE,TAX2CODE,TAX3CODE,NDECIMAL,EDIPASSW,INTPASSW,INRPASSW,IMLPASSW,RMLPASSW,LMLPASSW,HOSPASSW,LANPASSW,WANPASSW,ASHOSTID,HDSTYLE,MTSTYLE,STSTYLE,DTSTYLE,FTSTYLE,DEFAULTR,DEFAULTC,DBNAME,ROOTDIR,KEYORDER,CURRBUSDAT,LASTBUSDAT,CURRCALDAT,LASTCALDAT,PREPROCESS,MARGIN,FOOTER,LASTUSER,LISTBUILDC,LISTBUILDV,LISTBUILDE,LISTBROWNC,LISTBROWNV,LISTBROWNE,SMTPSERVER,SMTPUSER,SMTPPASS,POP3SERVER,POP3USER,POP3PASS,SMATCODE,FYREND,FPERIODS,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2,licensetype,licensestart,licenseend)=(a.sid,a.CLIENTVERSION,a.SERIALNUM,a.ENTERPRISECOMPANYNA,a.DESCRIPT,a.ADDRL1,a.ADDRL2,a.ADDRL3,a.CITY,a.PROVNSTATE,a.COUNTRYNAME,a.PZCODE,a.PHONEO,a.PHONEH,a.PHONEC,a.PHONEX,a.LANADDR,a.WANADDR,a.LMAILADDR,a.IMAILADDR,a.RMAILADDR,a.INTADDR,a.INRADDR,a.ENTERPRISECOMPCODE,a.ENTERPRISECOMPSIZE,a.BARCSIZE,a.LEVEL,a.POSKIPP,a.LOOSEIT,a.JOBSKIP,a.CARTONFL,a.PICKLIST,a.PRODDESC,a.PRODCODE,a.NJOB,a.NMATERIA,a.NACTIVITY,a.NBUTT,a.NCUSTOME,a.NCONTACT,a.NVENDOR,a.NEMPLOYEE,a.NSCHEDULE,a.NREJECT,a.NRETURN,a.NCODE,a.MANUFID,a.BARTYPE,a.CADTYPE,a.CARTYPE,a.SHITYPE,a.REPTYPE,a.LOCTYPE,a.BARCOL,a.CARCOL,a.CADCOL,a.SHICOL,a.REPCOL,a.LOCCOL,a.ALTSERIA,a.COUNTRYCODE,a.NALTSERI,a.SCRCOLOR,a.HILCOLOR,";
sqlScript=line1+"a.TEXTCOLOR,a.BACCOLOR,a.DATETYPE,a.CURRSYMB,a.CURRCODE,a.PRINBAR,a.BARPRINT,a.CARPRINT,a.CADPRINT,a.LOCPRINT,a.SHIPRINT,a.REPPRINT,a.BARPRTY,a.REPPRTY,a.CARPRTY,a.CADPRTY,a.SHIPRTY,a.LOCPRTY,a.ALTSELEN,a.CUSTOLEN,a.CARCSIZE,a.CADCSIZE,a.SHICSIZE,a.REPCSIZE,a.LOCCSIZE,a.CS,a.NCONFTYP,a.NLOCATIO,a.NDIVCODE,a.NDEPCODE,a.NADDCODE,a.NFLOOR,a.NROOM,a.NRACK,a.MENUTYPE,a.PADTYPE,a.NRATE1TA,a.NRATE2TA,a.DEFCONFT,a.BEEPSOU,a.CONFIRM,a.LINEFEED,a.REFBARADJ,a.SHIBARADJ,a.CUSBARADJ,a.LOCBARADJ,a.CARBARADJ,a.NCORDER,a.NSPERSON,a.PROMPTI,a.CUSTOMERQUOTENB,a.CUSTOMERQUOTEN,a.CUSTOMERQUOTENA,a.CUSTOMERORDERNB,a.CUSTOMERORDERN,a.CUSTOMERORDERNA,a.VENDORORDERNB,a.VENDORORDERN,a.VENDORORDERNA,a.EMPLOYEEORDERNB,a.EMPLOYEEORDERN,a.EMPLOYEEORDERNA,a.JOBNB,a.JOBN,a.JOBNA,a.CUSTOMERINVOICENB,a.CUSTOMERINVOICEN,a.CUSTOMERINVOICENA,a.VENDORINVOICENB,a.VENDORINVOICEN,a.VENDORINVOICENA,a.CUSTOMERPICKNB,a.CUSTOMERPICKN,a.CUSTOMERPICKNA,a.VENDORQUOTENB,a.VENDORQUOTEN,a.VENDORQUOTENA,a.CUSTOMERPAYMNTNB,a.CUSTOMERPAYMNTN,a.CUSTOMERPAYMNTNA,a.VENDORPAYMNTNB,a.VENDORPAYMNTN,a.VENDORPAYMNTNA,a.VENDORCHQNB,a.VENDORCHQN,a.VENDORCHQNA,a.TASKNB,a.TASKN,a.TASKNA,a.ARSEQB,a.ARSEQ,a.ARSEQA,a.APSEQB,a.APSEQ,a.APSEQA,a.GLSEQB,a.GLSEQ,a.GLSEQA,a.PASEQB,a.PASEQ,a.PASEQA,a.ICSEQB,a.ICSEQ,a.ICSEQA,a.JOSEQB,a.JOSEQ,a.JOSEQA,a.SGLENTRY,a.TAX1CODE,a.TAX2CODE,a.TAX3CODE,a.NDECIMAL,a.EDIPASSW,a.INTPASSW,a.INRPASSW,a.IMLPASSW,a.RMLPASSW,a.LMLPASSW,a.HOSPASSW,a.LANPASSW,a.WANPASSW,a.ASHOSTID,a.HDSTYLE,a.MTSTYLE,a.STSTYLE,a.DTSTYLE,a.FTSTYLE,a.DEFAULTR,a.DEFAULTC,a.DBNAME,a.ROOTDIR,a.KEYORDER,a.CURRBUSDAT,a.LASTBUSDAT,a.CURRCALDAT,a.LASTCALDAT,a.PREPROCESS,a.MARGIN,a.FOOTER,a.LASTUSER,a.LISTBUILDC,a.LISTBUILDV,a.LISTBUILDE,a.LISTBROWNC,a.LISTBROWNV,a.LISTBROWNE,a.SMTPSERVER,a.SMTPUSER,a.SMTPPASS,a.POP3SERVER,a.POP3USER,a.POP3PASS,a.SMATCODE,a.FYREND,a.FPERIODS,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2,a.licensetype,a.licensestart,a.licenseend)FROM "+schemaName+".CLIENT a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);
updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE "+schemaName+".DEPARTMENT_b b SET(SID,DEPCODE,DESCRIPT,GLPREFIX,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(a.sid,a.DEPCODE,a.DESCRIPT,a.GLPREFIX,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2)FROM "+schemaName+".DEPARTMENT a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2);UPDATE "+schemaName+".COMPANY_b b SET(SID,COMPANYCODE,DESCRIPT,LEGALNAME,MAILTOCODE,GLPREFIX,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(a.sid,a.COMPANYCODE,a.DESCRIPT,a.LEGALNAME,a.MAILTOCODE,a.GLPREFIX,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2)FROM "+schemaName+".COMPANY a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);
updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE "+schemaName+".CONTROL_b b SET(SID,CONTROLCODE,DESCRIPT,TYPEOFCONTROL,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(a.sid,a.CONTROLCODE,a.DESCRIPT,a.TYPEOFCONTROL,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2)FROM "+schemaName+".CONTROL a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);
updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE "+schemaName+".DIVISION_b b SET(SID,DIVCODE,DESCRIPT,GLPREFIX,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(a.sid,a.DIVCODE,a.DESCRIPT,a.GLPREFIX,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2)FROM "+schemaName+".DIVISION a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);
updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE "+schemaName+".LOCATION_b b SET(SID,LOCATION,DESCRIPT,COMPANYCODE,ADDRESSCODE,FLOOR,ROOM,RACK,PRINTMSTAT,PRINMTFLDT,EXCLUDE,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(a.sid,a.LOCATION,a.DESCRIPT,a.COMPANYCODE,a.ADDRESSCODE,a.FLOOR,a.ROOM,a.RACK,a.PRINTMSTAT,a.PRINMTFLDT,a.EXCLUDE,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2)FROM "+schemaName+".LOCATION a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);
updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE "+schemaName+".RESIDENCY_b b SET(SID,RESIDENCY,DESCRIPT,MUNICIPALITY,PROVINCE,COUNTRYNAME,EXCLUDE,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(a.sid,a.RESIDENCY,a.DESCRIPT,a.MUNICIPALITY,a.PROVINCE,a.COUNTRYNAME,a.EXCLUDE,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2)FROM "+schemaName+".RESIDENCY a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);
updatedCount=updatedCount+q.executeUpdate();
FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("update")+" "+bundle.getString("residency_b")+" "+bundle.getString("count")+" "+(updatedCount-countp),""));
countp=updatedCount;

sqlScript="UPDATE "+schemaName+".ACCOUNT_b b SET(SID,ACCOUNT,DESCRIPT,CATEGORY,TYPE,BUDGET,ACTUAL,ACTUALN,PREVBUDG,PREVACT,SEQUENCE,CHILD,PARENT,ROLLUPQ,COMPANYCODE,DEPCODE,DIVCODE,STATUSFL,STATUSFLDT,CURRENCY,NOTES,OWNER,OWNER2,P0,P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12,P13,P14,P8T,P9T,P10T,P11T)=(a.SID,a.ACCOUNT,a.DESCRIPT,a.CATEGORY,a.TYPE,a.BUDGET,a.ACTUAL,a.ACTUALN,a.PREVBUDG,a.PREVACT,a.SEQUENCE,a.CHILD,a.PARENT,a.ROLLUPQ,a.COMPANYCODE,a.DEPCODE,a.DIVCODE,a.STATUSFL,a.STATUSFLDT,a.CURRENCY,a.NOTES,a.OWNER,a.OWNER2,a.P0,a.P1,a.P2,a.P3,a.P4,a.P5,a.P6,a.P7,a.P8,a.P9,a.P10,a.P11,a.P12,a.P13,a.P14,a.P8T,a.P9T,a.P10T,a.P11T)FROM "+schemaName+".ACCOUNT a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);
updatedCount=updatedCount+q.executeUpdate();
FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
                                     FacesMessage.SEVERITY_INFO,bundle.getString("update")+" "+bundle.getString("account_b")+" "+bundle.getString("count")+" "+(updatedCount-countp),""));
countp=updatedCount;

sqlScript="UPDATE "+schemaName+".CUSTOMER_b b SET(SID,CUSTOMER,DESCRIPT,TITLE,JOBTITLE,LASTNAME,FIRSTNAME,MIDDLENAM,CUSTOMERASCOMPANYNAME,CUSTTOTL,CUSTTQTY,COMPANYCODE,LOCATION,MAILTOCODE,SHIPTOCODE,TAX1,TAX2,TAX3,CUSTTAX1,CUSTTAX2,CUSTTAX3,PHONEO,PHONEH,PHONEC,PHONEX,LANADDR,WANADDR,LMAILADDR,IMAILADDR,RMAILADDR,INTADDR,INRADDR,DOB,PLACEOFBIRTH,SEX,AGE,CUSRTOTL,CUSRTQTY,CUSMTOTL,CUSDTOTL,LASTORDER,LASTINVOIC,LASTPAYMNQ,PRINTMSTAT,PRINMTFLDT,SHIPLABEL,TYPE,DEFAULTGLAC,INTEGRSET,STATUSFL,STATUSFLDT,TOTLPAID,CONTACTED,BYWHO,NXTCONTACT,VIA,KEYWORDS,NOTES,OWNER,OWNER2,DOCMNT)=(a.SID,a.CUSTOMER,a.DESCRIPT,a.TITLE,a.JOBTITLE,a.LASTNAME,a.FIRSTNAME,a.MIDDLENAM,a.CUSTOMERASCOMPANYNAME,a.CUSTTOTL,a.CUSTTQTY,a.COMPANYCODE,a.LOCATION,a.MAILTOCODE,a.SHIPTOCODE,a.TAX1,a.TAX2,a.TAX3,a.CUSTTAX1,a.CUSTTAX2,a.CUSTTAX3,a.PHONEO,a.PHONEH,a.PHONEC,a.PHONEX,a.LANADDR,a.WANADDR,a.LMAILADDR,a.IMAILADDR,a.RMAILADDR,a.INTADDR,a.INRADDR,a.DOB,a.PLACEOFBIRTH,a.SEX,a.AGE,a.CUSRTOTL,a.CUSRTQTY,a.CUSMTOTL,a.CUSDTOTL,a.LASTORDER,a.LASTINVOIC,a.LASTPAYMNQ,a.PRINTMSTAT,a.PRINMTFLDT,a.SHIPLABEL,a.TYPE,a.DEFAULTGLAC,a.INTEGRSET,a.STATUSFL,a.STATUSFLDT,a.TOTLPAID,a.CONTACTED,a.BYWHO,a.NXTCONTACT,a.VIA,a.KEYWORDS,a.NOTES,a.OWNER,a.OWNER2,a.DOCMNT)FROM "+schemaName+".CUSTOMER a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);
updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE "+schemaName+".VENDOR_b b SET(SID,VENDOR,DESCRIPT,TITLE,JOBTITLE,LASTNAME,FIRSTNAME,MIDDLENAM,VENDORASCOMPANYNAME,VENDTOTL,VENDTQTY,COMPANYCODE,LOCATION,MAILTOCODE,PHONEO,PHONEH,PHONEC,PHONEX,LANADDR,WANADDR,LMAILADDR,IMAILADDR,RMAILADDR,INTADDR,INRADDR,VENRTOTL,VENRTQTY,VENMTOTL,VENDDTOTL,LASTQUOTE,LASTORDER,LASTINVOIC,LASTPAYMQ,PRINTMSTAT,PRINMTFLDT,SHIPLABEL,TYPE,SHIPTOCODE,DEFAULTGLAC,INTEGRSET,STATUSFL,STATUSFLDT,TOTLPAID,CONTACTED,BYWHO,KEYWORDS,NOTES,OWNER,OWNER2,DOCMNT)=(a.SID,a.VENDOR,a.DESCRIPT,a.TITLE,a.JOBTITLE,a.LASTNAME,a.FIRSTNAME,a.MIDDLENAM,a.VENDORASCOMPANYNAME,a.VENDTOTL,a.VENDTQTY,a.COMPANYCODE,a.LOCATION,a.MAILTOCODE,a.PHONEO,a.PHONEH,a.PHONEC,a.PHONEX,a.LANADDR,a.WANADDR,a.LMAILADDR,a.IMAILADDR,a.RMAILADDR,a.INTADDR,a.INRADDR,a.VENRTOTL,a.VENRTQTY,a.VENMTOTL,a.VENDDTOTL,a.LASTQUOTE,a.LASTORDER,a.LASTINVOIC,a.LASTPAYMQ,a.PRINTMSTAT,a.PRINMTFLDT,a.SHIPLABEL,a.TYPE,a.SHIPTOCODE,a.DEFAULTGLAC,a.INTEGRSET,a.STATUSFL,a.STATUSFLDT,a.TOTLPAID,a.CONTACTED,a.BYWHO,a.KEYWORDS,a.NOTES,a.OWNER,a.OWNER2,a.DOCMNT)FROM "+schemaName+".VENDOR a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE "+schemaName+".EMPLOYEE_b b SET(SID,EMPLOYEE,DESCRIPT,TITLE,JOBTITLE,LASTNAME,FIRSTNAME,MIDDLENAM,COMPANYCODE,EMPLTOTL,EMPLTQTY,DIVCODE,DEPCODE,LOCATION,RESIDENCY,MAILTOCODE,TAX1,TAX2,TAX3,CUSTTAX1,CUSTTAX2,CUSTTAX3,PHONEO,PHONEH,PHONEC,PHONEX,LANADDR,WANADDR,LMAILADDR,IMAILADDR,RMAILADDR,INTADDR,INRADDR,EMPRTOTL,EMPRTQTY,EMPMTOTL,EMPDTOTL,LASTQUOTE,LASTORDER,LASTINVOIC,LASTPAYMQ,PRINTMSTAT,PRINMTFLDT,SHIPLABEL,SHIPTOCODE,TYPE,DEFAULTGLAC,INTEGRSET,STATUSFL,STATUSFLDT,CONTACTED,BYWHO,KEYWORDS,NOTES,OWNER,OWNER2,DOCMNT)=(a.SID,a.EMPLOYEE,a.DESCRIPT,a.TITLE,a.JOBTITLE,a.LASTNAME,a.FIRSTNAME,a.MIDDLENAM,a.COMPANYCODE,a.EMPLTOTL,a.EMPLTQTY,a.DIVCODE,a.DEPCODE,a.LOCATION,a.RESIDENCY,a.MAILTOCODE,a.TAX1,a.TAX2,a.TAX3,a.CUSTTAX1,a.CUSTTAX2,a.CUSTTAX3,a.PHONEO,a.PHONEH,a.PHONEC,a.PHONEX,a.LANADDR,a.WANADDR,a.LMAILADDR,a.IMAILADDR,a.RMAILADDR,a.INTADDR,a.INRADDR,a.EMPRTOTL,a.EMPRTQTY,a.EMPMTOTL,a.EMPDTOTL,a.LASTQUOTE,a.LASTORDER,a.LASTINVOIC,a.LASTPAYMQ,a.PRINTMSTAT,a.PRINMTFLDT,a.SHIPLABEL,a.SHIPTOCODE,a.TYPE,a.DEFAULTGLAC,a.INTEGRSET,a.STATUSFL,a.STATUSFLDT,a.CONTACTED,a.BYWHO,a.KEYWORDS,a.NOTES,a.OWNER,a.OWNER2,a.DOCMNT)FROM "+schemaName+".EMPLOYEE a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE "+schemaName+".VCONTACT_b b SET(SID,CONTACT,VENDOR,TITLE,JOBTITLE,LASTNAME,FIRSTNAME,MIDDLENAM,PHONEO,PHONEH,PHONEC,PHONEX,LANADDR,WANADDR,LMAILADDR,IMAILADDR,RMAILADDR,INTADDR,INRADDR,LOCATION,MAILTOCODE,SHIPTOCODE,PRINTSTA,SHIPLABEL,TYPE,STATUSFL,STATUSFLDT,KEYWORDS,NOTES,OWNER,OWNER2,DOCMNT)=(a.SID,a.CONTACT,a.VENDOR,a.TITLE,a.JOBTITLE,a.LASTNAME,a.FIRSTNAME,a.MIDDLENAM,a.PHONEO,a.PHONEH,a.PHONEC,a.PHONEX,a.LANADDR,a.WANADDR,a.LMAILADDR,a.IMAILADDR,a.RMAILADDR,a.INTADDR,a.INRADDR,a.LOCATION,a.MAILTOCODE,a.SHIPTOCODE,a.PRINTSTA,a.SHIPLABEL,a.TYPE,a.STATUSFL,a.STATUSFLDT,a.KEYWORDS,a.NOTES,a.OWNER,a.OWNER2,a.DOCMNT)FROM "+schemaName+".VCONTACT a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE "+schemaName+".CCONTACT_b b SET(SID,CONTACT,CUSTOMER,TITLE,JOBTITLE,LASTNAME,FIRSTNAME,MIDDLENAM,TAX1,TAX2,TAX3,CUSTTAX1,CUSTTAX2,CUSTTAX3,PHONEO,PHONEH,PHONEC,PHONEX,LANADDR,WANADDR,LMAILADDR,IMAILADDR,RMAILADDR,INTADDR,INRADDR,LOCATION,MAILTOCODE,SHIPTOCODE,PRINTMSTAT,PRINMTFLDT,SHIPLABEL,TYPE,STATUSFL,STATUSFLDT,KEYWORDS,NOTES,OWNER,OWNER2,DOCMNT)=(a.SID,a.CONTACT,a.CUSTOMER,a.TITLE,a.JOBTITLE,a.LASTNAME,a.FIRSTNAME,a.MIDDLENAM,a.TAX1,a.TAX2,a.TAX3,a.CUSTTAX1,a.CUSTTAX2,a.CUSTTAX3,a.PHONEO,a.PHONEH,a.PHONEC,a.PHONEX,a.LANADDR,a.WANADDR,a.LMAILADDR,a.IMAILADDR,a.RMAILADDR,a.INTADDR,a.INRADDR,a.LOCATION,a.MAILTOCODE,a.SHIPTOCODE,a.PRINTMSTAT,a.PRINMTFLDT,a.SHIPLABEL,a.TYPE,a.STATUSFL,a.STATUSFLDT,a.KEYWORDS,a.NOTES,a.OWNER,a.OWNER2,a.DOCMNT)FROM "+schemaName+".CCONTACT a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE "+schemaName+".PERIODDATES_b b SET(SID,PERIOD,DESCRIPT,STARTDATE,ENDDATE,STARTOFWEEK,STARTOFBWEEK,ENDOFBWEEK,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(a.SID,a.PERIOD,a.DESCRIPT,a.STARTDATE,a.ENDDATE,a.STARTOFWEEK,a.STARTOFBWEEK,a.ENDOFBWEEK,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2)FROM "+schemaName+".PERIODDATES a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2);UPDATE "+schemaName+".ACPERIOD_b b SET(SID,ROWID,CURRPERIOD,DESCRIPT,CURRBUSDATE,CURRCALDATE,CURRLOCALDATE,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(a.SID,a.ROWID,a.CURRPERIOD,a.DESCRIPT,a.CURRBUSDATE,a.CURRCALDATE,a.CURRLOCALDATE,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2)FROM "+schemaName+".ACPERIOD a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2);UPDATE "+schemaName+".WAGEEARNER_b b SET(SID,WAGEEARNERID,EMPLOYEE,SIN,BIRTHDT,FEDCLAIM,PROVCLAIM,PAYYRFREQ,PAYPERIOD,WCB,WCBYTD,EMPLINSUR,INSYTD,VACRETAIN,VACATONYT,WAGEUNIT,WAGERATE,OTIMEUNIT,OTIMERATE,WAGEUNITS,OTIMUNITS,WAGEOUT,OVTIMEOUT,SALARYOUT,COMMISSION,BENEFITS,VACATION,VACPAYOUT,ADVANCE,PENSION,AFTERTAX,UNIONDUES,MEDICAL,FINCOMETX,PINCOMETX,THISPAYA,LASTPAYA,PAYYTD,FPENSIYTD,PPENSIYTD,ITAXYTD,PTAXYTD,GRPAYYTD,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2,DOCMNT)=(a.SID,a.WAGEEARNERID,a.EMPLOYEE,a.SIN,a.BIRTHDT,a.FEDCLAIM,a.PROVCLAIM,a.PAYYRFREQ,a.PAYPERIOD,a.WCB,a.WCBYTD,a.EMPLINSUR,a.INSYTD,a.VACRETAIN,a.VACATONYT,a.WAGEUNIT,a.WAGERATE,a.OTIMEUNIT,a.OTIMERATE,a.WAGEUNITS,a.OTIMUNITS,a.WAGEOUT,a.OVTIMEOUT,a.SALARYOUT,a.COMMISSION,a.BENEFITS,a.VACATION,a.VACPAYOUT,a.ADVANCE,a.PENSION,a.AFTERTAX,a.UNIONDUES,a.MEDICAL,a.FINCOMETX,a.PINCOMETX,a.THISPAYA,a.LASTPAYA,a.PAYYTD,a.FPENSIYTD,a.PPENSIYTD,a.ITAXYTD,a.PTAXYTD,a.GRPAYYTD,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2,a.DOCMNT)FROM "+schemaName+".WAGEEARNER a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE "+schemaName+".ARTHATBL_b b SET(SID,USAGE,WCBPERCNT,INSFACTOR,VACATONRATE,PENSIONMAX,WCBMAX,INSMAX,ITAXLV0RATE,ITAXLV1RATE,ITAXLV2RATE,ITAXLV3RATE,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(a.SID,a.USAGE,a.WCBPERCNT,a.INSFACTOR,a.VACATONRATE,a.PENSIONMAX,a.WCBMAX,a.INSMAX,a.ITAXLV0RATE,a.ITAXLV1RATE,a.ITAXLV2RATE,a.ITAXLV3RATE,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2)FROM "+schemaName+".ARTHATBL a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE "+schemaName+".ROLLUPGROUP_b b SET(SID,GROUPID,DESCRIPT,TYPE,CURRPW,EXPIRY,CURRENCY,PERIOD0B,PERIOD0,PERIODTOTALSB,PERIODTOTALS,PERIOD1BUDGET,PERIOD1ACTUAL,PERIOD2B,PERIOD2,PERIOD3B,PERIOD3,PERIOD4B,PERIOD4,PERIOD5B,PERIOD5,PERIOD6B,PERIOD6,PERIOD7B,PERIOD7,PERIOD8B,PERIOD8,PERIOD9B,PERIOD9,PERIOD10B,PERIOD10,PERIOD11B,PERIOD11,PERIOD12B,PERIOD12,PERIODNB,PERIODN,NOTES,STATUSFL,STATUSFLDT,OWNER,OWNER2)=(a.SID,a.GROUPID,a.DESCRIPT,a.TYPE,a.CURRPW,a.EXPIRY,a.CURRENCY,a.PERIOD0B,a.PERIOD0,a.PERIODTOTALSB,a.PERIODTOTALS,a.PERIOD1BUDGET,a.PERIOD1ACTUAL,a.PERIOD2B,a.PERIOD2,a.PERIOD3B,a.PERIOD3,a.PERIOD4B,a.PERIOD4,a.PERIOD5B,a.PERIOD5,a.PERIOD6B,a.PERIOD6,a.PERIOD7B,a.PERIOD7,a.PERIOD8B,a.PERIOD8,a.PERIOD9B,a.PERIOD9,a.PERIOD10B,a.PERIOD10,a.PERIOD11B,a.PERIOD11,a.PERIOD12B,a.PERIOD12,a.PERIODNB,a.PERIODN,a.NOTES,a.STATUSFL,a.STATUSFLDT,a.OWNER,a.OWNER2)FROM "+schemaName+".ROLLUPGROUP a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE "+schemaName+".MEMBERSGROUP_b b SET(SID,GROUPID,DESCRIPT,QUANTITY,MODE,STATUSFL,STATUSFLDT,OWNER,OWNER2)=(a.SID,a.GROUPID,a.DESCRIPT,a.QUANTITY,a.MODE,a.STATUSFL,a.STATUSFLDT,a.OWNER,a.OWNER2)FROM "+schemaName+".MEMBERSGROUP a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE "+schemaName+".ARTHAHIST_b b SET(SID,WAGEEARNER,SIN,PERIOD,MONTH,CCYY,VACATION,WAGE,OVERTIME,SALARY,COMMISSION,BENEFIT,FINCOMETX,PINCOMETX,WCBOUT,EMPLINSUR,VACPAYOUT,ADVANCE,FPENSOBTX,FPENSOATX,UNIONDUES,MEDICAL,PAYAMT,NOTES,NOTES2,CHQNUMBER,STATUSFL,STATUSFLDT,OWNER,OWNER2)=(a.SID,a.WAGEEARNER,a.SIN,a.PERIOD,a.MONTH,a.CCYY,a.VACATION,a.WAGE,a.OVERTIME,a.SALARY,a.COMMISSION,a.BENEFIT,a.FINCOMETX,a.PINCOMETX,a.WCBOUT,a.EMPLINSUR,a.VACPAYOUT,a.ADVANCE,a.FPENSOBTX,a.FPENSOATX,a.UNIONDUES,a.MEDICAL,a.PAYAMT,a.NOTES,a.NOTES2,a.CHQNUMBER,a.STATUSFL,a.STATUSFLDT,a.OWNER,a.OWNER2)FROM "+schemaName+".ARTHAHIST a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE "+schemaName+".HOLIDAY_b b SET(SID,SHOLIDAY,HOLIDAY,DESCRIPT,TYPE,STATUSFL,STATUSFLDT,EMPLOYEE,RESIDENCY,OWNER,OWNER2)=(a.SID,a.SHOLIDAY,a.HOLIDAY,a.DESCRIPT,a.TYPE,a.STATUSFL,a.STATUSFLDT,a.EMPLOYEE,a.RESIDENCY,a.OWNER,a.OWNER2)FROM "+schemaName+".HOLIDAY a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE "+schemaName+".ITEM_b b SET(SID,MATCODE,QUANTITY,DESCRIPT,DATEADDED,DATEEXPIRY,DATETORENEW,SOURCE1,SOURCE2,UPCCODE,COST,REPLCOST,SELPRICE,SPRICOLD,SPRICNEW,SPRICEFFDT,SHIPCODE,PRINTMSTAT,PRINMTFLDT,MISCCODE1,MISCCODE2,QTYLEVEL1,UNIT,CASEQTY,TYPE,TAX1,TAX2,TAX3,ALIASCODE,PARENTCODE,AVGPRICE,AVGCOST,STATUSFL,STATUSFLDT,SUBCODESN,SUBCODESN2,SUBCODESN3,CUORDQTY,VENORQTY,CUPICQTY,VENPIQTY,CUINVQTY,CUSHIQTY,VENSHQTY,EFFDATE,INTEGRSET,NOTES,DOCMNT,OWNER,OWNER2,LOCATION,BARUPC)=(a.SID,a.MATCODE,a.QUANTITY,a.DESCRIPT,a.DATEADDED,a.DATEEXPIRY,a.DATETORENEW,a.SOURCE1,a.SOURCE2,a.UPCCODE,a.COST,a.REPLCOST,a.SELPRICE,a.SPRICOLD,a.SPRICNEW,a.SPRICEFFDT,a.SHIPCODE,a.PRINTMSTAT,a.PRINMTFLDT,a.MISCCODE1,a.MISCCODE2,a.QTYLEVEL1,a.UNIT,a.CASEQTY,a.TYPE,a.TAX1,a.TAX2,a.TAX3,a.ALIASCODE,a.PARENTCODE,a.AVGPRICE,a.AVGCOST,a.STATUSFL,a.STATUSFLDT,a.SUBCODESN,a.SUBCODESN2,a.SUBCODESN3,a.CUORDQTY,a.VENORQTY,a.CUPICQTY,a.VENPIQTY,a.CUINVQTY,a.CUSHIQTY,a.VENSHQTY,a.EFFDATE,a.INTEGRSET,a.NOTES,a.DOCMNT,a.OWNER,a.OWNER2,a.LOCATION,a.BARUPC)FROM "+schemaName+".ITEM a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE "+schemaName+".ACTIVITY_b b SET(SID,ACTIVITYCODE,QUANTITY,DESCRIPT,DATE,SOURCE1,SOURCE2,UPCCODE,COST,REPLCOST,SELPRICE,SPRICOLD,SPRICNEW,SPRICEFFDT,SHIPCODE,PRINTMSTAT,PRINMTFLDT,MISCCODE1,MISCCODE2,QTYLEVEL1,UNIT,CASEQTY,TYPE,TAX1,TAX2,TAX3,ALIASCODE,PARENTCODE,AVGPRICE,AVGCOST,STATUSFL,STATUSFLDT,SUBCODESN,SUBCODESN2,SUBCODESN3,CUORDQTY,VENORQTY,CUPICQTY,VENPIQTY,CUINVQTY,CUSHIQTY,VENSHQTY,EFFDATE,INTEGRSET,NOTES,DOCMNT,OWNER,OWNER2,BARUPC)=(a.SID,a.ACTIVITYCODE,a.QUANTITY,a.DESCRIPT,a.DATE,a.SOURCE1,a.SOURCE2,a.UPCCODE,a.COST,a.REPLCOST,a.SELPRICE,a.SPRICOLD,a.SPRICNEW,a.SPRICEFFDT,a.SHIPCODE,a.PRINTMSTAT,a.PRINMTFLDT,a.MISCCODE1,a.MISCCODE2,a.QTYLEVEL1,a.UNIT,a.CASEQTY,a.TYPE,a.TAX1,a.TAX2,a.TAX3,a.ALIASCODE,a.PARENTCODE,a.AVGPRICE,a.AVGCOST,a.STATUSFL,a.STATUSFLDT,a.SUBCODESN,a.SUBCODESN2,a.SUBCODESN3,a.CUORDQTY,a.VENORQTY,a.CUPICQTY,a.VENPIQTY,a.CUINVQTY,a.CUSHIQTY,a.VENSHQTY,a.EFFDATE,a.INTEGRSET,a.NOTES,a.DOCMNT,a.OWNER,a.OWNER2,a.BARUPC)FROM "+schemaName+".ACTIVITY a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE "+schemaName+".SCHEDULE_b b SET(SID,TODO,DESCRIPT,EMPLOYEE,SSDATET,ACTIVITYCODE,LOCATION,SDATET,DURATIONH,DURATIONM,STIMEH,STIMEM,STIMEAMPM,EDATET,PRIORITY,PERCNTDONE,VENDOR,VONTACT,CUSTOMER,TYPE,MAILTOCODE,OTHEREMPLO,REPEATF,STATUSFL,STATUSFLDT,PRIVATEIND,NOTES,OWNER,OWNER2,DOCMNT)=(a.SID,a.TODO,a.DESCRIPT,a.EMPLOYEE,a.SSDATET,a.ACTIVITYCODE,a.LOCATION,a.SDATET,a.DURATIONH,a.DURATIONM,a.STIMEH,a.STIMEM,a.STIMEAMPM,a.EDATET,a.PRIORITY,a.PERCNTDONE,a.VENDOR,a.VONTACT,a.CUSTOMER,a.TYPE,a.MAILTOCODE,a.OTHEREMPLO,a.REPEATF,a.STATUSFL,a.STATUSFLDT,a.PRIVATEIND,a.NOTES,a.OWNER,a.OWNER2,a.DOCMNT)FROM "+schemaName+".SCHEDULE a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE "+schemaName+".USERPROFL_b b SET(SID,LOGONID,ROW,OPTION,SELECTVALUE,SCRCOLOR,HILCOLOR,TEXTCOLOR,BACCOLOR,BEEPSOU,CONFIRM,PROMPTI,P1,P2,P3,P4,P5,P6,MTSTYLE,STSTYLE,DTSTYLE,FTSTYLE,DEFAULTR,DEFAULTC,DBNAME,ROOTDIR,KEYORDER,MARGIN,FOOTER,LISTBUILDC,LISTBUILDV,LISTBUILDE,LISTBROWNC,LISTBROWNV,LISTBROWNE,STATUSFL,STATUSFLDT,OWNER,OWNER2)=(a.SID,a.LOGONID,a.ROW,a.OPTION,a.SELECTVALUE,a.SCRCOLOR,a.HILCOLOR,a.TEXTCOLOR,a.BACCOLOR,a.BEEPSOU,a.CONFIRM,a.PROMPTI,a.P1,a.P2,a.P3,a.P4,a.P5,a.P6,a.MTSTYLE,a.STSTYLE,a.DTSTYLE,a.FTSTYLE,a.DEFAULTR,a.DEFAULTC,a.DBNAME,a.ROOTDIR,a.KEYORDER,a.MARGIN,a.FOOTER,a.LISTBUILDC,a.LISTBUILDV,a.LISTBUILDE,a.LISTBROWNC,a.LISTBROWNV,a.LISTBROWNE,a.STATUSFL,a.STATUSFLDT,a.OWNER,a.OWNER2)FROM "+schemaName+".USERPROFL a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE "+schemaName+".\"USER_b\" b SET(SID,ID,CLIENT,EMPLOYEE,VENDOR,CUSTOMER,OTHERID,ALEVEL,BLEVEL,CURRPW,EXPIRY,OLDPW,TEMPORARYPASSWORD,PASSWORDHASH,ACTIVATIONKEY,RESTRICT1,RESTRICT2,RESTRICT3,ALLOW1,ALLOW2,ALLOW3,MAXPROFLROW,CPROFLROW,STATUSFL,STATUSFLDT,UCURRCALDA,PREPROCESS,NOTES,DOCMNT,OWNER,OWNER2)=(a.SID,a.ID,a.CLIENT,a.EMPLOYEE,a.VENDOR,a.CUSTOMER,a.OTHERID,a.ALEVEL,a.BLEVEL,a.CURRPW,a.EXPIRY,a.OLDPW,a.TEMPORARYPASSWORD,a.PASSWORDHASH,a.ACTIVATIONKEY,a.RESTRICT1,a.RESTRICT2,a.RESTRICT3,a.ALLOW1,a.ALLOW2,a.ALLOW3,a.MAXPROFLROW,a.CPROFLROW,a.STATUSFL,a.STATUSFLDT,a.UCURRCALDA,a.PREPROCESS,a.NOTES,a.DOCMNT,a.OWNER,a.OWNER2)FROM "+schemaName+".\"USER\" a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
if(dbProductName.equals("psql")){
 sqlScript="UPDATE "+schemaName+".\"user_b\" b SET(SID,ID,CLIENT,EMPLOYEE,VENDOR,CUSTOMER,OTHERID,ALEVEL,BLEVEL,CURRPW,EXPIRY,OLDPW,TEMPORARYPASSWORD,PASSWORDHASH,ACTIVATIONKEY,RESTRICT1,RESTRICT2,RESTRICT3,ALLOW1,ALLOW2,ALLOW3,MAXPROFLROW,CPROFLROW,STATUSFL,STATUSFLDT,UCURRCALDA,PREPROCESS,NOTES,DOCMNT,OWNER,OWNER2)=(a.SID,a.ID,a.CLIENT,a.EMPLOYEE,a.VENDOR,a.CUSTOMER,a.OTHERID,a.ALEVEL,a.BLEVEL,a.CURRPW,a.EXPIRY,a.OLDPW,a.TEMPORARYPASSWORD,a.PASSWORDHASH,a.ACTIVATIONKEY,a.RESTRICT1,a.RESTRICT2,a.RESTRICT3,a.ALLOW1,a.ALLOW2,a.ALLOW3,a.MAXPROFLROW,a.CPROFLROW,a.STATUSFL,a.STATUSFLDT,a.UCURRCALDA,a.PREPROCESS,a.NOTES,a.DOCMNT,a.OWNER,a.OWNER2)FROM "+schemaName+".\"user\" a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
}

q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE "+schemaName+".VENARTHA_b b SET(SID,CHQNUMBER,RECONCILED,VENDORC,DATE,ADDRESCODE,CHQAMT,AMTVERBOS,NOTES,ADVISEL1,ADVISEL2,ADVISEL3,STATUSFL,STATUSFLDT,OWNER,OWNER2)=(a.SID,a.CHQNUMBER,a.RECONCILED,a.VENDORC,a.DATE,a.ADDRESCODE,a.CHQAMT,a.AMTVERBOS,a.NOTES,a.ADVISEL1,a.ADVISEL2,a.ADVISEL3,a.STATUSFL,a.STATUSFLDT,a.OWNER,a.OWNER2)FROM "+schemaName+".VENARTHA a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2);UPDATE "+schemaName+".ACINTEGR_b b SET(SID,MODULEID,USAGEDESCR,USAGECODE,SETSID,ACCOUNT,EXTRAINTFIELD,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(a.SID,a.MODULEID,a.USAGEDESCR,a.USAGECODE,a.SETSID,a.ACCOUNT,a.EXTRAINTFIELD,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2)FROM "+schemaName+".ACINTEGR a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE "+schemaName+".ITEMJOB_b b SET(SID,JOBNO,MATCODE,PRODDATET,QTYALLOC,PONO,QTYOSTND,QTYALSTK,QTYISSUD,JOBTOTL,STATUSFL,CUSTOMEJ,VENDOR,STATUSFLDT,PRINTMSTAT,PRINMTFLDT,PRINTMSTATJ,PRINMTFLDTJ,TYPE,MATCODEOUT,QTYOUT,NOTES,OWNER,OWNER2)=(a.SID,a.JOBNO,a.MATCODE,a.PRODDATET,a.QTYALLOC,a.PONO,a.QTYOSTND,a.QTYALSTK,a.QTYISSUD,a.JOBTOTL,a.STATUSFL,a.CUSTOMEJ,a.VENDOR,a.STATUSFLDT,a.PRINTMSTAT,a.PRINMTFLDT,a.PRINTMSTATJ,a.PRINMTFLDTJ,a.TYPE,a.MATCODEOUT,a.QTYOUT,a.NOTES,a.OWNER,a.OWNER2)FROM "+schemaName+".ITEMJOB a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2);UPDATE "+schemaName+".ACTIVITYJOB_b b SET(SID,JOBNO,ACTIVITYCODE,PRODDATET,QTYALLOC,PONO,QTYOSTND,QTYALSTK,QTYISSUD,JOBTOTL,STATUSFL,CUSTOMEJ,VENDOR,STATUSFLDT,PRINTMSTAT,PRINMTFLDT,PRINTMSTATJ,PRINMTFLDTJ,TYPE,MATCODEOUT,QTYOUT,NOTES,OWNER,OWNER2,DOCMNT)=(a.SID,a.JOBNO,a.ACTIVITYCODE,a.PRODDATET,a.QTYALLOC,a.PONO,a.QTYOSTND,a.QTYALSTK,a.QTYISSUD,a.JOBTOTL,a.STATUSFL,a.CUSTOMEJ,a.VENDOR,a.STATUSFLDT,a.PRINTMSTAT,a.PRINMTFLDT,a.PRINTMSTATJ,a.PRINMTFLDTJ,a.TYPE,a.MATCODEOUT,a.QTYOUT,a.NOTES,a.OWNER,a.OWNER2,a.DOCMNT)FROM "+schemaName+".ACTIVITYJOB a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE "+schemaName+".PROCESSATTRIBUTES_b b SET(SID,PDETAILS,NAME,VALUE,TYPE,RANGE,STEP,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(a.SID,a.PDETAILS,a.NAME,a.VALUE,a.TYPE,a.RANGE,a.STEP,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2)FROM "+schemaName+".PROCESSATTRIBUTES a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE "+schemaName+".PROCESSDETAILS_b b SET(SID,PROCESS,CPONO,MATCODE,CUSTOMER,SDATET,DURATIONH,DURATIONM,STIMEH,STIMEM,STIMEAMPM,EDATET,PRIORITY,PERCNTDONE,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(a.SID,a.PROCESS,a.CPONO,a.MATCODE,a.CUSTOMER,a.SDATET,a.DURATIONH,a.DURATIONM,a.STIMEH,a.STIMEM,a.STIMEAMPM,a.EDATET,a.PRIORITY,a.PERCNTDONE,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2)FROM "+schemaName+".PROCESSDETAILS a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE "+schemaName+".VENQUOTE_b b SET(SID,PURCHSNO,DELVDATET,VENDOR,MATCODE,REPLICATE,AMOUNTTOTAL,AMOUNTOSTNDT,QTYTOTAL,QTYOSTNDT,STATUSFL,CINVOICE,JOBNO,VPONO,RFPORD,STATUSFLDT,RCPONO,ODATET,TERMS,PRIORITY,PRINTMSTAT,PRINMTFLDT,TYPE,VINVOICE,ATTACH,SHIPCODE,AGENT,BASEAMOUNTT,DELIVCHRGT,MISCCHRGT,TAX1AMTT,TAX2AMTT,TAX3AMTT,STARTDATET,NOTES,OWNER,OWNER2,DOCMNT)=(a.SID,a.PURCHSNO,a.DELVDATET,a.VENDOR,a.MATCODE,a.REPLICATE,a.AMOUNTTOTAL,a.AMOUNTOSTNDT,a.QTYTOTAL,a.QTYOSTNDT,a.STATUSFL,a.CINVOICE,a.JOBNO,a.VPONO,a.RFPORD,a.STATUSFLDT,a.RCPONO,a.ODATET,a.TERMS,a.PRIORITY,a.PRINTMSTAT,a.PRINMTFLDT,a.TYPE,a.VINVOICE,a.ATTACH,a.SHIPCODE,a.AGENT,a.BASEAMOUNTT,a.DELIVCHRGT,a.MISCCHRGT,a.TAX1AMTT,a.TAX2AMTT,a.TAX3AMTT,a.STARTDATET,a.NOTES,a.OWNER,a.OWNER2,a.DOCMNT)FROM "+schemaName+".VENQUOTE a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2);UPDATE "+schemaName+".VENDORDERS_b b SET(SID,PURCHSNO,DELVDATET,VENDOR,MATCODE,AMOUNTTOTAL,AMOUNTOSTNDT,QTYTOTAL,QTYOSTNDT,STATUSFL,JOBNO,VENDQNO,RFPORD,STATUSFLDT,RCPONO,ODATET,TERMS,PRIORITY,PRINTMSTAT,PRINMTFLDT,TYPE,VINVOICE,ATTACH,SHIPCODE,AGENT,BASEAMOUNTT,DELIVCHRGT,MISCCHRGT,TAX1AMTT,TAX2AMTT,TAX3AMTT,STARTDATET,NOTES,OWNER,OWNER2,DOCMNT)=(a.SID,a.PURCHSNO,a.DELVDATET,a.VENDOR,a.MATCODE,a.AMOUNTTOTAL,a.AMOUNTOSTNDT,a.QTYTOTAL,a.QTYOSTNDT,a.STATUSFL,a.JOBNO,a.VENDQNO,a.RFPORD,a.STATUSFLDT,a.RCPONO,a.ODATET,a.TERMS,a.PRIORITY,a.PRINTMSTAT,a.PRINMTFLDT,a.TYPE,a.VINVOICE,a.ATTACH,a.SHIPCODE,a.AGENT,a.BASEAMOUNTT,a.DELIVCHRGT,a.MISCCHRGT,a.TAX1AMTT,a.TAX2AMTT,a.TAX3AMTT,a.STARTDATET,a.NOTES,a.OWNER,a.OWNER2,a.DOCMNT)FROM "+schemaName+".VENDORDERS a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2);UPDATE "+schemaName+".VSHIPMEN_b b SET(SID,SHIPCODE,MATCODE,SHIPPER,PONO,CPONO,INVOICE,AMOUNTTOTAL,AMOUNTOSTNDT,QTYTOTAL,QTYOSTNDT,CARRIER,TYPE,SHIPDATET,SHIPDATETA,TARENO,PACKNO,VENDOR,CUSTOMER,BILLTOCODE,BILLTOSAMEASSHIPTO,SHIPTOCODE,NOTES,STATUSFL,STATUSFLDT,SERIALNO,PRINTMSTAT,PRINMTFLDT,OWNER,OWNER2)=(a.SID,a.SHIPCODE,a.MATCODE,a.SHIPPER,a.PONO,a.CPONO,a.INVOICE,a.AMOUNTTOTAL,a.AMOUNTOSTNDT,a.QTYTOTAL,a.QTYOSTNDT,a.CARRIER,a.TYPE,a.SHIPDATET,a.SHIPDATETA,a.TARENO,a.PACKNO,a.VENDOR,a.CUSTOMER,a.BILLTOCODE,a.BILLTOSAMEASSHIPTO,a.SHIPTOCODE,a.NOTES,a.STATUSFL,a.STATUSFLDT,a.SERIALNO,a.PRINTMSTAT,a.PRINMTFLDT,a.OWNER,a.OWNER2)FROM "+schemaName+".VSHIPMEN a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE "+schemaName+".CUQUOTE_b b SET(SID,PURCHSNO,DELVDATET,VENDOR,AMOUNTTOTAL,AMOUNTOSTNDT,QTYTOTAL,QTYOSTNDT,STATUSFL,CUSTOMER,MATCODE,REPLICATE,CINVOICE,ORDPRICE,JOBNO,VPONO,QUOORDT,STATUSFLDT,PRINTMSTAT,PRINMTFLDT,TYPE,TERMS,PRIORITY,ODATET,SHIPCODE,ACTIVITYCODE,AGENT,BASEAMOUNTT,DELIVCHRGT,MISCCHRGT,TAX1AMTT,TAX2AMTT,TAX3AMTT,ATTACH,NOTES,OWNER,OWNER2,DOCMNT)=(a.SID,a.PURCHSNO,a.DELVDATET,a.VENDOR,a.AMOUNTTOTAL,a.AMOUNTOSTNDT,a.QTYTOTAL,a.QTYOSTNDT,a.STATUSFL,a.CUSTOMER,a.MATCODE,a.REPLICATE,a.CINVOICE,a.ORDPRICE,a.JOBNO,a.VPONO,a.QUOORDT,a.STATUSFLDT,a.PRINTMSTAT,a.PRINMTFLDT,a.TYPE,a.TERMS,a.PRIORITY,a.ODATET,a.SHIPCODE,a.ACTIVITYCODE,a.AGENT,a.BASEAMOUNTT,a.DELIVCHRGT,a.MISCCHRGT,a.TAX1AMTT,a.TAX2AMTT,a.TAX3AMTT,a.ATTACH,a.NOTES,a.OWNER,a.OWNER2,a.DOCMNT)FROM "+schemaName+".CUQUOTE a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2);UPDATE "+schemaName+".CUORDERS_b b SET(SID,PURCHSNO,DELVDATET,CUSTOMER,MATCODE,CUQUOTE,CINVOICE,JOBNO,AMOUNTTOTAL,AMOUNTOSTNDT,QTYTOTAL,QTYOSTNDT,VPONO,RFPORD,RCPONO,ODATET,TERMS,PRIORITY,PRINTMSTAT,PRINMTFLDT,TYPE,VINVOICE,ATTACH,AGENT,BASEAMOUNTT,DELIVCHRGT,MISCCHRGT,TAX1AMTT,TAX2AMTT,TAX3AMTT,STARTDATET,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2,DOCMNT,SHIPCODEFROMPAY,SHIPCODE,BARPO)=(a.SID,a.PURCHSNO,a.DELVDATET,a.CUSTOMER,a.MATCODE,a.CUQUOTE,a.CINVOICE,a.JOBNO,a.AMOUNTTOTAL,a.AMOUNTOSTNDT,a.QTYTOTAL,a.QTYOSTNDT,a.VPONO,a.RFPORD,a.RCPONO,a.ODATET,a.TERMS,a.PRIORITY,a.PRINTMSTAT,a.PRINMTFLDT,a.TYPE,a.VINVOICE,a.ATTACH,a.AGENT,a.BASEAMOUNTT,a.DELIVCHRGT,a.MISCCHRGT,a.TAX1AMTT,a.TAX2AMTT,a.TAX3AMTT,a.STARTDATET,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2,a.DOCMNT,a.SHIPCODEFROMPAY,a.SHIPCODE,a.BARPO)FROM "+schemaName+".CUORDERS a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE "+schemaName+".CUINVOICE_b b SET(SID,INVOICE,CUSTOMER,MATCODE,INVODATE,AMOUNTTOTAL,AMOUNTOSTNDT,QTYTOTAL,QTYOSTNDT,PONO,REF1TYP,REF1CODE,SHIPDATET,SHIPTYPE,SHIPCODE,TERMS,STATUSFL,STATUSFLDT,TERMSDAT,DISCOUNP,DISCOUDT,DISCOUDS,NETDDAT,NETDDYS,FOB,TYPE,INTEGRSET,ATTACH,BASEAMOUNTT,DELIVCHRGT,MISCCHRGT,TAX1AMTT,TAX2AMTT,TAX3AMTT,AGENT,NOTES,PRINTMSTAT,PRINMTFLDT,OWNER,OWNER2,DOCMNT,BARINVOICE)=(a.SID,a.INVOICE,a.CUSTOMER,a.MATCODE,a.INVODATE,a.AMOUNTTOTAL,a.AMOUNTOSTNDT,a.QTYTOTAL,a.QTYOSTNDT,a.PONO,a.REF1TYP,a.REF1CODE,a.SHIPDATET,a.SHIPTYPE,a.SHIPCODE,a.TERMS,a.STATUSFL,a.STATUSFLDT,a.TERMSDAT,a.DISCOUNP,a.DISCOUDT,a.DISCOUDS,a.NETDDAT,a.NETDDYS,a.FOB,a.TYPE,a.INTEGRSET,a.ATTACH,a.BASEAMOUNTT,a.DELIVCHRGT,a.MISCCHRGT,a.TAX1AMTT,a.TAX2AMTT,a.TAX3AMTT,a.AGENT,a.NOTES,a.PRINTMSTAT,a.PRINMTFLDT,a.OWNER,a.OWNER2,a.DOCMNT,a.BARINVOICE)FROM "+schemaName+".CUINVOICE a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2);UPDATE "+schemaName+".SHIPMENT_b b SET(SID,SHIPCODE,MATCODE,SHIPPER,PONO,CPONO,INVOICE,AMOUNTTOTAL,AMOUNTOSTNDT,QTYTOTAL,QTYOSTNDT,CARRIER,TYPE,SHIPDATET,SHIPDATETA,TARENO,PACKNO,CUSTOMER,BILLTOCODE,BILLTOSAMEASSHIPTO,SHIPTOCODE,NOTES,STATUSFL,STATUSFLDT,SERIALNO,PRINTMSTAT,PRINMTFLDT,OWNER,OWNER2,BARSHIPCOD)=(a.SID,a.SHIPCODE,a.MATCODE,a.SHIPPER,a.PONO,a.CPONO,a.INVOICE,a.AMOUNTTOTAL,a.AMOUNTOSTNDT,a.QTYTOTAL,a.QTYOSTNDT,a.CARRIER,a.TYPE,a.SHIPDATET,a.SHIPDATETA,a.TARENO,a.PACKNO,a.CUSTOMER,a.BILLTOCODE,a.BILLTOSAMEASSHIPTO,a.SHIPTOCODE,a.NOTES,a.STATUSFL,a.STATUSFLDT,a.SERIALNO,a.PRINTMSTAT,a.PRINMTFLDT,a.OWNER,a.OWNER2,a.BARSHIPCOD)FROM "+schemaName+".SHIPMENT a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE "+schemaName+".EMPLORDERS_b b SET(SID,PURCHSNO,DELVDATET,EMPLOYEE,MATCODE,AMOUNTTOTAL,AMOUNTOSTNDT,QTYTOTAL,QTYOSTNDT,STATUSFL,JOBNO,VPONO,RFPORD,STATUSFLDT,RCPONO,ODATET,TERMS,PRIORITY,PRINTMSTAT,PRINMTFLDT,TYPE,VINVOICE,ATTACH,SHIPCODE,AGENT,BASEAMOUNTT,DELIVCHRGT,MISCCHRGT,TAX1AMTT,TAX2AMTT,TAX3AMTT,STARTDATET,NOTES,OWNER,OWNER2,DOCMNT)=(a.SID,a.PURCHSNO,a.DELVDATET,a.EMPLOYEE,a.MATCODE,a.AMOUNTTOTAL,a.AMOUNTOSTNDT,a.QTYTOTAL,a.QTYOSTNDT,a.STATUSFL,a.JOBNO,a.VPONO,a.RFPORD,a.STATUSFLDT,a.RCPONO,a.ODATET,a.TERMS,a.PRIORITY,a.PRINTMSTAT,a.PRINMTFLDT,a.TYPE,a.VINVOICE,a.ATTACH,a.SHIPCODE,a.AGENT,a.BASEAMOUNTT,a.DELIVCHRGT,a.MISCCHRGT,a.TAX1AMTT,a.TAX2AMTT,a.TAX3AMTT,a.STARTDATET,a.NOTES,a.OWNER,a.OWNER2,a.DOCMNT)FROM "+schemaName+".EMPLORDERS a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2);UPDATE "+schemaName+".HLOGFILE_b b SET(SID,SERIALNO,MATCODE,QUANRECD,VENDOR,LOCATION,RECVRPT,INFLG,PHY,DATETIN,DATETOUT,JOBNO,PRINTMSTAT,PRINMTFLDT,PONO,SCANDATET,QUANISSD,BUTT,STATUSFL,QUANREJD,CUSTOMER,CPONO,CUSTOMEJ,ORGCOST,ORGPONO,ORGJOBNO,ALTSERNO,SELPRICE,PHYSQTY,SPERSON,CARTONID,CARTONPR,PACKCODE,TARECODE,SHIPCODE,TYPE,STATUSFLDT,OWNER,OWNER2)=(a.SID,a.SERIALNO,a.MATCODE,a.QUANRECD,a.VENDOR,a.LOCATION,a.RECVRPT,a.INFLG,a.PHY,a.DATETIN,a.DATETOUT,a.JOBNO,a.PRINTMSTAT,a.PRINMTFLDT,a.PONO,a.SCANDATET,a.QUANISSD,a.BUTT,a.STATUSFL,a.QUANREJD,a.CUSTOMER,a.CPONO,a.CUSTOMEJ,a.ORGCOST,a.ORGPONO,a.ORGJOBNO,a.ALTSERNO,a.SELPRICE,a.PHYSQTY,a.SPERSON,a.CARTONID,a.CARTONPR,a.PACKCODE,a.TARECODE,a.SHIPCODE,a.TYPE,a.STATUSFLDT,a.OWNER,a.OWNER2)FROM "+schemaName+".HLOGFILE a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE "+schemaName+".CPAYMENT_b b SET(SID,PAYMENT,CUSTOMER,CINVOICE,CHEQDATE,PAYMENTDUEDATE,POSTINGPERIOD,MATCODE,INTEGRSET,ACCOUNT,AMOUNTTOTAL,AMOUNTOSTNDT,AMOUNTIN,QTYTOTAL,QTYOSTNDT,DISCOUNT,BASEAMOUNTT,DELIVCHRGT,MISCCHRGT,TAX1AMTT,TAX2AMTT,TAX3AMTT,PAYTYPE,PAYBYID,PAYBYDATE,CURRENCY,CONVRATE,LOCAMOUNTT,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(a.SID,a.PAYMENT,a.CUSTOMER,a.CINVOICE,a.CHEQDATE,a.PAYMENTDUEDATE,a.POSTINGPERIOD,a.MATCODE,a.INTEGRSET,a.ACCOUNT,a.AMOUNTTOTAL,a.AMOUNTOSTNDT,a.AMOUNTIN,a.QTYTOTAL,a.QTYOSTNDT,a.DISCOUNT,a.BASEAMOUNTT,a.DELIVCHRGT,a.MISCCHRGT,a.TAX1AMTT,a.TAX2AMTT,a.TAX3AMTT,a.PAYTYPE,a.PAYBYID,a.PAYBYDATE,a.CURRENCY,a.CONVRATE,a.LOCAMOUNTT,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2)FROM "+schemaName+".CPAYMENT a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2);UPDATE "+schemaName+".MACHINE_b b SET(SID,MACHINECODE,QUANTITY,DESCRIPT,DATEADDED,SOURCE1,SOURCE2,UPCCODE,COST,REPLCOST,SELPRICE,SPRICOLD,SPRICNEW,SPRICEFFDT,SHIPCODE,PRINTMSTAT,PRINMTFLDT,MISCCODE1,MISCCODE2,QTYLEVEL1,UNIT,CASEQTY,TYPE,TAX1,TAX2,TAX3,ALIASCODE,PARENTCODE,AVGPRICE,AVGCOST,STATUSFL,STATUSFLDT,SUBCODESN,SUBCODESN2,SUBCODESN3,CUORDQTY,VENORQTY,CUPICQTY,VENPIQTY,CUINVQTY,CUSHIQTY,VENSHQTY,EFFDATE,INTEGRSET,NOTES,DOCMNT,OWNER,OWNER2,BARUPC)=(a.SID,a.MACHINECODE,a.QUANTITY,a.DESCRIPT,a.DATEADDED,a.SOURCE1,a.SOURCE2,a.UPCCODE,a.COST,a.REPLCOST,a.SELPRICE,a.SPRICOLD,a.SPRICNEW,a.SPRICEFFDT,a.SHIPCODE,a.PRINTMSTAT,a.PRINMTFLDT,a.MISCCODE1,a.MISCCODE2,a.QTYLEVEL1,a.UNIT,a.CASEQTY,a.TYPE,a.TAX1,a.TAX2,a.TAX3,a.ALIASCODE,a.PARENTCODE,a.AVGPRICE,a.AVGCOST,a.STATUSFL,a.STATUSFLDT,a.SUBCODESN,a.SUBCODESN2,a.SUBCODESN3,a.CUORDQTY,a.VENORQTY,a.CUPICQTY,a.VENPIQTY,a.CUINVQTY,a.CUSHIQTY,a.VENSHQTY,a.EFFDATE,a.INTEGRSET,a.NOTES,a.DOCMNT,a.OWNER,a.OWNER2,a.BARUPC)FROM "+schemaName+".MACHINE a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2);UPDATE "+schemaName+".GROUPMEMBERS_b b SET(SID,GROUPID,MEMBERID,DESCRIPT,SOURCETYPE,MEMBEREM,MEMBERCU,MEMBERVE,MEMBERIT,MEMBERAC,MEMBERMA,TYPE,CURRPW,EXPIRY,STATUSFL,STATUSFLDT,OWNER,OWNER2)=(a.SID,a.GROUPID,a.MEMBERID,a.DESCRIPT,a.SOURCETYPE,a.MEMBEREM,a.MEMBERCU,a.MEMBERVE,a.MEMBERIT,a.MEMBERAC,a.MEMBERMA,a.TYPE,a.CURRPW,a.EXPIRY,a.STATUSFL,a.STATUSFLDT,a.OWNER,a.OWNER2)FROM "+schemaName+".GROUPMEMBERS a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE "+schemaName+".ITEMBOM_b b SET(SID,BOMCODE,DESCRIPT,QUANTITY,MODE,STATUSFL,STATUSFLDT,OWNER,OWNER2)=(a.SID,a.BOMCODE,a.DESCRIPT,a.QUANTITY,a.MODE,a.STATUSFL,a.STATUSFLDT,a.OWNER,a.OWNER2)FROM "+schemaName+".ITEMBOM a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2);UPDATE "+schemaName+".ITEMBOMDETAILS_b b SET(SID,BOMCODE,MATCODE,MODE,SUBQTY,STATUSFL,STATUSFLDT,OWNER,OWNER2)=(a.SID,a.BOMCODE,a.MATCODE,a.MODE,a.SUBQTY,a.STATUSFL,a.STATUSFLDT,a.OWNER,a.OWNER2)FROM "+schemaName+".ITEMBOMDETAILS a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2);UPDATE "+schemaName+".TASK_b b SET(SID,TASKID,DESCRIPT,ACTIVITYCODE,PROJECTTEAM,RESOURCE,MODE,ESTSTART,CALCSTART,ACTLSTART,ESTEND,CALCEND,ACTLEND,SUBQTY,BOMCODE,LOCATION,STATUSFL,STATUSFLDT,OWNER,OWNER2)=(a.SID,a.TASKID,a.DESCRIPT,a.ACTIVITYCODE,a.PROJECTTEAM,a.RESOURCE,a.MODE,a.ESTSTART,a.CALCSTART,a.ACTLSTART,a.ESTEND,a.CALCEND,a.ACTLEND,a.SUBQTY,a.BOMCODE,a.LOCATION,a.STATUSFL,a.STATUSFLDT,a.OWNER,a.OWNER2)FROM "+schemaName+".TASK a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE "+schemaName+".VINVOICE_b b SET(SID,INVOICE,VENDOR,MATCODE,INTEGRSET,INVODATE,AMOUNTTOTAL,AMOUNTOSTNDT,QTYTOTAL,QTYOSTNDT,PONO,REF1TYP,REF1CODE,SHIPDATET,SHIPTYPE,SHIPCODE,TERMS,STATUSFL,STATUSFLDT,TERMSDAT,DISCOUNP,DISCOUDT,DISCOUDS,NETDDAT,NETDDYS,FOB,TYPE,ATTACH,BASEAMOUNTT,DELIVCHRGT,MISCCHRGT,TAX1AMTT,TAX2AMTT,TAX3AMTT,AGENT,NOTES,PRINTMSTAT,PRINMTFLDT,OWNER,OWNER2,DOCMNT)=(a.SID,a.INVOICE,a.VENDOR,a.MATCODE,a.INTEGRSET,a.INVODATE,a.AMOUNTTOTAL,a.AMOUNTOSTNDT,a.QTYTOTAL,a.QTYOSTNDT,a.PONO,a.REF1TYP,a.REF1CODE,a.SHIPDATET,a.SHIPTYPE,a.SHIPCODE,a.TERMS,a.STATUSFL,a.STATUSFLDT,a.TERMSDAT,a.DISCOUNP,a.DISCOUDT,a.DISCOUDS,a.NETDDAT,a.NETDDYS,a.FOB,a.TYPE,a.ATTACH,a.BASEAMOUNTT,a.DELIVCHRGT,a.MISCCHRGT,a.TAX1AMTT,a.TAX2AMTT,a.TAX3AMTT,a.AGENT,a.NOTES,a.PRINTMSTAT,a.PRINMTFLDT,a.OWNER,a.OWNER2,a.DOCMNT)FROM "+schemaName+".VINVOICE a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2);UPDATE "+schemaName+".VPAYMENT_b b SET(SID,PAYMENT,VENDOR,VINVOICE,CHEQDATE,PAYMENTDUEDATE,POSTINGPERIOD,MATCODE,INTEGRSET,ACCOUNT,AMOUNTTOTAL,AMOUNTOSTNDT,AMOUNTIN,QTYTOTAL,QTYOSTNDT,BASEAMOUNTT,DELIVCHRGT,MISCCHRGT,TAX1AMTT,TAX2AMTT,TAX3AMTT,DISCOUNT,PAYTYPE,PAYBYID,PAYBYDATE,CURRENCY,CONVRATE,LOCAMOUNT,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(a.SID,a.PAYMENT,a.VENDOR,a.VINVOICE,a.CHEQDATE,a.PAYMENTDUEDATE,a.POSTINGPERIOD,a.MATCODE,a.INTEGRSET,a.ACCOUNT,a.AMOUNTTOTAL,a.AMOUNTOSTNDT,a.AMOUNTIN,a.QTYTOTAL,a.QTYOSTNDT,a.BASEAMOUNTT,a.DELIVCHRGT,a.MISCCHRGT,a.TAX1AMTT,a.TAX2AMTT,a.TAX3AMTT,a.DISCOUNT,a.PAYTYPE,a.PAYBYID,a.PAYBYDATE,a.CURRENCY,a.CONVRATE,a.LOCAMOUNT,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2)FROM "+schemaName+".VPAYMENT a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE "+schemaName+".WAGEEARNERAUX_b b SET(SID,WAGEEARNERID,LINE,SIN,WCBYTDL,WCBYTDN,INSYTDL,INSYTDN,VACATONYL,VACATONYN,PAYYTDL,FPENSIYTL,PPENSIYTL,ITAXYTDL,PTAXYTDL,PAYYTDN,FPENSIYTN,PPENSIYTN,ITAXYTDN,PATXYTDN,GPAYYTDL,GPAYYTDN,STATUSFL,STATUSFLDT,OWNER,OWNER2)=(a.SID,a.WAGEEARNERID,a.LINE,a.SIN,a.WCBYTDL,a.WCBYTDN,a.INSYTDL,a.INSYTDN,a.VACATONYL,a.VACATONYN,a.PAYYTDL,a.FPENSIYTL,a.PPENSIYTL,a.ITAXYTDL,a.PTAXYTDL,a.PAYYTDN,a.FPENSIYTN,a.PPENSIYTN,a.ITAXYTDN,a.PATXYTDN,a.GPAYYTDL,a.GPAYYTDN,a.STATUSFL,a.STATUSFLDT,a.OWNER,a.OWNER2)FROM "+schemaName+".WAGEEARNERAUX a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2);UPDATE "+schemaName+".Rgenapp_b b SET(SID,APPNAME,DESCRIPT,APPTYPE,APPWACCOUNTING,APPWEMAIL,APPWJMSMQ,APPVENDOR,APPVERSION,APPPLATFORM,APPMODELPKG,APPACTIONPKG,APPSKIN,APPDEPLOYTYPE,CREATEFIDATA,REVENGDATA,INITIALIZEFIDATA,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(a.SID,a.APPNAME,a.DESCRIPT,a.APPTYPE,a.APPWACCOUNTING,a.APPWEMAIL,a.APPWJMSMQ,a.APPVENDOR,a.APPVERSION,a.APPPLATFORM,a.APPMODELPKG,a.APPACTIONPKG,a.APPSKIN,a.APPDEPLOYTYPE,a.CREATEFIDATA,a.REVENGDATA,a.INITIALIZEFIDATA,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2)FROM "+schemaName+".Rgenapp a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE "+schemaName+".RGENDB_b b SET(SID,DBNAME,DESCRIPT,DBTYPE,DBVENDOR,DBVERSION,DBPLATFORM,APPCODE,SQLDRIVER,SQLURL,SQLUSER,SQLPASSWORD,SQLCLASSPATH,SQLCREATEDBSCRIPT,SQLDROPDBSCRIPT,SQLCREATETBLSSCRIPT,SQLLOADTBLSSCRIPT,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(a.SID,a.DBNAME,a.DESCRIPT,a.DBTYPE,a.DBVENDOR,a.DBVERSION,a.DBPLATFORM,a.APPCODE,a.SQLDRIVER,a.SQLURL,a.SQLUSER,a.SQLPASSWORD,a.SQLCLASSPATH,a.SQLCREATEDBSCRIPT,a.SQLDROPDBSCRIPT,a.SQLCREATETBLSSCRIPT,a.SQLLOADTBLSSCRIPT,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2)FROM "+schemaName+".RGENDB a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE "+schemaName+".RGENTABLE_b b SET(SID,TABLENAME,DBCODE,INADDMENU,INLISTMENU,INTRANSACTIONMENU,INREPORTMENU,INGRAPHSMENU,INMAILINGMENU,INGENERATEMENU,INADMINMENU,INMAINTENANCEMENU,INLABELSMENU,INSKIPMENU,INCUSTOM1MENU,MENULEVEL,MENUROLE,MENULABELGROUP,SUBMENUSEQUENCE,USAGESCOPE,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(a.SID,a.TABLENAME,a.DBCODE,a.INADDMENU,a.INLISTMENU,a.INTRANSACTIONMENU,a.INREPORTMENU,a.INGRAPHSMENU,a.INMAILINGMENU,a.INGENERATEMENU,a.INADMINMENU,a.INMAINTENANCEMENU,a.INLABELSMENU,a.INSKIPMENU,a.INCUSTOM1MENU,a.MENULEVEL,a.MENUROLE,a.MENULABELGROUP,a.SUBMENUSEQUENCE,a.USAGESCOPE,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2)FROM "+schemaName+".RGENTABLE a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2);UPDATE "+schemaName+".RGENFIELDS_b b SET(SID,DBCODE,TABLENAME,FIELDNAME,FIELDTYPE,FIELDLENGTH,INGROUP,SEQWITHINGROUP,FOCUSSEQ,FUTURE1,INITIALVALUE,KEYORADDITIONAL,KEYORADDITIONAL2,KEYORADDITIONAL3,SHOWINMENU,SHOWINREPORT,PROCESSOPTION1,PROCESSOPTION2,FDBCODE,FTABLENAME,FFIELDKEYNAME1,FFIELDKEYNAME2,FFIELDKEYNAME3,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(a.SID,a.DBCODE,a.TABLENAME,a.FIELDNAME,a.FIELDTYPE,a.FIELDLENGTH,a.INGROUP,a.SEQWITHINGROUP,a.FOCUSSEQ,a.FUTURE1,a.INITIALVALUE,a.KEYORADDITIONAL,a.KEYORADDITIONAL2,a.KEYORADDITIONAL3,a.SHOWINMENU,a.SHOWINREPORT,a.PROCESSOPTION1,a.PROCESSOPTION2,a.FDBCODE,a.FTABLENAME,a.FFIELDKEYNAME1,a.FFIELDKEYNAME2,a.FFIELDKEYNAME3,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2)FROM "+schemaName+".RGENFIELDS a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE "+schemaName+".GENOPTIONS_b b SET(SID,ROW,GENOPTIONS01,GENPURPOSE01,GENVALUE01,GENOPTIONS02,GENPURPOSE02,GENVALUE02,GENOPTIONS03,GENPURPOSE03,GENVALUE03,GENOPTIONS04,GENPURPOSE04,GENVALUE04,GENOPTIONS05,GENPURPOSE05,GENVALUE05,GENOPTIONS06,GENPURPOSE06,GENVALUE06,GENOPTIONS07,GENPURPOSE07,GENVALUE07,GENOPTIONS08,GENPURPOSE08,GENVALUE08,GENOPTIONS09,GENPURPOSE09,GENVALUE09,GENOPTIONS10,GENPURPOSE10,GENVALUE10,GENOPTIONS11,GENPURPOSE11,GENVALUE11,GENOPTIONS12,GENPURPOSE12,GENVALUE12,GENOPTIONS13,GENPURPOSE13,GENVALUE13,GENOPTIONS14,GENPURPOSE14,GENVALUE14,GENOPTIONS15,GENPURPOSE15,GENVALUE15,GENOPTIONS16,GENPURPOSE16,GENVALUE16,GENOPTIONS17,GENPURPOSE17,GENVALUE17,GENOPTIONS18,GENPURPOSE18,GENVALUE18,GENOPTIONS19,GENPURPOSE19,GENVALUE19,GENOPTIONS20,GENPURPOSE20,GENVALUE20,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(a.SID,a.ROW,a.GENOPTIONS01,a.GENPURPOSE01,a.GENVALUE01,a.GENOPTIONS02,a.GENPURPOSE02,a.GENVALUE02,a.GENOPTIONS03,a.GENPURPOSE03,a.GENVALUE03,a.GENOPTIONS04,a.GENPURPOSE04,a.GENVALUE04,a.GENOPTIONS05,a.GENPURPOSE05,a.GENVALUE05,a.GENOPTIONS06,a.GENPURPOSE06,a.GENVALUE06,a.GENOPTIONS07,a.GENPURPOSE07,a.GENVALUE07,a.GENOPTIONS08,a.GENPURPOSE08,a.GENVALUE08,a.GENOPTIONS09,a.GENPURPOSE09,a.GENVALUE09,a.GENOPTIONS10,a.GENPURPOSE10,a.GENVALUE10,a.GENOPTIONS11,a.GENPURPOSE11,a.GENVALUE11,a.GENOPTIONS12,a.GENPURPOSE12,a.GENVALUE12,a.GENOPTIONS13,a.GENPURPOSE13,a.GENVALUE13,a.GENOPTIONS14,a.GENPURPOSE14,a.GENVALUE14,a.GENOPTIONS15,a.GENPURPOSE15,a.GENVALUE15,a.GENOPTIONS16,a.GENPURPOSE16,a.GENVALUE16,a.GENOPTIONS17,a.GENPURPOSE17,a.GENVALUE17,a.GENOPTIONS18,a.GENPURPOSE18,a.GENVALUE18,a.GENOPTIONS19,a.GENPURPOSE19,a.GENVALUE19,a.GENOPTIONS20,a.GENPURPOSE20,a.GENVALUE20,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2)FROM "+schemaName+".GENOPTIONS a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE "+schemaName+".BLOBDATA_b b SET(SID,FROMTABLE,FROMKEY,QUALIFIER,SEQUENCE,TYPE,DATA,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(a.SID,a.FROMTABLE,a.FROMKEY,a.QUALIFIER,a.SEQUENCE,a.TYPE,a.DATA,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2)FROM "+schemaName+".BLOBDATA a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE "+schemaName+".CLOBDATA_b b SET(SID,FROMTABLE,FROMKEY,QUALIFIER,SEQUENCE,TYPE,DATA,STATUSFL,STATUSFLDT,NOTES,OWNER,OWNER2)=(a.SID,a.FROMTABLE,a.FROMKEY,a.QUALIFIER,a.SEQUENCE,a.TYPE,a.DATA,a.STATUSFL,a.STATUSFLDT,a.NOTES,a.OWNER,a.OWNER2)FROM "+schemaName+".CLOBDATA a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE "+schemaName+".CONTROLUSAGEBYPERIODS_b b SET(SID,CTLUSAGETRACKERID,DESCRIPT,CONTROLCODE,CURRENCY,PERIOD0LABEL,PERIOD0B,PERIOD0,PERIODTOTALSLABEL,PERIODTOTALSB,PERIODTOTALS,PERIOD1LABEL,PERIOD1BUDGET,PERIOD1ACTUAL,PERIOD2LABEL,PERIOD2B,PERIOD2,PERIOD3LABEL,PERIOD3B,PERIOD3,PERIOD4LABEL,PERIOD4B,PERIOD4,PERIOD5LABEL,PERIOD5B,PERIOD5,PERIOD6LABEL,PERIOD6B,PERIOD6,PERIOD7LABEL,PERIOD7B,PERIOD7,PERIOD8LABEL,PERIOD8B,PERIOD8,PERIOD9LABEL,PERIOD9B,PERIOD9,PERIOD10LABEL,PERIOD10B,PERIOD10,PERIOD11LABEL,PERIOD11B,PERIOD11,PERIOD12LABEL,PERIOD12B,PERIOD12,PERIODNLABEL,PERIODNB,PERIODN,NOTES,STATUSFL,STATUSFLDT,OWNER,OWNER2)=(a.SID,a.CTLUSAGETRACKERID,a.DESCRIPT,a.CONTROLCODE,a.CURRENCY,a.PERIOD0LABEL,a.PERIOD0B,a.PERIOD0,a.PERIODTOTALSLABEL,a.PERIODTOTALSB,a.PERIODTOTALS,a.PERIOD1LABEL,a.PERIOD1BUDGET,a.PERIOD1ACTUAL,a.PERIOD2LABEL,a.PERIOD2B,a.PERIOD2,a.PERIOD3LABEL,a.PERIOD3B,a.PERIOD3,a.PERIOD4LABEL,a.PERIOD4B,a.PERIOD4,a.PERIOD5LABEL,a.PERIOD5B,a.PERIOD5,a.PERIOD6LABEL,a.PERIOD6B,a.PERIOD6,a.PERIOD7LABEL,a.PERIOD7B,a.PERIOD7,a.PERIOD8LABEL,a.PERIOD8B,a.PERIOD8,a.PERIOD9LABEL,a.PERIOD9B,a.PERIOD9,a.PERIOD10LABEL,a.PERIOD10B,a.PERIOD10,a.PERIOD11LABEL,a.PERIOD11B,a.PERIOD11,a.PERIOD12LABEL,a.PERIOD12B,a.PERIOD12,a.PERIODNLABEL,a.PERIODNB,a.PERIODN,a.NOTES,a.STATUSFL,a.STATUSFLDT,a.OWNER,a.OWNER2)FROM "+schemaName+".CONTROLUSAGEBYPERIODS a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();
sqlScript="UPDATE "+schemaName+".RESOURCE_BUNDLE_b b SET(SID,NAME,LANGUAGE,COUNTRY,VARIANT,STATUSFL,STATUSFLDT,OWNER,OWNER2)=(a.SID,a.NAME,a.LANGUAGE,a.COUNTRY,a.VARIANT,a.STATUSFL,a.STATUSFLDT,a.OWNER,a.OWNER2)FROM "+schemaName+".RESOURCE_BUNDLE a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE "+schemaName+".RESOURCE_b b SET(SID,_KEY,_VALUE,RESOURCEBUNDLE,STATUSFL,STATUSFLDT,OWNER,OWNER2)=(a.SID,a._KEY,a._VALUE,a.RESOURCEBUNDLE,a.STATUSFL,a.STATUSFLDT,a.OWNER,a.OWNER2)FROM "+schemaName+".RESOURCE a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE "+schemaName+".TRUEFALSE_b b SET(SID,TABLENAME,QUALIFIER,SHOW001,SHOW002,SHOW003,SHOW004,SHOW005,SHOW006,SHOW007,SHOW008,SHOW009,SHOW010,SHOW011,SHOW012,SHOW013,SHOW014,SHOW015,SHOW016,SHOW017,SHOW018,SHOW019,SHOW020,SHOW021,SHOW022,SHOW023,SHOW024,SHOW025,SHOW026,SHOW027,SHOW028,SHOW029,SHOW030,SHOW031,SHOW032,SHOW033,SHOW034,SHOW035,SHOW036,SHOW037,SHOW038,SHOW039,SHOW040,SHOW041,SHOW042,SHOW043,SHOW044,SHOW045,SHOW046,SHOW047,SHOW048,SHOW049,SHOW050,SHOW051,SHOW052,SHOW053,SHOW054,SHOW055,SHOW056,SHOW057,SHOW058,SHOW059,SHOW060,SHOW061,SHOW062,SHOW063,SHOW064,SHOW065,SHOW066,SHOW067,SHOW068,SHOW069,SHOW070,SHOW071,SHOW072,SHOW073,SHOW074,SHOW075,SHOW076,SHOW077,SHOW078,SHOW079,SHOW080,SHOW081,SHOW082,SHOW083,SHOW084,SHOW085,SHOW086,SHOW087,SHOW088,SHOW089,SHOW090,SHOW091,SHOW092,SHOW093,SHOW094,SHOW095,SHOW096,SHOW097,SHOW098,SHOW099,SHOW100,SHOW101,SHOW102,SHOW103,SHOW104,SHOW105,SHOW106,SHOW107,SHOW108,SHOW109,SHOW110,SHOW111,SHOW112,SHOW113,SHOW114,SHOW115,SHOW116,SHOW117,SHOW118,SHOW119,SHOW120,SHOW121,SHOW122,SHOW123,SHOW124,SHOW125,SHOW126,SHOW127,SHOW128,SHOW129,SHOW130,SHOW131,SHOW132,SHOW133,SHOW134,SHOW135,SHOW136,SHOW137,SHOW138,STATUSFL,STATUSFLDT,OWNER,OWNER2)=(a.SID,a.TABLENAME,a.QUALIFIER,a.SHOW001,a.SHOW002,a.SHOW003,a.SHOW004,a.SHOW005,a.SHOW006,a.SHOW007,a.SHOW008,a.SHOW009,a.SHOW010,a.SHOW011,a.SHOW012,a.SHOW013,a.SHOW014,a.SHOW015,a.SHOW016,a.SHOW017,a.SHOW018,a.SHOW019,a.SHOW020,a.SHOW021,a.SHOW022,a.SHOW023,a.SHOW024,a.SHOW025,a.SHOW026,a.SHOW027,a.SHOW028,a.SHOW029,a.SHOW030,a.SHOW031,a.SHOW032,a.SHOW033,a.SHOW034,a.SHOW035,a.SHOW036,a.SHOW037,a.SHOW038,a.SHOW039,a.SHOW040,a.SHOW041,a.SHOW042,a.SHOW043,a.SHOW044,a.SHOW045,a.SHOW046,a.SHOW047,a.SHOW048,a.SHOW049,a.SHOW050,a.SHOW051,a.SHOW052,a.SHOW053,a.SHOW054,a.SHOW055,a.SHOW056,a.SHOW057,a.SHOW058,a.SHOW059,a.SHOW060,a.SHOW061,a.SHOW062,a.SHOW063,a.SHOW064,a.SHOW065,a.SHOW066,a.SHOW067,a.SHOW068,a.SHOW069,a.SHOW070,a.SHOW071,a.SHOW072,a.SHOW073,a.SHOW074,a.SHOW075,a.SHOW076,a.SHOW077,a.SHOW078,a.SHOW079,a.SHOW080,a.SHOW081,a.SHOW082,a.SHOW083,a.SHOW084,a.SHOW085,a.SHOW086,a.SHOW087,a.SHOW088,a.SHOW089,a.SHOW090,a.SHOW091,a.SHOW092,a.SHOW093,a.SHOW094,a.SHOW095,a.SHOW096,a.SHOW097,a.SHOW098,a.SHOW099,a.SHOW100,a.SHOW101,a.SHOW102,a.SHOW103,a.SHOW104,a.SHOW105,a.SHOW106,a.SHOW107,a.SHOW108,a.SHOW109,a.SHOW110,a.SHOW111,a.SHOW112,a.SHOW113,a.SHOW114,a.SHOW115,a.SHOW116,a.SHOW117,a.SHOW118,a.SHOW119,a.SHOW120,a.SHOW121,a.SHOW122,a.SHOW123,a.SHOW124,a.SHOW125,a.SHOW126,a.SHOW127,a.SHOW128,a.SHOW129,a.SHOW130,a.SHOW131,a.SHOW132,a.SHOW133,a.SHOW134,a.SHOW135,a.SHOW136,a.SHOW137,a.SHOW138,a.STATUSFL,a.STATUSFLDT,a.OWNER,a.OWNER2)FROM "+schemaName+".TRUEFALSE a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

sqlScript="UPDATE "+schemaName+".RATE1F_b b SET(SID,USERTYPE,PRODTYPE,STEPNAME,STEP,VALUE,EFFDATE,ENDDATE,INCENTIVE,IEFFDATE,IENDDATE,STATUSFL,STATUSFLDT,OWNER,OWNER2)=(a.SID,a.USERTYPE,a.PRODTYPE,a.STEPNAME,a.STEP,a.VALUE,a.EFFDATE,a.ENDDATE,a.INCENTIVE,a.IEFFDATE,a.IENDDATE,a.STATUSFL,a.STATUSFLDT,a.OWNER,a.OWNER2)FROM "+schemaName+".RATE1F a where((a.sid=b.sid) AND (a.STATUSFLDT<>b.STATUSFLDT) and a.owner2=:owner2)";
q=entityManager.createNativeQuery(sqlScript);
q.setParameter("owner2", owner2Code);updatedCount=updatedCount+q.executeUpdate();

      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
       FacesMessage.SEVERITY_INFO,bundle.getString("removed")+": "+deletedCount+" "+ bundle.getString("updated")+": "+updatedCount+" "+bundle.getString("inserted")+": "+insertedCount,""));
*/


// update client record field carcsize to show last backupdate as a varchar
     sqlScript="update "+schemaName+".client set carcsize=:backupdts where owner2=:owner2Code";
      q = entityManager.createNativeQuery(sqlScript);
      q.setParameter("owner2Code", owner2Code).setParameter("backupdts", sdf.format(calendar.getTime()));
      q.executeUpdate();
} catch (Exception e) {
                        int len=sqlScript.length();
                        len=len>120?120:len;
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(
       FacesMessage.SEVERITY_INFO,bundle.getString("error")+" "+bundle.getString("in")+" "+bundle.getString("backup")+" "+sqlScript.substring(0,len) + ", "+e.getMessage(),""));

}



	 return "backUp done";
}

	private Connection getConnection() throws SQLException, NamingException {
		return getDataSource().getConnection();
	}
	private DataSource getDataSource() throws NamingException {
                        String serverName=context.getServerInfo();// check if tomcat or wildfly
                        if(serverName.contains("omcat")){
                         tomeeYN=true;
                        }
		if (ds == null) {
		     Context ctx = new InitialContext();
                     if(tomeeYN){
                      ds = (DataSource) ctx.lookup("java:openejb/Resource/RaaspiSQLDS");
                     }else{
                      ds = (DataSource) ctx.lookup("RaaspiSQLDS");
                     }
		}
		return ds;
	}










}

